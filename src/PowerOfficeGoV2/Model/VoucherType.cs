// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining what kind of voucher the voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Unknown&lt;/i&gt; - Unknown voucher type - Vouchers with a new voucher type not yet implemented in current version of the API will have this value.                 If this value appears, a new version of the API should be available and should be implemented.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingInvoice&lt;/i&gt; - Outgoing invoice sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingCreditNote&lt;/i&gt; - Outgoing credit note sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingBankRemittance&lt;/i&gt; - Incoming bank remittance posting completed payments done by the client through a bank integration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingOcrGiro&lt;/i&gt; - Incoming OCR giro payments to the client paid with CID.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ManualJournal&lt;/i&gt; - Manual journal is a generic voucher type with various accounting entries without any specific kind.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Expense&lt;/i&gt; - Expense are expenses that have been paid by an Employee on behalf of the organization (Norwegian: Utlegg).&lt;/li&gt;&lt;li&gt;&lt;i&gt;CashJournal&lt;/i&gt; - Cash journal contains accounting entries generated from a cash register.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingPayments&lt;/i&gt; - Incoming payments (Still exists due to backwards compability, but is replaced by VoucherType BankJournal).&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPayments&lt;/i&gt; - Outgoing payments(Still exists due to backwards compability, but is replaced by VoucherType BankJournal).&lt;/li&gt;&lt;li&gt;&lt;i&gt;YearEndJournal&lt;/i&gt; - Year end journal containing the various year-end accounting entries. (Norwegian: Årsavslutningsbilag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;BankJournal&lt;/i&gt; - Bank journal containing transactions from the bank.&lt;/li&gt;&lt;li&gt;&lt;i&gt;VatReturns&lt;/i&gt; - VAT returns are vouchers generated when reporting VAT.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PayrollJournal&lt;/i&gt; - Payroll journal are vouchers containing payroll transactions.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPaymentReminder&lt;/i&gt; - Outgoing payment reminder containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingNoticeOfDebtCollection&lt;/i&gt; - Outgoing notice of debt collection containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPaymentDemand&lt;/i&gt; - Outgoing payment demand containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingWarrantOfExecution&lt;/i&gt; - Outgoing warrant of execution containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionVoucher&lt;/i&gt; - Correction voucher generated to correct another wrongly posted voucher.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReversalVoucher&lt;/i&gt; - A voucher to reverse a previously wrongly posted voucher.&lt;/li&gt;&lt;li&gt;&lt;i&gt;DepreciationJournal&lt;/i&gt; - Depreciation journal generated when fixed assets are depreciated.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TravelExpense&lt;/i&gt; - Travel expense voucher to post a travel expense sent from an employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Settlement&lt;/i&gt; - Settlement after delivering various goods to a buyer, especially by agriculture businesses as an alternative to OutgoingInvoice. (Norwegian: Avregning)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NegativeSettlement&lt;/i&gt; - Negative settlement after delivering various goods to a buyer and the seller (this client) that is an reduction in accounts receivable. This can be either due to a correction of a previously delivered settlement, or that the supplier (this client) bought more then the goods delivered from the customer. (Norwegian: Negativ avregning)&lt;/li&gt;&lt;li&gt;&lt;i&gt;SystemGeneratedDocumentationVoucher&lt;/i&gt; - Voucher generated by system to correct for missing vouchers.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining what kind of voucher the voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Unknown&lt;/i&gt; - Unknown voucher type - Vouchers with a new voucher type not yet implemented in current version of the API will have this value.                 If this value appears, a new version of the API should be available and should be implemented.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingInvoice&lt;/i&gt; - Outgoing invoice sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingCreditNote&lt;/i&gt; - Outgoing credit note sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingBankRemittance&lt;/i&gt; - Incoming bank remittance posting completed payments done by the client through a bank integration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingOcrGiro&lt;/i&gt; - Incoming OCR giro payments to the client paid with CID.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ManualJournal&lt;/i&gt; - Manual journal is a generic voucher type with various accounting entries without any specific kind.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Expense&lt;/i&gt; - Expense are expenses that have been paid by an Employee on behalf of the organization (Norwegian: Utlegg).&lt;/li&gt;&lt;li&gt;&lt;i&gt;CashJournal&lt;/i&gt; - Cash journal contains accounting entries generated from a cash register.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingPayments&lt;/i&gt; - Incoming payments (Still exists due to backwards compability, but is replaced by VoucherType BankJournal).&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPayments&lt;/i&gt; - Outgoing payments(Still exists due to backwards compability, but is replaced by VoucherType BankJournal).&lt;/li&gt;&lt;li&gt;&lt;i&gt;YearEndJournal&lt;/i&gt; - Year end journal containing the various year-end accounting entries. (Norwegian: Årsavslutningsbilag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;BankJournal&lt;/i&gt; - Bank journal containing transactions from the bank.&lt;/li&gt;&lt;li&gt;&lt;i&gt;VatReturns&lt;/i&gt; - VAT returns are vouchers generated when reporting VAT.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PayrollJournal&lt;/i&gt; - Payroll journal are vouchers containing payroll transactions.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPaymentReminder&lt;/i&gt; - Outgoing payment reminder containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingNoticeOfDebtCollection&lt;/i&gt; - Outgoing notice of debt collection containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingPaymentDemand&lt;/i&gt; - Outgoing payment demand containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingWarrantOfExecution&lt;/i&gt; - Outgoing warrant of execution containing fees and interest due to late payment of an outgoing invoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionVoucher&lt;/i&gt; - Correction voucher generated to correct another wrongly posted voucher.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReversalVoucher&lt;/i&gt; - A voucher to reverse a previously wrongly posted voucher.&lt;/li&gt;&lt;li&gt;&lt;i&gt;DepreciationJournal&lt;/i&gt; - Depreciation journal generated when fixed assets are depreciated.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TravelExpense&lt;/i&gt; - Travel expense voucher to post a travel expense sent from an employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Settlement&lt;/i&gt; - Settlement after delivering various goods to a buyer, especially by agriculture businesses as an alternative to OutgoingInvoice. (Norwegian: Avregning)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NegativeSettlement&lt;/i&gt; - Negative settlement after delivering various goods to a buyer and the seller (this client) that is an reduction in accounts receivable. This can be either due to a correction of a previously delivered settlement, or that the supplier (this client) bought more then the goods delivered from the customer. (Norwegian: Negativ avregning)&lt;/li&gt;&lt;li&gt;&lt;i&gt;SystemGeneratedDocumentationVoucher&lt;/i&gt; - Voucher generated by system to correct for missing vouchers.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum VoucherType
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        Unknown,

        /// <summary>
        /// Enum IncomingInvoice for value: IncomingInvoice
        /// </summary>
        IncomingInvoice,

        /// <summary>
        /// Enum IncomingCreditNote for value: IncomingCreditNote
        /// </summary>
        IncomingCreditNote,

        /// <summary>
        /// Enum OutgoingInvoice for value: OutgoingInvoice
        /// </summary>
        OutgoingInvoice,

        /// <summary>
        /// Enum OutgoingCreditNote for value: OutgoingCreditNote
        /// </summary>
        OutgoingCreditNote,

        /// <summary>
        /// Enum IncomingBankRemittance for value: IncomingBankRemittance
        /// </summary>
        IncomingBankRemittance,

        /// <summary>
        /// Enum IncomingOcrGiro for value: IncomingOcrGiro
        /// </summary>
        IncomingOcrGiro,

        /// <summary>
        /// Enum ManualJournal for value: ManualJournal
        /// </summary>
        ManualJournal,

        /// <summary>
        /// Enum Expense for value: Expense
        /// </summary>
        Expense,

        /// <summary>
        /// Enum CashJournal for value: CashJournal
        /// </summary>
        CashJournal,

        /// <summary>
        /// Enum IncomingPayments for value: IncomingPayments
        /// </summary>
        IncomingPayments,

        /// <summary>
        /// Enum OutgoingPayments for value: OutgoingPayments
        /// </summary>
        OutgoingPayments,

        /// <summary>
        /// Enum YearEndJournal for value: YearEndJournal
        /// </summary>
        YearEndJournal,

        /// <summary>
        /// Enum BankJournal for value: BankJournal
        /// </summary>
        BankJournal,

        /// <summary>
        /// Enum VatReturns for value: VatReturns
        /// </summary>
        VatReturns,

        /// <summary>
        /// Enum PayrollJournal for value: PayrollJournal
        /// </summary>
        PayrollJournal,

        /// <summary>
        /// Enum OutgoingPaymentReminder for value: OutgoingPaymentReminder
        /// </summary>
        OutgoingPaymentReminder,

        /// <summary>
        /// Enum OutgoingNoticeOfDebtCollection for value: OutgoingNoticeOfDebtCollection
        /// </summary>
        OutgoingNoticeOfDebtCollection,

        /// <summary>
        /// Enum OutgoingPaymentDemand for value: OutgoingPaymentDemand
        /// </summary>
        OutgoingPaymentDemand,

        /// <summary>
        /// Enum OutgoingWarrantOfExecution for value: OutgoingWarrantOfExecution
        /// </summary>
        OutgoingWarrantOfExecution,

        /// <summary>
        /// Enum CorrectionVoucher for value: CorrectionVoucher
        /// </summary>
        CorrectionVoucher,

        /// <summary>
        /// Enum ReversalVoucher for value: ReversalVoucher
        /// </summary>
        ReversalVoucher,

        /// <summary>
        /// Enum DepreciationJournal for value: DepreciationJournal
        /// </summary>
        DepreciationJournal,

        /// <summary>
        /// Enum TravelExpense for value: TravelExpense
        /// </summary>
        TravelExpense,

        /// <summary>
        /// Enum Settlement for value: Settlement
        /// </summary>
        Settlement,

        /// <summary>
        /// Enum NegativeSettlement for value: NegativeSettlement
        /// </summary>
        NegativeSettlement,

        /// <summary>
        /// Enum SystemGeneratedDocumentationVoucher for value: SystemGeneratedDocumentationVoucher
        /// </summary>
        SystemGeneratedDocumentationVoucher
    }

    /// <summary>
    /// Converts <see cref="VoucherType"/> to and from the JSON value
    /// </summary>
    public static class VoucherTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherType FromString(string value)
        {
            if (value.Equals("Unknown"))
                return VoucherType.Unknown;

            if (value.Equals("IncomingInvoice"))
                return VoucherType.IncomingInvoice;

            if (value.Equals("IncomingCreditNote"))
                return VoucherType.IncomingCreditNote;

            if (value.Equals("OutgoingInvoice"))
                return VoucherType.OutgoingInvoice;

            if (value.Equals("OutgoingCreditNote"))
                return VoucherType.OutgoingCreditNote;

            if (value.Equals("IncomingBankRemittance"))
                return VoucherType.IncomingBankRemittance;

            if (value.Equals("IncomingOcrGiro"))
                return VoucherType.IncomingOcrGiro;

            if (value.Equals("ManualJournal"))
                return VoucherType.ManualJournal;

            if (value.Equals("Expense"))
                return VoucherType.Expense;

            if (value.Equals("CashJournal"))
                return VoucherType.CashJournal;

            if (value.Equals("IncomingPayments"))
                return VoucherType.IncomingPayments;

            if (value.Equals("OutgoingPayments"))
                return VoucherType.OutgoingPayments;

            if (value.Equals("YearEndJournal"))
                return VoucherType.YearEndJournal;

            if (value.Equals("BankJournal"))
                return VoucherType.BankJournal;

            if (value.Equals("VatReturns"))
                return VoucherType.VatReturns;

            if (value.Equals("PayrollJournal"))
                return VoucherType.PayrollJournal;

            if (value.Equals("OutgoingPaymentReminder"))
                return VoucherType.OutgoingPaymentReminder;

            if (value.Equals("OutgoingNoticeOfDebtCollection"))
                return VoucherType.OutgoingNoticeOfDebtCollection;

            if (value.Equals("OutgoingPaymentDemand"))
                return VoucherType.OutgoingPaymentDemand;

            if (value.Equals("OutgoingWarrantOfExecution"))
                return VoucherType.OutgoingWarrantOfExecution;

            if (value.Equals("CorrectionVoucher"))
                return VoucherType.CorrectionVoucher;

            if (value.Equals("ReversalVoucher"))
                return VoucherType.ReversalVoucher;

            if (value.Equals("DepreciationJournal"))
                return VoucherType.DepreciationJournal;

            if (value.Equals("TravelExpense"))
                return VoucherType.TravelExpense;

            if (value.Equals("Settlement"))
                return VoucherType.Settlement;

            if (value.Equals("NegativeSettlement"))
                return VoucherType.NegativeSettlement;

            if (value.Equals("SystemGeneratedDocumentationVoucher"))
                return VoucherType.SystemGeneratedDocumentationVoucher;

            throw new NotImplementedException($"Could not convert value to type VoucherType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherType? FromStringOrDefault(string value)
        {
            if (value.Equals("Unknown"))
                return VoucherType.Unknown;

            if (value.Equals("IncomingInvoice"))
                return VoucherType.IncomingInvoice;

            if (value.Equals("IncomingCreditNote"))
                return VoucherType.IncomingCreditNote;

            if (value.Equals("OutgoingInvoice"))
                return VoucherType.OutgoingInvoice;

            if (value.Equals("OutgoingCreditNote"))
                return VoucherType.OutgoingCreditNote;

            if (value.Equals("IncomingBankRemittance"))
                return VoucherType.IncomingBankRemittance;

            if (value.Equals("IncomingOcrGiro"))
                return VoucherType.IncomingOcrGiro;

            if (value.Equals("ManualJournal"))
                return VoucherType.ManualJournal;

            if (value.Equals("Expense"))
                return VoucherType.Expense;

            if (value.Equals("CashJournal"))
                return VoucherType.CashJournal;

            if (value.Equals("IncomingPayments"))
                return VoucherType.IncomingPayments;

            if (value.Equals("OutgoingPayments"))
                return VoucherType.OutgoingPayments;

            if (value.Equals("YearEndJournal"))
                return VoucherType.YearEndJournal;

            if (value.Equals("BankJournal"))
                return VoucherType.BankJournal;

            if (value.Equals("VatReturns"))
                return VoucherType.VatReturns;

            if (value.Equals("PayrollJournal"))
                return VoucherType.PayrollJournal;

            if (value.Equals("OutgoingPaymentReminder"))
                return VoucherType.OutgoingPaymentReminder;

            if (value.Equals("OutgoingNoticeOfDebtCollection"))
                return VoucherType.OutgoingNoticeOfDebtCollection;

            if (value.Equals("OutgoingPaymentDemand"))
                return VoucherType.OutgoingPaymentDemand;

            if (value.Equals("OutgoingWarrantOfExecution"))
                return VoucherType.OutgoingWarrantOfExecution;

            if (value.Equals("CorrectionVoucher"))
                return VoucherType.CorrectionVoucher;

            if (value.Equals("ReversalVoucher"))
                return VoucherType.ReversalVoucher;

            if (value.Equals("DepreciationJournal"))
                return VoucherType.DepreciationJournal;

            if (value.Equals("TravelExpense"))
                return VoucherType.TravelExpense;

            if (value.Equals("Settlement"))
                return VoucherType.Settlement;

            if (value.Equals("NegativeSettlement"))
                return VoucherType.NegativeSettlement;

            if (value.Equals("SystemGeneratedDocumentationVoucher"))
                return VoucherType.SystemGeneratedDocumentationVoucher;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VoucherType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VoucherType value)
        {
            if (value == VoucherType.Unknown)
                return "Unknown";

            if (value == VoucherType.IncomingInvoice)
                return "IncomingInvoice";

            if (value == VoucherType.IncomingCreditNote)
                return "IncomingCreditNote";

            if (value == VoucherType.OutgoingInvoice)
                return "OutgoingInvoice";

            if (value == VoucherType.OutgoingCreditNote)
                return "OutgoingCreditNote";

            if (value == VoucherType.IncomingBankRemittance)
                return "IncomingBankRemittance";

            if (value == VoucherType.IncomingOcrGiro)
                return "IncomingOcrGiro";

            if (value == VoucherType.ManualJournal)
                return "ManualJournal";

            if (value == VoucherType.Expense)
                return "Expense";

            if (value == VoucherType.CashJournal)
                return "CashJournal";

            if (value == VoucherType.IncomingPayments)
                return "IncomingPayments";

            if (value == VoucherType.OutgoingPayments)
                return "OutgoingPayments";

            if (value == VoucherType.YearEndJournal)
                return "YearEndJournal";

            if (value == VoucherType.BankJournal)
                return "BankJournal";

            if (value == VoucherType.VatReturns)
                return "VatReturns";

            if (value == VoucherType.PayrollJournal)
                return "PayrollJournal";

            if (value == VoucherType.OutgoingPaymentReminder)
                return "OutgoingPaymentReminder";

            if (value == VoucherType.OutgoingNoticeOfDebtCollection)
                return "OutgoingNoticeOfDebtCollection";

            if (value == VoucherType.OutgoingPaymentDemand)
                return "OutgoingPaymentDemand";

            if (value == VoucherType.OutgoingWarrantOfExecution)
                return "OutgoingWarrantOfExecution";

            if (value == VoucherType.CorrectionVoucher)
                return "CorrectionVoucher";

            if (value == VoucherType.ReversalVoucher)
                return "ReversalVoucher";

            if (value == VoucherType.DepreciationJournal)
                return "DepreciationJournal";

            if (value == VoucherType.TravelExpense)
                return "TravelExpense";

            if (value == VoucherType.Settlement)
                return "Settlement";

            if (value == VoucherType.NegativeSettlement)
                return "NegativeSettlement";

            if (value == VoucherType.SystemGeneratedDocumentationVoucher)
                return "SystemGeneratedDocumentationVoucher";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VoucherTypeJsonConverter : JsonConverter<VoucherType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherType? result = rawValue == null
                ? null
                : VoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VoucherType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherType voucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherType"/>
    /// </summary>
    public class VoucherTypeNullableJsonConverter : JsonConverter<VoucherType?>
    {
        /// <summary>
        /// Returns a VoucherType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherType? result = rawValue == null
                ? null
                : VoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherType? voucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherType?.ToString() ?? "null");
        }
    }
}
