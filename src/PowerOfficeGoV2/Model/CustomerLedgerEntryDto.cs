// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Customer ledger entry DTO
    /// </summary>
    public partial class CustomerLedgerEntryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLedgerEntryDto" /> class.
        /// </summary>
        /// <param name="amount">The posted amount of the entry. Amount is always presented in the client currency.  Always present on transactions.</param>
        /// <param name="balance">The balance of the entry (remaining amount to be paid), in the client currency on the date (openItems) / toDate (statement).  If balance is less than amount, the entry will have a match with at least one other entry with the opposite amount, and those entries will share the same matchId.</param>
        /// <param name="cid">The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.</param>
        /// <param name="createdDateTimeOffset">The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.</param>
        /// <param name="currencyAmount">The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.</param>
        /// <param name="currencyCode">The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="customMatchingReference">The custom matching reference set on the transaction. This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</param>
        /// <param name="customerAccountNo">The customer account number this sub-ledger entry is posted on.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerExternalNo">The external number of the customer of this sub-ledger entry.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerId">The id of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerName">The name of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="departmentCode">The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="departmentId">The department id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the entry.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the account transaction.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the account transaction.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the account transaction.</param>
        /// <param name="dueDate">The due date of the entry. Relevant only for voucher types OutgoingInvoice and OutgoingCreditNote. The date represent when the amount is due to be paid by the customer.</param>
        /// <param name="externalImportReference">The ExternalImportReference, if set.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.</param>
        /// <param name="id">A value that uniquely identifies this (ledger) entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.</param>
        /// <param name="invoiceNo">The invoice number, if the entry is an entry with the voucher type OutgoingInvoice or OutgoingCreditNote.</param>
        /// <param name="isCreatedByCurrentIntegration">A value indicating whether this ledger entry is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report (in simplified queries of payment status of invoices, for instance).</param>
        /// <param name="isWriteOff">A value indicating whether this entry was created by the write off functionality in Go.  Such entries are not payments, but an accounting routine writing off an open item.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of this entry.  The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change.  Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices.</param>
        /// <param name="locationCode">The code of the location dimension associated with the entry, if set.</param>
        /// <param name="locationId">The id of the location dimension associated with the entry, if location code is set.</param>
        /// <param name="matchId">The match identifier on the entry, if it is matched with one or more other entries. All sub-ledger entries that are matched together share the same matchId.</param>
        /// <param name="paidFromBankAccount">The bank account code the OCR payment was paid from.  Only present on entries of vouchertype incomingOcrGiro.</param>
        /// <param name="postingDate">The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</param>
        /// <param name="projectCode">The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</param>
        /// <param name="projectId">The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</param>
        /// <param name="voucherDate">The date of the voucher.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.</param>
        /// <param name="voucherId">The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.</param>
        /// <param name="voucherNo">The voucher number.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.</param>
        /// <param name="voucherType">voucherType</param>
        [JsonConstructor]
        public CustomerLedgerEntryDto(Option<double?> amount = default, Option<double?> balance = default, Option<string?> cid = default, Option<DateTime?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<string?> customMatchingReference = default, Option<long?> customerAccountNo = default, Option<long?> customerExternalNo = default, Option<long?> customerId = default, Option<string?> customerName = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<DateOnly?> dueDate = default, Option<string?> externalImportReference = default, Option<long?> id = default, Option<string?> invoiceNo = default, Option<bool?> isCreatedByCurrentIntegration = default, Option<bool?> isWriteOff = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<long?> matchId = default, Option<string?> paidFromBankAccount = default, Option<DateOnly?> postingDate = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<DateOnly?> voucherDate = default, Option<Guid?> voucherId = default, Option<long?> voucherNo = default, Option<VoucherType?> voucherType = default)
        {
            AmountOption = amount;
            BalanceOption = balance;
            CidOption = cid;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CustomMatchingReferenceOption = customMatchingReference;
            CustomerAccountNoOption = customerAccountNo;
            CustomerExternalNoOption = customerExternalNo;
            CustomerIdOption = customerId;
            CustomerNameOption = customerName;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            DueDateOption = dueDate;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            InvoiceNoOption = invoiceNo;
            IsCreatedByCurrentIntegrationOption = isCreatedByCurrentIntegration;
            IsWriteOffOption = isWriteOff;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            MatchIdOption = matchId;
            PaidFromBankAccountOption = paidFromBankAccount;
            PostingDateOption = postingDate;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            VoucherDateOption = voucherDate;
            VoucherIdOption = voucherId;
            VoucherNoOption = voucherNo;
            VoucherTypeOption = voucherType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherType?> VoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [JsonPropertyName("VoucherType")]
        public VoucherType? VoucherType { get { return this.VoucherTypeOption; } set { this.VoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AmountOption { get; }

        /// <summary>
        /// The posted amount of the entry. Amount is always presented in the client currency.  Always present on transactions.
        /// </summary>
        /// <value>The posted amount of the entry. Amount is always presented in the client currency.  Always present on transactions.</value>
        /* <example>99</example> */
        [JsonPropertyName("Amount")]
        public double? Amount { get { return this.AmountOption; } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The balance of the entry (remaining amount to be paid), in the client currency on the date (openItems) / toDate (statement).  If balance is less than amount, the entry will have a match with at least one other entry with the opposite amount, and those entries will share the same matchId.
        /// </summary>
        /// <value>The balance of the entry (remaining amount to be paid), in the client currency on the date (openItems) / toDate (statement).  If balance is less than amount, the entry will have a match with at least one other entry with the opposite amount, and those entries will share the same matchId.</value>
        /* <example>502.25</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; }

        /// <summary>
        /// The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.
        /// </summary>
        /// <value>The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.
        /// </summary>
        /// <value>The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; }

        /// <summary>
        /// The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.
        /// </summary>
        /// <value>The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.</value>
        /* <example>8.5212</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>USD</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; }

        /// <summary>
        /// The custom matching reference set on the transaction. This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).
        /// </summary>
        /// <value>The custom matching reference set on the transaction. This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</value>
        /* <example>123-abc</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } }

        /// <summary>
        /// Used to track the state of CustomerAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerAccountNoOption { get; }

        /// <summary>
        /// The customer account number this sub-ledger entry is posted on.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The customer account number this sub-ledger entry is posted on.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.</value>
        /* <example>10000</example> */
        [JsonPropertyName("CustomerAccountNo")]
        public long? CustomerAccountNo { get { return this.CustomerAccountNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerExternalNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerExternalNoOption { get; }

        /// <summary>
        /// The external number of the customer of this sub-ledger entry.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The external number of the customer of this sub-ledger entry.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.  Customers can be queried and identified using the Customer service.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CustomerExternalNo")]
        public long? CustomerExternalNo { get { return this.CustomerExternalNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerIdOption { get; }

        /// <summary>
        /// The id of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The id of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerId")]
        public long? CustomerId { get { return this.CustomerIdOption; } }

        /// <summary>
        /// Used to track the state of CustomerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomerNameOption { get; }

        /// <summary>
        /// The name of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The name of the customer of this sub-ledger entry.  Customers can be queried and identified using the Customer service.</value>
        /* <example>Coca-Cola AS</example> */
        [JsonPropertyName("CustomerName")]
        public string? CustomerName { get { return this.CustomerNameOption; } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</value>
        /* <example>110</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; }

        /// <summary>
        /// The department id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with the entry.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the entry.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</value>
        /* <example>dimcode111</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; }

        /// <summary>
        /// The id of the dimension 1 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</value>
        /* <example>dimcode222</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; }

        /// <summary>
        /// The id of the dimension 2 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the account transaction.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension- and CustomDimensionValue-services.</value>
        /* <example>dimcode333</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; }

        /// <summary>
        /// The id of the dimension 3 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DueDateOption { get; private set; }

        /// <summary>
        /// The due date of the entry. Relevant only for voucher types OutgoingInvoice and OutgoingCreditNote. The date represent when the amount is due to be paid by the customer.
        /// </summary>
        /// <value>The due date of the entry. Relevant only for voucher types OutgoingInvoice and OutgoingCreditNote. The date represent when the amount is due to be paid by the customer.</value>
        /* <example>Tue Sep 28 02:00:00 CEST 2021</example> */
        [JsonPropertyName("DueDate")]
        public DateOnly? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; }

        /// <summary>
        /// The ExternalImportReference, if set.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.
        /// </summary>
        /// <value>The ExternalImportReference, if set.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this (ledger) entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.
        /// </summary>
        /// <value>A value that uniquely identifies this (ledger) entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.</value>
        /* <example>476023749</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNoOption { get; }

        /// <summary>
        /// The invoice number, if the entry is an entry with the voucher type OutgoingInvoice or OutgoingCreditNote.
        /// </summary>
        /// <value>The invoice number, if the entry is an entry with the voucher type OutgoingInvoice or OutgoingCreditNote.</value>
        /* <example>15545</example> */
        [JsonPropertyName("InvoiceNo")]
        public string? InvoiceNo { get { return this.InvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of IsCreatedByCurrentIntegration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreatedByCurrentIntegrationOption { get; }

        /// <summary>
        /// A value indicating whether this ledger entry is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report (in simplified queries of payment status of invoices, for instance).
        /// </summary>
        /// <value>A value indicating whether this ledger entry is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report (in simplified queries of payment status of invoices, for instance).</value>
        /* <example>true</example> */
        [JsonPropertyName("IsCreatedByCurrentIntegration")]
        public bool? IsCreatedByCurrentIntegration { get { return this.IsCreatedByCurrentIntegrationOption; } }

        /// <summary>
        /// Used to track the state of IsWriteOff
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsWriteOffOption { get; }

        /// <summary>
        /// A value indicating whether this entry was created by the write off functionality in Go.  Such entries are not payments, but an accounting routine writing off an open item.
        /// </summary>
        /// <value>A value indicating whether this entry was created by the write off functionality in Go.  Such entries are not payments, but an accounting routine writing off an open item.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsWriteOff")]
        public bool? IsWriteOff { get { return this.IsWriteOffOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of this entry.  The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change.  Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices.
        /// </summary>
        /// <value>The timestamp of the last change of this entry.  The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change.  Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with the entry, if set.
        /// </summary>
        /// <value>The code of the location dimension associated with the entry, if set.</value>
        /* <example>L1337</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; }

        /// <summary>
        /// The id of the location dimension associated with the entry, if location code is set.
        /// </summary>
        /// <value>The id of the location dimension associated with the entry, if location code is set.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } }

        /// <summary>
        /// Used to track the state of MatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MatchIdOption { get; }

        /// <summary>
        /// The match identifier on the entry, if it is matched with one or more other entries. All sub-ledger entries that are matched together share the same matchId.
        /// </summary>
        /// <value>The match identifier on the entry, if it is matched with one or more other entries. All sub-ledger entries that are matched together share the same matchId.</value>
        /* <example>123456</example> */
        [JsonPropertyName("MatchId")]
        public long? MatchId { get { return this.MatchIdOption; } }

        /// <summary>
        /// Used to track the state of PaidFromBankAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PaidFromBankAccountOption { get; }

        /// <summary>
        /// The bank account code the OCR payment was paid from.  Only present on entries of vouchertype incomingOcrGiro.
        /// </summary>
        /// <value>The bank account code the OCR payment was paid from.  Only present on entries of vouchertype incomingOcrGiro.</value>
        /* <example>10</example> */
        [JsonPropertyName("PaidFromBankAccount")]
        public string? PaidFromBankAccount { get { return this.PaidFromBankAccountOption; } }

        /// <summary>
        /// Used to track the state of PostingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> PostingDateOption { get; }

        /// <summary>
        /// The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.
        /// </summary>
        /// <value>The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</value>
        /* <example>Tue Sep 28 02:00:00 CEST 2021</example> */
        [JsonPropertyName("PostingDate")]
        public DateOnly? PostingDate { get { return this.PostingDateOption; } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</value>
        /* <example>100</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VoucherDateOption { get; }

        /// <summary>
        /// The date of the voucher.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.
        /// </summary>
        /// <value>The date of the voucher.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.</value>
        /* <example>Sat Jul 25 02:00:00 CEST 2020</example> */
        [JsonPropertyName("VoucherDate")]
        public DateOnly? VoucherDate { get { return this.VoucherDateOption; } }

        /// <summary>
        /// Used to track the state of VoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> VoucherIdOption { get; }

        /// <summary>
        /// The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.
        /// </summary>
        /// <value>The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.</value>
        /* <example>ee373540-ca8d-4562-8fb6-6fb52de47722</example> */
        [JsonPropertyName("VoucherId")]
        public Guid? VoucherId { get { return this.VoucherIdOption; } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.
        /// </summary>
        /// <value>The voucher number.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.</value>
        /* <example>15545</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerLedgerEntryDto {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  CustomerAccountNo: ").Append(CustomerAccountNo).Append("\n");
            sb.Append("  CustomerExternalNo: ").Append(CustomerExternalNo).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  IsCreatedByCurrentIntegration: ").Append(IsCreatedByCurrentIntegration).Append("\n");
            sb.Append("  IsWriteOff: ").Append(IsWriteOff).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  PaidFromBankAccount: ").Append(PaidFromBankAccount).Append("\n");
            sb.Append("  PostingDate: ").Append(PostingDate).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomerLedgerEntryDto" />
    /// </summary>
    public class CustomerLedgerEntryDtoJsonConverter : JsonConverter<CustomerLedgerEntryDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PostingDate
        /// </summary>
        public static string PostingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CustomerLedgerEntryDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomerLedgerEntryDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> amount = default;
            Option<double?> balance = default;
            Option<string?> cid = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<string?> customMatchingReference = default;
            Option<long?> customerAccountNo = default;
            Option<long?> customerExternalNo = default;
            Option<long?> customerId = default;
            Option<string?> customerName = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<DateOnly?> dueDate = default;
            Option<string?> externalImportReference = default;
            Option<long?> id = default;
            Option<string?> invoiceNo = default;
            Option<bool?> isCreatedByCurrentIntegration = default;
            Option<bool?> isWriteOff = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<long?> matchId = default;
            Option<string?> paidFromBankAccount = default;
            Option<DateOnly?> postingDate = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<DateOnly?> voucherDate = default;
            Option<Guid?> voucherId = default;
            Option<long?> voucherNo = default;
            Option<VoucherType?> voucherType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerExternalNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerExternalNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerName":
                            customerName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceNo":
                            invoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsCreatedByCurrentIntegration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCreatedByCurrentIntegration = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsWriteOff":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isWriteOff = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "MatchId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                matchId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PaidFromBankAccount":
                            paidFromBankAccount = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PostingDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postingDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherType":
                            string? voucherTypeRawValue = utf8JsonReader.GetString();
                            if (voucherTypeRawValue != null)
                                voucherType = new Option<VoucherType?>(VoucherTypeValueConverter.FromStringOrDefault(voucherTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (postingDate.IsSet && postingDate.Value == null)
                throw new ArgumentNullException(nameof(postingDate), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (voucherDate.IsSet && voucherDate.Value == null)
                throw new ArgumentNullException(nameof(voucherDate), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (voucherId.IsSet && voucherId.Value == null)
                throw new ArgumentNullException(nameof(voucherId), "Property is not nullable for class CustomerLedgerEntryDto.");

            if (voucherNo.IsSet && voucherNo.Value == null)
                throw new ArgumentNullException(nameof(voucherNo), "Property is not nullable for class CustomerLedgerEntryDto.");

            return new CustomerLedgerEntryDto(amount, balance, cid, createdDateTimeOffset, createdFromImportJournalId, currencyAmount, currencyCode, customMatchingReference, customerAccountNo, customerExternalNo, customerId, customerName, departmentCode, departmentId, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, dueDate, externalImportReference, id, invoiceNo, isCreatedByCurrentIntegration, isWriteOff, lastChangedDateTimeOffset, locationCode, locationId, matchId, paidFromBankAccount, postingDate, projectCode, projectId, voucherDate, voucherId, voucherNo, voucherType);
        }

        /// <summary>
        /// Serializes a <see cref="CustomerLedgerEntryDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerLedgerEntryDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomerLedgerEntryDto customerLedgerEntryDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customerLedgerEntryDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomerLedgerEntryDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerLedgerEntryDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomerLedgerEntryDto customerLedgerEntryDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customerLedgerEntryDto.AmountOption.IsSet)
                writer.WriteNumber("Amount", customerLedgerEntryDto.AmountOption.Value!.Value);

            if (customerLedgerEntryDto.BalanceOption.IsSet)
                writer.WriteNumber("Balance", customerLedgerEntryDto.BalanceOption.Value!.Value);

            if (customerLedgerEntryDto.CidOption.IsSet)
                if (customerLedgerEntryDto.CidOption.Value != null)
                    writer.WriteString("Cid", customerLedgerEntryDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (customerLedgerEntryDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", customerLedgerEntryDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (customerLedgerEntryDto.CreatedFromImportJournalIdOption.IsSet)
                if (customerLedgerEntryDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", customerLedgerEntryDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (customerLedgerEntryDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", customerLedgerEntryDto.CurrencyAmountOption.Value!.Value);

            if (customerLedgerEntryDto.CurrencyCodeOption.IsSet)
                if (customerLedgerEntryDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", customerLedgerEntryDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (customerLedgerEntryDto.CustomMatchingReferenceOption.IsSet)
                if (customerLedgerEntryDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", customerLedgerEntryDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (customerLedgerEntryDto.CustomerAccountNoOption.IsSet)
                if (customerLedgerEntryDto.CustomerAccountNoOption.Value != null)
                    writer.WriteNumber("CustomerAccountNo", customerLedgerEntryDto.CustomerAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerAccountNo");

            if (customerLedgerEntryDto.CustomerExternalNoOption.IsSet)
                if (customerLedgerEntryDto.CustomerExternalNoOption.Value != null)
                    writer.WriteNumber("CustomerExternalNo", customerLedgerEntryDto.CustomerExternalNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerExternalNo");

            if (customerLedgerEntryDto.CustomerIdOption.IsSet)
                if (customerLedgerEntryDto.CustomerIdOption.Value != null)
                    writer.WriteNumber("CustomerId", customerLedgerEntryDto.CustomerIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerId");

            if (customerLedgerEntryDto.CustomerNameOption.IsSet)
                if (customerLedgerEntryDto.CustomerNameOption.Value != null)
                    writer.WriteString("CustomerName", customerLedgerEntryDto.CustomerName);
                else
                    writer.WriteNull("CustomerName");

            if (customerLedgerEntryDto.DepartmentCodeOption.IsSet)
                if (customerLedgerEntryDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", customerLedgerEntryDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (customerLedgerEntryDto.DepartmentIdOption.IsSet)
                if (customerLedgerEntryDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", customerLedgerEntryDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (customerLedgerEntryDto.Dim1CodeOption.IsSet)
                if (customerLedgerEntryDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", customerLedgerEntryDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (customerLedgerEntryDto.Dim1IdOption.IsSet)
                if (customerLedgerEntryDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", customerLedgerEntryDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (customerLedgerEntryDto.Dim2CodeOption.IsSet)
                if (customerLedgerEntryDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", customerLedgerEntryDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (customerLedgerEntryDto.Dim2IdOption.IsSet)
                if (customerLedgerEntryDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", customerLedgerEntryDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (customerLedgerEntryDto.Dim3CodeOption.IsSet)
                if (customerLedgerEntryDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", customerLedgerEntryDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (customerLedgerEntryDto.Dim3IdOption.IsSet)
                if (customerLedgerEntryDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", customerLedgerEntryDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (customerLedgerEntryDto.DueDateOption.IsSet)
                if (customerLedgerEntryDto.DueDateOption.Value != null)
                    writer.WriteString("DueDate", customerLedgerEntryDto.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("DueDate");

            if (customerLedgerEntryDto.ExternalImportReferenceOption.IsSet)
                if (customerLedgerEntryDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", customerLedgerEntryDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (customerLedgerEntryDto.IdOption.IsSet)
                writer.WriteNumber("Id", customerLedgerEntryDto.IdOption.Value!.Value);

            if (customerLedgerEntryDto.InvoiceNoOption.IsSet)
                if (customerLedgerEntryDto.InvoiceNoOption.Value != null)
                    writer.WriteString("InvoiceNo", customerLedgerEntryDto.InvoiceNo);
                else
                    writer.WriteNull("InvoiceNo");

            if (customerLedgerEntryDto.IsCreatedByCurrentIntegrationOption.IsSet)
                if (customerLedgerEntryDto.IsCreatedByCurrentIntegrationOption.Value != null)
                    writer.WriteBoolean("IsCreatedByCurrentIntegration", customerLedgerEntryDto.IsCreatedByCurrentIntegrationOption.Value!.Value);
                else
                    writer.WriteNull("IsCreatedByCurrentIntegration");

            if (customerLedgerEntryDto.IsWriteOffOption.IsSet)
                if (customerLedgerEntryDto.IsWriteOffOption.Value != null)
                    writer.WriteBoolean("IsWriteOff", customerLedgerEntryDto.IsWriteOffOption.Value!.Value);
                else
                    writer.WriteNull("IsWriteOff");

            if (customerLedgerEntryDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", customerLedgerEntryDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (customerLedgerEntryDto.LocationCodeOption.IsSet)
                if (customerLedgerEntryDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", customerLedgerEntryDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (customerLedgerEntryDto.LocationIdOption.IsSet)
                if (customerLedgerEntryDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", customerLedgerEntryDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (customerLedgerEntryDto.MatchIdOption.IsSet)
                if (customerLedgerEntryDto.MatchIdOption.Value != null)
                    writer.WriteNumber("MatchId", customerLedgerEntryDto.MatchIdOption.Value!.Value);
                else
                    writer.WriteNull("MatchId");

            if (customerLedgerEntryDto.PaidFromBankAccountOption.IsSet)
                if (customerLedgerEntryDto.PaidFromBankAccountOption.Value != null)
                    writer.WriteString("PaidFromBankAccount", customerLedgerEntryDto.PaidFromBankAccount);
                else
                    writer.WriteNull("PaidFromBankAccount");

            if (customerLedgerEntryDto.PostingDateOption.IsSet)
                writer.WriteString("PostingDate", customerLedgerEntryDto.PostingDateOption.Value!.Value.ToString(PostingDateFormat));

            if (customerLedgerEntryDto.ProjectCodeOption.IsSet)
                if (customerLedgerEntryDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", customerLedgerEntryDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (customerLedgerEntryDto.ProjectIdOption.IsSet)
                if (customerLedgerEntryDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", customerLedgerEntryDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (customerLedgerEntryDto.VoucherDateOption.IsSet)
                writer.WriteString("VoucherDate", customerLedgerEntryDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));

            if (customerLedgerEntryDto.VoucherIdOption.IsSet)
                writer.WriteString("VoucherId", customerLedgerEntryDto.VoucherIdOption.Value!.Value);

            if (customerLedgerEntryDto.VoucherNoOption.IsSet)
                writer.WriteNumber("VoucherNo", customerLedgerEntryDto.VoucherNoOption.Value!.Value);

            if (customerLedgerEntryDto.VoucherTypeOption.IsSet)
                if (customerLedgerEntryDto.VoucherTypeOption!.Value != null)
                {
                    var voucherTypeRawValue = VoucherTypeValueConverter.ToJsonValue(customerLedgerEntryDto.VoucherTypeOption.Value!.Value);
                    writer.WriteString("VoucherType", voucherTypeRawValue);
                }
                else
                    writer.WriteNull("VoucherType");
        }
    }
}
