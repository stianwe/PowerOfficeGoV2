// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing the different agriculture departments available for agriculture clients.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - Unspecified&lt;/li&gt;&lt;li&gt;&lt;i&gt;Finance&lt;/i&gt; - Financial (Norsk: Finans)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Farming&lt;/i&gt; - Farming (Norsk: Jordbruk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Forestry&lt;/i&gt; - Forestry (Norsk: Skogbruk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FurAnimals&lt;/i&gt; - Fur animals (Norsk: Pelsdyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherIndustries&lt;/i&gt; - Other industries (Norsk: Andre næringer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Private&lt;/i&gt; - Private (Norsk: Privat)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing the different agriculture departments available for agriculture clients.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - Unspecified&lt;/li&gt;&lt;li&gt;&lt;i&gt;Finance&lt;/i&gt; - Financial (Norsk: Finans)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Farming&lt;/i&gt; - Farming (Norsk: Jordbruk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Forestry&lt;/i&gt; - Forestry (Norsk: Skogbruk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FurAnimals&lt;/i&gt; - Fur animals (Norsk: Pelsdyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherIndustries&lt;/i&gt; - Other industries (Norsk: Andre næringer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Private&lt;/i&gt; - Private (Norsk: Privat)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum AgricultureDepartment
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Finance for value: Finance
        /// </summary>
        Finance = 2,

        /// <summary>
        /// Enum Farming for value: Farming
        /// </summary>
        Farming = 3,

        /// <summary>
        /// Enum Forestry for value: Forestry
        /// </summary>
        Forestry = 4,

        /// <summary>
        /// Enum FurAnimals for value: FurAnimals
        /// </summary>
        FurAnimals = 5,

        /// <summary>
        /// Enum OtherIndustries for value: OtherIndustries
        /// </summary>
        OtherIndustries = 6,

        /// <summary>
        /// Enum Private for value: Private
        /// </summary>
        Private = 7
    }

    /// <summary>
    /// Converts <see cref="AgricultureDepartment"/> to and from the JSON value
    /// </summary>
    public static class AgricultureDepartmentValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AgricultureDepartment"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AgricultureDepartment FromString(string value)
        {
            if (value.Equals("None"))
                return AgricultureDepartment.None;

            if (value.Equals("Finance"))
                return AgricultureDepartment.Finance;

            if (value.Equals("Farming"))
                return AgricultureDepartment.Farming;

            if (value.Equals("Forestry"))
                return AgricultureDepartment.Forestry;

            if (value.Equals("FurAnimals"))
                return AgricultureDepartment.FurAnimals;

            if (value.Equals("OtherIndustries"))
                return AgricultureDepartment.OtherIndustries;

            if (value.Equals("Private"))
                return AgricultureDepartment.Private;

            throw new NotImplementedException($"Could not convert value to type AgricultureDepartment: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AgricultureDepartment"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AgricultureDepartment? FromStringOrDefault(string value)
        {
            if (value.Equals("None"))
                return AgricultureDepartment.None;

            if (value.Equals("Finance"))
                return AgricultureDepartment.Finance;

            if (value.Equals("Farming"))
                return AgricultureDepartment.Farming;

            if (value.Equals("Forestry"))
                return AgricultureDepartment.Forestry;

            if (value.Equals("FurAnimals"))
                return AgricultureDepartment.FurAnimals;

            if (value.Equals("OtherIndustries"))
                return AgricultureDepartment.OtherIndustries;

            if (value.Equals("Private"))
                return AgricultureDepartment.Private;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AgricultureDepartment"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AgricultureDepartment value)
        {
            if (value == AgricultureDepartment.None)
                return "None";

            if (value == AgricultureDepartment.Finance)
                return "Finance";

            if (value == AgricultureDepartment.Farming)
                return "Farming";

            if (value == AgricultureDepartment.Forestry)
                return "Forestry";

            if (value == AgricultureDepartment.FurAnimals)
                return "FurAnimals";

            if (value == AgricultureDepartment.OtherIndustries)
                return "OtherIndustries";

            if (value == AgricultureDepartment.Private)
                return "Private";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgricultureDepartment"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AgricultureDepartmentJsonConverter : JsonConverter<AgricultureDepartment>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AgricultureDepartment Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AgricultureDepartment? result = rawValue == null
                ? null
                : AgricultureDepartmentValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AgricultureDepartment to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agricultureDepartment"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AgricultureDepartment agricultureDepartment, JsonSerializerOptions options)
        {
            writer.WriteStringValue(agricultureDepartment.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgricultureDepartment"/>
    /// </summary>
    public class AgricultureDepartmentNullableJsonConverter : JsonConverter<AgricultureDepartment?>
    {
        /// <summary>
        /// Returns a AgricultureDepartment from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AgricultureDepartment? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AgricultureDepartment? result = rawValue == null
                ? null
                : AgricultureDepartmentValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agricultureDepartment"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AgricultureDepartment? agricultureDepartment, JsonSerializerOptions options)
        {
            writer.WriteStringValue(agricultureDepartment?.ToString() ?? "null");
        }
    }
}
