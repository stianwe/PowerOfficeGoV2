// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Lightweight version of an (outgoing) invoice
    /// </summary>
    public partial class OutgoingInvoiceDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceDto" /> class.
        /// </summary>
        /// <param name="balance">The balance of the customer ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is less than totalPostedAmount,  the entry will have a match in the customer ledger with at least one other entry with the opposite amount,  and those entries will share the same matchId.  If the balance is zero, the invoice will have the status paid in the GUI.</param>
        /// <param name="balanceLastChangedDateTimeOffset">The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the customer ledger entry this invoice relate to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.</param>
        /// <param name="brandingThemeCode">The code of the branding theme used on the invoice.  Available if the invoice was created and sent from Go.  Branding themes can be retrieved using the SalesSettings endpoint.</param>
        /// <param name="brandingThemeId">The id of the branding theme, if brandingThemeCode is set on the invoice.  Branding themes can be retrieved using the SalesSettings endpoint.</param>
        /// <param name="cid">The cid number (norwegian: KID), if present.</param>
        /// <param name="contractNo">The contract number, if set on the invoice.</param>
        /// <param name="createdDateTimeOffset">The created timestamp of the invoice object.  If the invoice was created and sent from Go, the created timestamp is the timestamp the order (invoice draft) was first created.  If imported, the created timestamp will represent the timestamp of the import.</param>
        /// <param name="currencyCode">The standard currency code for the invoice.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate.  Always base 1.</param>
        /// <param name="customMatchingReference">The custom matching reference, if set.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</param>
        /// <param name="customerId">The identifier of the customer this invoice is related to.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerNo">The customer number for the customer this invoice relates to.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerReference">The customer reference (ie buyers reference), if set.  This property is often used to give the receiver of the invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned,  otherwise the \&quot;Your Reference\&quot; text used on the invoice will be returned.</param>
        /// <param name="customerReferenceContactPersonId">The customer reference contact person id (ie buyers reference).  The default use of customer reference when invoicing from Go, is to reference a customer contact person.  If this property is set, the string property customerReference will have no value.  Contact persons can be retrieved using the ContactPerson endpoint.</param>
        /// <param name="deliveryAddress1">The delivery address primary line as it was set when the invoice was delivered, if set and delivered from Go.</param>
        /// <param name="deliveryAddress2">The delivery address secondary line as it was set when the invoice was delivered, if set and delivered from Go.</param>
        /// <param name="deliveryAddressCity">The delivery address city as it was set when the invoice was delivered, if set and delivered from Go.</param>
        /// <param name="deliveryAddressCountryCode">The delivery address country code as it was set when the invoice was delivered, if set and delivered from Go.  The code is ISO 3166-1 alfa-2 country code (Two characters)</param>
        /// <param name="deliveryAddressZipCode">The delivery address zip code as it was set when the invoice was delivered, if set and delivered from Go.</param>
        /// <param name="deliveryDate">The delivery date set on the invoice.</param>
        /// <param name="deliveryTerm">The delivery term of the invoice.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.</param>
        /// <param name="deliveryTermId">The id of the delivery term of the invoice.</param>
        /// <param name="departmentCode">The code of the department for the invoice, if set.  Note that this is the department set in the header of the invoice.  The invoice lines might specify other departments or no department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="departmentId">The id of the department, if departmentCode is set on the invoice.  Departments can be queried and identified using the Department service.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the invoice, if set.  Note that this is the dimension 1 set in the header of the invoice.  The invoice lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the invoice, if dim1Code is set.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the invoice.  Note that this is the dimension 2 set in the header of the invoice.  The invoice lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the invoice, if dim2Code is set.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the invoice.  Note that this is the dimension 3 set in the header of the invoice.  The invoice lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the invoice, if dim3Code is set.</param>
        /// <param name="dueDate">The due date of the invoice.</param>
        /// <param name="externalImportReference">The ExternalImportReference, if set.  This property can be set by integrations posting vouchers to Go or creating invoice drafts, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.</param>
        /// <param name="id">The identifier of the invoice and the posted voucher.  The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  If the invoice was first created in Go as a draft, the id is consistent from the outgoinginvoice draft, the sent invoice and the posted invoice voucher.</param>
        /// <param name="importedOrderNo">The imported order number.  Can only be set on invoice drafts created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.</param>
        /// <param name="invoiceDeliveryType">invoiceDeliveryType</param>
        /// <param name="invoiceNo">The invoice number of the invoice.</param>
        /// <param name="isCreatedByCurrentIntegration">A value indicating whether the invoice is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authenticated.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.  Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice.</param>
        /// <param name="isReversed">A value indicating whether this invoice voucher have been reversed.  If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused.  Only possible to reverse an invoice voucher using the OutgoingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the invoice.  On sent invoices, no direct invoice information or related account transactions can change, but last changed will trigger when the invoice is due, and when (if applicable) the next reminder stages for the invoice is triggered in the system.</param>
        /// <param name="locationCode">The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.</param>
        /// <param name="locationId">The id of the location dimension associated with the invoice.</param>
        /// <param name="matchId">The match id of the customer ledger entry this invoice relate to, if present.  Available if the invoice have a match with other customer ledger entries - typically payment transactions.  Can be used with the CustomerLedger endpoint to retrieve the matched transactions.</param>
        /// <param name="netAmount">The net amount of the invoice (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="netPostedAmount">The net posted amount of the invoice (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate.</param>
        /// <param name="orderDate">The order date of the invoice.  OrderDate will default to the createdDate, but can be controlled and set in imports creating invoice drafts.</param>
        /// <param name="orderNo">The order number of the invoice.  Only present if the invoice originated from an invoice draft created in Go.  For invoice drafts created in Go, this value is autogenerated.</param>
        /// <param name="paymentTerm">The payment term of the invoice.  This is the number of days after an invoice is sent until it is due (days between the voucher date and the due date).</param>
        /// <param name="paymentTermId">The id of the payment term of the invoice.</param>
        /// <param name="projectCode">The project code, if set on the invoice.  Note that this is the project set in the header of the invoice.  The invoice lines might specify other projects or no project.  Projects can be queried and identified using the Project service.</param>
        /// <param name="projectId">The project id, if projectCode is set.  Projects can be queried and identified using the Project service.</param>
        /// <param name="purchaseOrderReference">The purchase order reference, if set.  The property can be used to reference purchase order places by the customer.</param>
        /// <param name="relatedInvoiceNo">The related invoice number.  Can be available on credit notes, if the credit note is created and sent from Go.  If available, this property will reference the original invoice being credited.</param>
        /// <param name="sellersReferenceEmployeeId">The id of the employee set as the seller reference, if SellerReferenceEmployeeNo is set on the invoice.</param>
        /// <param name="sellersReferenceEmployeeNo">The employee number of the reference to the seller, if set.  When a user view the invoice information in GUI, this property is referred to as our reference.</param>
        /// <param name="sentDateTimeOffset">The timestamp of when the invoice was sent from Go.  Available only for invoice created and sent from Go.  Blank if the invoice was posted to Go using an import.</param>
        /// <param name="totalAmount">The total amount of the invoice (vat inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="totalPostedAmount">The total posted amount of the invoice (vat inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.</param>
        /// <param name="voucherDate">The date of the invoice voucher.  This represents the date of the voucher and the document date of the invoice.</param>
        /// <param name="voucherNo">The voucher number of the invoice voucher.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.</param>
        /// <param name="voucherType">voucherType</param>
        [JsonConstructor]
        public OutgoingInvoiceDto(Option<double?> balance = default, Option<DateTime?> balanceLastChangedDateTimeOffset = default, Option<string?> brandingThemeCode = default, Option<long?> brandingThemeId = default, Option<string?> cid = default, Option<string?> contractNo = default, Option<DateTime?> createdDateTimeOffset = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<string?> customMatchingReference = default, Option<long?> customerId = default, Option<long?> customerNo = default, Option<string?> customerReference = default, Option<long?> customerReferenceContactPersonId = default, Option<string?> deliveryAddress1 = default, Option<string?> deliveryAddress2 = default, Option<string?> deliveryAddressCity = default, Option<string?> deliveryAddressCountryCode = default, Option<string?> deliveryAddressZipCode = default, Option<DateOnly?> deliveryDate = default, Option<string?> deliveryTerm = default, Option<long?> deliveryTermId = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<DateOnly?> dueDate = default, Option<string?> externalImportReference = default, Option<Guid?> id = default, Option<long?> importedOrderNo = default, Option<InvoiceDeliveryType?> invoiceDeliveryType = default, Option<long?> invoiceNo = default, Option<bool?> isCreatedByCurrentIntegration = default, Option<bool?> isReversed = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<long?> matchId = default, Option<double?> netAmount = default, Option<double?> netPostedAmount = default, Option<DateOnly?> orderDate = default, Option<long?> orderNo = default, Option<int?> paymentTerm = default, Option<long?> paymentTermId = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<string?> purchaseOrderReference = default, Option<long?> relatedInvoiceNo = default, Option<long?> sellersReferenceEmployeeId = default, Option<long?> sellersReferenceEmployeeNo = default, Option<DateTime?> sentDateTimeOffset = default, Option<double?> totalAmount = default, Option<double?> totalPostedAmount = default, Option<DateOnly?> voucherDate = default, Option<long?> voucherNo = default, Option<OutgoingInvoiceVoucherType?> voucherType = default)
        {
            BalanceOption = balance;
            BalanceLastChangedDateTimeOffsetOption = balanceLastChangedDateTimeOffset;
            BrandingThemeCodeOption = brandingThemeCode;
            BrandingThemeIdOption = brandingThemeId;
            CidOption = cid;
            ContractNoOption = contractNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CustomMatchingReferenceOption = customMatchingReference;
            CustomerIdOption = customerId;
            CustomerNoOption = customerNo;
            CustomerReferenceOption = customerReference;
            CustomerReferenceContactPersonIdOption = customerReferenceContactPersonId;
            DeliveryAddress1Option = deliveryAddress1;
            DeliveryAddress2Option = deliveryAddress2;
            DeliveryAddressCityOption = deliveryAddressCity;
            DeliveryAddressCountryCodeOption = deliveryAddressCountryCode;
            DeliveryAddressZipCodeOption = deliveryAddressZipCode;
            DeliveryDateOption = deliveryDate;
            DeliveryTermOption = deliveryTerm;
            DeliveryTermIdOption = deliveryTermId;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            DueDateOption = dueDate;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            ImportedOrderNoOption = importedOrderNo;
            InvoiceDeliveryTypeOption = invoiceDeliveryType;
            InvoiceNoOption = invoiceNo;
            IsCreatedByCurrentIntegrationOption = isCreatedByCurrentIntegration;
            IsReversedOption = isReversed;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            MatchIdOption = matchId;
            NetAmountOption = netAmount;
            NetPostedAmountOption = netPostedAmount;
            OrderDateOption = orderDate;
            OrderNoOption = orderNo;
            PaymentTermOption = paymentTerm;
            PaymentTermIdOption = paymentTermId;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            PurchaseOrderReferenceOption = purchaseOrderReference;
            RelatedInvoiceNoOption = relatedInvoiceNo;
            SellersReferenceEmployeeIdOption = sellersReferenceEmployeeId;
            SellersReferenceEmployeeNoOption = sellersReferenceEmployeeNo;
            SentDateTimeOffsetOption = sentDateTimeOffset;
            TotalAmountOption = totalAmount;
            TotalPostedAmountOption = totalPostedAmount;
            VoucherDateOption = voucherDate;
            VoucherNoOption = voucherNo;
            VoucherTypeOption = voucherType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InvoiceDeliveryType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InvoiceDeliveryType?> InvoiceDeliveryTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceDeliveryType
        /// </summary>
        [JsonPropertyName("InvoiceDeliveryType")]
        public InvoiceDeliveryType? InvoiceDeliveryType { get { return this.InvoiceDeliveryTypeOption; } set { this.InvoiceDeliveryTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OutgoingInvoiceVoucherType?> VoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [JsonPropertyName("VoucherType")]
        public OutgoingInvoiceVoucherType? VoucherType { get { return this.VoucherTypeOption; } set { this.VoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The balance of the customer ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is less than totalPostedAmount,  the entry will have a match in the customer ledger with at least one other entry with the opposite amount,  and those entries will share the same matchId.  If the balance is zero, the invoice will have the status paid in the GUI.
        /// </summary>
        /// <value>The balance of the customer ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is less than totalPostedAmount,  the entry will have a match in the customer ledger with at least one other entry with the opposite amount,  and those entries will share the same matchId.  If the balance is zero, the invoice will have the status paid in the GUI.</value>
        /* <example>502.25</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Used to track the state of BalanceLastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> BalanceLastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the customer ledger entry this invoice relate to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.
        /// </summary>
        /// <value>The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the customer ledger entry this invoice relate to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("BalanceLastChangedDateTimeOffset")]
        public DateTime? BalanceLastChangedDateTimeOffset { get { return this.BalanceLastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of BrandingThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrandingThemeCodeOption { get; }

        /// <summary>
        /// The code of the branding theme used on the invoice.  Available if the invoice was created and sent from Go.  Branding themes can be retrieved using the SalesSettings endpoint.
        /// </summary>
        /// <value>The code of the branding theme used on the invoice.  Available if the invoice was created and sent from Go.  Branding themes can be retrieved using the SalesSettings endpoint.</value>
        /* <example>4</example> */
        [JsonPropertyName("BrandingThemeCode")]
        public string? BrandingThemeCode { get { return this.BrandingThemeCodeOption; } }

        /// <summary>
        /// Used to track the state of BrandingThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BrandingThemeIdOption { get; }

        /// <summary>
        /// The id of the branding theme, if brandingThemeCode is set on the invoice.  Branding themes can be retrieved using the SalesSettings endpoint.
        /// </summary>
        /// <value>The id of the branding theme, if brandingThemeCode is set on the invoice.  Branding themes can be retrieved using the SalesSettings endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("BrandingThemeId")]
        public long? BrandingThemeId { get { return this.BrandingThemeIdOption; } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; }

        /// <summary>
        /// The cid number (norwegian: KID), if present.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if present.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } }

        /// <summary>
        /// Used to track the state of ContractNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractNoOption { get; }

        /// <summary>
        /// The contract number, if set on the invoice.
        /// </summary>
        /// <value>The contract number, if set on the invoice.</value>
        /* <example>123-244A</example> */
        [JsonPropertyName("ContractNo")]
        public string? ContractNo { get { return this.ContractNoOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The created timestamp of the invoice object.  If the invoice was created and sent from Go, the created timestamp is the timestamp the order (invoice draft) was first created.  If imported, the created timestamp will represent the timestamp of the import.
        /// </summary>
        /// <value>The created timestamp of the invoice object.  If the invoice was created and sent from Go, the created timestamp is the timestamp the order (invoice draft) was first created.  If imported, the created timestamp will represent the timestamp of the import.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The standard currency code for the invoice.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK.
        /// </summary>
        /// <value>The standard currency code for the invoice.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK.</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; }

        /// <summary>
        /// The normalized currency exchange rate.  Always base 1.
        /// </summary>
        /// <value>The normalized currency exchange rate.  Always base 1.</value>
        /* <example>9.2592</example> */
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; }

        /// <summary>
        /// The custom matching reference, if set.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).
        /// </summary>
        /// <value>The custom matching reference, if set.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } }

        /// <summary>
        /// Used to track the state of CustomerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerIdOption { get; }

        /// <summary>
        /// The identifier of the customer this invoice is related to.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The identifier of the customer this invoice is related to.  Customers can be queried and identified using the Customer service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerId")]
        public long? CustomerId { get { return this.CustomerIdOption; } }

        /// <summary>
        /// Used to track the state of CustomerNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerNoOption { get; }

        /// <summary>
        /// The customer number for the customer this invoice relates to.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The customer number for the customer this invoice relates to.  Customers can be queried and identified using the Customer service.</value>
        /* <example>10010</example> */
        [JsonPropertyName("CustomerNo")]
        public long? CustomerNo { get { return this.CustomerNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomerReferenceOption { get; }

        /// <summary>
        /// The customer reference (ie buyers reference), if set.  This property is often used to give the receiver of the invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned,  otherwise the \&quot;Your Reference\&quot; text used on the invoice will be returned.
        /// </summary>
        /// <value>The customer reference (ie buyers reference), if set.  This property is often used to give the receiver of the invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned,  otherwise the \&quot;Your Reference\&quot; text used on the invoice will be returned.</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomerReference")]
        public string? CustomerReference { get { return this.CustomerReferenceOption; } }

        /// <summary>
        /// Used to track the state of CustomerReferenceContactPersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerReferenceContactPersonIdOption { get; }

        /// <summary>
        /// The customer reference contact person id (ie buyers reference).  The default use of customer reference when invoicing from Go, is to reference a customer contact person.  If this property is set, the string property customerReference will have no value.  Contact persons can be retrieved using the ContactPerson endpoint.
        /// </summary>
        /// <value>The customer reference contact person id (ie buyers reference).  The default use of customer reference when invoicing from Go, is to reference a customer contact person.  If this property is set, the string property customerReference will have no value.  Contact persons can be retrieved using the ContactPerson endpoint.</value>
        /* <example>43972</example> */
        [JsonPropertyName("CustomerReferenceContactPersonId")]
        public long? CustomerReferenceContactPersonId { get { return this.CustomerReferenceContactPersonIdOption; } }

        /// <summary>
        /// Used to track the state of DeliveryAddress1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddress1Option { get; }

        /// <summary>
        /// The delivery address primary line as it was set when the invoice was delivered, if set and delivered from Go.
        /// </summary>
        /// <value>The delivery address primary line as it was set when the invoice was delivered, if set and delivered from Go.</value>
        /* <example>Street Address 1</example> */
        [JsonPropertyName("DeliveryAddress1")]
        public string? DeliveryAddress1 { get { return this.DeliveryAddress1Option; } }

        /// <summary>
        /// Used to track the state of DeliveryAddress2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddress2Option { get; }

        /// <summary>
        /// The delivery address secondary line as it was set when the invoice was delivered, if set and delivered from Go.
        /// </summary>
        /// <value>The delivery address secondary line as it was set when the invoice was delivered, if set and delivered from Go.</value>
        /* <example>Apartment 101</example> */
        [JsonPropertyName("DeliveryAddress2")]
        public string? DeliveryAddress2 { get { return this.DeliveryAddress2Option; } }

        /// <summary>
        /// Used to track the state of DeliveryAddressCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressCityOption { get; }

        /// <summary>
        /// The delivery address city as it was set when the invoice was delivered, if set and delivered from Go.
        /// </summary>
        /// <value>The delivery address city as it was set when the invoice was delivered, if set and delivered from Go.</value>
        /* <example>Oslo</example> */
        [JsonPropertyName("DeliveryAddressCity")]
        public string? DeliveryAddressCity { get { return this.DeliveryAddressCityOption; } }

        /// <summary>
        /// Used to track the state of DeliveryAddressCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressCountryCodeOption { get; }

        /// <summary>
        /// The delivery address country code as it was set when the invoice was delivered, if set and delivered from Go.  The code is ISO 3166-1 alfa-2 country code (Two characters)
        /// </summary>
        /// <value>The delivery address country code as it was set when the invoice was delivered, if set and delivered from Go.  The code is ISO 3166-1 alfa-2 country code (Two characters)</value>
        /* <example>NO</example> */
        [JsonPropertyName("DeliveryAddressCountryCode")]
        public string? DeliveryAddressCountryCode { get { return this.DeliveryAddressCountryCodeOption; } }

        /// <summary>
        /// Used to track the state of DeliveryAddressZipCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressZipCodeOption { get; }

        /// <summary>
        /// The delivery address zip code as it was set when the invoice was delivered, if set and delivered from Go.
        /// </summary>
        /// <value>The delivery address zip code as it was set when the invoice was delivered, if set and delivered from Go.</value>
        /* <example>1337</example> */
        [JsonPropertyName("DeliveryAddressZipCode")]
        public string? DeliveryAddressZipCode { get { return this.DeliveryAddressZipCodeOption; } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DeliveryDateOption { get; }

        /// <summary>
        /// The delivery date set on the invoice.
        /// </summary>
        /// <value>The delivery date set on the invoice.</value>
        /* <example>Wed Jan 01 01:00:00 CET 2020</example> */
        [JsonPropertyName("DeliveryDate")]
        public DateOnly? DeliveryDate { get { return this.DeliveryDateOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryTermOption { get; }

        /// <summary>
        /// The delivery term of the invoice.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.
        /// </summary>
        /// <value>The delivery term of the invoice.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.</value>
        /* <example>DAP</example> */
        [JsonPropertyName("DeliveryTerm")]
        public string? DeliveryTerm { get { return this.DeliveryTermOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeliveryTermIdOption { get; }

        /// <summary>
        /// The id of the delivery term of the invoice.
        /// </summary>
        /// <value>The id of the delivery term of the invoice.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DeliveryTermId")]
        public long? DeliveryTermId { get { return this.DeliveryTermIdOption; } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department for the invoice, if set.  Note that this is the department set in the header of the invoice.  The invoice lines might specify other departments or no department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The code of the department for the invoice, if set.  Note that this is the department set in the header of the invoice.  The invoice lines might specify other departments or no department.  Departments can be queried and identified using the Department service.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; }

        /// <summary>
        /// The id of the department, if departmentCode is set on the invoice.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The id of the department, if departmentCode is set on the invoice.  Departments can be queried and identified using the Department service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with the invoice, if set.  Note that this is the dimension 1 set in the header of the invoice.  The invoice lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the invoice, if set.  Note that this is the dimension 1 set in the header of the invoice.  The invoice lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</value>
        /* <example>dimcode111</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; }

        /// <summary>
        /// The id of the dimension 1 associated with the invoice, if dim1Code is set.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the invoice, if dim1Code is set.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with the invoice.  Note that this is the dimension 2 set in the header of the invoice.  The invoice lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the invoice.  Note that this is the dimension 2 set in the header of the invoice.  The invoice lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</value>
        /* <example>dimcode222</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; }

        /// <summary>
        /// The id of the dimension 2 associated with the invoice, if dim2Code is set.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the invoice, if dim2Code is set.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with the invoice.  Note that this is the dimension 3 set in the header of the invoice.  The invoice lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the invoice.  Note that this is the dimension 3 set in the header of the invoice.  The invoice lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue services.</value>
        /* <example>dimcode333</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; }

        /// <summary>
        /// The id of the dimension 3 associated with the invoice, if dim3Code is set.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the invoice, if dim3Code is set.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DueDateOption { get; }

        /// <summary>
        /// The due date of the invoice.
        /// </summary>
        /// <value>The due date of the invoice.</value>
        /* <example>Fri Aug 05 02:00:00 CEST 2022</example> */
        [JsonPropertyName("DueDate")]
        public DateOnly? DueDate { get { return this.DueDateOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; }

        /// <summary>
        /// The ExternalImportReference, if set.  This property can be set by integrations posting vouchers to Go or creating invoice drafts, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.
        /// </summary>
        /// <value>The ExternalImportReference, if set.  This property can be set by integrations posting vouchers to Go or creating invoice drafts, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The identifier of the invoice and the posted voucher.  The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  If the invoice was first created in Go as a draft, the id is consistent from the outgoinginvoice draft, the sent invoice and the posted invoice voucher.
        /// </summary>
        /// <value>The identifier of the invoice and the posted voucher.  The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  If the invoice was first created in Go as a draft, the id is consistent from the outgoinginvoice draft, the sent invoice and the posted invoice voucher.</value>
        /* <example>ee373540-ca8d-4562-8fb6-6fb52de47722</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ImportedOrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedOrderNoOption { get; }

        /// <summary>
        /// The imported order number.  Can only be set on invoice drafts created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.
        /// </summary>
        /// <value>The imported order number.  Can only be set on invoice drafts created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.</value>
        /* <example>23145</example> */
        [JsonPropertyName("ImportedOrderNo")]
        public long? ImportedOrderNo { get { return this.ImportedOrderNoOption; } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> InvoiceNoOption { get; }

        /// <summary>
        /// The invoice number of the invoice.
        /// </summary>
        /// <value>The invoice number of the invoice.</value>
        /* <example>15798</example> */
        [JsonPropertyName("InvoiceNo")]
        public long? InvoiceNo { get { return this.InvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of IsCreatedByCurrentIntegration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreatedByCurrentIntegrationOption { get; }

        /// <summary>
        /// A value indicating whether the invoice is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authenticated.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.  Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice.
        /// </summary>
        /// <value>A value indicating whether the invoice is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authenticated.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.  Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsCreatedByCurrentIntegration")]
        public bool? IsCreatedByCurrentIntegration { get { return this.IsCreatedByCurrentIntegrationOption; } }

        /// <summary>
        /// Used to track the state of IsReversed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReversedOption { get; }

        /// <summary>
        /// A value indicating whether this invoice voucher have been reversed.  If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused.  Only possible to reverse an invoice voucher using the OutgoingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.
        /// </summary>
        /// <value>A value indicating whether this invoice voucher have been reversed.  If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused.  Only possible to reverse an invoice voucher using the OutgoingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsReversed")]
        public bool? IsReversed { get { return this.IsReversedOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the invoice.  On sent invoices, no direct invoice information or related account transactions can change, but last changed will trigger when the invoice is due, and when (if applicable) the next reminder stages for the invoice is triggered in the system.
        /// </summary>
        /// <value>The timestamp of the last change of the invoice.  On sent invoices, no direct invoice information or related account transactions can change, but last changed will trigger when the invoice is due, and when (if applicable) the next reminder stages for the invoice is triggered in the system.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.
        /// </summary>
        /// <value>The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.</value>
        /* <example>4A</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; }

        /// <summary>
        /// The id of the location dimension associated with the invoice.
        /// </summary>
        /// <value>The id of the location dimension associated with the invoice.</value>
        /* <example>123546</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } }

        /// <summary>
        /// Used to track the state of MatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MatchIdOption { get; }

        /// <summary>
        /// The match id of the customer ledger entry this invoice relate to, if present.  Available if the invoice have a match with other customer ledger entries - typically payment transactions.  Can be used with the CustomerLedger endpoint to retrieve the matched transactions.
        /// </summary>
        /// <value>The match id of the customer ledger entry this invoice relate to, if present.  Available if the invoice have a match with other customer ledger entries - typically payment transactions.  Can be used with the CustomerLedger endpoint to retrieve the matched transactions.</value>
        /* <example>123456</example> */
        [JsonPropertyName("MatchId")]
        public long? MatchId { get { return this.MatchIdOption; } }

        /// <summary>
        /// Used to track the state of NetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetAmountOption { get; }

        /// <summary>
        /// The net amount of the invoice (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The net amount of the invoice (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>1000.33</example> */
        [JsonPropertyName("NetAmount")]
        public double? NetAmount { get { return this.NetAmountOption; } }

        /// <summary>
        /// Used to track the state of NetPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetPostedAmountOption { get; }

        /// <summary>
        /// The net posted amount of the invoice (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate.
        /// </summary>
        /// <value>The net posted amount of the invoice (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate.</value>
        /* <example>1000.33</example> */
        [JsonPropertyName("NetPostedAmount")]
        public double? NetPostedAmount { get { return this.NetPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of OrderDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> OrderDateOption { get; }

        /// <summary>
        /// The order date of the invoice.  OrderDate will default to the createdDate, but can be controlled and set in imports creating invoice drafts.
        /// </summary>
        /// <value>The order date of the invoice.  OrderDate will default to the createdDate, but can be controlled and set in imports creating invoice drafts.</value>
        /* <example>Fri Aug 05 02:00:00 CEST 2022</example> */
        [JsonPropertyName("OrderDate")]
        public DateOnly? OrderDate { get { return this.OrderDateOption; } }

        /// <summary>
        /// Used to track the state of OrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OrderNoOption { get; }

        /// <summary>
        /// The order number of the invoice.  Only present if the invoice originated from an invoice draft created in Go.  For invoice drafts created in Go, this value is autogenerated.
        /// </summary>
        /// <value>The order number of the invoice.  Only present if the invoice originated from an invoice draft created in Go.  For invoice drafts created in Go, this value is autogenerated.</value>
        /* <example>6065</example> */
        [JsonPropertyName("OrderNo")]
        public long? OrderNo { get { return this.OrderNoOption; } }

        /// <summary>
        /// Used to track the state of PaymentTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PaymentTermOption { get; }

        /// <summary>
        /// The payment term of the invoice.  This is the number of days after an invoice is sent until it is due (days between the voucher date and the due date).
        /// </summary>
        /// <value>The payment term of the invoice.  This is the number of days after an invoice is sent until it is due (days between the voucher date and the due date).</value>
        /* <example>14</example> */
        [JsonPropertyName("PaymentTerm")]
        public int? PaymentTerm { get { return this.PaymentTermOption; } }

        /// <summary>
        /// Used to track the state of PaymentTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PaymentTermIdOption { get; }

        /// <summary>
        /// The id of the payment term of the invoice.
        /// </summary>
        /// <value>The id of the payment term of the invoice.</value>
        [JsonPropertyName("PaymentTermId")]
        public long? PaymentTermId { get { return this.PaymentTermIdOption; } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The project code, if set on the invoice.  Note that this is the project set in the header of the invoice.  The invoice lines might specify other projects or no project.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project code, if set on the invoice.  Note that this is the project set in the header of the invoice.  The invoice lines might specify other projects or no project.  Projects can be queried and identified using the Project service.</value>
        /* <example>100</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The project id, if projectCode is set.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project id, if projectCode is set.  Projects can be queried and identified using the Project service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of PurchaseOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurchaseOrderReferenceOption { get; }

        /// <summary>
        /// The purchase order reference, if set.  The property can be used to reference purchase order places by the customer.
        /// </summary>
        /// <value>The purchase order reference, if set.  The property can be used to reference purchase order places by the customer.</value>
        /* <example>qwerty12345</example> */
        [JsonPropertyName("PurchaseOrderReference")]
        public string? PurchaseOrderReference { get { return this.PurchaseOrderReferenceOption; } }

        /// <summary>
        /// Used to track the state of RelatedInvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RelatedInvoiceNoOption { get; }

        /// <summary>
        /// The related invoice number.  Can be available on credit notes, if the credit note is created and sent from Go.  If available, this property will reference the original invoice being credited.
        /// </summary>
        /// <value>The related invoice number.  Can be available on credit notes, if the credit note is created and sent from Go.  If available, this property will reference the original invoice being credited.</value>
        /* <example>12345</example> */
        [JsonPropertyName("RelatedInvoiceNo")]
        public long? RelatedInvoiceNo { get { return this.RelatedInvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeIdOption { get; }

        /// <summary>
        /// The id of the employee set as the seller reference, if SellerReferenceEmployeeNo is set on the invoice.
        /// </summary>
        /// <value>The id of the employee set as the seller reference, if SellerReferenceEmployeeNo is set on the invoice.</value>
        /* <example>756319</example> */
        [JsonPropertyName("SellersReferenceEmployeeId")]
        public long? SellersReferenceEmployeeId { get { return this.SellersReferenceEmployeeIdOption; } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeNoOption { get; }

        /// <summary>
        /// The employee number of the reference to the seller, if set.  When a user view the invoice information in GUI, this property is referred to as our reference.
        /// </summary>
        /// <value>The employee number of the reference to the seller, if set.  When a user view the invoice information in GUI, this property is referred to as our reference.</value>
        /* <example>1</example> */
        [JsonPropertyName("SellersReferenceEmployeeNo")]
        public long? SellersReferenceEmployeeNo { get { return this.SellersReferenceEmployeeNoOption; } }

        /// <summary>
        /// Used to track the state of SentDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SentDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the invoice was sent from Go.  Available only for invoice created and sent from Go.  Blank if the invoice was posted to Go using an import.
        /// </summary>
        /// <value>The timestamp of when the invoice was sent from Go.  Available only for invoice created and sent from Go.  Blank if the invoice was posted to Go using an import.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("SentDateTimeOffset")]
        public DateTime? SentDateTimeOffset { get { return this.SentDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalAmountOption { get; }

        /// <summary>
        /// The total amount of the invoice (vat inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The total amount of the invoice (vat inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>12500.33</example> */
        [JsonPropertyName("TotalAmount")]
        public double? TotalAmount { get { return this.TotalAmountOption; } }

        /// <summary>
        /// Used to track the state of TotalPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalPostedAmountOption { get; }

        /// <summary>
        /// The total posted amount of the invoice (vat inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.
        /// </summary>
        /// <value>The total posted amount of the invoice (vat inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.</value>
        /* <example>12500.33</example> */
        [JsonPropertyName("TotalPostedAmount")]
        public double? TotalPostedAmount { get { return this.TotalPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VoucherDateOption { get; }

        /// <summary>
        /// The date of the invoice voucher.  This represents the date of the voucher and the document date of the invoice.
        /// </summary>
        /// <value>The date of the invoice voucher.  This represents the date of the voucher and the document date of the invoice.</value>
        /* <example>Fri Aug 05 02:00:00 CEST 2022</example> */
        [JsonPropertyName("VoucherDate")]
        public DateOnly? VoucherDate { get { return this.VoucherDateOption; } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number of the invoice voucher.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.
        /// </summary>
        /// <value>The voucher number of the invoice voucher.  This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.</value>
        /* <example>15545</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutgoingInvoiceDto {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceLastChangedDateTimeOffset: ").Append(BalanceLastChangedDateTimeOffset).Append("\n");
            sb.Append("  BrandingThemeCode: ").Append(BrandingThemeCode).Append("\n");
            sb.Append("  BrandingThemeId: ").Append(BrandingThemeId).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ContractNo: ").Append(ContractNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerNo: ").Append(CustomerNo).Append("\n");
            sb.Append("  CustomerReference: ").Append(CustomerReference).Append("\n");
            sb.Append("  CustomerReferenceContactPersonId: ").Append(CustomerReferenceContactPersonId).Append("\n");
            sb.Append("  DeliveryAddress1: ").Append(DeliveryAddress1).Append("\n");
            sb.Append("  DeliveryAddress2: ").Append(DeliveryAddress2).Append("\n");
            sb.Append("  DeliveryAddressCity: ").Append(DeliveryAddressCity).Append("\n");
            sb.Append("  DeliveryAddressCountryCode: ").Append(DeliveryAddressCountryCode).Append("\n");
            sb.Append("  DeliveryAddressZipCode: ").Append(DeliveryAddressZipCode).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryTerm: ").Append(DeliveryTerm).Append("\n");
            sb.Append("  DeliveryTermId: ").Append(DeliveryTermId).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedOrderNo: ").Append(ImportedOrderNo).Append("\n");
            sb.Append("  InvoiceDeliveryType: ").Append(InvoiceDeliveryType).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  IsCreatedByCurrentIntegration: ").Append(IsCreatedByCurrentIntegration).Append("\n");
            sb.Append("  IsReversed: ").Append(IsReversed).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  NetPostedAmount: ").Append(NetPostedAmount).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderNo: ").Append(OrderNo).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  PaymentTermId: ").Append(PaymentTermId).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurchaseOrderReference: ").Append(PurchaseOrderReference).Append("\n");
            sb.Append("  RelatedInvoiceNo: ").Append(RelatedInvoiceNo).Append("\n");
            sb.Append("  SellersReferenceEmployeeId: ").Append(SellersReferenceEmployeeId).Append("\n");
            sb.Append("  SellersReferenceEmployeeNo: ").Append(SellersReferenceEmployeeNo).Append("\n");
            sb.Append("  SentDateTimeOffset: ").Append(SentDateTimeOffset).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalPostedAmount: ").Append(TotalPostedAmount).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceDto" />
    /// </summary>
    public class OutgoingInvoiceDtoJsonConverter : JsonConverter<OutgoingInvoiceDto>
    {
        /// <summary>
        /// The format to use to serialize BalanceLastChangedDateTimeOffset
        /// </summary>
        public static string BalanceLastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize OrderDate
        /// </summary>
        public static string OrderDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize SentDateTimeOffset
        /// </summary>
        public static string SentDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="OutgoingInvoiceDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OutgoingInvoiceDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> balance = default;
            Option<DateTime?> balanceLastChangedDateTimeOffset = default;
            Option<string?> brandingThemeCode = default;
            Option<long?> brandingThemeId = default;
            Option<string?> cid = default;
            Option<string?> contractNo = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<string?> customMatchingReference = default;
            Option<long?> customerId = default;
            Option<long?> customerNo = default;
            Option<string?> customerReference = default;
            Option<long?> customerReferenceContactPersonId = default;
            Option<string?> deliveryAddress1 = default;
            Option<string?> deliveryAddress2 = default;
            Option<string?> deliveryAddressCity = default;
            Option<string?> deliveryAddressCountryCode = default;
            Option<string?> deliveryAddressZipCode = default;
            Option<DateOnly?> deliveryDate = default;
            Option<string?> deliveryTerm = default;
            Option<long?> deliveryTermId = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<DateOnly?> dueDate = default;
            Option<string?> externalImportReference = default;
            Option<Guid?> id = default;
            Option<long?> importedOrderNo = default;
            Option<InvoiceDeliveryType?> invoiceDeliveryType = default;
            Option<long?> invoiceNo = default;
            Option<bool?> isCreatedByCurrentIntegration = default;
            Option<bool?> isReversed = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<long?> matchId = default;
            Option<double?> netAmount = default;
            Option<double?> netPostedAmount = default;
            Option<DateOnly?> orderDate = default;
            Option<long?> orderNo = default;
            Option<int?> paymentTerm = default;
            Option<long?> paymentTermId = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<string?> purchaseOrderReference = default;
            Option<long?> relatedInvoiceNo = default;
            Option<long?> sellersReferenceEmployeeId = default;
            Option<long?> sellersReferenceEmployeeNo = default;
            Option<DateTime?> sentDateTimeOffset = default;
            Option<double?> totalAmount = default;
            Option<double?> totalPostedAmount = default;
            Option<DateOnly?> voucherDate = default;
            Option<long?> voucherNo = default;
            Option<OutgoingInvoiceVoucherType?> voucherType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BalanceLastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balanceLastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "BrandingThemeCode":
                            brandingThemeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "BrandingThemeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                brandingThemeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ContractNo":
                            contractNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerReference":
                            customerReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerReferenceContactPersonId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerReferenceContactPersonId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DeliveryAddress1":
                            deliveryAddress1 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddress2":
                            deliveryAddress2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressCity":
                            deliveryAddressCity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressCountryCode":
                            deliveryAddressCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressZipCode":
                            deliveryAddressZipCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DeliveryTerm":
                            deliveryTerm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ImportedOrderNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedOrderNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceDeliveryType":
                            string? invoiceDeliveryTypeRawValue = utf8JsonReader.GetString();
                            if (invoiceDeliveryTypeRawValue != null)
                                invoiceDeliveryType = new Option<InvoiceDeliveryType?>(InvoiceDeliveryTypeValueConverter.FromStringOrDefault(invoiceDeliveryTypeRawValue));
                            break;
                        case "InvoiceNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsCreatedByCurrentIntegration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCreatedByCurrentIntegration = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsReversed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReversed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "MatchId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                matchId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NetAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "NetPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "OrderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "OrderNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                orderNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PaymentTerm":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTerm = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PaymentTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PurchaseOrderReference":
                            purchaseOrderReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RelatedInvoiceNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                relatedInvoiceNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SellersReferenceEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SellersReferenceEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SentDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sentDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "TotalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "TotalPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherType":
                            string? voucherTypeRawValue = utf8JsonReader.GetString();
                            if (voucherTypeRawValue != null)
                                voucherType = new Option<OutgoingInvoiceVoucherType?>(OutgoingInvoiceVoucherTypeValueConverter.FromStringOrDefault(voucherTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class OutgoingInvoiceDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OutgoingInvoiceDto.");

            if (isReversed.IsSet && isReversed.Value == null)
                throw new ArgumentNullException(nameof(isReversed), "Property is not nullable for class OutgoingInvoiceDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class OutgoingInvoiceDto.");

            if (netAmount.IsSet && netAmount.Value == null)
                throw new ArgumentNullException(nameof(netAmount), "Property is not nullable for class OutgoingInvoiceDto.");

            if (netPostedAmount.IsSet && netPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(netPostedAmount), "Property is not nullable for class OutgoingInvoiceDto.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class OutgoingInvoiceDto.");

            if (totalPostedAmount.IsSet && totalPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(totalPostedAmount), "Property is not nullable for class OutgoingInvoiceDto.");

            if (voucherDate.IsSet && voucherDate.Value == null)
                throw new ArgumentNullException(nameof(voucherDate), "Property is not nullable for class OutgoingInvoiceDto.");

            if (voucherNo.IsSet && voucherNo.Value == null)
                throw new ArgumentNullException(nameof(voucherNo), "Property is not nullable for class OutgoingInvoiceDto.");

            return new OutgoingInvoiceDto(balance, balanceLastChangedDateTimeOffset, brandingThemeCode, brandingThemeId, cid, contractNo, createdDateTimeOffset, currencyCode, currencyExchangeRate, customMatchingReference, customerId, customerNo, customerReference, customerReferenceContactPersonId, deliveryAddress1, deliveryAddress2, deliveryAddressCity, deliveryAddressCountryCode, deliveryAddressZipCode, deliveryDate, deliveryTerm, deliveryTermId, departmentCode, departmentId, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, dueDate, externalImportReference, id, importedOrderNo, invoiceDeliveryType, invoiceNo, isCreatedByCurrentIntegration, isReversed, lastChangedDateTimeOffset, locationCode, locationId, matchId, netAmount, netPostedAmount, orderDate, orderNo, paymentTerm, paymentTermId, projectCode, projectId, purchaseOrderReference, relatedInvoiceNo, sellersReferenceEmployeeId, sellersReferenceEmployeeNo, sentDateTimeOffset, totalAmount, totalPostedAmount, voucherDate, voucherNo, voucherType);
        }

        /// <summary>
        /// Serializes a <see cref="OutgoingInvoiceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceDto outgoingInvoiceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, outgoingInvoiceDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OutgoingInvoiceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OutgoingInvoiceDto outgoingInvoiceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (outgoingInvoiceDto.BalanceOption.IsSet)
                if (outgoingInvoiceDto.BalanceOption.Value != null)
                    writer.WriteNumber("Balance", outgoingInvoiceDto.BalanceOption.Value!.Value);
                else
                    writer.WriteNull("Balance");

            if (outgoingInvoiceDto.BalanceLastChangedDateTimeOffsetOption.IsSet)
                if (outgoingInvoiceDto.BalanceLastChangedDateTimeOffsetOption.Value != null)
                    writer.WriteString("BalanceLastChangedDateTimeOffset", outgoingInvoiceDto.BalanceLastChangedDateTimeOffsetOption.Value!.Value.ToString(BalanceLastChangedDateTimeOffsetFormat));
                else
                    writer.WriteNull("BalanceLastChangedDateTimeOffset");

            if (outgoingInvoiceDto.BrandingThemeCodeOption.IsSet)
                if (outgoingInvoiceDto.BrandingThemeCodeOption.Value != null)
                    writer.WriteString("BrandingThemeCode", outgoingInvoiceDto.BrandingThemeCode);
                else
                    writer.WriteNull("BrandingThemeCode");

            if (outgoingInvoiceDto.BrandingThemeIdOption.IsSet)
                if (outgoingInvoiceDto.BrandingThemeIdOption.Value != null)
                    writer.WriteNumber("BrandingThemeId", outgoingInvoiceDto.BrandingThemeIdOption.Value!.Value);
                else
                    writer.WriteNull("BrandingThemeId");

            if (outgoingInvoiceDto.CidOption.IsSet)
                if (outgoingInvoiceDto.CidOption.Value != null)
                    writer.WriteString("Cid", outgoingInvoiceDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (outgoingInvoiceDto.ContractNoOption.IsSet)
                if (outgoingInvoiceDto.ContractNoOption.Value != null)
                    writer.WriteString("ContractNo", outgoingInvoiceDto.ContractNo);
                else
                    writer.WriteNull("ContractNo");

            if (outgoingInvoiceDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", outgoingInvoiceDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (outgoingInvoiceDto.CurrencyCodeOption.IsSet)
                if (outgoingInvoiceDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", outgoingInvoiceDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (outgoingInvoiceDto.CurrencyExchangeRateOption.IsSet)
                if (outgoingInvoiceDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", outgoingInvoiceDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (outgoingInvoiceDto.CustomMatchingReferenceOption.IsSet)
                if (outgoingInvoiceDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", outgoingInvoiceDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (outgoingInvoiceDto.CustomerIdOption.IsSet)
                if (outgoingInvoiceDto.CustomerIdOption.Value != null)
                    writer.WriteNumber("CustomerId", outgoingInvoiceDto.CustomerIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerId");

            if (outgoingInvoiceDto.CustomerNoOption.IsSet)
                if (outgoingInvoiceDto.CustomerNoOption.Value != null)
                    writer.WriteNumber("CustomerNo", outgoingInvoiceDto.CustomerNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerNo");

            if (outgoingInvoiceDto.CustomerReferenceOption.IsSet)
                if (outgoingInvoiceDto.CustomerReferenceOption.Value != null)
                    writer.WriteString("CustomerReference", outgoingInvoiceDto.CustomerReference);
                else
                    writer.WriteNull("CustomerReference");

            if (outgoingInvoiceDto.CustomerReferenceContactPersonIdOption.IsSet)
                if (outgoingInvoiceDto.CustomerReferenceContactPersonIdOption.Value != null)
                    writer.WriteNumber("CustomerReferenceContactPersonId", outgoingInvoiceDto.CustomerReferenceContactPersonIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerReferenceContactPersonId");

            if (outgoingInvoiceDto.DeliveryAddress1Option.IsSet)
                if (outgoingInvoiceDto.DeliveryAddress1Option.Value != null)
                    writer.WriteString("DeliveryAddress1", outgoingInvoiceDto.DeliveryAddress1);
                else
                    writer.WriteNull("DeliveryAddress1");

            if (outgoingInvoiceDto.DeliveryAddress2Option.IsSet)
                if (outgoingInvoiceDto.DeliveryAddress2Option.Value != null)
                    writer.WriteString("DeliveryAddress2", outgoingInvoiceDto.DeliveryAddress2);
                else
                    writer.WriteNull("DeliveryAddress2");

            if (outgoingInvoiceDto.DeliveryAddressCityOption.IsSet)
                if (outgoingInvoiceDto.DeliveryAddressCityOption.Value != null)
                    writer.WriteString("DeliveryAddressCity", outgoingInvoiceDto.DeliveryAddressCity);
                else
                    writer.WriteNull("DeliveryAddressCity");

            if (outgoingInvoiceDto.DeliveryAddressCountryCodeOption.IsSet)
                if (outgoingInvoiceDto.DeliveryAddressCountryCodeOption.Value != null)
                    writer.WriteString("DeliveryAddressCountryCode", outgoingInvoiceDto.DeliveryAddressCountryCode);
                else
                    writer.WriteNull("DeliveryAddressCountryCode");

            if (outgoingInvoiceDto.DeliveryAddressZipCodeOption.IsSet)
                if (outgoingInvoiceDto.DeliveryAddressZipCodeOption.Value != null)
                    writer.WriteString("DeliveryAddressZipCode", outgoingInvoiceDto.DeliveryAddressZipCode);
                else
                    writer.WriteNull("DeliveryAddressZipCode");

            if (outgoingInvoiceDto.DeliveryDateOption.IsSet)
                if (outgoingInvoiceDto.DeliveryDateOption.Value != null)
                    writer.WriteString("DeliveryDate", outgoingInvoiceDto.DeliveryDateOption.Value!.Value.ToString(DeliveryDateFormat));
                else
                    writer.WriteNull("DeliveryDate");

            if (outgoingInvoiceDto.DeliveryTermOption.IsSet)
                if (outgoingInvoiceDto.DeliveryTermOption.Value != null)
                    writer.WriteString("DeliveryTerm", outgoingInvoiceDto.DeliveryTerm);
                else
                    writer.WriteNull("DeliveryTerm");

            if (outgoingInvoiceDto.DeliveryTermIdOption.IsSet)
                if (outgoingInvoiceDto.DeliveryTermIdOption.Value != null)
                    writer.WriteNumber("DeliveryTermId", outgoingInvoiceDto.DeliveryTermIdOption.Value!.Value);
                else
                    writer.WriteNull("DeliveryTermId");

            if (outgoingInvoiceDto.DepartmentCodeOption.IsSet)
                if (outgoingInvoiceDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", outgoingInvoiceDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (outgoingInvoiceDto.DepartmentIdOption.IsSet)
                if (outgoingInvoiceDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", outgoingInvoiceDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (outgoingInvoiceDto.Dim1CodeOption.IsSet)
                if (outgoingInvoiceDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", outgoingInvoiceDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (outgoingInvoiceDto.Dim1IdOption.IsSet)
                if (outgoingInvoiceDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", outgoingInvoiceDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (outgoingInvoiceDto.Dim2CodeOption.IsSet)
                if (outgoingInvoiceDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", outgoingInvoiceDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (outgoingInvoiceDto.Dim2IdOption.IsSet)
                if (outgoingInvoiceDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", outgoingInvoiceDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (outgoingInvoiceDto.Dim3CodeOption.IsSet)
                if (outgoingInvoiceDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", outgoingInvoiceDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (outgoingInvoiceDto.Dim3IdOption.IsSet)
                if (outgoingInvoiceDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", outgoingInvoiceDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (outgoingInvoiceDto.DueDateOption.IsSet)
                if (outgoingInvoiceDto.DueDateOption.Value != null)
                    writer.WriteString("DueDate", outgoingInvoiceDto.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("DueDate");

            if (outgoingInvoiceDto.ExternalImportReferenceOption.IsSet)
                if (outgoingInvoiceDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", outgoingInvoiceDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (outgoingInvoiceDto.IdOption.IsSet)
                writer.WriteString("Id", outgoingInvoiceDto.IdOption.Value!.Value);

            if (outgoingInvoiceDto.ImportedOrderNoOption.IsSet)
                if (outgoingInvoiceDto.ImportedOrderNoOption.Value != null)
                    writer.WriteNumber("ImportedOrderNo", outgoingInvoiceDto.ImportedOrderNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedOrderNo");

            if (outgoingInvoiceDto.InvoiceDeliveryTypeOption.IsSet)
                if (outgoingInvoiceDto.InvoiceDeliveryTypeOption!.Value != null)
                {
                    var invoiceDeliveryTypeRawValue = InvoiceDeliveryTypeValueConverter.ToJsonValue(outgoingInvoiceDto.InvoiceDeliveryTypeOption.Value!.Value);
                    writer.WriteString("InvoiceDeliveryType", invoiceDeliveryTypeRawValue);
                }
                else
                    writer.WriteNull("InvoiceDeliveryType");
            if (outgoingInvoiceDto.InvoiceNoOption.IsSet)
                if (outgoingInvoiceDto.InvoiceNoOption.Value != null)
                    writer.WriteNumber("InvoiceNo", outgoingInvoiceDto.InvoiceNoOption.Value!.Value);
                else
                    writer.WriteNull("InvoiceNo");

            if (outgoingInvoiceDto.IsCreatedByCurrentIntegrationOption.IsSet)
                if (outgoingInvoiceDto.IsCreatedByCurrentIntegrationOption.Value != null)
                    writer.WriteBoolean("IsCreatedByCurrentIntegration", outgoingInvoiceDto.IsCreatedByCurrentIntegrationOption.Value!.Value);
                else
                    writer.WriteNull("IsCreatedByCurrentIntegration");

            if (outgoingInvoiceDto.IsReversedOption.IsSet)
                writer.WriteBoolean("IsReversed", outgoingInvoiceDto.IsReversedOption.Value!.Value);

            if (outgoingInvoiceDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", outgoingInvoiceDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (outgoingInvoiceDto.LocationCodeOption.IsSet)
                if (outgoingInvoiceDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", outgoingInvoiceDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (outgoingInvoiceDto.LocationIdOption.IsSet)
                if (outgoingInvoiceDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", outgoingInvoiceDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (outgoingInvoiceDto.MatchIdOption.IsSet)
                if (outgoingInvoiceDto.MatchIdOption.Value != null)
                    writer.WriteNumber("MatchId", outgoingInvoiceDto.MatchIdOption.Value!.Value);
                else
                    writer.WriteNull("MatchId");

            if (outgoingInvoiceDto.NetAmountOption.IsSet)
                writer.WriteNumber("NetAmount", outgoingInvoiceDto.NetAmountOption.Value!.Value);

            if (outgoingInvoiceDto.NetPostedAmountOption.IsSet)
                writer.WriteNumber("NetPostedAmount", outgoingInvoiceDto.NetPostedAmountOption.Value!.Value);

            if (outgoingInvoiceDto.OrderDateOption.IsSet)
                if (outgoingInvoiceDto.OrderDateOption.Value != null)
                    writer.WriteString("OrderDate", outgoingInvoiceDto.OrderDateOption.Value!.Value.ToString(OrderDateFormat));
                else
                    writer.WriteNull("OrderDate");

            if (outgoingInvoiceDto.OrderNoOption.IsSet)
                if (outgoingInvoiceDto.OrderNoOption.Value != null)
                    writer.WriteNumber("OrderNo", outgoingInvoiceDto.OrderNoOption.Value!.Value);
                else
                    writer.WriteNull("OrderNo");

            if (outgoingInvoiceDto.PaymentTermOption.IsSet)
                if (outgoingInvoiceDto.PaymentTermOption.Value != null)
                    writer.WriteNumber("PaymentTerm", outgoingInvoiceDto.PaymentTermOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTerm");

            if (outgoingInvoiceDto.PaymentTermIdOption.IsSet)
                if (outgoingInvoiceDto.PaymentTermIdOption.Value != null)
                    writer.WriteNumber("PaymentTermId", outgoingInvoiceDto.PaymentTermIdOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTermId");

            if (outgoingInvoiceDto.ProjectCodeOption.IsSet)
                if (outgoingInvoiceDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", outgoingInvoiceDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (outgoingInvoiceDto.ProjectIdOption.IsSet)
                if (outgoingInvoiceDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", outgoingInvoiceDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (outgoingInvoiceDto.PurchaseOrderReferenceOption.IsSet)
                if (outgoingInvoiceDto.PurchaseOrderReferenceOption.Value != null)
                    writer.WriteString("PurchaseOrderReference", outgoingInvoiceDto.PurchaseOrderReference);
                else
                    writer.WriteNull("PurchaseOrderReference");

            if (outgoingInvoiceDto.RelatedInvoiceNoOption.IsSet)
                if (outgoingInvoiceDto.RelatedInvoiceNoOption.Value != null)
                    writer.WriteNumber("RelatedInvoiceNo", outgoingInvoiceDto.RelatedInvoiceNoOption.Value!.Value);
                else
                    writer.WriteNull("RelatedInvoiceNo");

            if (outgoingInvoiceDto.SellersReferenceEmployeeIdOption.IsSet)
                if (outgoingInvoiceDto.SellersReferenceEmployeeIdOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeId", outgoingInvoiceDto.SellersReferenceEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeId");

            if (outgoingInvoiceDto.SellersReferenceEmployeeNoOption.IsSet)
                if (outgoingInvoiceDto.SellersReferenceEmployeeNoOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeNo", outgoingInvoiceDto.SellersReferenceEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeNo");

            if (outgoingInvoiceDto.SentDateTimeOffsetOption.IsSet)
                if (outgoingInvoiceDto.SentDateTimeOffsetOption.Value != null)
                    writer.WriteString("SentDateTimeOffset", outgoingInvoiceDto.SentDateTimeOffsetOption.Value!.Value.ToString(SentDateTimeOffsetFormat));
                else
                    writer.WriteNull("SentDateTimeOffset");

            if (outgoingInvoiceDto.TotalAmountOption.IsSet)
                writer.WriteNumber("TotalAmount", outgoingInvoiceDto.TotalAmountOption.Value!.Value);

            if (outgoingInvoiceDto.TotalPostedAmountOption.IsSet)
                writer.WriteNumber("TotalPostedAmount", outgoingInvoiceDto.TotalPostedAmountOption.Value!.Value);

            if (outgoingInvoiceDto.VoucherDateOption.IsSet)
                writer.WriteString("VoucherDate", outgoingInvoiceDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));

            if (outgoingInvoiceDto.VoucherNoOption.IsSet)
                writer.WriteNumber("VoucherNo", outgoingInvoiceDto.VoucherNoOption.Value!.Value);

            if (outgoingInvoiceDto.VoucherTypeOption.IsSet)
                if (outgoingInvoiceDto.VoucherTypeOption!.Value != null)
                {
                    var voucherTypeRawValue = OutgoingInvoiceVoucherTypeValueConverter.ToJsonValue(outgoingInvoiceDto.VoucherTypeOption.Value!.Value);
                    writer.WriteString("VoucherType", voucherTypeRawValue);
                }
                else
                    writer.WriteNull("VoucherType");
        }
    }
}
