// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for CustomDimensions
    /// </summary>
    public partial class CustomDimensionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDimensionDto" /> class.
        /// </summary>
        /// <param name="code">The code of the custom dimension. The code must be unique for each ordinal (within dim1, dim2 and dim3 respectively).  Go will assign a code automatically, if not provided.</param>
        /// <param name="createdDateTimeOffset">The timestamp of the created date of the custom dimension. UTC time.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier, if present. Provided if this custom dimension was been created in Go by an import.</param>
        /// <param name="externalImportReference">The external import reference. This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each set of custom dimension (unique for dim1, dim2 or dim3).  Any integration with access can set the field (and change it).</param>
        /// <param name="id">The identifier of the custom dimension.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).</param>
        /// <param name="isActive">A value indicating whether this instance is active. Inactive custom dimensions disable the usage of that custom dimension in the GUI.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the custom dimension. UTC time.</param>
        /// <param name="name">The name of the custom dimension</param>
        /// <param name="ordinal">The custom dimension ordinal, providing information on which of the available custom dimension sets this custom dimension belong to (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).</param>
        [JsonConstructor]
        public CustomDimensionDto(Option<string?> code = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<string?> externalImportReference = default, Option<long?> id = default, Option<bool?> isActive = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<string?> name = default, Option<int?> ordinal = default)
        {
            CodeOption = code;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            IsActiveOption = isActive;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            NameOption = name;
            OrdinalOption = ordinal;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the custom dimension. The code must be unique for each ordinal (within dim1, dim2 and dim3 respectively).  Go will assign a code automatically, if not provided.
        /// </summary>
        /// <value>The code of the custom dimension. The code must be unique for each ordinal (within dim1, dim2 and dim3 respectively).  Go will assign a code automatically, if not provided.</value>
        /* <example>4A</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the created date of the custom dimension. UTC time.
        /// </summary>
        /// <value>The timestamp of the created date of the custom dimension. UTC time.</value>
        /* <example>2023-06-05T12:31:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier, if present. Provided if this custom dimension was been created in Go by an import.
        /// </summary>
        /// <value>The created from import journal identifier, if present. Provided if this custom dimension was been created in Go by an import.</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference. This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each set of custom dimension (unique for dim1, dim2 or dim3).  Any integration with access can set the field (and change it).
        /// </summary>
        /// <value>The external import reference. This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each set of custom dimension (unique for dim1, dim2 or dim3).  Any integration with access can set the field (and change it).</value>
        /* <example>abc123-def567</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the custom dimension.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).
        /// </summary>
        /// <value>The identifier of the custom dimension.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// A value indicating whether this instance is active. Inactive custom dimensions disable the usage of that custom dimension in the GUI.
        /// </summary>
        /// <value>A value indicating whether this instance is active. Inactive custom dimensions disable the usage of that custom dimension in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the custom dimension. UTC time.
        /// </summary>
        /// <value>The timestamp of the last change of the custom dimension. UTC time.</value>
        /* <example>2023-06-05T12:31:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the custom dimension
        /// </summary>
        /// <value>The name of the custom dimension</value>
        /* <example>Tickers</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ordinal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrdinalOption { get; private set; }

        /// <summary>
        /// The custom dimension ordinal, providing information on which of the available custom dimension sets this custom dimension belong to (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).
        /// </summary>
        /// <value>The custom dimension ordinal, providing information on which of the available custom dimension sets this custom dimension belong to (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).</value>
        /* <example>1</example> */
        [JsonPropertyName("Ordinal")]
        public int? Ordinal { get { return this.OrdinalOption; } set { this.OrdinalOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDimensionDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 40)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 40.", new [] { "Code" });
            }

            // ExternalImportReference (string) maxLength
            if (this.ExternalImportReference != null && this.ExternalImportReference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ExternalImportReference, length must be less than 50.", new [] { "ExternalImportReference" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Ordinal (int) maximum
            if (this.OrdinalOption.IsSet && this.OrdinalOption.Value > (int)3)
            {
                yield return new ValidationResult("Invalid value for Ordinal, must be a value less than or equal to 3.", new [] { "Ordinal" });
            }

            // Ordinal (int) minimum
            if (this.OrdinalOption.IsSet && this.OrdinalOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Ordinal, must be a value greater than or equal to 1.", new [] { "Ordinal" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomDimensionDto" />
    /// </summary>
    public class CustomDimensionDtoJsonConverter : JsonConverter<CustomDimensionDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CustomDimensionDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomDimensionDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<string?> externalImportReference = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<string?> name = default;
            Option<int?> ordinal = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Ordinal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ordinal = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class CustomDimensionDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomDimensionDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class CustomDimensionDto.");

            if (ordinal.IsSet && ordinal.Value == null)
                throw new ArgumentNullException(nameof(ordinal), "Property is not nullable for class CustomDimensionDto.");

            return new CustomDimensionDto(code, createdDateTimeOffset, createdFromImportJournalId, externalImportReference, id, isActive, lastChangedDateTimeOffset, name, ordinal);
        }

        /// <summary>
        /// Serializes a <see cref="CustomDimensionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customDimensionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomDimensionDto customDimensionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customDimensionDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomDimensionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customDimensionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomDimensionDto customDimensionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customDimensionDto.CodeOption.IsSet)
                if (customDimensionDto.CodeOption.Value != null)
                    writer.WriteString("Code", customDimensionDto.Code);
                else
                    writer.WriteNull("Code");

            if (customDimensionDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", customDimensionDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (customDimensionDto.CreatedFromImportJournalIdOption.IsSet)
                if (customDimensionDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", customDimensionDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (customDimensionDto.ExternalImportReferenceOption.IsSet)
                if (customDimensionDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", customDimensionDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (customDimensionDto.IdOption.IsSet)
                writer.WriteNumber("Id", customDimensionDto.IdOption.Value!.Value);

            if (customDimensionDto.IsActiveOption.IsSet)
                if (customDimensionDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", customDimensionDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (customDimensionDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", customDimensionDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (customDimensionDto.NameOption.IsSet)
                if (customDimensionDto.NameOption.Value != null)
                    writer.WriteString("Name", customDimensionDto.Name);
                else
                    writer.WriteNull("Name");

            if (customDimensionDto.OrdinalOption.IsSet)
                writer.WriteNumber("Ordinal", customDimensionDto.OrdinalOption.Value!.Value);
        }
    }
}
