// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The contact address post DTO contains all properties relevant to creating a new address object in Go.  Address representing a physical location.  Includes external code for reference in external systems.
    /// </summary>
    public partial class ContactAddressPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactAddressPostDto" /> class.
        /// </summary>
        /// <param name="addressLine1">The first (main) address line.</param>
        /// <param name="addressLine2">The second address line.</param>
        /// <param name="city">The city.</param>
        /// <param name="countryCode">The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.</param>
        /// <param name="externalCode">The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).</param>
        /// <param name="zipCode">The zip code (postal code).</param>
        [JsonConstructor]
        public ContactAddressPostDto(Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, string? city = default, Option<string?> countryCode = default, Option<string?> externalCode = default, string? zipCode = default)
        {
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            City = city;
            CountryCodeOption = countryCode;
            ExternalCodeOption = externalCode;
            ZipCode = zipCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// The first (main) address line.
        /// </summary>
        /// <value>The first (main) address line.</value>
        /* <example>Postboks 404</example> */
        [JsonPropertyName("AddressLine1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The second address line.
        /// </summary>
        /// <value>The second address line.</value>
        /* <example>Att: Ola Nordmann</example> */
        [JsonPropertyName("AddressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// The city.
        /// </summary>
        /// <value>The city.</value>
        /* <example>Oslo</example> */
        [JsonPropertyName("City")]
        public string? City { get; set; }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.</value>
        /* <example>NO</example> */
        [JsonPropertyName("CountryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalCodeOption { get; private set; }

        /// <summary>
        /// The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).
        /// </summary>
        /// <value>The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("ExternalCode")]
        public string? ExternalCode { get { return this.ExternalCodeOption; } set { this.ExternalCodeOption = new(value); } }

        /// <summary>
        /// The zip code (postal code).
        /// </summary>
        /// <value>The zip code (postal code).</value>
        /* <example>0161</example> */
        [JsonPropertyName("ZipCode")]
        public string? ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactAddressPostDto {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  ExternalCode: ").Append(ExternalCode).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 200.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 200.", new [] { "AddressLine2" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 100)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 100.", new [] { "City" });
            }

            // ExternalCode (string) maxLength
            if (this.ExternalCode != null && this.ExternalCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ExternalCode, length must be less than 50.", new [] { "ExternalCode" });
            }

            // ZipCode (string) maxLength
            if (this.ZipCode != null && this.ZipCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ZipCode, length must be less than 50.", new [] { "ZipCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContactAddressPostDto" />
    /// </summary>
    public class ContactAddressPostDtoJsonConverter : JsonConverter<ContactAddressPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContactAddressPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContactAddressPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> city = default;
            Option<string?> countryCode = default;
            Option<string?> externalCode = default;
            Option<string?> zipCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AddressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "AddressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "City":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CountryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalCode":
                            externalCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ZipCode":
                            zipCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!city.IsSet)
                throw new ArgumentException("Property is required for class ContactAddressPostDto.", nameof(city));

            if (!zipCode.IsSet)
                throw new ArgumentException("Property is required for class ContactAddressPostDto.", nameof(zipCode));

            return new ContactAddressPostDto(addressLine1, addressLine2, city.Value!, countryCode, externalCode, zipCode.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ContactAddressPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactAddressPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContactAddressPostDto contactAddressPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contactAddressPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContactAddressPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactAddressPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContactAddressPostDto contactAddressPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contactAddressPostDto.AddressLine1Option.IsSet)
                if (contactAddressPostDto.AddressLine1Option.Value != null)
                    writer.WriteString("AddressLine1", contactAddressPostDto.AddressLine1);
                else
                    writer.WriteNull("AddressLine1");

            if (contactAddressPostDto.AddressLine2Option.IsSet)
                if (contactAddressPostDto.AddressLine2Option.Value != null)
                    writer.WriteString("AddressLine2", contactAddressPostDto.AddressLine2);
                else
                    writer.WriteNull("AddressLine2");

            if (contactAddressPostDto.City != null)
                writer.WriteString("City", contactAddressPostDto.City);
            else
                writer.WriteNull("City");

            if (contactAddressPostDto.CountryCodeOption.IsSet)
                if (contactAddressPostDto.CountryCodeOption.Value != null)
                    writer.WriteString("CountryCode", contactAddressPostDto.CountryCode);
                else
                    writer.WriteNull("CountryCode");

            if (contactAddressPostDto.ExternalCodeOption.IsSet)
                if (contactAddressPostDto.ExternalCodeOption.Value != null)
                    writer.WriteString("ExternalCode", contactAddressPostDto.ExternalCode);
                else
                    writer.WriteNull("ExternalCode");

            if (contactAddressPostDto.ZipCode != null)
                writer.WriteString("ZipCode", contactAddressPostDto.ZipCode);
            else
                writer.WriteNull("ZipCode");
        }
    }
}
