// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The customer DTO contains all properties relevant to a customer-object in Go
    /// </summary>
    public partial class CustomerDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerDto" /> class.
        /// </summary>
        /// <param name="allowance">The fixed percent for allowance/discount or allowance charge for this customer.  The value, if set, should be between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the customer is set with allowance charge.  Positive percentage means the customer is set up with discount/allowance.  The percentage set will be used as default on any invoices created in Go for that customer.</param>
        /// <param name="billableRate">The billable hourly rate for timetransactions registered with billable activities with this customer.  Must be positive number.  Note that a hierarchy exist in Go for timetracking price settings of billable rates.</param>
        /// <param name="contactCreatedDateTimeOffset">The timestamp the contact entity was created.  This might differ from the customer created timestamp, if the contact was first created as a supplier/employee.</param>
        /// <param name="contactGroupIds">The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid).  If the customer was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="currencyCode">The standard currency code for the customer.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.</param>
        /// <param name="customerCreatedDateTimeOffset">The timestamp the contact first became a customer.  For contacts being only customers, this property will be equal to the contactCreatedDateTimeOffset property.</param>
        /// <param name="customerSince">The date the customer first became a customer.  This field is available in the GUI, and is editable at any time. Is thus not the same as customerCreatedDateTimeOffset.</param>
        /// <param name="dateOfBirth">The date of birth of the customer.  Relevant only if the customer is a person (when isPerson is true).</param>
        /// <param name="deliveryTerm">The delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.</param>
        /// <param name="deliveryTermId">The id of delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.</param>
        /// <param name="departmentCode">The code of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.</param>
        /// <param name="departmentId">The id of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.</param>
        /// <param name="doNotAddLatePaymentFees">Value indicating whether or not to add late payment fees when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with interest rate, and that information is available in the SalesSettings endpoint.</param>
        /// <param name="doNotAddLatePaymentInterest">Value indicating whether or not to add late payment interest when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with fees, and that information is available in the SalesSettings endpoint.</param>
        /// <param name="doNotAutomatePaymentNotifications">Value indicating whether or not this payment notifications should be sent automatically to this customer.  Payment notifications is considered a friendly reminder (with no fee) that is sent before any reminders with fee.  Defaults to false.  Relevant only if the client uses payment notification, and that information is available in the SalesSettings endpoint.</param>
        /// <param name="emailAddress">The (general) e-mail address registered for the customer.</param>
        /// <param name="externalImportReference">The external import reference of the customer.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</param>
        /// <param name="externalNumber">The external number of the customer.  This field can be used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the customer number. I.e. when importing outgoing invoices using a file, with the customer number 10000 set in the file, the import will choose the customer with ExternalNumber 10000 over the customer with Number 10000. This is the case for file imports only.</param>
        /// <param name="firstName">The first name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)</param>
        /// <param name="id">The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The customer object is a contact entity, meaning the id might be shared with a supplier and/or an employee if the contact is registered as both a customer and supplier/employee in Go.</param>
        /// <param name="invoiceBrandingThemeCode">The code of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.</param>
        /// <param name="invoiceBrandingThemeId">The id of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.</param>
        /// <param name="invoiceDeliveryType">invoiceDeliveryType</param>
        /// <param name="invoiceEmailAddress">The default e-mail address used when sending invoice with delivery method PdfByEmail.</param>
        /// <param name="invoiceEmailAddressCC">The default e-mail address used as CC when sending invoice with delivery method PdfByEmail.  Up to 10 e-mail addresses can be set, semicolon separated. Max length of the string is 2000.</param>
        /// <param name="isActive">Value indicating whether this customer instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a customer.  Can be false in situations where the supplier is still active so that the contact entity cannot be archived, but the customer is deactivated by a user in the GUI.</param>
        /// <param name="isArchived">Value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).</param>
        /// <param name="isPerson">Value indicating whether this customer is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.</param>
        /// <param name="isVatFree">Value indicating whether this customer is VAT free.  If set true, the alternative sales accounts is used when creating invoices for this customer.  The default setting is false, if not provided.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the customer.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.</param>
        /// <param name="lastName">The last name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)</param>
        /// <param name="legalName">The legal name of the customer.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the customer is a company (i.e. isPerson is false)</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="name">The name of the customer.  Relevant and required if the customer is a company (i.e. isPerson is false)</param>
        /// <param name="nationalIdNumber">The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.</param>
        /// <param name="noticeOfDebtCollectionDeliveryType">noticeOfDebtCollectionDeliveryType</param>
        /// <param name="number">The number of the customer.  The number will also represent the customer ledger account, used for customer ledger transactions.  When creating new customer and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the customer legder numberseries that exist on the client in Go.</param>
        /// <param name="organizationNumber">The organization number of the customer.  Relevant for customers that are companies (i.e. isPerson is false).</param>
        /// <param name="paymentReminderEmailAddress">The default e-mail address used when sending (payment) reminder or notice of debt collection with delivery method PdfByEmail.</param>
        /// <param name="paymentTerm">The payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  If null, the default value is used on customer (inherited from the payment terms settings).  The payment terms can be created and retrieved using the payment terms endpoint.</param>
        /// <param name="paymentTermId">The ID of the payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  The payment term set will be the default value used when an invoice draft is created in Go with this customer.  If null, the default payment term set on the client will be used on invoice draft.  The payment terms can be created and retrieved using the payment terms endpoint.</param>
        /// <param name="phoneNumber">The phone number of the customer.</param>
        /// <param name="reminderDeliveryType">reminderDeliveryType</param>
        /// <param name="salesPersonEmployeeId">The employee id of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.</param>
        /// <param name="salesPersonEmployeeNumber">The employee number of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.</param>
        /// <param name="sendPaymentReminders">Value indicating whether to send (payment) reminders to this customer.  Default is true, relevant only if the client uses reminders, and that information is available in the SalesSettings endpoint.</param>
        /// <param name="subledgerAccountId">The identifier of the subledger account associated with the customer.</param>
        /// <param name="transferToDebtCollectionAgency">Value indicating whether invoices for this customer can be transferred to a debt collection agency after they are due.  Default is true, relevant only if the client have a third party debt collection integration active.</param>
        /// <param name="useInvoiceFee">Value indicating whether invoice fee will be used when sending invoices to this customer.  Default is true, relevant only if the client uses invoice fee, and that information is available in the SalesSettings endpoint.</param>
        /// <param name="websiteUrl">The url to the customers website.</param>
        [JsonConstructor]
        public CustomerDto(Option<double?> allowance = default, Option<double?> billableRate = default, Option<DateTime?> contactCreatedDateTimeOffset = default, Option<List<long>?> contactGroupIds = default, Option<Guid?> createdFromImportJournalId = default, Option<string?> currencyCode = default, Option<DateTime?> customerCreatedDateTimeOffset = default, Option<DateOnly?> customerSince = default, Option<DateOnly?> dateOfBirth = default, Option<string?> deliveryTerm = default, Option<long?> deliveryTermId = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<bool?> doNotAddLatePaymentFees = default, Option<bool?> doNotAddLatePaymentInterest = default, Option<bool?> doNotAutomatePaymentNotifications = default, Option<string?> emailAddress = default, Option<string?> externalImportReference = default, Option<long?> externalNumber = default, Option<string?> firstName = default, Option<long?> id = default, Option<string?> invoiceBrandingThemeCode = default, Option<long?> invoiceBrandingThemeId = default, Option<InvoiceDeliveryType?> invoiceDeliveryType = default, Option<string?> invoiceEmailAddress = default, Option<string?> invoiceEmailAddressCC = default, Option<bool?> isActive = default, Option<bool?> isArchived = default, Option<bool?> isPerson = default, Option<bool?> isVatFree = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> lastName = default, Option<string?> legalName = default, Option<ContactAddressDto?> mailAddress = default, Option<string?> name = default, Option<string?> nationalIdNumber = default, Option<NoticeOfDebtCollectionDeliveryType?> noticeOfDebtCollectionDeliveryType = default, Option<long?> number = default, Option<string?> organizationNumber = default, Option<string?> paymentReminderEmailAddress = default, Option<int?> paymentTerm = default, Option<long?> paymentTermId = default, Option<string?> phoneNumber = default, Option<ReminderDeliveryType?> reminderDeliveryType = default, Option<long?> salesPersonEmployeeId = default, Option<long?> salesPersonEmployeeNumber = default, Option<bool?> sendPaymentReminders = default, Option<long?> subledgerAccountId = default, Option<bool?> transferToDebtCollectionAgency = default, Option<bool?> useInvoiceFee = default, Option<string?> websiteUrl = default)
        {
            AllowanceOption = allowance;
            BillableRateOption = billableRate;
            ContactCreatedDateTimeOffsetOption = contactCreatedDateTimeOffset;
            ContactGroupIdsOption = contactGroupIds;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            CurrencyCodeOption = currencyCode;
            CustomerCreatedDateTimeOffsetOption = customerCreatedDateTimeOffset;
            CustomerSinceOption = customerSince;
            DateOfBirthOption = dateOfBirth;
            DeliveryTermOption = deliveryTerm;
            DeliveryTermIdOption = deliveryTermId;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            DoNotAddLatePaymentFeesOption = doNotAddLatePaymentFees;
            DoNotAddLatePaymentInterestOption = doNotAddLatePaymentInterest;
            DoNotAutomatePaymentNotificationsOption = doNotAutomatePaymentNotifications;
            EmailAddressOption = emailAddress;
            ExternalImportReferenceOption = externalImportReference;
            ExternalNumberOption = externalNumber;
            FirstNameOption = firstName;
            IdOption = id;
            InvoiceBrandingThemeCodeOption = invoiceBrandingThemeCode;
            InvoiceBrandingThemeIdOption = invoiceBrandingThemeId;
            InvoiceDeliveryTypeOption = invoiceDeliveryType;
            InvoiceEmailAddressOption = invoiceEmailAddress;
            InvoiceEmailAddressCCOption = invoiceEmailAddressCC;
            IsActiveOption = isActive;
            IsArchivedOption = isArchived;
            IsPersonOption = isPerson;
            IsVatFreeOption = isVatFree;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LastNameOption = lastName;
            LegalNameOption = legalName;
            MailAddressOption = mailAddress;
            NameOption = name;
            NationalIdNumberOption = nationalIdNumber;
            NoticeOfDebtCollectionDeliveryTypeOption = noticeOfDebtCollectionDeliveryType;
            NumberOption = number;
            OrganizationNumberOption = organizationNumber;
            PaymentReminderEmailAddressOption = paymentReminderEmailAddress;
            PaymentTermOption = paymentTerm;
            PaymentTermIdOption = paymentTermId;
            PhoneNumberOption = phoneNumber;
            ReminderDeliveryTypeOption = reminderDeliveryType;
            SalesPersonEmployeeIdOption = salesPersonEmployeeId;
            SalesPersonEmployeeNumberOption = salesPersonEmployeeNumber;
            SendPaymentRemindersOption = sendPaymentReminders;
            SubledgerAccountIdOption = subledgerAccountId;
            TransferToDebtCollectionAgencyOption = transferToDebtCollectionAgency;
            UseInvoiceFeeOption = useInvoiceFee;
            WebsiteUrlOption = websiteUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InvoiceDeliveryType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InvoiceDeliveryType?> InvoiceDeliveryTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InvoiceDeliveryType
        /// </summary>
        [JsonPropertyName("InvoiceDeliveryType")]
        public InvoiceDeliveryType? InvoiceDeliveryType { get { return this.InvoiceDeliveryTypeOption; } set { this.InvoiceDeliveryTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoticeOfDebtCollectionDeliveryType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NoticeOfDebtCollectionDeliveryType?> NoticeOfDebtCollectionDeliveryTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets NoticeOfDebtCollectionDeliveryType
        /// </summary>
        [JsonPropertyName("NoticeOfDebtCollectionDeliveryType")]
        public NoticeOfDebtCollectionDeliveryType? NoticeOfDebtCollectionDeliveryType { get { return this.NoticeOfDebtCollectionDeliveryTypeOption; } set { this.NoticeOfDebtCollectionDeliveryTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReminderDeliveryType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReminderDeliveryType?> ReminderDeliveryTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReminderDeliveryType
        /// </summary>
        [JsonPropertyName("ReminderDeliveryType")]
        public ReminderDeliveryType? ReminderDeliveryType { get { return this.ReminderDeliveryTypeOption; } set { this.ReminderDeliveryTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Allowance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AllowanceOption { get; private set; }

        /// <summary>
        /// The fixed percent for allowance/discount or allowance charge for this customer.  The value, if set, should be between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the customer is set with allowance charge.  Positive percentage means the customer is set up with discount/allowance.  The percentage set will be used as default on any invoices created in Go for that customer.
        /// </summary>
        /// <value>The fixed percent for allowance/discount or allowance charge for this customer.  The value, if set, should be between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the customer is set with allowance charge.  Positive percentage means the customer is set up with discount/allowance.  The percentage set will be used as default on any invoices created in Go for that customer.</value>
        /* <example>56.75</example> */
        [JsonPropertyName("Allowance")]
        public double? Allowance { get { return this.AllowanceOption; } set { this.AllowanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillableRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BillableRateOption { get; private set; }

        /// <summary>
        /// The billable hourly rate for timetransactions registered with billable activities with this customer.  Must be positive number.  Note that a hierarchy exist in Go for timetracking price settings of billable rates.
        /// </summary>
        /// <value>The billable hourly rate for timetransactions registered with billable activities with this customer.  Must be positive number.  Note that a hierarchy exist in Go for timetracking price settings of billable rates.</value>
        /* <example>250</example> */
        [JsonPropertyName("BillableRate")]
        public double? BillableRate { get { return this.BillableRateOption; } set { this.BillableRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ContactCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact entity was created.  This might differ from the customer created timestamp, if the contact was first created as a supplier/employee.
        /// </summary>
        /// <value>The timestamp the contact entity was created.  This might differ from the customer created timestamp, if the contact was first created as a supplier/employee.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("ContactCreatedDateTimeOffset")]
        public DateTime? ContactCreatedDateTimeOffset { get { return this.ContactCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ContactGroupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ContactGroupIdsOption { get; private set; }

        /// <summary>
        /// The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.
        /// </summary>
        /// <value>The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</value>
        [JsonPropertyName("ContactGroupIds")]
        public List<long>? ContactGroupIds { get { return this.ContactGroupIdsOption; } set { this.ContactGroupIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid).  If the customer was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid).  If the customer was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The standard currency code for the customer.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.
        /// </summary>
        /// <value>The standard currency code for the customer.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CustomerCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact first became a customer.  For contacts being only customers, this property will be equal to the contactCreatedDateTimeOffset property.
        /// </summary>
        /// <value>The timestamp the contact first became a customer.  For contacts being only customers, this property will be equal to the contactCreatedDateTimeOffset property.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CustomerCreatedDateTimeOffset")]
        public DateTime? CustomerCreatedDateTimeOffset { get { return this.CustomerCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CustomerSince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> CustomerSinceOption { get; private set; }

        /// <summary>
        /// The date the customer first became a customer.  This field is available in the GUI, and is editable at any time. Is thus not the same as customerCreatedDateTimeOffset.
        /// </summary>
        /// <value>The date the customer first became a customer.  This field is available in the GUI, and is editable at any time. Is thus not the same as customerCreatedDateTimeOffset.</value>
        /* <example>Thu Jul 15 02:00:00 CEST 2010</example> */
        [JsonPropertyName("CustomerSince")]
        public DateOnly? CustomerSince { get { return this.CustomerSinceOption; } set { this.CustomerSinceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The date of birth of the customer.  Relevant only if the customer is a person (when isPerson is true).
        /// </summary>
        /// <value>The date of birth of the customer.  Relevant only if the customer is a person (when isPerson is true).</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("DateOfBirth")]
        public DateOnly? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryTermOption { get; }

        /// <summary>
        /// The delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.
        /// </summary>
        /// <value>The delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  The default set of delivery terms provided in Go are incoterms, but any custom string can be set.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.</value>
        /* <example>DAP</example> */
        [JsonPropertyName("DeliveryTerm")]
        public string? DeliveryTerm { get { return this.DeliveryTermOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeliveryTermIdOption { get; private set; }

        /// <summary>
        /// The id of delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.
        /// </summary>
        /// <value>The id of delivery term of the customer.  The delivery term set will be the default value when an invoice draft is created in Go with this customer.  If null, the default delivery term set on the client is used.  The delivery terms can be created and retrieved using the delivery terms endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DeliveryTermId")]
        public long? DeliveryTermId { get { return this.DeliveryTermIdOption; } set { this.DeliveryTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.
        /// </summary>
        /// <value>The code of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.
        /// </summary>
        /// <value>The id of the department this customer is associated with.  The department will be the default value when an invoice draft is created in Go with this customer.  Use the Departments endpoint to retrieve and/or create departments.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DoNotAddLatePaymentFees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoNotAddLatePaymentFeesOption { get; private set; }

        /// <summary>
        /// Value indicating whether or not to add late payment fees when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with interest rate, and that information is available in the SalesSettings endpoint.
        /// </summary>
        /// <value>Value indicating whether or not to add late payment fees when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with interest rate, and that information is available in the SalesSettings endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("DoNotAddLatePaymentFees")]
        public bool? DoNotAddLatePaymentFees { get { return this.DoNotAddLatePaymentFeesOption; } set { this.DoNotAddLatePaymentFeesOption = new(value); } }

        /// <summary>
        /// Used to track the state of DoNotAddLatePaymentInterest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoNotAddLatePaymentInterestOption { get; private set; }

        /// <summary>
        /// Value indicating whether or not to add late payment interest when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with fees, and that information is available in the SalesSettings endpoint.
        /// </summary>
        /// <value>Value indicating whether or not to add late payment interest when sending reminders to this customer.  Defaults to false.  Relevant if the client uses reminders with fees, and that information is available in the SalesSettings endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("DoNotAddLatePaymentInterest")]
        public bool? DoNotAddLatePaymentInterest { get { return this.DoNotAddLatePaymentInterestOption; } set { this.DoNotAddLatePaymentInterestOption = new(value); } }

        /// <summary>
        /// Used to track the state of DoNotAutomatePaymentNotifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DoNotAutomatePaymentNotificationsOption { get; private set; }

        /// <summary>
        /// Value indicating whether or not this payment notifications should be sent automatically to this customer.  Payment notifications is considered a friendly reminder (with no fee) that is sent before any reminders with fee.  Defaults to false.  Relevant only if the client uses payment notification, and that information is available in the SalesSettings endpoint.
        /// </summary>
        /// <value>Value indicating whether or not this payment notifications should be sent automatically to this customer.  Payment notifications is considered a friendly reminder (with no fee) that is sent before any reminders with fee.  Defaults to false.  Relevant only if the client uses payment notification, and that information is available in the SalesSettings endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("DoNotAutomatePaymentNotifications")]
        public bool? DoNotAutomatePaymentNotifications { get { return this.DoNotAutomatePaymentNotificationsOption; } set { this.DoNotAutomatePaymentNotificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// The (general) e-mail address registered for the customer.
        /// </summary>
        /// <value>The (general) e-mail address registered for the customer.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference of the customer.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.
        /// </summary>
        /// <value>The external import reference of the customer.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</value>
        /* <example>abc123-def456</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExternalNumberOption { get; private set; }

        /// <summary>
        /// The external number of the customer.  This field can be used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the customer number. I.e. when importing outgoing invoices using a file, with the customer number 10000 set in the file, the import will choose the customer with ExternalNumber 10000 over the customer with Number 10000. This is the case for file imports only.
        /// </summary>
        /// <value>The external number of the customer.  This field can be used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the customer number. I.e. when importing outgoing invoices using a file, with the customer number 10000 set in the file, the import will choose the customer with ExternalNumber 10000 over the customer with Number 10000. This is the case for file imports only.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ExternalNumber")]
        public long? ExternalNumber { get { return this.ExternalNumberOption; } set { this.ExternalNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// The first name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)
        /// </summary>
        /// <value>The first name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)</value>
        /* <example>Henry</example> */
        [JsonPropertyName("FirstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The customer object is a contact entity, meaning the id might be shared with a supplier and/or an employee if the contact is registered as both a customer and supplier/employee in Go.
        /// </summary>
        /// <value>The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The customer object is a contact entity, meaning the id might be shared with a supplier and/or an employee if the contact is registered as both a customer and supplier/employee in Go.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceBrandingThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceBrandingThemeCodeOption { get; }

        /// <summary>
        /// The code of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.
        /// </summary>
        /// <value>The code of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.</value>
        /* <example>4</example> */
        [JsonPropertyName("InvoiceBrandingThemeCode")]
        public string? InvoiceBrandingThemeCode { get { return this.InvoiceBrandingThemeCodeOption; } }

        /// <summary>
        /// Used to track the state of InvoiceBrandingThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> InvoiceBrandingThemeIdOption { get; private set; }

        /// <summary>
        /// The id of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.
        /// </summary>
        /// <value>The id of the branding theme used when sending invoices to this customer.  If null, the clients default branding theme will be used.  Branding themes can be retrieved using the SalesSettings endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("InvoiceBrandingThemeId")]
        public long? InvoiceBrandingThemeId { get { return this.InvoiceBrandingThemeIdOption; } set { this.InvoiceBrandingThemeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceEmailAddressOption { get; private set; }

        /// <summary>
        /// The default e-mail address used when sending invoice with delivery method PdfByEmail.
        /// </summary>
        /// <value>The default e-mail address used when sending invoice with delivery method PdfByEmail.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("InvoiceEmailAddress")]
        public string? InvoiceEmailAddress { get { return this.InvoiceEmailAddressOption; } set { this.InvoiceEmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceEmailAddressCC
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceEmailAddressCCOption { get; private set; }

        /// <summary>
        /// The default e-mail address used as CC when sending invoice with delivery method PdfByEmail.  Up to 10 e-mail addresses can be set, semicolon separated. Max length of the string is 2000.
        /// </summary>
        /// <value>The default e-mail address used as CC when sending invoice with delivery method PdfByEmail.  Up to 10 e-mail addresses can be set, semicolon separated. Max length of the string is 2000.</value>
        /* <example>abc@test.yxz;def@fest.yxz</example> */
        [JsonPropertyName("InvoiceEmailAddressCC")]
        public string? InvoiceEmailAddressCC { get { return this.InvoiceEmailAddressCCOption; } set { this.InvoiceEmailAddressCCOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; }

        /// <summary>
        /// Value indicating whether this customer instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a customer.  Can be false in situations where the supplier is still active so that the contact entity cannot be archived, but the customer is deactivated by a user in the GUI.
        /// </summary>
        /// <value>Value indicating whether this customer instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a customer.  Can be false in situations where the supplier is still active so that the contact entity cannot be archived, but the customer is deactivated by a user in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// Value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).
        /// </summary>
        /// <value>Value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).</value>
        /* <example>false</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPerson
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPersonOption { get; private set; }

        /// <summary>
        /// Value indicating whether this customer is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.
        /// </summary>
        /// <value>Value indicating whether this customer is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsPerson")]
        public bool? IsPerson { get { return this.IsPersonOption; } set { this.IsPersonOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsVatFree
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVatFreeOption { get; private set; }

        /// <summary>
        /// Value indicating whether this customer is VAT free.  If set true, the alternative sales accounts is used when creating invoices for this customer.  The default setting is false, if not provided.
        /// </summary>
        /// <value>Value indicating whether this customer is VAT free.  If set true, the alternative sales accounts is used when creating invoices for this customer.  The default setting is false, if not provided.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsVatFree")]
        public bool? IsVatFree { get { return this.IsVatFreeOption; } set { this.IsVatFreeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the customer.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.
        /// </summary>
        /// <value>The timestamp of the last change of the customer.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// The last name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)
        /// </summary>
        /// <value>The last name of the customer.  Relevant and required if the customer is a person (i.e. isPerson is true)</value>
        /* <example>Ford</example> */
        [JsonPropertyName("LastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LegalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LegalNameOption { get; private set; }

        /// <summary>
        /// The legal name of the customer.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the customer is a company (i.e. isPerson is false)
        /// </summary>
        /// <value>The legal name of the customer.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the customer is a company (i.e. isPerson is false)</value>
        /* <example>Ford Motor Company AS</example> */
        [JsonPropertyName("LegalName")]
        public string? LegalName { get { return this.LegalNameOption; } set { this.LegalNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContactAddressDto?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public ContactAddressDto? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the customer.  Relevant and required if the customer is a company (i.e. isPerson is false)
        /// </summary>
        /// <value>The name of the customer.  Relevant and required if the customer is a company (i.e. isPerson is false)</value>
        /* <example>Ford Motor</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of NationalIdNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NationalIdNumberOption { get; private set; }

        /// <summary>
        /// The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.
        /// </summary>
        /// <value>The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.</value>
        /* <example>30011679680</example> */
        [JsonPropertyName("NationalIdNumber")]
        public string? NationalIdNumber { get { return this.NationalIdNumberOption; } set { this.NationalIdNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NumberOption { get; private set; }

        /// <summary>
        /// The number of the customer.  The number will also represent the customer ledger account, used for customer ledger transactions.  When creating new customer and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the customer legder numberseries that exist on the client in Go.
        /// </summary>
        /// <value>The number of the customer.  The number will also represent the customer ledger account, used for customer ledger transactions.  When creating new customer and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the customer legder numberseries that exist on the client in Go.</value>
        /* <example>10010</example> */
        [JsonPropertyName("Number")]
        public long? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganizationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationNumberOption { get; private set; }

        /// <summary>
        /// The organization number of the customer.  Relevant for customers that are companies (i.e. isPerson is false).
        /// </summary>
        /// <value>The organization number of the customer.  Relevant for customers that are companies (i.e. isPerson is false).</value>
        /* <example>980386465</example> */
        [JsonPropertyName("OrganizationNumber")]
        public string? OrganizationNumber { get { return this.OrganizationNumberOption; } set { this.OrganizationNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentReminderEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PaymentReminderEmailAddressOption { get; private set; }

        /// <summary>
        /// The default e-mail address used when sending (payment) reminder or notice of debt collection with delivery method PdfByEmail.
        /// </summary>
        /// <value>The default e-mail address used when sending (payment) reminder or notice of debt collection with delivery method PdfByEmail.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("PaymentReminderEmailAddress")]
        public string? PaymentReminderEmailAddress { get { return this.PaymentReminderEmailAddressOption; } set { this.PaymentReminderEmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PaymentTermOption { get; }

        /// <summary>
        /// The payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  If null, the default value is used on customer (inherited from the payment terms settings).  The payment terms can be created and retrieved using the payment terms endpoint.
        /// </summary>
        /// <value>The payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  If null, the default value is used on customer (inherited from the payment terms settings).  The payment terms can be created and retrieved using the payment terms endpoint.</value>
        /* <example>14</example> */
        [JsonPropertyName("PaymentTerm")]
        public int? PaymentTerm { get { return this.PaymentTermOption; } }

        /// <summary>
        /// Used to track the state of PaymentTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PaymentTermIdOption { get; private set; }

        /// <summary>
        /// The ID of the payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  The payment term set will be the default value used when an invoice draft is created in Go with this customer.  If null, the default payment term set on the client will be used on invoice draft.  The payment terms can be created and retrieved using the payment terms endpoint.
        /// </summary>
        /// <value>The ID of the payment term of the customer.  Payment terms define the number of days from an invoice is sent until it is due paid.  The payment term set will be the default value used when an invoice draft is created in Go with this customer.  If null, the default payment term set on the client will be used on invoice draft.  The payment terms can be created and retrieved using the payment terms endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("PaymentTermId")]
        public long? PaymentTermId { get { return this.PaymentTermIdOption; } set { this.PaymentTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// The phone number of the customer.
        /// </summary>
        /// <value>The phone number of the customer.</value>
        /* <example>+4712345678</example> */
        [JsonPropertyName("PhoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesPersonEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesPersonEmployeeIdOption { get; private set; }

        /// <summary>
        /// The employee id of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.
        /// </summary>
        /// <value>The employee id of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SalesPersonEmployeeId")]
        public long? SalesPersonEmployeeId { get { return this.SalesPersonEmployeeIdOption; } set { this.SalesPersonEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesPersonEmployeeNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesPersonEmployeeNumberOption { get; }

        /// <summary>
        /// The employee number of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.
        /// </summary>
        /// <value>The employee number of the sales person assigned this customer.  If null, the default sales person is used if set in the SalesSettings.  Employees can be retrieved from the Employees endpoint.</value>
        /* <example>3</example> */
        [JsonPropertyName("SalesPersonEmployeeNumber")]
        public long? SalesPersonEmployeeNumber { get { return this.SalesPersonEmployeeNumberOption; } }

        /// <summary>
        /// Used to track the state of SendPaymentReminders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SendPaymentRemindersOption { get; private set; }

        /// <summary>
        /// Value indicating whether to send (payment) reminders to this customer.  Default is true, relevant only if the client uses reminders, and that information is available in the SalesSettings endpoint.
        /// </summary>
        /// <value>Value indicating whether to send (payment) reminders to this customer.  Default is true, relevant only if the client uses reminders, and that information is available in the SalesSettings endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("SendPaymentReminders")]
        public bool? SendPaymentReminders { get { return this.SendPaymentRemindersOption; } set { this.SendPaymentRemindersOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of the subledger account associated with the customer.
        /// </summary>
        /// <value>The identifier of the subledger account associated with the customer.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SubledgerAccountId")]
        public long? SubledgerAccountId { get { return this.SubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of TransferToDebtCollectionAgency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TransferToDebtCollectionAgencyOption { get; private set; }

        /// <summary>
        /// Value indicating whether invoices for this customer can be transferred to a debt collection agency after they are due.  Default is true, relevant only if the client have a third party debt collection integration active.
        /// </summary>
        /// <value>Value indicating whether invoices for this customer can be transferred to a debt collection agency after they are due.  Default is true, relevant only if the client have a third party debt collection integration active.</value>
        /* <example>true</example> */
        [JsonPropertyName("TransferToDebtCollectionAgency")]
        public bool? TransferToDebtCollectionAgency { get { return this.TransferToDebtCollectionAgencyOption; } set { this.TransferToDebtCollectionAgencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseInvoiceFee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseInvoiceFeeOption { get; private set; }

        /// <summary>
        /// Value indicating whether invoice fee will be used when sending invoices to this customer.  Default is true, relevant only if the client uses invoice fee, and that information is available in the SalesSettings endpoint.
        /// </summary>
        /// <value>Value indicating whether invoice fee will be used when sending invoices to this customer.  Default is true, relevant only if the client uses invoice fee, and that information is available in the SalesSettings endpoint.</value>
        /* <example>true</example> */
        [JsonPropertyName("UseInvoiceFee")]
        public bool? UseInvoiceFee { get { return this.UseInvoiceFeeOption; } set { this.UseInvoiceFeeOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebsiteUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteUrlOption { get; private set; }

        /// <summary>
        /// The url to the customers website.
        /// </summary>
        /// <value>The url to the customers website.</value>
        /* <example>www.customerswebsite.net</example> */
        [JsonPropertyName("WebsiteUrl")]
        public string? WebsiteUrl { get { return this.WebsiteUrlOption; } set { this.WebsiteUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerDto {\n");
            sb.Append("  Allowance: ").Append(Allowance).Append("\n");
            sb.Append("  BillableRate: ").Append(BillableRate).Append("\n");
            sb.Append("  ContactCreatedDateTimeOffset: ").Append(ContactCreatedDateTimeOffset).Append("\n");
            sb.Append("  ContactGroupIds: ").Append(ContactGroupIds).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomerCreatedDateTimeOffset: ").Append(CustomerCreatedDateTimeOffset).Append("\n");
            sb.Append("  CustomerSince: ").Append(CustomerSince).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DeliveryTerm: ").Append(DeliveryTerm).Append("\n");
            sb.Append("  DeliveryTermId: ").Append(DeliveryTermId).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  DoNotAddLatePaymentFees: ").Append(DoNotAddLatePaymentFees).Append("\n");
            sb.Append("  DoNotAddLatePaymentInterest: ").Append(DoNotAddLatePaymentInterest).Append("\n");
            sb.Append("  DoNotAutomatePaymentNotifications: ").Append(DoNotAutomatePaymentNotifications).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  ExternalNumber: ").Append(ExternalNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceBrandingThemeCode: ").Append(InvoiceBrandingThemeCode).Append("\n");
            sb.Append("  InvoiceBrandingThemeId: ").Append(InvoiceBrandingThemeId).Append("\n");
            sb.Append("  InvoiceDeliveryType: ").Append(InvoiceDeliveryType).Append("\n");
            sb.Append("  InvoiceEmailAddress: ").Append(InvoiceEmailAddress).Append("\n");
            sb.Append("  InvoiceEmailAddressCC: ").Append(InvoiceEmailAddressCC).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsPerson: ").Append(IsPerson).Append("\n");
            sb.Append("  IsVatFree: ").Append(IsVatFree).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NationalIdNumber: ").Append(NationalIdNumber).Append("\n");
            sb.Append("  NoticeOfDebtCollectionDeliveryType: ").Append(NoticeOfDebtCollectionDeliveryType).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrganizationNumber: ").Append(OrganizationNumber).Append("\n");
            sb.Append("  PaymentReminderEmailAddress: ").Append(PaymentReminderEmailAddress).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  PaymentTermId: ").Append(PaymentTermId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ReminderDeliveryType: ").Append(ReminderDeliveryType).Append("\n");
            sb.Append("  SalesPersonEmployeeId: ").Append(SalesPersonEmployeeId).Append("\n");
            sb.Append("  SalesPersonEmployeeNumber: ").Append(SalesPersonEmployeeNumber).Append("\n");
            sb.Append("  SendPaymentReminders: ").Append(SendPaymentReminders).Append("\n");
            sb.Append("  SubledgerAccountId: ").Append(SubledgerAccountId).Append("\n");
            sb.Append("  TransferToDebtCollectionAgency: ").Append(TransferToDebtCollectionAgency).Append("\n");
            sb.Append("  UseInvoiceFee: ").Append(UseInvoiceFee).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExternalImportReference (string) maxLength
            if (this.ExternalImportReference != null && this.ExternalImportReference.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ExternalImportReference, length must be less than 50.", new [] { "ExternalImportReference" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomerDto" />
    /// </summary>
    public class CustomerDtoJsonConverter : JsonConverter<CustomerDto>
    {
        /// <summary>
        /// The format to use to serialize ContactCreatedDateTimeOffset
        /// </summary>
        public static string ContactCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CustomerCreatedDateTimeOffset
        /// </summary>
        public static string CustomerCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CustomerSince
        /// </summary>
        public static string CustomerSinceFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="CustomerDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomerDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> allowance = default;
            Option<double?> billableRate = default;
            Option<DateTime?> contactCreatedDateTimeOffset = default;
            Option<List<long>?> contactGroupIds = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<string?> currencyCode = default;
            Option<DateTime?> customerCreatedDateTimeOffset = default;
            Option<DateOnly?> customerSince = default;
            Option<DateOnly?> dateOfBirth = default;
            Option<string?> deliveryTerm = default;
            Option<long?> deliveryTermId = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<bool?> doNotAddLatePaymentFees = default;
            Option<bool?> doNotAddLatePaymentInterest = default;
            Option<bool?> doNotAutomatePaymentNotifications = default;
            Option<string?> emailAddress = default;
            Option<string?> externalImportReference = default;
            Option<long?> externalNumber = default;
            Option<string?> firstName = default;
            Option<long?> id = default;
            Option<string?> invoiceBrandingThemeCode = default;
            Option<long?> invoiceBrandingThemeId = default;
            Option<InvoiceDeliveryType?> invoiceDeliveryType = default;
            Option<string?> invoiceEmailAddress = default;
            Option<string?> invoiceEmailAddressCC = default;
            Option<bool?> isActive = default;
            Option<bool?> isArchived = default;
            Option<bool?> isPerson = default;
            Option<bool?> isVatFree = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> lastName = default;
            Option<string?> legalName = default;
            Option<ContactAddressDto?> mailAddress = default;
            Option<string?> name = default;
            Option<string?> nationalIdNumber = default;
            Option<NoticeOfDebtCollectionDeliveryType?> noticeOfDebtCollectionDeliveryType = default;
            Option<long?> number = default;
            Option<string?> organizationNumber = default;
            Option<string?> paymentReminderEmailAddress = default;
            Option<int?> paymentTerm = default;
            Option<long?> paymentTermId = default;
            Option<string?> phoneNumber = default;
            Option<ReminderDeliveryType?> reminderDeliveryType = default;
            Option<long?> salesPersonEmployeeId = default;
            Option<long?> salesPersonEmployeeNumber = default;
            Option<bool?> sendPaymentReminders = default;
            Option<long?> subledgerAccountId = default;
            Option<bool?> transferToDebtCollectionAgency = default;
            Option<bool?> useInvoiceFee = default;
            Option<string?> websiteUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Allowance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BillableRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billableRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ContactCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ContactGroupIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactGroupIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CustomerSince":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerSince = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DeliveryTerm":
                            deliveryTerm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DoNotAddLatePaymentFees":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                doNotAddLatePaymentFees = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "DoNotAddLatePaymentInterest":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                doNotAddLatePaymentInterest = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "DoNotAutomatePaymentNotifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                doNotAutomatePaymentNotifications = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                externalNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FirstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceBrandingThemeCode":
                            invoiceBrandingThemeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "InvoiceBrandingThemeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceBrandingThemeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceDeliveryType":
                            string? invoiceDeliveryTypeRawValue = utf8JsonReader.GetString();
                            if (invoiceDeliveryTypeRawValue != null)
                                invoiceDeliveryType = new Option<InvoiceDeliveryType?>(InvoiceDeliveryTypeValueConverter.FromStringOrDefault(invoiceDeliveryTypeRawValue));
                            break;
                        case "InvoiceEmailAddress":
                            invoiceEmailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "InvoiceEmailAddressCC":
                            invoiceEmailAddressCC = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsPerson":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isPerson = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsVatFree":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isVatFree = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LegalName":
                            legalName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<ContactAddressDto?>(JsonSerializer.Deserialize<ContactAddressDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "NationalIdNumber":
                            nationalIdNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "NoticeOfDebtCollectionDeliveryType":
                            string? noticeOfDebtCollectionDeliveryTypeRawValue = utf8JsonReader.GetString();
                            if (noticeOfDebtCollectionDeliveryTypeRawValue != null)
                                noticeOfDebtCollectionDeliveryType = new Option<NoticeOfDebtCollectionDeliveryType?>(NoticeOfDebtCollectionDeliveryTypeValueConverter.FromStringOrDefault(noticeOfDebtCollectionDeliveryTypeRawValue));
                            break;
                        case "Number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OrganizationNumber":
                            organizationNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PaymentReminderEmailAddress":
                            paymentReminderEmailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PaymentTerm":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTerm = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PaymentTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PhoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ReminderDeliveryType":
                            string? reminderDeliveryTypeRawValue = utf8JsonReader.GetString();
                            if (reminderDeliveryTypeRawValue != null)
                                reminderDeliveryType = new Option<ReminderDeliveryType?>(ReminderDeliveryTypeValueConverter.FromStringOrDefault(reminderDeliveryTypeRawValue));
                            break;
                        case "SalesPersonEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesPersonEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SalesPersonEmployeeNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesPersonEmployeeNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SendPaymentReminders":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sendPaymentReminders = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "SubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TransferToDebtCollectionAgency":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transferToDebtCollectionAgency = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "UseInvoiceFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useInvoiceFee = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "WebsiteUrl":
                            websiteUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactCreatedDateTimeOffset.IsSet && contactCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(contactCreatedDateTimeOffset), "Property is not nullable for class CustomerDto.");

            if (customerCreatedDateTimeOffset.IsSet && customerCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(customerCreatedDateTimeOffset), "Property is not nullable for class CustomerDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CustomerDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class CustomerDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class CustomerDto.");

            if (subledgerAccountId.IsSet && subledgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(subledgerAccountId), "Property is not nullable for class CustomerDto.");

            return new CustomerDto(allowance, billableRate, contactCreatedDateTimeOffset, contactGroupIds, createdFromImportJournalId, currencyCode, customerCreatedDateTimeOffset, customerSince, dateOfBirth, deliveryTerm, deliveryTermId, departmentCode, departmentId, doNotAddLatePaymentFees, doNotAddLatePaymentInterest, doNotAutomatePaymentNotifications, emailAddress, externalImportReference, externalNumber, firstName, id, invoiceBrandingThemeCode, invoiceBrandingThemeId, invoiceDeliveryType, invoiceEmailAddress, invoiceEmailAddressCC, isActive, isArchived, isPerson, isVatFree, lastChangedDateTimeOffset, lastName, legalName, mailAddress, name, nationalIdNumber, noticeOfDebtCollectionDeliveryType, number, organizationNumber, paymentReminderEmailAddress, paymentTerm, paymentTermId, phoneNumber, reminderDeliveryType, salesPersonEmployeeId, salesPersonEmployeeNumber, sendPaymentReminders, subledgerAccountId, transferToDebtCollectionAgency, useInvoiceFee, websiteUrl);
        }

        /// <summary>
        /// Serializes a <see cref="CustomerDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomerDto customerDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customerDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomerDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomerDto customerDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customerDto.MailAddressOption.IsSet && customerDto.MailAddress == null)
                throw new ArgumentNullException(nameof(customerDto.MailAddress), "Property is required for class CustomerDto.");

            if (customerDto.AllowanceOption.IsSet)
                if (customerDto.AllowanceOption.Value != null)
                    writer.WriteNumber("Allowance", customerDto.AllowanceOption.Value!.Value);
                else
                    writer.WriteNull("Allowance");

            if (customerDto.BillableRateOption.IsSet)
                if (customerDto.BillableRateOption.Value != null)
                    writer.WriteNumber("BillableRate", customerDto.BillableRateOption.Value!.Value);
                else
                    writer.WriteNull("BillableRate");

            if (customerDto.ContactCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("ContactCreatedDateTimeOffset", customerDto.ContactCreatedDateTimeOffsetOption.Value!.Value.ToString(ContactCreatedDateTimeOffsetFormat));

            if (customerDto.ContactGroupIdsOption.IsSet)
                if (customerDto.ContactGroupIdsOption.Value != null)
                {
                    writer.WritePropertyName("ContactGroupIds");
                    JsonSerializer.Serialize(writer, customerDto.ContactGroupIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ContactGroupIds");
            if (customerDto.CreatedFromImportJournalIdOption.IsSet)
                if (customerDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", customerDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (customerDto.CurrencyCodeOption.IsSet)
                if (customerDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", customerDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (customerDto.CustomerCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CustomerCreatedDateTimeOffset", customerDto.CustomerCreatedDateTimeOffsetOption.Value!.Value.ToString(CustomerCreatedDateTimeOffsetFormat));

            if (customerDto.CustomerSinceOption.IsSet)
                if (customerDto.CustomerSinceOption.Value != null)
                    writer.WriteString("CustomerSince", customerDto.CustomerSinceOption.Value!.Value.ToString(CustomerSinceFormat));
                else
                    writer.WriteNull("CustomerSince");

            if (customerDto.DateOfBirthOption.IsSet)
                if (customerDto.DateOfBirthOption.Value != null)
                    writer.WriteString("DateOfBirth", customerDto.DateOfBirthOption.Value!.Value.ToString(DateOfBirthFormat));
                else
                    writer.WriteNull("DateOfBirth");

            if (customerDto.DeliveryTermOption.IsSet)
                if (customerDto.DeliveryTermOption.Value != null)
                    writer.WriteString("DeliveryTerm", customerDto.DeliveryTerm);
                else
                    writer.WriteNull("DeliveryTerm");

            if (customerDto.DeliveryTermIdOption.IsSet)
                if (customerDto.DeliveryTermIdOption.Value != null)
                    writer.WriteNumber("DeliveryTermId", customerDto.DeliveryTermIdOption.Value!.Value);
                else
                    writer.WriteNull("DeliveryTermId");

            if (customerDto.DepartmentCodeOption.IsSet)
                if (customerDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", customerDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (customerDto.DepartmentIdOption.IsSet)
                if (customerDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", customerDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (customerDto.DoNotAddLatePaymentFeesOption.IsSet)
                if (customerDto.DoNotAddLatePaymentFeesOption.Value != null)
                    writer.WriteBoolean("DoNotAddLatePaymentFees", customerDto.DoNotAddLatePaymentFeesOption.Value!.Value);
                else
                    writer.WriteNull("DoNotAddLatePaymentFees");

            if (customerDto.DoNotAddLatePaymentInterestOption.IsSet)
                if (customerDto.DoNotAddLatePaymentInterestOption.Value != null)
                    writer.WriteBoolean("DoNotAddLatePaymentInterest", customerDto.DoNotAddLatePaymentInterestOption.Value!.Value);
                else
                    writer.WriteNull("DoNotAddLatePaymentInterest");

            if (customerDto.DoNotAutomatePaymentNotificationsOption.IsSet)
                if (customerDto.DoNotAutomatePaymentNotificationsOption.Value != null)
                    writer.WriteBoolean("DoNotAutomatePaymentNotifications", customerDto.DoNotAutomatePaymentNotificationsOption.Value!.Value);
                else
                    writer.WriteNull("DoNotAutomatePaymentNotifications");

            if (customerDto.EmailAddressOption.IsSet)
                if (customerDto.EmailAddressOption.Value != null)
                    writer.WriteString("EmailAddress", customerDto.EmailAddress);
                else
                    writer.WriteNull("EmailAddress");

            if (customerDto.ExternalImportReferenceOption.IsSet)
                if (customerDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", customerDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (customerDto.ExternalNumberOption.IsSet)
                if (customerDto.ExternalNumberOption.Value != null)
                    writer.WriteNumber("ExternalNumber", customerDto.ExternalNumberOption.Value!.Value);
                else
                    writer.WriteNull("ExternalNumber");

            if (customerDto.FirstNameOption.IsSet)
                if (customerDto.FirstNameOption.Value != null)
                    writer.WriteString("FirstName", customerDto.FirstName);
                else
                    writer.WriteNull("FirstName");

            if (customerDto.IdOption.IsSet)
                writer.WriteNumber("Id", customerDto.IdOption.Value!.Value);

            if (customerDto.InvoiceBrandingThemeCodeOption.IsSet)
                if (customerDto.InvoiceBrandingThemeCodeOption.Value != null)
                    writer.WriteString("InvoiceBrandingThemeCode", customerDto.InvoiceBrandingThemeCode);
                else
                    writer.WriteNull("InvoiceBrandingThemeCode");

            if (customerDto.InvoiceBrandingThemeIdOption.IsSet)
                if (customerDto.InvoiceBrandingThemeIdOption.Value != null)
                    writer.WriteNumber("InvoiceBrandingThemeId", customerDto.InvoiceBrandingThemeIdOption.Value!.Value);
                else
                    writer.WriteNull("InvoiceBrandingThemeId");

            if (customerDto.InvoiceDeliveryTypeOption.IsSet)
                if (customerDto.InvoiceDeliveryTypeOption!.Value != null)
                {
                    var invoiceDeliveryTypeRawValue = InvoiceDeliveryTypeValueConverter.ToJsonValue(customerDto.InvoiceDeliveryTypeOption.Value!.Value);
                    writer.WriteString("InvoiceDeliveryType", invoiceDeliveryTypeRawValue);
                }
                else
                    writer.WriteNull("InvoiceDeliveryType");
            if (customerDto.InvoiceEmailAddressOption.IsSet)
                if (customerDto.InvoiceEmailAddressOption.Value != null)
                    writer.WriteString("InvoiceEmailAddress", customerDto.InvoiceEmailAddress);
                else
                    writer.WriteNull("InvoiceEmailAddress");

            if (customerDto.InvoiceEmailAddressCCOption.IsSet)
                if (customerDto.InvoiceEmailAddressCCOption.Value != null)
                    writer.WriteString("InvoiceEmailAddressCC", customerDto.InvoiceEmailAddressCC);
                else
                    writer.WriteNull("InvoiceEmailAddressCC");

            if (customerDto.IsActiveOption.IsSet)
                if (customerDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", customerDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (customerDto.IsArchivedOption.IsSet)
                if (customerDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", customerDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (customerDto.IsPersonOption.IsSet)
                if (customerDto.IsPersonOption.Value != null)
                    writer.WriteBoolean("IsPerson", customerDto.IsPersonOption.Value!.Value);
                else
                    writer.WriteNull("IsPerson");

            if (customerDto.IsVatFreeOption.IsSet)
                if (customerDto.IsVatFreeOption.Value != null)
                    writer.WriteBoolean("IsVatFree", customerDto.IsVatFreeOption.Value!.Value);
                else
                    writer.WriteNull("IsVatFree");

            if (customerDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", customerDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (customerDto.LastNameOption.IsSet)
                if (customerDto.LastNameOption.Value != null)
                    writer.WriteString("LastName", customerDto.LastName);
                else
                    writer.WriteNull("LastName");

            if (customerDto.LegalNameOption.IsSet)
                if (customerDto.LegalNameOption.Value != null)
                    writer.WriteString("LegalName", customerDto.LegalName);
                else
                    writer.WriteNull("LegalName");

            if (customerDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, customerDto.MailAddress, jsonSerializerOptions);
            }
            if (customerDto.NameOption.IsSet)
                if (customerDto.NameOption.Value != null)
                    writer.WriteString("Name", customerDto.Name);
                else
                    writer.WriteNull("Name");

            if (customerDto.NationalIdNumberOption.IsSet)
                if (customerDto.NationalIdNumberOption.Value != null)
                    writer.WriteString("NationalIdNumber", customerDto.NationalIdNumber);
                else
                    writer.WriteNull("NationalIdNumber");

            if (customerDto.NoticeOfDebtCollectionDeliveryTypeOption.IsSet)
                if (customerDto.NoticeOfDebtCollectionDeliveryTypeOption!.Value != null)
                {
                    var noticeOfDebtCollectionDeliveryTypeRawValue = NoticeOfDebtCollectionDeliveryTypeValueConverter.ToJsonValue(customerDto.NoticeOfDebtCollectionDeliveryTypeOption.Value!.Value);
                    writer.WriteString("NoticeOfDebtCollectionDeliveryType", noticeOfDebtCollectionDeliveryTypeRawValue);
                }
                else
                    writer.WriteNull("NoticeOfDebtCollectionDeliveryType");
            if (customerDto.NumberOption.IsSet)
                if (customerDto.NumberOption.Value != null)
                    writer.WriteNumber("Number", customerDto.NumberOption.Value!.Value);
                else
                    writer.WriteNull("Number");

            if (customerDto.OrganizationNumberOption.IsSet)
                if (customerDto.OrganizationNumberOption.Value != null)
                    writer.WriteString("OrganizationNumber", customerDto.OrganizationNumber);
                else
                    writer.WriteNull("OrganizationNumber");

            if (customerDto.PaymentReminderEmailAddressOption.IsSet)
                if (customerDto.PaymentReminderEmailAddressOption.Value != null)
                    writer.WriteString("PaymentReminderEmailAddress", customerDto.PaymentReminderEmailAddress);
                else
                    writer.WriteNull("PaymentReminderEmailAddress");

            if (customerDto.PaymentTermOption.IsSet)
                if (customerDto.PaymentTermOption.Value != null)
                    writer.WriteNumber("PaymentTerm", customerDto.PaymentTermOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTerm");

            if (customerDto.PaymentTermIdOption.IsSet)
                if (customerDto.PaymentTermIdOption.Value != null)
                    writer.WriteNumber("PaymentTermId", customerDto.PaymentTermIdOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTermId");

            if (customerDto.PhoneNumberOption.IsSet)
                if (customerDto.PhoneNumberOption.Value != null)
                    writer.WriteString("PhoneNumber", customerDto.PhoneNumber);
                else
                    writer.WriteNull("PhoneNumber");

            if (customerDto.ReminderDeliveryTypeOption.IsSet)
                if (customerDto.ReminderDeliveryTypeOption!.Value != null)
                {
                    var reminderDeliveryTypeRawValue = ReminderDeliveryTypeValueConverter.ToJsonValue(customerDto.ReminderDeliveryTypeOption.Value!.Value);
                    writer.WriteString("ReminderDeliveryType", reminderDeliveryTypeRawValue);
                }
                else
                    writer.WriteNull("ReminderDeliveryType");
            if (customerDto.SalesPersonEmployeeIdOption.IsSet)
                if (customerDto.SalesPersonEmployeeIdOption.Value != null)
                    writer.WriteNumber("SalesPersonEmployeeId", customerDto.SalesPersonEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SalesPersonEmployeeId");

            if (customerDto.SalesPersonEmployeeNumberOption.IsSet)
                if (customerDto.SalesPersonEmployeeNumberOption.Value != null)
                    writer.WriteNumber("SalesPersonEmployeeNumber", customerDto.SalesPersonEmployeeNumberOption.Value!.Value);
                else
                    writer.WriteNull("SalesPersonEmployeeNumber");

            if (customerDto.SendPaymentRemindersOption.IsSet)
                if (customerDto.SendPaymentRemindersOption.Value != null)
                    writer.WriteBoolean("SendPaymentReminders", customerDto.SendPaymentRemindersOption.Value!.Value);
                else
                    writer.WriteNull("SendPaymentReminders");

            if (customerDto.SubledgerAccountIdOption.IsSet)
                writer.WriteNumber("SubledgerAccountId", customerDto.SubledgerAccountIdOption.Value!.Value);

            if (customerDto.TransferToDebtCollectionAgencyOption.IsSet)
                if (customerDto.TransferToDebtCollectionAgencyOption.Value != null)
                    writer.WriteBoolean("TransferToDebtCollectionAgency", customerDto.TransferToDebtCollectionAgencyOption.Value!.Value);
                else
                    writer.WriteNull("TransferToDebtCollectionAgency");

            if (customerDto.UseInvoiceFeeOption.IsSet)
                if (customerDto.UseInvoiceFeeOption.Value != null)
                    writer.WriteBoolean("UseInvoiceFee", customerDto.UseInvoiceFeeOption.Value!.Value);
                else
                    writer.WriteNull("UseInvoiceFee");

            if (customerDto.WebsiteUrlOption.IsSet)
                if (customerDto.WebsiteUrlOption.Value != null)
                    writer.WriteString("WebsiteUrl", customerDto.WebsiteUrl);
                else
                    writer.WriteNull("WebsiteUrl");
        }
    }
}
