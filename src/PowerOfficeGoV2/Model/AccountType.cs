// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Specifies the account type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Customer&lt;/i&gt; - Customer sub-ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Employee&lt;/i&gt; - Employee sub-ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;General&lt;/i&gt; - General ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Supplier&lt;/i&gt; - Supplier sub-ledger account.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Specifies the account type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Customer&lt;/i&gt; - Customer sub-ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Employee&lt;/i&gt; - Employee sub-ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;General&lt;/i&gt; - General ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Supplier&lt;/i&gt; - Supplier sub-ledger account.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum AccountType
    {
        /// <summary>
        /// Enum Customer for value: Customer
        /// </summary>
        Customer = 1,

        /// <summary>
        /// Enum Employee for value: Employee
        /// </summary>
        Employee = 2,

        /// <summary>
        /// Enum General for value: General
        /// </summary>
        General = 3,

        /// <summary>
        /// Enum Supplier for value: Supplier
        /// </summary>
        Supplier = 4
    }

    /// <summary>
    /// Converts <see cref="AccountType"/> to and from the JSON value
    /// </summary>
    public static class AccountTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountType FromString(string value)
        {
            if (value.Equals("Customer"))
                return AccountType.Customer;

            if (value.Equals("Employee"))
                return AccountType.Employee;

            if (value.Equals("General"))
                return AccountType.General;

            if (value.Equals("Supplier"))
                return AccountType.Supplier;

            throw new NotImplementedException($"Could not convert value to type AccountType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AccountType? FromStringOrDefault(string value)
        {
            if (value.Equals("Customer"))
                return AccountType.Customer;

            if (value.Equals("Employee"))
                return AccountType.Employee;

            if (value.Equals("General"))
                return AccountType.General;

            if (value.Equals("Supplier"))
                return AccountType.Supplier;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AccountType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AccountType value)
        {
            if (value == AccountType.Customer)
                return "Customer";

            if (value == AccountType.Employee)
                return "Employee";

            if (value == AccountType.General)
                return "General";

            if (value == AccountType.Supplier)
                return "Supplier";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AccountTypeJsonConverter : JsonConverter<AccountType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountType? result = rawValue == null
                ? null
                : AccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AccountType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountType accountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(accountType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountType"/>
    /// </summary>
    public class AccountTypeNullableJsonConverter : JsonConverter<AccountType?>
    {
        /// <summary>
        /// Returns a AccountType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AccountType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AccountType? result = rawValue == null
                ? null
                : AccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AccountType? accountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(accountType?.ToString() ?? "null");
        }
    }
}
