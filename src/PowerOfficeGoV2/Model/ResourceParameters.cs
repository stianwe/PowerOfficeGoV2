// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Structure containing various resource-filter options
    /// </summary>
    public partial class ResourceParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceParameters" /> class.
        /// </summary>
        /// <param name="fields">Define desired fields that should be returned in Json (All fields by default).</param>
        /// <param name="maxPageSize">The maximum amount of objects that can be return in a Page (20 000 by default).</param>
        /// <param name="orderBy">Define fields to order by, and if it should order asc (default) or desc.</param>
        /// <param name="pageNumber">The desired page to return.</param>
        /// <param name="pageSize">The amount of objects to return in a Page (5000 by default). Not allowed to be larger than MaxPageSize.</param>
        /// <param name="useDatabaseValidation">If set to true, all relevant filter-values will be validated against the database. NOTE: This will make the api-call much slower, but only for the initial request, as the validation-results are cached. Useful for debugging/support purposes.</param>
        [JsonConstructor]
        public ResourceParameters(Option<string?> fields = default, Option<int?> maxPageSize = default, Option<string?> orderBy = default, Option<int?> pageNumber = default, Option<int?> pageSize = default, Option<bool?> useDatabaseValidation = default)
        {
            FieldsOption = fields;
            MaxPageSizeOption = maxPageSize;
            OrderByOption = orderBy;
            PageNumberOption = pageNumber;
            PageSizeOption = pageSize;
            UseDatabaseValidationOption = useDatabaseValidation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Fields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FieldsOption { get; private set; }

        /// <summary>
        /// Define desired fields that should be returned in Json (All fields by default).
        /// </summary>
        /// <value>Define desired fields that should be returned in Json (All fields by default).</value>
        [JsonPropertyName("Fields")]
        public string? Fields { get { return this.FieldsOption; } set { this.FieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxPageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxPageSizeOption { get; }

        /// <summary>
        /// The maximum amount of objects that can be return in a Page (20 000 by default).
        /// </summary>
        /// <value>The maximum amount of objects that can be return in a Page (20 000 by default).</value>
        /* <example>20000</example> */
        [JsonPropertyName("MaxPageSize")]
        public int? MaxPageSize { get { return this.MaxPageSizeOption; } }

        /// <summary>
        /// Used to track the state of OrderBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrderByOption { get; private set; }

        /// <summary>
        /// Define fields to order by, and if it should order asc (default) or desc.
        /// </summary>
        /// <value>Define fields to order by, and if it should order asc (default) or desc.</value>
        [JsonPropertyName("OrderBy")]
        public string? OrderBy { get { return this.OrderByOption; } set { this.OrderByOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageNumberOption { get; private set; }

        /// <summary>
        /// The desired page to return.
        /// </summary>
        /// <value>The desired page to return.</value>
        /* <example>2</example> */
        [JsonPropertyName("PageNumber")]
        public int? PageNumber { get { return this.PageNumberOption; } set { this.PageNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// The amount of objects to return in a Page (5000 by default). Not allowed to be larger than MaxPageSize.
        /// </summary>
        /// <value>The amount of objects to return in a Page (5000 by default). Not allowed to be larger than MaxPageSize.</value>
        /* <example>5000</example> */
        [JsonPropertyName("PageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseDatabaseValidation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseDatabaseValidationOption { get; private set; }

        /// <summary>
        /// If set to true, all relevant filter-values will be validated against the database. NOTE: This will make the api-call much slower, but only for the initial request, as the validation-results are cached. Useful for debugging/support purposes.
        /// </summary>
        /// <value>If set to true, all relevant filter-values will be validated against the database. NOTE: This will make the api-call much slower, but only for the initial request, as the validation-results are cached. Useful for debugging/support purposes.</value>
        [JsonPropertyName("UseDatabaseValidation")]
        public bool? UseDatabaseValidation { get { return this.UseDatabaseValidationOption; } set { this.UseDatabaseValidationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceParameters {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  MaxPageSize: ").Append(MaxPageSize).Append("\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  UseDatabaseValidation: ").Append(UseDatabaseValidation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResourceParameters" />
    /// </summary>
    public class ResourceParametersJsonConverter : JsonConverter<ResourceParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResourceParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResourceParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fields = default;
            Option<int?> maxPageSize = default;
            Option<string?> orderBy = default;
            Option<int?> pageNumber = default;
            Option<int?> pageSize = default;
            Option<bool?> useDatabaseValidation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Fields":
                            fields = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MaxPageSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxPageSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OrderBy":
                            orderBy = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PageNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PageSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "UseDatabaseValidation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useDatabaseValidation = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (maxPageSize.IsSet && maxPageSize.Value == null)
                throw new ArgumentNullException(nameof(maxPageSize), "Property is not nullable for class ResourceParameters.");

            if (pageNumber.IsSet && pageNumber.Value == null)
                throw new ArgumentNullException(nameof(pageNumber), "Property is not nullable for class ResourceParameters.");

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class ResourceParameters.");

            if (useDatabaseValidation.IsSet && useDatabaseValidation.Value == null)
                throw new ArgumentNullException(nameof(useDatabaseValidation), "Property is not nullable for class ResourceParameters.");

            return new ResourceParameters(fields, maxPageSize, orderBy, pageNumber, pageSize, useDatabaseValidation);
        }

        /// <summary>
        /// Serializes a <see cref="ResourceParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResourceParameters resourceParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resourceParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResourceParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResourceParameters resourceParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resourceParameters.FieldsOption.IsSet)
                if (resourceParameters.FieldsOption.Value != null)
                    writer.WriteString("Fields", resourceParameters.Fields);
                else
                    writer.WriteNull("Fields");

            if (resourceParameters.MaxPageSizeOption.IsSet)
                writer.WriteNumber("MaxPageSize", resourceParameters.MaxPageSizeOption.Value!.Value);

            if (resourceParameters.OrderByOption.IsSet)
                if (resourceParameters.OrderByOption.Value != null)
                    writer.WriteString("OrderBy", resourceParameters.OrderBy);
                else
                    writer.WriteNull("OrderBy");

            if (resourceParameters.PageNumberOption.IsSet)
                writer.WriteNumber("PageNumber", resourceParameters.PageNumberOption.Value!.Value);

            if (resourceParameters.PageSizeOption.IsSet)
                writer.WriteNumber("PageSize", resourceParameters.PageSizeOption.Value!.Value);

            if (resourceParameters.UseDatabaseValidationOption.IsSet)
                writer.WriteBoolean("UseDatabaseValidation", resourceParameters.UseDatabaseValidationOption.Value!.Value);
        }
    }
}
