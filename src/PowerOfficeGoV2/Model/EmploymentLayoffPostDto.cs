// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employment Layoff post DTO contains all properties relevant to creating a new layoff (line) on an employment relationship object in Go.
    /// </summary>
    public partial class EmploymentLayoffPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentLayoffPostDto" /> class.
        /// </summary>
        /// <param name="adjustFixedWage">Value indicating whether the fixed wage should be adjusted by the layoff percentage.  If true then this layoff percentage will be used to adjust the fixed wage.</param>
        /// <param name="endDate">The end date of the layoff.</param>
        /// <param name="endedAndReported">Value is set true if and when the layoff is ended and the reporting (a-melding) is done and finalized.  If true, the layoff will not be included in future reporting (a-melding).</param>
        /// <param name="excludeEmployeeFromPayroll">Value is set true if the employee should be excluded from payroll&#39;s while the layoff is active.</param>
        /// <param name="layoffPercentage">The percentage of layoff absence.  100 represent fully absent,  50 represent 50% absence from the current employment.</param>
        /// <param name="reportingId">The id of the layoff that will be reported.  If not set, Go will assign an id.  Not to be confused with the Id property.</param>
        /// <param name="startDate">The start date of the layoff.</param>
        [JsonConstructor]
        public EmploymentLayoffPostDto(Option<bool?> adjustFixedWage = default, Option<DateTimeOffset?> endDate = default, Option<bool?> endedAndReported = default, Option<bool?> excludeEmployeeFromPayroll = default, double? layoffPercentage = default, Option<string?> reportingId = default, DateTimeOffset? startDate = default)
        {
            AdjustFixedWageOption = adjustFixedWage;
            EndDateOption = endDate;
            EndedAndReportedOption = endedAndReported;
            ExcludeEmployeeFromPayrollOption = excludeEmployeeFromPayroll;
            LayoffPercentage = layoffPercentage;
            ReportingIdOption = reportingId;
            StartDate = startDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AdjustFixedWage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AdjustFixedWageOption { get; private set; }

        /// <summary>
        /// Value indicating whether the fixed wage should be adjusted by the layoff percentage.  If true then this layoff percentage will be used to adjust the fixed wage.
        /// </summary>
        /// <value>Value indicating whether the fixed wage should be adjusted by the layoff percentage.  If true then this layoff percentage will be used to adjust the fixed wage.</value>
        /* <example>false</example> */
        [JsonPropertyName("AdjustFixedWage")]
        public bool? AdjustFixedWage { get { return this.AdjustFixedWageOption; } set { this.AdjustFixedWageOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date of the layoff.
        /// </summary>
        /// <value>The end date of the layoff.</value>
        /* <example>Sun Jan 10 01:00:00 CET 2021</example> */
        [JsonPropertyName("EndDate")]
        public DateTimeOffset? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndedAndReported
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EndedAndReportedOption { get; private set; }

        /// <summary>
        /// Value is set true if and when the layoff is ended and the reporting (a-melding) is done and finalized.  If true, the layoff will not be included in future reporting (a-melding).
        /// </summary>
        /// <value>Value is set true if and when the layoff is ended and the reporting (a-melding) is done and finalized.  If true, the layoff will not be included in future reporting (a-melding).</value>
        /* <example>false</example> */
        [JsonPropertyName("EndedAndReported")]
        public bool? EndedAndReported { get { return this.EndedAndReportedOption; } set { this.EndedAndReportedOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExcludeEmployeeFromPayroll
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExcludeEmployeeFromPayrollOption { get; private set; }

        /// <summary>
        /// Value is set true if the employee should be excluded from payroll&#39;s while the layoff is active.
        /// </summary>
        /// <value>Value is set true if the employee should be excluded from payroll&#39;s while the layoff is active.</value>
        /* <example>false</example> */
        [JsonPropertyName("ExcludeEmployeeFromPayroll")]
        public bool? ExcludeEmployeeFromPayroll { get { return this.ExcludeEmployeeFromPayrollOption; } set { this.ExcludeEmployeeFromPayrollOption = new(value); } }

        /// <summary>
        /// The percentage of layoff absence.  100 represent fully absent,  50 represent 50% absence from the current employment.
        /// </summary>
        /// <value>The percentage of layoff absence.  100 represent fully absent,  50 represent 50% absence from the current employment.</value>
        /* <example>58.45</example> */
        [JsonPropertyName("LayoffPercentage")]
        public double? LayoffPercentage { get; set; }

        /// <summary>
        /// Used to track the state of ReportingId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReportingIdOption { get; private set; }

        /// <summary>
        /// The id of the layoff that will be reported.  If not set, Go will assign an id.  Not to be confused with the Id property.
        /// </summary>
        /// <value>The id of the layoff that will be reported.  If not set, Go will assign an id.  Not to be confused with the Id property.</value>
        /* <example>POGO_123abc</example> */
        [JsonPropertyName("ReportingId")]
        public string? ReportingId { get { return this.ReportingIdOption; } set { this.ReportingIdOption = new(value); } }

        /// <summary>
        /// The start date of the layoff.
        /// </summary>
        /// <value>The start date of the layoff.</value>
        /* <example>Fri Jan 01 01:00:00 CET 2021</example> */
        [JsonPropertyName("StartDate")]
        public DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentLayoffPostDto {\n");
            sb.Append("  AdjustFixedWage: ").Append(AdjustFixedWage).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndedAndReported: ").Append(EndedAndReported).Append("\n");
            sb.Append("  ExcludeEmployeeFromPayroll: ").Append(ExcludeEmployeeFromPayroll).Append("\n");
            sb.Append("  LayoffPercentage: ").Append(LayoffPercentage).Append("\n");
            sb.Append("  ReportingId: ").Append(ReportingId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentLayoffPostDto" />
    /// </summary>
    public class EmploymentLayoffPostDtoJsonConverter : JsonConverter<EmploymentLayoffPostDto>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentLayoffPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentLayoffPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> adjustFixedWage = default;
            Option<DateTimeOffset?> endDate = default;
            Option<bool?> endedAndReported = default;
            Option<bool?> excludeEmployeeFromPayroll = default;
            Option<double?> layoffPercentage = default;
            Option<string?> reportingId = default;
            Option<DateTimeOffset?> startDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AdjustFixedWage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                adjustFixedWage = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EndedAndReported":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endedAndReported = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ExcludeEmployeeFromPayroll":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                excludeEmployeeFromPayroll = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LayoffPercentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                layoffPercentage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ReportingId":
                            reportingId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!layoffPercentage.IsSet)
                throw new ArgumentException("Property is required for class EmploymentLayoffPostDto.", nameof(layoffPercentage));

            if (!startDate.IsSet)
                throw new ArgumentException("Property is required for class EmploymentLayoffPostDto.", nameof(startDate));

            return new EmploymentLayoffPostDto(adjustFixedWage, endDate, endedAndReported, excludeEmployeeFromPayroll, layoffPercentage.Value!, reportingId, startDate.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentLayoffPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentLayoffPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentLayoffPostDto employmentLayoffPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employmentLayoffPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentLayoffPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentLayoffPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmploymentLayoffPostDto employmentLayoffPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentLayoffPostDto.AdjustFixedWageOption.IsSet)
                if (employmentLayoffPostDto.AdjustFixedWageOption.Value != null)
                    writer.WriteBoolean("AdjustFixedWage", employmentLayoffPostDto.AdjustFixedWageOption.Value!.Value);
                else
                    writer.WriteNull("AdjustFixedWage");

            if (employmentLayoffPostDto.EndDateOption.IsSet)
                if (employmentLayoffPostDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", employmentLayoffPostDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (employmentLayoffPostDto.EndedAndReportedOption.IsSet)
                if (employmentLayoffPostDto.EndedAndReportedOption.Value != null)
                    writer.WriteBoolean("EndedAndReported", employmentLayoffPostDto.EndedAndReportedOption.Value!.Value);
                else
                    writer.WriteNull("EndedAndReported");

            if (employmentLayoffPostDto.ExcludeEmployeeFromPayrollOption.IsSet)
                if (employmentLayoffPostDto.ExcludeEmployeeFromPayrollOption.Value != null)
                    writer.WriteBoolean("ExcludeEmployeeFromPayroll", employmentLayoffPostDto.ExcludeEmployeeFromPayrollOption.Value!.Value);
                else
                    writer.WriteNull("ExcludeEmployeeFromPayroll");

            if (employmentLayoffPostDto.LayoffPercentage != null)
                writer.WriteNumber("LayoffPercentage", employmentLayoffPostDto.LayoffPercentage.Value);
            else
                writer.WriteNull("LayoffPercentage");

            if (employmentLayoffPostDto.ReportingIdOption.IsSet)
                if (employmentLayoffPostDto.ReportingIdOption.Value != null)
                    writer.WriteString("ReportingId", employmentLayoffPostDto.ReportingId);
                else
                    writer.WriteNull("ReportingId");

            if (employmentLayoffPostDto.StartDate != null)
                writer.WriteString("StartDate", employmentLayoffPostDto.StartDate.Value.ToString(StartDateFormat));
            else
                writer.WriteNull("StartDate");
        }
    }
}
