// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing the different roles client contact persons can have.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Other&lt;/i&gt; - Other role.&lt;/li&gt;&lt;li&gt;&lt;i&gt;GeneralManager&lt;/i&gt; - General manager role. (Norwegian: Daglig leder)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChairmanOfTheBoard&lt;/i&gt; - Chairman of the board role. (Norwegian: Styreleder)&lt;/li&gt;&lt;li&gt;&lt;i&gt;BoardMember&lt;/i&gt; - Board member role. (Norwegian: Styremedlem)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing the different roles client contact persons can have.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Other&lt;/i&gt; - Other role.&lt;/li&gt;&lt;li&gt;&lt;i&gt;GeneralManager&lt;/i&gt; - General manager role. (Norwegian: Daglig leder)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ChairmanOfTheBoard&lt;/i&gt; - Chairman of the board role. (Norwegian: Styreleder)&lt;/li&gt;&lt;li&gt;&lt;i&gt;BoardMember&lt;/i&gt; - Board member role. (Norwegian: Styremedlem)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ClientContactPersonRole
    {
        /// <summary>
        /// Enum Other for value: Other
        /// </summary>
        Other = 1,

        /// <summary>
        /// Enum GeneralManager for value: GeneralManager
        /// </summary>
        GeneralManager = 2,

        /// <summary>
        /// Enum ChairmanOfTheBoard for value: ChairmanOfTheBoard
        /// </summary>
        ChairmanOfTheBoard = 3,

        /// <summary>
        /// Enum BoardMember for value: BoardMember
        /// </summary>
        BoardMember = 4
    }

    /// <summary>
    /// Converts <see cref="ClientContactPersonRole"/> to and from the JSON value
    /// </summary>
    public static class ClientContactPersonRoleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ClientContactPersonRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClientContactPersonRole FromString(string value)
        {
            if (value.Equals("Other"))
                return ClientContactPersonRole.Other;

            if (value.Equals("GeneralManager"))
                return ClientContactPersonRole.GeneralManager;

            if (value.Equals("ChairmanOfTheBoard"))
                return ClientContactPersonRole.ChairmanOfTheBoard;

            if (value.Equals("BoardMember"))
                return ClientContactPersonRole.BoardMember;

            throw new NotImplementedException($"Could not convert value to type ClientContactPersonRole: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ClientContactPersonRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClientContactPersonRole? FromStringOrDefault(string value)
        {
            if (value.Equals("Other"))
                return ClientContactPersonRole.Other;

            if (value.Equals("GeneralManager"))
                return ClientContactPersonRole.GeneralManager;

            if (value.Equals("ChairmanOfTheBoard"))
                return ClientContactPersonRole.ChairmanOfTheBoard;

            if (value.Equals("BoardMember"))
                return ClientContactPersonRole.BoardMember;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ClientContactPersonRole"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ClientContactPersonRole value)
        {
            if (value == ClientContactPersonRole.Other)
                return "Other";

            if (value == ClientContactPersonRole.GeneralManager)
                return "GeneralManager";

            if (value == ClientContactPersonRole.ChairmanOfTheBoard)
                return "ChairmanOfTheBoard";

            if (value == ClientContactPersonRole.BoardMember)
                return "BoardMember";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientContactPersonRole"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ClientContactPersonRoleJsonConverter : JsonConverter<ClientContactPersonRole>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClientContactPersonRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ClientContactPersonRole? result = rawValue == null
                ? null
                : ClientContactPersonRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ClientContactPersonRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientContactPersonRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClientContactPersonRole clientContactPersonRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(clientContactPersonRole.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientContactPersonRole"/>
    /// </summary>
    public class ClientContactPersonRoleNullableJsonConverter : JsonConverter<ClientContactPersonRole?>
    {
        /// <summary>
        /// Returns a ClientContactPersonRole from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClientContactPersonRole? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ClientContactPersonRole? result = rawValue == null
                ? null
                : ClientContactPersonRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientContactPersonRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClientContactPersonRole? clientContactPersonRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(clientContactPersonRole?.ToString() ?? "null");
        }
    }
}
