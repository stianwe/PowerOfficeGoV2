// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The available delivery types for the send request.  Auto is set by default, if a delivery type is not provided in the request.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - Invoice will be delivered to the e-mail address supplied in the send request.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PdfPrintForDownload&lt;/i&gt; - The invoice will be posted and a pdf generated, but take note that no actual delivery takes place to the end customer.             The integrating party need to retrieve the pdf using the Blob endpoint, and ensure delivery of the invoice document to the end customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Auto&lt;/i&gt; - The system will automatically identify whether the end customer can receive invoices by EHF, eFaktura, AvtaleGiro (or in special cases Factoring or External delivery), and send electronically if possible.             If not, the invoice will be delivered as pdf by e-mail, to the supplied e-mail address in the send request.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The available delivery types for the send request.  Auto is set by default, if a delivery type is not provided in the request.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - Invoice will be delivered to the e-mail address supplied in the send request.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PdfPrintForDownload&lt;/i&gt; - The invoice will be posted and a pdf generated, but take note that no actual delivery takes place to the end customer.             The integrating party need to retrieve the pdf using the Blob endpoint, and ensure delivery of the invoice document to the end customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Auto&lt;/i&gt; - The system will automatically identify whether the end customer can receive invoices by EHF, eFaktura, AvtaleGiro (or in special cases Factoring or External delivery), and send electronically if possible.             If not, the invoice will be delivered as pdf by e-mail, to the supplied e-mail address in the send request.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum SendInvoiceDeliveryType
    {
        /// <summary>
        /// Enum PdfByEmail for value: PdfByEmail
        /// </summary>
        PdfByEmail = 1,

        /// <summary>
        /// Enum PdfPrintForDownload for value: PdfPrintForDownload
        /// </summary>
        PdfPrintForDownload = 2,

        /// <summary>
        /// Enum Auto for value: Auto
        /// </summary>
        Auto = 3
    }

    /// <summary>
    /// Converts <see cref="SendInvoiceDeliveryType"/> to and from the JSON value
    /// </summary>
    public static class SendInvoiceDeliveryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SendInvoiceDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SendInvoiceDeliveryType FromString(string value)
        {
            if (value.Equals("PdfByEmail"))
                return SendInvoiceDeliveryType.PdfByEmail;

            if (value.Equals("PdfPrintForDownload"))
                return SendInvoiceDeliveryType.PdfPrintForDownload;

            if (value.Equals("Auto"))
                return SendInvoiceDeliveryType.Auto;

            throw new NotImplementedException($"Could not convert value to type SendInvoiceDeliveryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SendInvoiceDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SendInvoiceDeliveryType? FromStringOrDefault(string value)
        {
            if (value.Equals("PdfByEmail"))
                return SendInvoiceDeliveryType.PdfByEmail;

            if (value.Equals("PdfPrintForDownload"))
                return SendInvoiceDeliveryType.PdfPrintForDownload;

            if (value.Equals("Auto"))
                return SendInvoiceDeliveryType.Auto;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SendInvoiceDeliveryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SendInvoiceDeliveryType value)
        {
            if (value == SendInvoiceDeliveryType.PdfByEmail)
                return "PdfByEmail";

            if (value == SendInvoiceDeliveryType.PdfPrintForDownload)
                return "PdfPrintForDownload";

            if (value == SendInvoiceDeliveryType.Auto)
                return "Auto";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendInvoiceDeliveryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SendInvoiceDeliveryTypeJsonConverter : JsonConverter<SendInvoiceDeliveryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SendInvoiceDeliveryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SendInvoiceDeliveryType? result = rawValue == null
                ? null
                : SendInvoiceDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SendInvoiceDeliveryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendInvoiceDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SendInvoiceDeliveryType sendInvoiceDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(sendInvoiceDeliveryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SendInvoiceDeliveryType"/>
    /// </summary>
    public class SendInvoiceDeliveryTypeNullableJsonConverter : JsonConverter<SendInvoiceDeliveryType?>
    {
        /// <summary>
        /// Returns a SendInvoiceDeliveryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SendInvoiceDeliveryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SendInvoiceDeliveryType? result = rawValue == null
                ? null
                : SendInvoiceDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sendInvoiceDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SendInvoiceDeliveryType? sendInvoiceDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(sendInvoiceDeliveryType?.ToString() ?? "null");
        }
    }
}
