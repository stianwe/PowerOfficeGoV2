// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The sales order complete DTO contains all properties relevant to a sales order (invoice draft) in Go (this includes sales order lines).
    /// </summary>
    public partial class SalesOrderCompleteDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderCompleteDto" /> class.
        /// </summary>
        /// <param name="brandingThemeCode">The code of the branding theme associated with the sales order.  Branding themes can be queried and identified using the Sales Settings endpoint.</param>
        /// <param name="brandingThemeId">The id of the branding theme associated with the sales order.  If null in the header, the value may inherit from any project set on the sales order, or from the clients default branding theme.  Branding themes can be queried and identified using the Sales Settings endpoint.</param>
        /// <param name="contactDeliveryAddressId">The id of the contact delivery address associated with the sales order.  Contact delivery addresses can be queries and identified using the Contact Delivery Addresses endpoint.</param>
        /// <param name="contractNo">The contract number.</param>
        /// <param name="createdDateTimeOffset">The timestamp when the sales order was created.</param>
        /// <param name="currencyCode">The standard currency code for the sales order.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK, but may inherit the value set on the Customer entity if null.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate.  Always base 1.</param>
        /// <param name="customMatchingReference">The custom matching reference of the sales order.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</param>
        /// <param name="customerId">The id of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.</param>
        /// <param name="customerNo">The number of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.</param>
        /// <param name="customerReference">The customer reference (ie buyers reference) of the sales order.  This property is often used to give the receiver of the (eventual) invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned on get,  otherwise the \&quot;Your Reference\&quot; text used on the (eventual) invoice will be returned.</param>
        /// <param name="customerReferenceContactPersonId">The id of the customer reference contact person (ie buyers reference) of the sales order.  If null, the value will be inherited from the project or the customer associated with the sales order.  If set, the contact persons name will be set as the CustomerReference on the sales order.  Contact persons can be queried and identified using the Contact person endpoint.</param>
        /// <param name="deliveryDate">The delivery date of the sales order.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.</param>
        /// <param name="deliveryTerm">The delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.</param>
        /// <param name="deliveryTermId">The id of the delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.</param>
        /// <param name="departmentCode">The code of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentCode &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</param>
        /// <param name="departmentId">The id of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentId &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the sales order.  Dim1Code &#x3D; -1 means no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the sales order.  This is the dimension 1 set in the header of the sales order.  The sales order lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the sales order.  Dim2Code &#x3D; -1 means no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the sales order.  This is the dimension 2 set in the header of the sales order.  The sales order lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the sales order.  Dim3Code &#x3D; -1 means no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the sales order.  This is the dimension 3 set in the header of the sales order.  The sales order lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.</param>
        /// <param name="externalImportReference">The ExternalImportReference associated with the sales order.  This property can be set by integrations creating sales orders, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.</param>
        /// <param name="id">The identifier of the sales order.  The id is assigned by Go when the sales order is created.  This id will persist on sent invoices and the voucher of sent invoices, if the sales order (invoice draft) is sent. // todo: er dette riktig?</param>
        /// <param name="importedOrderNo">The imported order number.  Can only be set on sales orders created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.  The imported order number is visible on the sales order in the Go GUI.</param>
        /// <param name="isCreatedByCurrentIntegration">Value indicating whether the sales order is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the sales order.</param>
        /// <param name="lineCount">The number of lines on this sales order.</param>
        /// <param name="locationCode">The code of the location dimension associated with the sales order.  Locations can be queried and identified using the Locations endpoint.</param>
        /// <param name="locationId">The id of the location dimension associated with the sales order.  This is the location set in the header of the sales order.  The sales order lines will inherit this value if no other location (or no location) is specified on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.</param>
        /// <param name="netAmount">The net amount of the order (vat exclusive).  This amount is presented in the currency used on the order (the currency given by the currencyCode).</param>
        /// <param name="paymentTerm">The payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.</param>
        /// <param name="paymentTermId">The id of the payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.</param>
        /// <param name="projectCode">The code of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  ProjectCode &#x3D; -1 means no project.  Projects can be queried and identified using the Projects endpoint.</param>
        /// <param name="projectId">The id of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  Projects can be queried and identified using the Projects endpoint.  ProjectId &#x3D; -1 means no project.</param>
        /// <param name="purchaseOrderReference">The purchase order reference on the sales order.  The property can be used to reference purchase order places by the customer.</param>
        /// <param name="relatedInvoiceNo">The related invoice number.  Can only be set for sales orders that are credit note drafts.  If set, this property will reference the original invoice being credited.</param>
        /// <param name="salesOrderDate">The sales order date.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.</param>
        /// <param name="salesOrderLines">The sales order lines.</param>
        /// <param name="salesOrderNo">The sales order number.  This value is autogenerated by Go.</param>
        /// <param name="salesOrderStatus">salesOrderStatus</param>
        /// <param name="salesPersonEmployeeId">The (employee) id of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.</param>
        /// <param name="salesPersonEmployeeNumber">The employee number of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.</param>
        /// <param name="totalAmount">The total amount of the sales order (VAT inclusive).  This amount is presented in the currency used on the sales order (the currency given by the currencyCode).</param>
        [JsonConstructor]
        public SalesOrderCompleteDto(Option<string?> brandingThemeCode = default, Option<long?> brandingThemeId = default, Option<long?> contactDeliveryAddressId = default, Option<string?> contractNo = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<string?> customMatchingReference = default, Option<long?> customerId = default, Option<long?> customerNo = default, Option<string?> customerReference = default, Option<long?> customerReferenceContactPersonId = default, Option<DateTimeOffset?> deliveryDate = default, Option<string?> deliveryTerm = default, Option<long?> deliveryTermId = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<string?> externalImportReference = default, Option<Guid?> id = default, Option<long?> importedOrderNo = default, Option<bool?> isCreatedByCurrentIntegration = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<long?> lineCount = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<double?> netAmount = default, Option<int?> paymentTerm = default, Option<long?> paymentTermId = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<string?> purchaseOrderReference = default, Option<long?> relatedInvoiceNo = default, Option<DateTimeOffset?> salesOrderDate = default, Option<List<SalesOrderLineDto>?> salesOrderLines = default, Option<long?> salesOrderNo = default, Option<OrderStatus?> salesOrderStatus = default, Option<long?> salesPersonEmployeeId = default, Option<long?> salesPersonEmployeeNumber = default, Option<double?> totalAmount = default)
        {
            BrandingThemeCodeOption = brandingThemeCode;
            BrandingThemeIdOption = brandingThemeId;
            ContactDeliveryAddressIdOption = contactDeliveryAddressId;
            ContractNoOption = contractNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CustomMatchingReferenceOption = customMatchingReference;
            CustomerIdOption = customerId;
            CustomerNoOption = customerNo;
            CustomerReferenceOption = customerReference;
            CustomerReferenceContactPersonIdOption = customerReferenceContactPersonId;
            DeliveryDateOption = deliveryDate;
            DeliveryTermOption = deliveryTerm;
            DeliveryTermIdOption = deliveryTermId;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            ImportedOrderNoOption = importedOrderNo;
            IsCreatedByCurrentIntegrationOption = isCreatedByCurrentIntegration;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LineCountOption = lineCount;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            NetAmountOption = netAmount;
            PaymentTermOption = paymentTerm;
            PaymentTermIdOption = paymentTermId;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            PurchaseOrderReferenceOption = purchaseOrderReference;
            RelatedInvoiceNoOption = relatedInvoiceNo;
            SalesOrderDateOption = salesOrderDate;
            SalesOrderLinesOption = salesOrderLines;
            SalesOrderNoOption = salesOrderNo;
            SalesOrderStatusOption = salesOrderStatus;
            SalesPersonEmployeeIdOption = salesPersonEmployeeId;
            SalesPersonEmployeeNumberOption = salesPersonEmployeeNumber;
            TotalAmountOption = totalAmount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SalesOrderStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OrderStatus?> SalesOrderStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets SalesOrderStatus
        /// </summary>
        [JsonPropertyName("SalesOrderStatus")]
        public OrderStatus? SalesOrderStatus { get { return this.SalesOrderStatusOption; } set { this.SalesOrderStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrandingThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrandingThemeCodeOption { get; }

        /// <summary>
        /// The code of the branding theme associated with the sales order.  Branding themes can be queried and identified using the Sales Settings endpoint.
        /// </summary>
        /// <value>The code of the branding theme associated with the sales order.  Branding themes can be queried and identified using the Sales Settings endpoint.</value>
        /* <example>4</example> */
        [JsonPropertyName("BrandingThemeCode")]
        public string? BrandingThemeCode { get { return this.BrandingThemeCodeOption; } }

        /// <summary>
        /// Used to track the state of BrandingThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BrandingThemeIdOption { get; private set; }

        /// <summary>
        /// The id of the branding theme associated with the sales order.  If null in the header, the value may inherit from any project set on the sales order, or from the clients default branding theme.  Branding themes can be queried and identified using the Sales Settings endpoint.
        /// </summary>
        /// <value>The id of the branding theme associated with the sales order.  If null in the header, the value may inherit from any project set on the sales order, or from the clients default branding theme.  Branding themes can be queried and identified using the Sales Settings endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("BrandingThemeId")]
        public long? BrandingThemeId { get { return this.BrandingThemeIdOption; } set { this.BrandingThemeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactDeliveryAddressId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContactDeliveryAddressIdOption { get; private set; }

        /// <summary>
        /// The id of the contact delivery address associated with the sales order.  Contact delivery addresses can be queries and identified using the Contact Delivery Addresses endpoint.
        /// </summary>
        /// <value>The id of the contact delivery address associated with the sales order.  Contact delivery addresses can be queries and identified using the Contact Delivery Addresses endpoint.</value>
        [JsonPropertyName("ContactDeliveryAddressId")]
        public long? ContactDeliveryAddressId { get { return this.ContactDeliveryAddressIdOption; } set { this.ContactDeliveryAddressIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractNoOption { get; private set; }

        /// <summary>
        /// The contract number.
        /// </summary>
        /// <value>The contract number.</value>
        /* <example>123-244A</example> */
        [JsonPropertyName("ContractNo")]
        public string? ContractNo { get { return this.ContractNoOption; } set { this.ContractNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the sales order was created.
        /// </summary>
        /// <value>The timestamp when the sales order was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The standard currency code for the sales order.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK, but may inherit the value set on the Customer entity if null.
        /// </summary>
        /// <value>The standard currency code for the sales order.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to NOK, but may inherit the value set on the Customer entity if null.</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; private set; }

        /// <summary>
        /// The normalized currency exchange rate.  Always base 1.
        /// </summary>
        /// <value>The normalized currency exchange rate.  Always base 1.</value>
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } set { this.CurrencyExchangeRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; private set; }

        /// <summary>
        /// The custom matching reference of the sales order.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).
        /// </summary>
        /// <value>The custom matching reference of the sales order.  This property will only have value on entries created through the API or Import with CustomMatchingReference specified.  This property is used for matching purposes in the customer sub-ledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } set { this.CustomMatchingReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerIdOption { get; private set; }

        /// <summary>
        /// The id of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.
        /// </summary>
        /// <value>The id of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerId")]
        public long? CustomerId { get { return this.CustomerIdOption; } set { this.CustomerIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerNoOption { get; }

        /// <summary>
        /// The number of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.
        /// </summary>
        /// <value>The number of the customer associated with the sales order.  Customers can be queried and identified using the Customers endpoint.</value>
        /* <example>10010</example> */
        [JsonPropertyName("CustomerNo")]
        public long? CustomerNo { get { return this.CustomerNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomerReferenceOption { get; private set; }

        /// <summary>
        /// The customer reference (ie buyers reference) of the sales order.  This property is often used to give the receiver of the (eventual) invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned on get,  otherwise the \&quot;Your Reference\&quot; text used on the (eventual) invoice will be returned.
        /// </summary>
        /// <value>The customer reference (ie buyers reference) of the sales order.  This property is often used to give the receiver of the (eventual) invoice a reference they are familiar with.  If CustomerReferenceContactPersonId has value, the name of the customers contact person is returned on get,  otherwise the \&quot;Your Reference\&quot; text used on the (eventual) invoice will be returned.</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomerReference")]
        public string? CustomerReference { get { return this.CustomerReferenceOption; } set { this.CustomerReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerReferenceContactPersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerReferenceContactPersonIdOption { get; private set; }

        /// <summary>
        /// The id of the customer reference contact person (ie buyers reference) of the sales order.  If null, the value will be inherited from the project or the customer associated with the sales order.  If set, the contact persons name will be set as the CustomerReference on the sales order.  Contact persons can be queried and identified using the Contact person endpoint.
        /// </summary>
        /// <value>The id of the customer reference contact person (ie buyers reference) of the sales order.  If null, the value will be inherited from the project or the customer associated with the sales order.  If set, the contact persons name will be set as the CustomerReference on the sales order.  Contact persons can be queried and identified using the Contact person endpoint.</value>
        [JsonPropertyName("CustomerReferenceContactPersonId")]
        public long? CustomerReferenceContactPersonId { get { return this.CustomerReferenceContactPersonIdOption; } set { this.CustomerReferenceContactPersonIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DeliveryDateOption { get; private set; }

        /// <summary>
        /// The delivery date of the sales order.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.
        /// </summary>
        /// <value>The delivery date of the sales order.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.</value>
        /* <example>Fri Aug 05 02:00:00 CEST 2022</example> */
        [JsonPropertyName("DeliveryDate")]
        public DateTimeOffset? DeliveryDate { get { return this.DeliveryDateOption; } set { this.DeliveryDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryTermOption { get; }

        /// <summary>
        /// The delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.
        /// </summary>
        /// <value>The delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.</value>
        /* <example>DAP</example> */
        [JsonPropertyName("DeliveryTerm")]
        public string? DeliveryTerm { get { return this.DeliveryTermOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeliveryTermIdOption { get; private set; }

        /// <summary>
        /// The id of the delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.
        /// </summary>
        /// <value>The id of the delivery term of the sales order.  If null, the value will be inherited from project, customer or the client delivery term settings.  Delivery terms can be queried and identified using the Delivery terms endpoint.</value>
        /* <example>47001</example> */
        [JsonPropertyName("DeliveryTermId")]
        public long? DeliveryTermId { get { return this.DeliveryTermIdOption; } set { this.DeliveryTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentCode &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.
        /// </summary>
        /// <value>The code of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentCode &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentId &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.
        /// </summary>
        /// <value>The id of the department associated with the sales order.  This is the department set in the header of the sales order.  If null in the header, the value may inherit from the project, customer or the employee creating the sales order (if created using the GUI) - in that order.  The sales order lines will inherit this value if no other department (or no department) is specified on the line.  DepartmentId &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with the sales order.  Dim1Code &#x3D; -1 means no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the sales order.  Dim1Code &#x3D; -1 means no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</value>
        /* <example>dim1</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the sales order.  This is the dimension 1 set in the header of the sales order.  The sales order lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the sales order.  This is the dimension 1 set in the header of the sales order.  The sales order lines might specify other dimension 1 values or no dimension 1.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with the sales order.  Dim2Code &#x3D; -1 means no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the sales order.  Dim2Code &#x3D; -1 means no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</value>
        /* <example>dim2</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the sales order.  This is the dimension 2 set in the header of the sales order.  The sales order lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the sales order.  This is the dimension 2 set in the header of the sales order.  The sales order lines might specify other dimension 2 values or no dimension 2.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with the sales order.  Dim3Code &#x3D; -1 means no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the sales order.  Dim3Code &#x3D; -1 means no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.</value>
        /* <example>dim3</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the sales order.  This is the dimension 3 set in the header of the sales order.  The sales order lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the sales order.  This is the dimension 3 set in the header of the sales order.  The sales order lines might specify other dimension 3 values or no dimension 3.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The ExternalImportReference associated with the sales order.  This property can be set by integrations creating sales orders, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.
        /// </summary>
        /// <value>The ExternalImportReference associated with the sales order.  This property can be set by integrations creating sales orders, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The identifier of the sales order.  The id is assigned by Go when the sales order is created.  This id will persist on sent invoices and the voucher of sent invoices, if the sales order (invoice draft) is sent. // todo: er dette riktig?
        /// </summary>
        /// <value>The identifier of the sales order.  The id is assigned by Go when the sales order is created.  This id will persist on sent invoices and the voucher of sent invoices, if the sales order (invoice draft) is sent. // todo: er dette riktig?</value>
        /* <example>ee373540-ca8d-4562-8fb6-6fb52de47722</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ImportedOrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedOrderNoOption { get; private set; }

        /// <summary>
        /// The imported order number.  Can only be set on sales orders created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.  The imported order number is visible on the sales order in the Go GUI.
        /// </summary>
        /// <value>The imported order number.  Can only be set on sales orders created using the api or import, and on vouchers posted directly using the api or an import.  Can be used to reference the order number in the external system.  The imported order number is visible on the sales order in the Go GUI.</value>
        /* <example>23145</example> */
        [JsonPropertyName("ImportedOrderNo")]
        public long? ImportedOrderNo { get { return this.ImportedOrderNoOption; } set { this.ImportedOrderNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCreatedByCurrentIntegration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCreatedByCurrentIntegrationOption { get; }

        /// <summary>
        /// Value indicating whether the sales order is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.
        /// </summary>
        /// <value>Value indicating whether the sales order is created by the integration currently communicating with the API.  Will be true for all entries that are created by the same integration user (same Application Key) as the integration currently authorized.  Can be used in filtering if only the current integration&#39;s entries are relevant to report.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsCreatedByCurrentIntegration")]
        public bool? IsCreatedByCurrentIntegration { get { return this.IsCreatedByCurrentIntegrationOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the sales order.
        /// </summary>
        /// <value>The timestamp of the last change of the sales order.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LineCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LineCountOption { get; }

        /// <summary>
        /// The number of lines on this sales order.
        /// </summary>
        /// <value>The number of lines on this sales order.</value>
        /* <example>3</example> */
        [JsonPropertyName("LineCount")]
        public long? LineCount { get { return this.LineCountOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with the sales order.  Locations can be queried and identified using the Locations endpoint.
        /// </summary>
        /// <value>The code of the location dimension associated with the sales order.  Locations can be queried and identified using the Locations endpoint.</value>
        /* <example>123546</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the sales order.  This is the location set in the header of the sales order.  The sales order lines will inherit this value if no other location (or no location) is specified on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.
        /// </summary>
        /// <value>The id of the location dimension associated with the sales order.  This is the location set in the header of the sales order.  The sales order lines will inherit this value if no other location (or no location) is specified on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.</value>
        /* <example>123456</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of NetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetAmountOption { get; }

        /// <summary>
        /// The net amount of the order (vat exclusive).  This amount is presented in the currency used on the order (the currency given by the currencyCode).
        /// </summary>
        /// <value>The net amount of the order (vat exclusive).  This amount is presented in the currency used on the order (the currency given by the currencyCode).</value>
        /* <example>1000.33</example> */
        [JsonPropertyName("NetAmount")]
        public double? NetAmount { get { return this.NetAmountOption; } }

        /// <summary>
        /// Used to track the state of PaymentTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PaymentTermOption { get; }

        /// <summary>
        /// The payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.
        /// </summary>
        /// <value>The payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.</value>
        /* <example>14</example> */
        [JsonPropertyName("PaymentTerm")]
        public int? PaymentTerm { get { return this.PaymentTermOption; } }

        /// <summary>
        /// Used to track the state of PaymentTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PaymentTermIdOption { get; private set; }

        /// <summary>
        /// The id of the payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.
        /// </summary>
        /// <value>The id of the payment term of the sales order.  This is the default number of days after an invoice is sent until it is due.  If null, the value will be inherited from project, customer or the client payment term settings.  Payment terms can be queried and identified using the Payment terms endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("PaymentTermId")]
        public long? PaymentTermId { get { return this.PaymentTermIdOption; } set { this.PaymentTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The code of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  ProjectCode &#x3D; -1 means no project.  Projects can be queried and identified using the Projects endpoint.
        /// </summary>
        /// <value>The code of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  ProjectCode &#x3D; -1 means no project.  Projects can be queried and identified using the Projects endpoint.</value>
        /* <example>100</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  Projects can be queried and identified using the Projects endpoint.  ProjectId &#x3D; -1 means no project.
        /// </summary>
        /// <value>The id of the project associated with the sales order.  This is the project set in the header of the order.  The sales order lines will inherit this value if no other project (or no project) is specified on the line.  Projects can be queried and identified using the Projects endpoint.  ProjectId &#x3D; -1 means no project.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PurchaseOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurchaseOrderReferenceOption { get; private set; }

        /// <summary>
        /// The purchase order reference on the sales order.  The property can be used to reference purchase order places by the customer.
        /// </summary>
        /// <value>The purchase order reference on the sales order.  The property can be used to reference purchase order places by the customer.</value>
        /* <example>qwerty12345</example> */
        [JsonPropertyName("PurchaseOrderReference")]
        public string? PurchaseOrderReference { get { return this.PurchaseOrderReferenceOption; } set { this.PurchaseOrderReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of RelatedInvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RelatedInvoiceNoOption { get; private set; }

        /// <summary>
        /// The related invoice number.  Can only be set for sales orders that are credit note drafts.  If set, this property will reference the original invoice being credited.
        /// </summary>
        /// <value>The related invoice number.  Can only be set for sales orders that are credit note drafts.  If set, this property will reference the original invoice being credited.</value>
        /* <example>12345</example> */
        [JsonPropertyName("RelatedInvoiceNo")]
        public long? RelatedInvoiceNo { get { return this.RelatedInvoiceNoOption; } set { this.RelatedInvoiceNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesOrderDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> SalesOrderDateOption { get; private set; }

        /// <summary>
        /// The sales order date.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.
        /// </summary>
        /// <value>The sales order date.  Will default to the date when the sales order is sent (converted to invoice) if not set via import or api.</value>
        /* <example>Fri Aug 05 02:00:00 CEST 2022</example> */
        [JsonPropertyName("SalesOrderDate")]
        public DateTimeOffset? SalesOrderDate { get { return this.SalesOrderDateOption; } set { this.SalesOrderDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesOrderLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SalesOrderLineDto>?> SalesOrderLinesOption { get; }

        /// <summary>
        /// The sales order lines.
        /// </summary>
        /// <value>The sales order lines.</value>
        [JsonPropertyName("SalesOrderLines")]
        public List<SalesOrderLineDto>? SalesOrderLines { get { return this.SalesOrderLinesOption; } }

        /// <summary>
        /// Used to track the state of SalesOrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesOrderNoOption { get; }

        /// <summary>
        /// The sales order number.  This value is autogenerated by Go.
        /// </summary>
        /// <value>The sales order number.  This value is autogenerated by Go.</value>
        /* <example>6065</example> */
        [JsonPropertyName("SalesOrderNo")]
        public long? SalesOrderNo { get { return this.SalesOrderNoOption; } }

        /// <summary>
        /// Used to track the state of SalesPersonEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesPersonEmployeeIdOption { get; private set; }

        /// <summary>
        /// The (employee) id of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.
        /// </summary>
        /// <value>The (employee) id of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SalesPersonEmployeeId")]
        public long? SalesPersonEmployeeId { get { return this.SalesPersonEmployeeIdOption; } set { this.SalesPersonEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesPersonEmployeeNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesPersonEmployeeNumberOption { get; }

        /// <summary>
        /// The employee number of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.
        /// </summary>
        /// <value>The employee number of the sales person associated with the sales order.  If null, the sales person on the customer this sales order relates to is used or the default sales person from the SalesSettings.  Employees can be queried and identified using the Employees endpoint.</value>
        /* <example>3</example> */
        [JsonPropertyName("SalesPersonEmployeeNumber")]
        public long? SalesPersonEmployeeNumber { get { return this.SalesPersonEmployeeNumberOption; } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalAmountOption { get; }

        /// <summary>
        /// The total amount of the sales order (VAT inclusive).  This amount is presented in the currency used on the sales order (the currency given by the currencyCode).
        /// </summary>
        /// <value>The total amount of the sales order (VAT inclusive).  This amount is presented in the currency used on the sales order (the currency given by the currencyCode).</value>
        /* <example>12500.33</example> */
        [JsonPropertyName("TotalAmount")]
        public double? TotalAmount { get { return this.TotalAmountOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesOrderCompleteDto {\n");
            sb.Append("  BrandingThemeCode: ").Append(BrandingThemeCode).Append("\n");
            sb.Append("  BrandingThemeId: ").Append(BrandingThemeId).Append("\n");
            sb.Append("  ContactDeliveryAddressId: ").Append(ContactDeliveryAddressId).Append("\n");
            sb.Append("  ContractNo: ").Append(ContractNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerNo: ").Append(CustomerNo).Append("\n");
            sb.Append("  CustomerReference: ").Append(CustomerReference).Append("\n");
            sb.Append("  CustomerReferenceContactPersonId: ").Append(CustomerReferenceContactPersonId).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryTerm: ").Append(DeliveryTerm).Append("\n");
            sb.Append("  DeliveryTermId: ").Append(DeliveryTermId).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedOrderNo: ").Append(ImportedOrderNo).Append("\n");
            sb.Append("  IsCreatedByCurrentIntegration: ").Append(IsCreatedByCurrentIntegration).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LineCount: ").Append(LineCount).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  PaymentTermId: ").Append(PaymentTermId).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurchaseOrderReference: ").Append(PurchaseOrderReference).Append("\n");
            sb.Append("  RelatedInvoiceNo: ").Append(RelatedInvoiceNo).Append("\n");
            sb.Append("  SalesOrderDate: ").Append(SalesOrderDate).Append("\n");
            sb.Append("  SalesOrderLines: ").Append(SalesOrderLines).Append("\n");
            sb.Append("  SalesOrderNo: ").Append(SalesOrderNo).Append("\n");
            sb.Append("  SalesOrderStatus: ").Append(SalesOrderStatus).Append("\n");
            sb.Append("  SalesPersonEmployeeId: ").Append(SalesPersonEmployeeId).Append("\n");
            sb.Append("  SalesPersonEmployeeNumber: ").Append(SalesPersonEmployeeNumber).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalesOrderCompleteDto" />
    /// </summary>
    public class SalesOrderCompleteDtoJsonConverter : JsonConverter<SalesOrderCompleteDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SalesOrderDate
        /// </summary>
        public static string SalesOrderDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="SalesOrderCompleteDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SalesOrderCompleteDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> brandingThemeCode = default;
            Option<long?> brandingThemeId = default;
            Option<long?> contactDeliveryAddressId = default;
            Option<string?> contractNo = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<string?> customMatchingReference = default;
            Option<long?> customerId = default;
            Option<long?> customerNo = default;
            Option<string?> customerReference = default;
            Option<long?> customerReferenceContactPersonId = default;
            Option<DateTimeOffset?> deliveryDate = default;
            Option<string?> deliveryTerm = default;
            Option<long?> deliveryTermId = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<string?> externalImportReference = default;
            Option<Guid?> id = default;
            Option<long?> importedOrderNo = default;
            Option<bool?> isCreatedByCurrentIntegration = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<long?> lineCount = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<double?> netAmount = default;
            Option<int?> paymentTerm = default;
            Option<long?> paymentTermId = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<string?> purchaseOrderReference = default;
            Option<long?> relatedInvoiceNo = default;
            Option<DateTimeOffset?> salesOrderDate = default;
            Option<List<SalesOrderLineDto>?> salesOrderLines = default;
            Option<long?> salesOrderNo = default;
            Option<OrderStatus?> salesOrderStatus = default;
            Option<long?> salesPersonEmployeeId = default;
            Option<long?> salesPersonEmployeeNumber = default;
            Option<double?> totalAmount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "BrandingThemeCode":
                            brandingThemeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "BrandingThemeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                brandingThemeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ContactDeliveryAddressId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactDeliveryAddressId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ContractNo":
                            contractNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerReference":
                            customerReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerReferenceContactPersonId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerReferenceContactPersonId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DeliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DeliveryTerm":
                            deliveryTerm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ImportedOrderNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedOrderNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsCreatedByCurrentIntegration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCreatedByCurrentIntegration = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LineCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lineCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NetAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "PaymentTerm":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTerm = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PaymentTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PurchaseOrderReference":
                            purchaseOrderReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RelatedInvoiceNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                relatedInvoiceNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SalesOrderDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesOrderDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "SalesOrderLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesOrderLines = new Option<List<SalesOrderLineDto>?>(JsonSerializer.Deserialize<List<SalesOrderLineDto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "SalesOrderNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesOrderNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SalesOrderStatus":
                            string? salesOrderStatusRawValue = utf8JsonReader.GetString();
                            if (salesOrderStatusRawValue != null)
                                salesOrderStatus = new Option<OrderStatus?>(OrderStatusValueConverter.FromStringOrDefault(salesOrderStatusRawValue));
                            break;
                        case "SalesPersonEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesPersonEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SalesPersonEmployeeNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesPersonEmployeeNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TotalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class SalesOrderCompleteDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SalesOrderCompleteDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class SalesOrderCompleteDto.");

            if (lineCount.IsSet && lineCount.Value == null)
                throw new ArgumentNullException(nameof(lineCount), "Property is not nullable for class SalesOrderCompleteDto.");

            if (netAmount.IsSet && netAmount.Value == null)
                throw new ArgumentNullException(nameof(netAmount), "Property is not nullable for class SalesOrderCompleteDto.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class SalesOrderCompleteDto.");

            return new SalesOrderCompleteDto(brandingThemeCode, brandingThemeId, contactDeliveryAddressId, contractNo, createdDateTimeOffset, currencyCode, currencyExchangeRate, customMatchingReference, customerId, customerNo, customerReference, customerReferenceContactPersonId, deliveryDate, deliveryTerm, deliveryTermId, departmentCode, departmentId, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, externalImportReference, id, importedOrderNo, isCreatedByCurrentIntegration, lastChangedDateTimeOffset, lineCount, locationCode, locationId, netAmount, paymentTerm, paymentTermId, projectCode, projectId, purchaseOrderReference, relatedInvoiceNo, salesOrderDate, salesOrderLines, salesOrderNo, salesOrderStatus, salesPersonEmployeeId, salesPersonEmployeeNumber, totalAmount);
        }

        /// <summary>
        /// Serializes a <see cref="SalesOrderCompleteDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salesOrderCompleteDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SalesOrderCompleteDto salesOrderCompleteDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, salesOrderCompleteDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SalesOrderCompleteDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salesOrderCompleteDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SalesOrderCompleteDto salesOrderCompleteDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (salesOrderCompleteDto.BrandingThemeCodeOption.IsSet)
                if (salesOrderCompleteDto.BrandingThemeCodeOption.Value != null)
                    writer.WriteString("BrandingThemeCode", salesOrderCompleteDto.BrandingThemeCode);
                else
                    writer.WriteNull("BrandingThemeCode");

            if (salesOrderCompleteDto.BrandingThemeIdOption.IsSet)
                if (salesOrderCompleteDto.BrandingThemeIdOption.Value != null)
                    writer.WriteNumber("BrandingThemeId", salesOrderCompleteDto.BrandingThemeIdOption.Value!.Value);
                else
                    writer.WriteNull("BrandingThemeId");

            if (salesOrderCompleteDto.ContactDeliveryAddressIdOption.IsSet)
                if (salesOrderCompleteDto.ContactDeliveryAddressIdOption.Value != null)
                    writer.WriteNumber("ContactDeliveryAddressId", salesOrderCompleteDto.ContactDeliveryAddressIdOption.Value!.Value);
                else
                    writer.WriteNull("ContactDeliveryAddressId");

            if (salesOrderCompleteDto.ContractNoOption.IsSet)
                if (salesOrderCompleteDto.ContractNoOption.Value != null)
                    writer.WriteString("ContractNo", salesOrderCompleteDto.ContractNo);
                else
                    writer.WriteNull("ContractNo");

            if (salesOrderCompleteDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", salesOrderCompleteDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (salesOrderCompleteDto.CurrencyCodeOption.IsSet)
                if (salesOrderCompleteDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", salesOrderCompleteDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (salesOrderCompleteDto.CurrencyExchangeRateOption.IsSet)
                if (salesOrderCompleteDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", salesOrderCompleteDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (salesOrderCompleteDto.CustomMatchingReferenceOption.IsSet)
                if (salesOrderCompleteDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", salesOrderCompleteDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (salesOrderCompleteDto.CustomerIdOption.IsSet)
                if (salesOrderCompleteDto.CustomerIdOption.Value != null)
                    writer.WriteNumber("CustomerId", salesOrderCompleteDto.CustomerIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerId");

            if (salesOrderCompleteDto.CustomerNoOption.IsSet)
                if (salesOrderCompleteDto.CustomerNoOption.Value != null)
                    writer.WriteNumber("CustomerNo", salesOrderCompleteDto.CustomerNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerNo");

            if (salesOrderCompleteDto.CustomerReferenceOption.IsSet)
                if (salesOrderCompleteDto.CustomerReferenceOption.Value != null)
                    writer.WriteString("CustomerReference", salesOrderCompleteDto.CustomerReference);
                else
                    writer.WriteNull("CustomerReference");

            if (salesOrderCompleteDto.CustomerReferenceContactPersonIdOption.IsSet)
                if (salesOrderCompleteDto.CustomerReferenceContactPersonIdOption.Value != null)
                    writer.WriteNumber("CustomerReferenceContactPersonId", salesOrderCompleteDto.CustomerReferenceContactPersonIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerReferenceContactPersonId");

            if (salesOrderCompleteDto.DeliveryDateOption.IsSet)
                if (salesOrderCompleteDto.DeliveryDateOption.Value != null)
                    writer.WriteString("DeliveryDate", salesOrderCompleteDto.DeliveryDateOption.Value!.Value.ToString(DeliveryDateFormat));
                else
                    writer.WriteNull("DeliveryDate");

            if (salesOrderCompleteDto.DeliveryTermOption.IsSet)
                if (salesOrderCompleteDto.DeliveryTermOption.Value != null)
                    writer.WriteString("DeliveryTerm", salesOrderCompleteDto.DeliveryTerm);
                else
                    writer.WriteNull("DeliveryTerm");

            if (salesOrderCompleteDto.DeliveryTermIdOption.IsSet)
                if (salesOrderCompleteDto.DeliveryTermIdOption.Value != null)
                    writer.WriteNumber("DeliveryTermId", salesOrderCompleteDto.DeliveryTermIdOption.Value!.Value);
                else
                    writer.WriteNull("DeliveryTermId");

            if (salesOrderCompleteDto.DepartmentCodeOption.IsSet)
                if (salesOrderCompleteDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", salesOrderCompleteDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (salesOrderCompleteDto.DepartmentIdOption.IsSet)
                if (salesOrderCompleteDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", salesOrderCompleteDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (salesOrderCompleteDto.Dim1CodeOption.IsSet)
                if (salesOrderCompleteDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", salesOrderCompleteDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (salesOrderCompleteDto.Dim1IdOption.IsSet)
                if (salesOrderCompleteDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", salesOrderCompleteDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (salesOrderCompleteDto.Dim2CodeOption.IsSet)
                if (salesOrderCompleteDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", salesOrderCompleteDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (salesOrderCompleteDto.Dim2IdOption.IsSet)
                if (salesOrderCompleteDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", salesOrderCompleteDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (salesOrderCompleteDto.Dim3CodeOption.IsSet)
                if (salesOrderCompleteDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", salesOrderCompleteDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (salesOrderCompleteDto.Dim3IdOption.IsSet)
                if (salesOrderCompleteDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", salesOrderCompleteDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (salesOrderCompleteDto.ExternalImportReferenceOption.IsSet)
                if (salesOrderCompleteDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", salesOrderCompleteDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (salesOrderCompleteDto.IdOption.IsSet)
                writer.WriteString("Id", salesOrderCompleteDto.IdOption.Value!.Value);

            if (salesOrderCompleteDto.ImportedOrderNoOption.IsSet)
                if (salesOrderCompleteDto.ImportedOrderNoOption.Value != null)
                    writer.WriteNumber("ImportedOrderNo", salesOrderCompleteDto.ImportedOrderNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedOrderNo");

            if (salesOrderCompleteDto.IsCreatedByCurrentIntegrationOption.IsSet)
                if (salesOrderCompleteDto.IsCreatedByCurrentIntegrationOption.Value != null)
                    writer.WriteBoolean("IsCreatedByCurrentIntegration", salesOrderCompleteDto.IsCreatedByCurrentIntegrationOption.Value!.Value);
                else
                    writer.WriteNull("IsCreatedByCurrentIntegration");

            if (salesOrderCompleteDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", salesOrderCompleteDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (salesOrderCompleteDto.LineCountOption.IsSet)
                writer.WriteNumber("LineCount", salesOrderCompleteDto.LineCountOption.Value!.Value);

            if (salesOrderCompleteDto.LocationCodeOption.IsSet)
                if (salesOrderCompleteDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", salesOrderCompleteDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (salesOrderCompleteDto.LocationIdOption.IsSet)
                if (salesOrderCompleteDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", salesOrderCompleteDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (salesOrderCompleteDto.NetAmountOption.IsSet)
                writer.WriteNumber("NetAmount", salesOrderCompleteDto.NetAmountOption.Value!.Value);

            if (salesOrderCompleteDto.PaymentTermOption.IsSet)
                if (salesOrderCompleteDto.PaymentTermOption.Value != null)
                    writer.WriteNumber("PaymentTerm", salesOrderCompleteDto.PaymentTermOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTerm");

            if (salesOrderCompleteDto.PaymentTermIdOption.IsSet)
                if (salesOrderCompleteDto.PaymentTermIdOption.Value != null)
                    writer.WriteNumber("PaymentTermId", salesOrderCompleteDto.PaymentTermIdOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTermId");

            if (salesOrderCompleteDto.ProjectCodeOption.IsSet)
                if (salesOrderCompleteDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", salesOrderCompleteDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (salesOrderCompleteDto.ProjectIdOption.IsSet)
                if (salesOrderCompleteDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", salesOrderCompleteDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (salesOrderCompleteDto.PurchaseOrderReferenceOption.IsSet)
                if (salesOrderCompleteDto.PurchaseOrderReferenceOption.Value != null)
                    writer.WriteString("PurchaseOrderReference", salesOrderCompleteDto.PurchaseOrderReference);
                else
                    writer.WriteNull("PurchaseOrderReference");

            if (salesOrderCompleteDto.RelatedInvoiceNoOption.IsSet)
                if (salesOrderCompleteDto.RelatedInvoiceNoOption.Value != null)
                    writer.WriteNumber("RelatedInvoiceNo", salesOrderCompleteDto.RelatedInvoiceNoOption.Value!.Value);
                else
                    writer.WriteNull("RelatedInvoiceNo");

            if (salesOrderCompleteDto.SalesOrderDateOption.IsSet)
                if (salesOrderCompleteDto.SalesOrderDateOption.Value != null)
                    writer.WriteString("SalesOrderDate", salesOrderCompleteDto.SalesOrderDateOption.Value!.Value.ToString(SalesOrderDateFormat));
                else
                    writer.WriteNull("SalesOrderDate");

            if (salesOrderCompleteDto.SalesOrderLinesOption.IsSet)
                if (salesOrderCompleteDto.SalesOrderLinesOption.Value != null)
                {
                    writer.WritePropertyName("SalesOrderLines");
                    JsonSerializer.Serialize(writer, salesOrderCompleteDto.SalesOrderLines, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("SalesOrderLines");
            if (salesOrderCompleteDto.SalesOrderNoOption.IsSet)
                if (salesOrderCompleteDto.SalesOrderNoOption.Value != null)
                    writer.WriteNumber("SalesOrderNo", salesOrderCompleteDto.SalesOrderNoOption.Value!.Value);
                else
                    writer.WriteNull("SalesOrderNo");

            if (salesOrderCompleteDto.SalesOrderStatusOption.IsSet)
                if (salesOrderCompleteDto.SalesOrderStatusOption!.Value != null)
                {
                    var salesOrderStatusRawValue = OrderStatusValueConverter.ToJsonValue(salesOrderCompleteDto.SalesOrderStatusOption.Value!.Value);
                    writer.WriteString("SalesOrderStatus", salesOrderStatusRawValue);
                }
                else
                    writer.WriteNull("SalesOrderStatus");
            if (salesOrderCompleteDto.SalesPersonEmployeeIdOption.IsSet)
                if (salesOrderCompleteDto.SalesPersonEmployeeIdOption.Value != null)
                    writer.WriteNumber("SalesPersonEmployeeId", salesOrderCompleteDto.SalesPersonEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SalesPersonEmployeeId");

            if (salesOrderCompleteDto.SalesPersonEmployeeNumberOption.IsSet)
                if (salesOrderCompleteDto.SalesPersonEmployeeNumberOption.Value != null)
                    writer.WriteNumber("SalesPersonEmployeeNumber", salesOrderCompleteDto.SalesPersonEmployeeNumberOption.Value!.Value);
                else
                    writer.WriteNull("SalesPersonEmployeeNumber");

            if (salesOrderCompleteDto.TotalAmountOption.IsSet)
                writer.WriteNumber("TotalAmount", salesOrderCompleteDto.TotalAmountOption.Value!.Value);
        }
    }
}
