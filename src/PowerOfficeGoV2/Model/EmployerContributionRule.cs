// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The type of employer contribution rules an enterprise may be subject of.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralIndustries&lt;/i&gt; - General industry (norwegian: Generelle næringer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HealthEnterprisesAndPartsOfPublicSector&lt;/i&gt; - Health enterprises and parts of the public sector (norwegian: Helseforetak og deler av statsforvaltningen)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AgricultureForestryFisheryEtc&lt;/i&gt; - Agriculture and Forestry, Fisheries etc. (norwegian: Jord- og skogbruk, fiskeri etc.)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Svalbard&lt;/i&gt; - Svalbard&lt;/li&gt;&lt;li&gt;&lt;i&gt;SectorExemptActivity&lt;/i&gt; - Sector-exempt activity (norwegian: Sektorunntatt aktivitet)&lt;/li&gt;&lt;li&gt;&lt;i&gt;RoadFreightTransport&lt;/i&gt; - Road freight transport (norwegian: Godstransport på vei)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FinancialDifficulties&lt;/i&gt; - Financial difficulties (norwegian: Økonomiske vanskeligheter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdditionalEmployersContribution&lt;/i&gt; - Additional employers contribution (norwegian: Ekstra arbeidsgiveravgift)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The type of employer contribution rules an enterprise may be subject of.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralIndustries&lt;/i&gt; - General industry (norwegian: Generelle næringer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HealthEnterprisesAndPartsOfPublicSector&lt;/i&gt; - Health enterprises and parts of the public sector (norwegian: Helseforetak og deler av statsforvaltningen)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AgricultureForestryFisheryEtc&lt;/i&gt; - Agriculture and Forestry, Fisheries etc. (norwegian: Jord- og skogbruk, fiskeri etc.)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Svalbard&lt;/i&gt; - Svalbard&lt;/li&gt;&lt;li&gt;&lt;i&gt;SectorExemptActivity&lt;/i&gt; - Sector-exempt activity (norwegian: Sektorunntatt aktivitet)&lt;/li&gt;&lt;li&gt;&lt;i&gt;RoadFreightTransport&lt;/i&gt; - Road freight transport (norwegian: Godstransport på vei)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FinancialDifficulties&lt;/i&gt; - Financial difficulties (norwegian: Økonomiske vanskeligheter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdditionalEmployersContribution&lt;/i&gt; - Additional employers contribution (norwegian: Ekstra arbeidsgiveravgift)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum EmployerContributionRule
    {
        /// <summary>
        /// Enum GeneralIndustries for value: GeneralIndustries
        /// </summary>
        GeneralIndustries = 1,

        /// <summary>
        /// Enum HealthEnterprisesAndPartsOfPublicSector for value: HealthEnterprisesAndPartsOfPublicSector
        /// </summary>
        HealthEnterprisesAndPartsOfPublicSector = 2,

        /// <summary>
        /// Enum AgricultureForestryFisheryEtc for value: AgricultureForestryFisheryEtc
        /// </summary>
        AgricultureForestryFisheryEtc = 3,

        /// <summary>
        /// Enum Svalbard for value: Svalbard
        /// </summary>
        Svalbard = 4,

        /// <summary>
        /// Enum SectorExemptActivity for value: SectorExemptActivity
        /// </summary>
        SectorExemptActivity = 5,

        /// <summary>
        /// Enum RoadFreightTransport for value: RoadFreightTransport
        /// </summary>
        RoadFreightTransport = 6,

        /// <summary>
        /// Enum FinancialDifficulties for value: FinancialDifficulties
        /// </summary>
        FinancialDifficulties = 7,

        /// <summary>
        /// Enum AdditionalEmployersContribution for value: AdditionalEmployersContribution
        /// </summary>
        AdditionalEmployersContribution = 8
    }

    /// <summary>
    /// Converts <see cref="EmployerContributionRule"/> to and from the JSON value
    /// </summary>
    public static class EmployerContributionRuleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmployerContributionRule"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmployerContributionRule FromString(string value)
        {
            if (value.Equals("GeneralIndustries"))
                return EmployerContributionRule.GeneralIndustries;

            if (value.Equals("HealthEnterprisesAndPartsOfPublicSector"))
                return EmployerContributionRule.HealthEnterprisesAndPartsOfPublicSector;

            if (value.Equals("AgricultureForestryFisheryEtc"))
                return EmployerContributionRule.AgricultureForestryFisheryEtc;

            if (value.Equals("Svalbard"))
                return EmployerContributionRule.Svalbard;

            if (value.Equals("SectorExemptActivity"))
                return EmployerContributionRule.SectorExemptActivity;

            if (value.Equals("RoadFreightTransport"))
                return EmployerContributionRule.RoadFreightTransport;

            if (value.Equals("FinancialDifficulties"))
                return EmployerContributionRule.FinancialDifficulties;

            if (value.Equals("AdditionalEmployersContribution"))
                return EmployerContributionRule.AdditionalEmployersContribution;

            throw new NotImplementedException($"Could not convert value to type EmployerContributionRule: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmployerContributionRule"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmployerContributionRule? FromStringOrDefault(string value)
        {
            if (value.Equals("GeneralIndustries"))
                return EmployerContributionRule.GeneralIndustries;

            if (value.Equals("HealthEnterprisesAndPartsOfPublicSector"))
                return EmployerContributionRule.HealthEnterprisesAndPartsOfPublicSector;

            if (value.Equals("AgricultureForestryFisheryEtc"))
                return EmployerContributionRule.AgricultureForestryFisheryEtc;

            if (value.Equals("Svalbard"))
                return EmployerContributionRule.Svalbard;

            if (value.Equals("SectorExemptActivity"))
                return EmployerContributionRule.SectorExemptActivity;

            if (value.Equals("RoadFreightTransport"))
                return EmployerContributionRule.RoadFreightTransport;

            if (value.Equals("FinancialDifficulties"))
                return EmployerContributionRule.FinancialDifficulties;

            if (value.Equals("AdditionalEmployersContribution"))
                return EmployerContributionRule.AdditionalEmployersContribution;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmployerContributionRule"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmployerContributionRule value)
        {
            if (value == EmployerContributionRule.GeneralIndustries)
                return "GeneralIndustries";

            if (value == EmployerContributionRule.HealthEnterprisesAndPartsOfPublicSector)
                return "HealthEnterprisesAndPartsOfPublicSector";

            if (value == EmployerContributionRule.AgricultureForestryFisheryEtc)
                return "AgricultureForestryFisheryEtc";

            if (value == EmployerContributionRule.Svalbard)
                return "Svalbard";

            if (value == EmployerContributionRule.SectorExemptActivity)
                return "SectorExemptActivity";

            if (value == EmployerContributionRule.RoadFreightTransport)
                return "RoadFreightTransport";

            if (value == EmployerContributionRule.FinancialDifficulties)
                return "FinancialDifficulties";

            if (value == EmployerContributionRule.AdditionalEmployersContribution)
                return "AdditionalEmployersContribution";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployerContributionRule"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmployerContributionRuleJsonConverter : JsonConverter<EmployerContributionRule>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmployerContributionRule Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmployerContributionRule? result = rawValue == null
                ? null
                : EmployerContributionRuleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmployerContributionRule to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employerContributionRule"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmployerContributionRule employerContributionRule, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employerContributionRule.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployerContributionRule"/>
    /// </summary>
    public class EmployerContributionRuleNullableJsonConverter : JsonConverter<EmployerContributionRule?>
    {
        /// <summary>
        /// Returns a EmployerContributionRule from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmployerContributionRule? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmployerContributionRule? result = rawValue == null
                ? null
                : EmployerContributionRuleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employerContributionRule"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmployerContributionRule? employerContributionRule, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employerContributionRule?.ToString() ?? "null");
        }
    }
}
