// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining what kind of line the voucher line on a (outgoing) voucher is.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Normal&lt;/i&gt; - A normal (sales) line with a product and an account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;Text&lt;/i&gt; - A text line, no account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;Summary&lt;/i&gt; - A summary or subtotal line.                 Will summarize total hours from lines with the unit of measure type hours and/or total amounts, for the lines placed above this line.                 No account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvoiceFee&lt;/i&gt; - A line with the invoice fee, if invoice fee is used on this client.                 Will have an account transaction.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TotalHours&lt;/i&gt; - A summary line of the hours.                 Will summarize total hours from lines with the unit of measure type hours, for the lines that are placed above this line.                 No account transaction.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining what kind of line the voucher line on a (outgoing) voucher is.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Normal&lt;/i&gt; - A normal (sales) line with a product and an account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;Text&lt;/i&gt; - A text line, no account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;Summary&lt;/i&gt; - A summary or subtotal line.                 Will summarize total hours from lines with the unit of measure type hours and/or total amounts, for the lines placed above this line.                 No account transaction&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvoiceFee&lt;/i&gt; - A line with the invoice fee, if invoice fee is used on this client.                 Will have an account transaction.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TotalHours&lt;/i&gt; - A summary line of the hours.                 Will summarize total hours from lines with the unit of measure type hours, for the lines that are placed above this line.                 No account transaction.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum VoucherLineType
    {
        /// <summary>
        /// Enum Normal for value: Normal
        /// </summary>
        Normal = 1,

        /// <summary>
        /// Enum Text for value: Text
        /// </summary>
        Text = 2,

        /// <summary>
        /// Enum Summary for value: Summary
        /// </summary>
        Summary = 3,

        /// <summary>
        /// Enum InvoiceFee for value: InvoiceFee
        /// </summary>
        InvoiceFee = 4,

        /// <summary>
        /// Enum TotalHours for value: TotalHours
        /// </summary>
        TotalHours = 5
    }

    /// <summary>
    /// Converts <see cref="VoucherLineType"/> to and from the JSON value
    /// </summary>
    public static class VoucherLineTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VoucherLineType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherLineType FromString(string value)
        {
            if (value.Equals("Normal"))
                return VoucherLineType.Normal;

            if (value.Equals("Text"))
                return VoucherLineType.Text;

            if (value.Equals("Summary"))
                return VoucherLineType.Summary;

            if (value.Equals("InvoiceFee"))
                return VoucherLineType.InvoiceFee;

            if (value.Equals("TotalHours"))
                return VoucherLineType.TotalHours;

            throw new NotImplementedException($"Could not convert value to type VoucherLineType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VoucherLineType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherLineType? FromStringOrDefault(string value)
        {
            if (value.Equals("Normal"))
                return VoucherLineType.Normal;

            if (value.Equals("Text"))
                return VoucherLineType.Text;

            if (value.Equals("Summary"))
                return VoucherLineType.Summary;

            if (value.Equals("InvoiceFee"))
                return VoucherLineType.InvoiceFee;

            if (value.Equals("TotalHours"))
                return VoucherLineType.TotalHours;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VoucherLineType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VoucherLineType value)
        {
            if (value == VoucherLineType.Normal)
                return "Normal";

            if (value == VoucherLineType.Text)
                return "Text";

            if (value == VoucherLineType.Summary)
                return "Summary";

            if (value == VoucherLineType.InvoiceFee)
                return "InvoiceFee";

            if (value == VoucherLineType.TotalHours)
                return "TotalHours";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherLineType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VoucherLineTypeJsonConverter : JsonConverter<VoucherLineType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherLineType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherLineType? result = rawValue == null
                ? null
                : VoucherLineTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VoucherLineType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherLineType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherLineType voucherLineType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherLineType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherLineType"/>
    /// </summary>
    public class VoucherLineTypeNullableJsonConverter : JsonConverter<VoucherLineType?>
    {
        /// <summary>
        /// Returns a VoucherLineType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherLineType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherLineType? result = rawValue == null
                ? null
                : VoucherLineTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherLineType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherLineType? voucherLineType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherLineType?.ToString() ?? "null");
        }
    }
}
