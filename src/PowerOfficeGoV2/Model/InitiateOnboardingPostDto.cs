// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The initiate onboarding post DTO contains properties necessary for initiating the onboarding processes in GO.
    /// </summary>
    public partial class InitiateOnboardingPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateOnboardingPostDto" /> class.
        /// </summary>
        /// <param name="applicationKey">The applicationkey, representing the integrated application that is to be onboarded on client(s).  Must be set in the POST call initiating the onboarding.</param>
        /// <param name="clientOrganizationNo">The organization number of the PowerOffice Go client that are to onboard the integrated application.  If set, only this client will be presented to the user that must authorize the integration.  If not set, the user will be presented a list of all clients the user have acccess to onboard, enabling onboarding of multiple clients in one process.</param>
        /// <param name="redirectUri">The redirect uri we will route to if the user successfully authorize onboarding on client(s).  The uri need to be whitelisted by the api team before use, and this must be done separately for the demo and production environments.  The system validate the domain, sub-domain and path used, but any parameters beyond that are ignored (and as such, any \&quot;?to&#x3D;\&quot; variants can be used as the integrating party see fit).  The uri can be set to localhost in test phases.</param>
        [JsonConstructor]
        public InitiateOnboardingPostDto(Option<Guid?> applicationKey = default, Option<string?> clientOrganizationNo = default, Option<string?> redirectUri = default)
        {
            ApplicationKeyOption = applicationKey;
            ClientOrganizationNoOption = clientOrganizationNo;
            RedirectUriOption = redirectUri;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ApplicationKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ApplicationKeyOption { get; private set; }

        /// <summary>
        /// The applicationkey, representing the integrated application that is to be onboarded on client(s).  Must be set in the POST call initiating the onboarding.
        /// </summary>
        /// <value>The applicationkey, representing the integrated application that is to be onboarded on client(s).  Must be set in the POST call initiating the onboarding.</value>
        /* <example>1ed94aa6-b176-4c89-baa9-da3d240ac1e9</example> */
        [JsonPropertyName("ApplicationKey")]
        public Guid? ApplicationKey { get { return this.ApplicationKeyOption; } set { this.ApplicationKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientOrganizationNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientOrganizationNoOption { get; private set; }

        /// <summary>
        /// The organization number of the PowerOffice Go client that are to onboard the integrated application.  If set, only this client will be presented to the user that must authorize the integration.  If not set, the user will be presented a list of all clients the user have acccess to onboard, enabling onboarding of multiple clients in one process.
        /// </summary>
        /// <value>The organization number of the PowerOffice Go client that are to onboard the integrated application.  If set, only this client will be presented to the user that must authorize the integration.  If not set, the user will be presented a list of all clients the user have acccess to onboard, enabling onboarding of multiple clients in one process.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("ClientOrganizationNo")]
        public string? ClientOrganizationNo { get { return this.ClientOrganizationNoOption; } set { this.ClientOrganizationNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of RedirectUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RedirectUriOption { get; private set; }

        /// <summary>
        /// The redirect uri we will route to if the user successfully authorize onboarding on client(s).  The uri need to be whitelisted by the api team before use, and this must be done separately for the demo and production environments.  The system validate the domain, sub-domain and path used, but any parameters beyond that are ignored (and as such, any \&quot;?to&#x3D;\&quot; variants can be used as the integrating party see fit).  The uri can be set to localhost in test phases.
        /// </summary>
        /// <value>The redirect uri we will route to if the user successfully authorize onboarding on client(s).  The uri need to be whitelisted by the api team before use, and this must be done separately for the demo and production environments.  The system validate the domain, sub-domain and path used, but any parameters beyond that are ignored (and as such, any \&quot;?to&#x3D;\&quot; variants can be used as the integrating party see fit).  The uri can be set to localhost in test phases.</value>
        /* <example>https://auth.v2.integration.io/redirect</example> */
        [JsonPropertyName("RedirectUri")]
        public string? RedirectUri { get { return this.RedirectUriOption; } set { this.RedirectUriOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiateOnboardingPostDto {\n");
            sb.Append("  ApplicationKey: ").Append(ApplicationKey).Append("\n");
            sb.Append("  ClientOrganizationNo: ").Append(ClientOrganizationNo).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InitiateOnboardingPostDto" />
    /// </summary>
    public class InitiateOnboardingPostDtoJsonConverter : JsonConverter<InitiateOnboardingPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="InitiateOnboardingPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InitiateOnboardingPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> applicationKey = default;
            Option<string?> clientOrganizationNo = default;
            Option<string?> redirectUri = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ApplicationKey":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationKey = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ClientOrganizationNo":
                            clientOrganizationNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RedirectUri":
                            redirectUri = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (applicationKey.IsSet && applicationKey.Value == null)
                throw new ArgumentNullException(nameof(applicationKey), "Property is not nullable for class InitiateOnboardingPostDto.");

            return new InitiateOnboardingPostDto(applicationKey, clientOrganizationNo, redirectUri);
        }

        /// <summary>
        /// Serializes a <see cref="InitiateOnboardingPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InitiateOnboardingPostDto initiateOnboardingPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, initiateOnboardingPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InitiateOnboardingPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InitiateOnboardingPostDto initiateOnboardingPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (initiateOnboardingPostDto.ApplicationKeyOption.IsSet)
                writer.WriteString("ApplicationKey", initiateOnboardingPostDto.ApplicationKeyOption.Value!.Value);

            if (initiateOnboardingPostDto.ClientOrganizationNoOption.IsSet)
                if (initiateOnboardingPostDto.ClientOrganizationNoOption.Value != null)
                    writer.WriteString("ClientOrganizationNo", initiateOnboardingPostDto.ClientOrganizationNo);
                else
                    writer.WriteNull("ClientOrganizationNo");

            if (initiateOnboardingPostDto.RedirectUriOption.IsSet)
                if (initiateOnboardingPostDto.RedirectUriOption.Value != null)
                    writer.WriteString("RedirectUri", initiateOnboardingPostDto.RedirectUri);
                else
                    writer.WriteNull("RedirectUri");
        }
    }
}
