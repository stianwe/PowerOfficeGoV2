// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employment Salary post DTO contains all properties relevant to creating a new salary (line) on an employment relationship object in Go.
    /// </summary>
    public partial class EmploymentSalaryPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentSalaryPostDto" /> class.
        /// </summary>
        /// <param name="annualSalary">The annual salary of the employment salary.  Only relevant for fixed wage salary.</param>
        /// <param name="fromDate">The from-date for the effect of the employment salary.</param>
        /// <param name="hourlyRate">The hourly rate of the employment salary.  Relevant to set for hourly wage salary and commission salary.  For fixed wage salary, the hourly rate is automatically calculated if null, but can be overridden.  The calculation is based on the full time hours per week property on the employment general information, multiplied by 52 weeks.  Relevant for fixed wage in terms of overtime/extra hours, for instance.</param>
        /// <param name="remunerationType">remunerationType</param>
        [JsonConstructor]
        public EmploymentSalaryPostDto(Option<double?> annualSalary = default, DateOnly? fromDate = default, Option<double?> hourlyRate = default, SalaryRemunerationType? remunerationType = default)
        {
            AnnualSalaryOption = annualSalary;
            FromDate = fromDate;
            HourlyRateOption = hourlyRate;
            RemunerationType = remunerationType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RemunerationType
        /// </summary>
        [JsonPropertyName("RemunerationType")]
        public SalaryRemunerationType? RemunerationType { get; set; }

        /// <summary>
        /// Used to track the state of AnnualSalary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AnnualSalaryOption { get; private set; }

        /// <summary>
        /// The annual salary of the employment salary.  Only relevant for fixed wage salary.
        /// </summary>
        /// <value>The annual salary of the employment salary.  Only relevant for fixed wage salary.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("AnnualSalary")]
        public double? AnnualSalary { get { return this.AnnualSalaryOption; } set { this.AnnualSalaryOption = new(value); } }

        /// <summary>
        /// The from-date for the effect of the employment salary.
        /// </summary>
        /// <value>The from-date for the effect of the employment salary.</value>
        /* <example>Fri Jan 01 01:00:00 CET 2021</example> */
        [JsonPropertyName("FromDate")]
        public DateOnly? FromDate { get; set; }

        /// <summary>
        /// Used to track the state of HourlyRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HourlyRateOption { get; private set; }

        /// <summary>
        /// The hourly rate of the employment salary.  Relevant to set for hourly wage salary and commission salary.  For fixed wage salary, the hourly rate is automatically calculated if null, but can be overridden.  The calculation is based on the full time hours per week property on the employment general information, multiplied by 52 weeks.  Relevant for fixed wage in terms of overtime/extra hours, for instance.
        /// </summary>
        /// <value>The hourly rate of the employment salary.  Relevant to set for hourly wage salary and commission salary.  For fixed wage salary, the hourly rate is automatically calculated if null, but can be overridden.  The calculation is based on the full time hours per week property on the employment general information, multiplied by 52 weeks.  Relevant for fixed wage in terms of overtime/extra hours, for instance.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("HourlyRate")]
        public double? HourlyRate { get { return this.HourlyRateOption; } set { this.HourlyRateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentSalaryPostDto {\n");
            sb.Append("  AnnualSalary: ").Append(AnnualSalary).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  RemunerationType: ").Append(RemunerationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentSalaryPostDto" />
    /// </summary>
    public class EmploymentSalaryPostDtoJsonConverter : JsonConverter<EmploymentSalaryPostDto>
    {
        /// <summary>
        /// The format to use to serialize FromDate
        /// </summary>
        public static string FromDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentSalaryPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentSalaryPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> annualSalary = default;
            Option<DateOnly?> fromDate = default;
            Option<double?> hourlyRate = default;
            Option<SalaryRemunerationType?> remunerationType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AnnualSalary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                annualSalary = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "FromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "HourlyRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hourlyRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "RemunerationType":
                            string? remunerationTypeRawValue = utf8JsonReader.GetString();
                            if (remunerationTypeRawValue != null)
                                remunerationType = new Option<SalaryRemunerationType?>(SalaryRemunerationTypeValueConverter.FromStringOrDefault(remunerationTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fromDate.IsSet)
                throw new ArgumentException("Property is required for class EmploymentSalaryPostDto.", nameof(fromDate));

            if (!remunerationType.IsSet)
                throw new ArgumentException("Property is required for class EmploymentSalaryPostDto.", nameof(remunerationType));

            return new EmploymentSalaryPostDto(annualSalary, fromDate.Value!, hourlyRate, remunerationType.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentSalaryPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentSalaryPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentSalaryPostDto employmentSalaryPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employmentSalaryPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentSalaryPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentSalaryPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmploymentSalaryPostDto employmentSalaryPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentSalaryPostDto.AnnualSalaryOption.IsSet)
                if (employmentSalaryPostDto.AnnualSalaryOption.Value != null)
                    writer.WriteNumber("AnnualSalary", employmentSalaryPostDto.AnnualSalaryOption.Value!.Value);
                else
                    writer.WriteNull("AnnualSalary");

            if (employmentSalaryPostDto.FromDate != null)
                writer.WriteString("FromDate", employmentSalaryPostDto.FromDate.Value.ToString(FromDateFormat));
            else
                writer.WriteNull("FromDate");

            if (employmentSalaryPostDto.HourlyRateOption.IsSet)
                if (employmentSalaryPostDto.HourlyRateOption.Value != null)
                    writer.WriteNumber("HourlyRate", employmentSalaryPostDto.HourlyRateOption.Value!.Value);
                else
                    writer.WriteNull("HourlyRate");

            if (employmentSalaryPostDto.RemunerationType == null)
                writer.WriteNull("RemunerationType");
            else
            {
                var remunerationTypeRawValue = SalaryRemunerationTypeValueConverter.ToJsonValue(employmentSalaryPostDto.RemunerationType.Value);
                if (remunerationTypeRawValue != null)
                    writer.WriteString("RemunerationType", remunerationTypeRawValue);
                else
                    writer.WriteNull("RemunerationType");
            }
        }
    }
}
