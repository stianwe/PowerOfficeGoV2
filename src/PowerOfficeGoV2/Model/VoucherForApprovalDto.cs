// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Dto for available information when listing vouchers ready for handling by integration.
    /// </summary>
    public partial class VoucherForApprovalDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherForApprovalDto" /> class.
        /// </summary>
        /// <param name="approvalVoucherType">approvalVoucherType</param>
        /// <param name="availableFromDateTimeOffset">The timestamp of when the voucher was made available to the integrating party.</param>
        /// <param name="id">A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</param>
        /// <param name="originatedFromEhf">A value indicating whether the voucher was received to Go by EHF. If true, the voucher have an xml file associated with it.</param>
        [JsonConstructor]
        public VoucherForApprovalDto(Option<ApprovalVoucherType?> approvalVoucherType = default, Option<DateTimeOffset?> availableFromDateTimeOffset = default, Option<Guid?> id = default, Option<bool?> originatedFromEhf = default)
        {
            ApprovalVoucherTypeOption = approvalVoucherType;
            AvailableFromDateTimeOffsetOption = availableFromDateTimeOffset;
            IdOption = id;
            OriginatedFromEhfOption = originatedFromEhf;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ApprovalVoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApprovalVoucherType?> ApprovalVoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApprovalVoucherType
        /// </summary>
        [JsonPropertyName("ApprovalVoucherType")]
        public ApprovalVoucherType? ApprovalVoucherType { get { return this.ApprovalVoucherTypeOption; } set { this.ApprovalVoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AvailableFromDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> AvailableFromDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the voucher was made available to the integrating party.
        /// </summary>
        /// <value>The timestamp of when the voucher was made available to the integrating party.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("AvailableFromDateTimeOffset")]
        public DateTimeOffset? AvailableFromDateTimeOffset { get { return this.AvailableFromDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.
        /// </summary>
        /// <value>A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of OriginatedFromEhf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OriginatedFromEhfOption { get; private set; }

        /// <summary>
        /// A value indicating whether the voucher was received to Go by EHF. If true, the voucher have an xml file associated with it.
        /// </summary>
        /// <value>A value indicating whether the voucher was received to Go by EHF. If true, the voucher have an xml file associated with it.</value>
        /* <example>false</example> */
        [JsonPropertyName("OriginatedFromEhf")]
        public bool? OriginatedFromEhf { get { return this.OriginatedFromEhfOption; } set { this.OriginatedFromEhfOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherForApprovalDto {\n");
            sb.Append("  ApprovalVoucherType: ").Append(ApprovalVoucherType).Append("\n");
            sb.Append("  AvailableFromDateTimeOffset: ").Append(AvailableFromDateTimeOffset).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OriginatedFromEhf: ").Append(OriginatedFromEhf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherForApprovalDto" />
    /// </summary>
    public class VoucherForApprovalDtoJsonConverter : JsonConverter<VoucherForApprovalDto>
    {
        /// <summary>
        /// The format to use to serialize AvailableFromDateTimeOffset
        /// </summary>
        public static string AvailableFromDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="VoucherForApprovalDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VoucherForApprovalDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ApprovalVoucherType?> approvalVoucherType = default;
            Option<DateTimeOffset?> availableFromDateTimeOffset = default;
            Option<Guid?> id = default;
            Option<bool?> originatedFromEhf = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ApprovalVoucherType":
                            string? approvalVoucherTypeRawValue = utf8JsonReader.GetString();
                            if (approvalVoucherTypeRawValue != null)
                                approvalVoucherType = new Option<ApprovalVoucherType?>(ApprovalVoucherTypeValueConverter.FromStringOrDefault(approvalVoucherTypeRawValue));
                            break;
                        case "AvailableFromDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                availableFromDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "OriginatedFromEhf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originatedFromEhf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (availableFromDateTimeOffset.IsSet && availableFromDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(availableFromDateTimeOffset), "Property is not nullable for class VoucherForApprovalDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class VoucherForApprovalDto.");

            if (originatedFromEhf.IsSet && originatedFromEhf.Value == null)
                throw new ArgumentNullException(nameof(originatedFromEhf), "Property is not nullable for class VoucherForApprovalDto.");

            return new VoucherForApprovalDto(approvalVoucherType, availableFromDateTimeOffset, id, originatedFromEhf);
        }

        /// <summary>
        /// Serializes a <see cref="VoucherForApprovalDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherForApprovalDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VoucherForApprovalDto voucherForApprovalDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, voucherForApprovalDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VoucherForApprovalDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherForApprovalDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VoucherForApprovalDto voucherForApprovalDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (voucherForApprovalDto.ApprovalVoucherTypeOption.IsSet)
                if (voucherForApprovalDto.ApprovalVoucherTypeOption!.Value != null)
                {
                    var approvalVoucherTypeRawValue = ApprovalVoucherTypeValueConverter.ToJsonValue(voucherForApprovalDto.ApprovalVoucherTypeOption.Value!.Value);
                    writer.WriteString("ApprovalVoucherType", approvalVoucherTypeRawValue);
                }
                else
                    writer.WriteNull("ApprovalVoucherType");
            if (voucherForApprovalDto.AvailableFromDateTimeOffsetOption.IsSet)
                writer.WriteString("AvailableFromDateTimeOffset", voucherForApprovalDto.AvailableFromDateTimeOffsetOption.Value!.Value.ToString(AvailableFromDateTimeOffsetFormat));

            if (voucherForApprovalDto.IdOption.IsSet)
                writer.WriteString("Id", voucherForApprovalDto.IdOption.Value!.Value);

            if (voucherForApprovalDto.OriginatedFromEhfOption.IsSet)
                writer.WriteBoolean("OriginatedFromEhf", voucherForApprovalDto.OriginatedFromEhfOption.Value!.Value);
        }
    }
}
