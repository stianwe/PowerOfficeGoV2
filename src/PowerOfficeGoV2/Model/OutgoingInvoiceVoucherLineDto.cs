// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// properties available in an outgoing invoice voucher line
    /// </summary>
    public partial class OutgoingInvoiceVoucherLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceVoucherLineDto" /> class.
        /// </summary>
        /// <param name="accountId">The id of the general ledger account for the line.</param>
        /// <param name="accrual">accrual</param>
        /// <param name="currencyAmount">The amount on the line, in the currency specified by the currency code of the voucher.</param>
        /// <param name="departmentId">The department id of the line.</param>
        /// <param name="description">The description of the line.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the line.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the line.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the line.</param>
        /// <param name="locationId">The id of the location dimension associated with the line.</param>
        /// <param name="productId">The product id associated with the line.</param>
        /// <param name="projectId">The id of the project associated with the line.</param>
        /// <param name="quantity">The quantity dimension set on the line.</param>
        /// <param name="quantityOrdered">The quantity ordered by the customer.</param>
        /// <param name="unitOfMeasureType">unitOfMeasureType</param>
        /// <param name="vatId">The id of the vat code used on the line.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        [JsonConstructor]
        public OutgoingInvoiceVoucherLineDto(Option<long?> accountId = default, Option<AccrualBase1?> accrual = default, Option<double?> currencyAmount = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<long?> locationId = default, Option<long?> productId = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> quantityOrdered = default, Option<UnitOfMeasureType?> unitOfMeasureType = default, Option<int?> vatId = default, Option<VatReturnSpecification?> vatReturnSpecification = default)
        {
            AccountIdOption = accountId;
            AccrualOption = accrual;
            CurrencyAmountOption = currencyAmount;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            LocationIdOption = locationId;
            ProductIdOption = productId;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            QuantityOrderedOption = quantityOrdered;
            UnitOfMeasureTypeOption = unitOfMeasureType;
            VatIdOption = vatId;
            VatReturnSpecificationOption = vatReturnSpecification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UnitOfMeasureType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureType
        /// </summary>
        [JsonPropertyName("UnitOfMeasureType")]
        public UnitOfMeasureType? UnitOfMeasureType { get { return this.UnitOfMeasureTypeOption; } set { this.UnitOfMeasureTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account for the line.
        /// </summary>
        /// <value>The id of the general ledger account for the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } set { this.AccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accrual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccrualBase1?> AccrualOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accrual
        /// </summary>
        [JsonPropertyName("Accrual")]
        public AccrualBase1? Accrual { get { return this.AccrualOption; } set { this.AccrualOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The amount on the line, in the currency specified by the currency code of the voucher.
        /// </summary>
        /// <value>The amount on the line, in the currency specified by the currency code of the voucher.</value>
        /* <example>99</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department id of the line.
        /// </summary>
        /// <value>The department id of the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the line.
        /// </summary>
        /// <value>The description of the line.</value>
        /* <example>Hello accounting world</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the line.
        /// </summary>
        /// <value>The id of the location dimension associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; private set; }

        /// <summary>
        /// The product id associated with the line.
        /// </summary>
        /// <value>The product id associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the line.
        /// </summary>
        /// <value>The id of the project associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity dimension set on the line.
        /// </summary>
        /// <value>The quantity dimension set on the line.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuantityOrdered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOrderedOption { get; private set; }

        /// <summary>
        /// The quantity ordered by the customer.
        /// </summary>
        /// <value>The quantity ordered by the customer.</value>
        /* <example>123.45</example> */
        [JsonPropertyName("QuantityOrdered")]
        public double? QuantityOrdered { get { return this.QuantityOrderedOption; } set { this.QuantityOrderedOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used on the line.
        /// </summary>
        /// <value>The id of the vat code used on the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("VatId")]
        public int? VatId { get { return this.VatIdOption; } set { this.VatIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutgoingInvoiceVoucherLineDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Accrual: ").Append(Accrual).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityOrdered: ").Append(QuantityOrdered).Append("\n");
            sb.Append("  UnitOfMeasureType: ").Append(UnitOfMeasureType).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceVoucherLineDto" />
    /// </summary>
    public class OutgoingInvoiceVoucherLineDtoJsonConverter : JsonConverter<OutgoingInvoiceVoucherLineDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="OutgoingInvoiceVoucherLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OutgoingInvoiceVoucherLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<AccrualBase1?> accrual = default;
            Option<double?> currencyAmount = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<long?> locationId = default;
            Option<long?> productId = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> quantityOrdered = default;
            Option<UnitOfMeasureType?> unitOfMeasureType = default;
            Option<int?> vatId = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Accrual":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrual = new Option<AccrualBase1?>(JsonSerializer.Deserialize<AccrualBase1>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "QuantityOrdered":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityOrdered = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitOfMeasureType":
                            string? unitOfMeasureTypeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureTypeRawValue != null)
                                unitOfMeasureType = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureTypeRawValue));
                            break;
                        case "VatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accrual.IsSet && accrual.Value == null)
                throw new ArgumentNullException(nameof(accrual), "Property is not nullable for class OutgoingInvoiceVoucherLineDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class OutgoingInvoiceVoucherLineDto.");

            return new OutgoingInvoiceVoucherLineDto(accountId, accrual, currencyAmount, departmentId, description, dim1Id, dim2Id, dim3Id, locationId, productId, projectId, quantity, quantityOrdered, unitOfMeasureType, vatId, vatReturnSpecification);
        }

        /// <summary>
        /// Serializes a <see cref="OutgoingInvoiceVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceVoucherLineDto outgoingInvoiceVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, outgoingInvoiceVoucherLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OutgoingInvoiceVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OutgoingInvoiceVoucherLineDto outgoingInvoiceVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (outgoingInvoiceVoucherLineDto.AccrualOption.IsSet && outgoingInvoiceVoucherLineDto.Accrual == null)
                throw new ArgumentNullException(nameof(outgoingInvoiceVoucherLineDto.Accrual), "Property is required for class OutgoingInvoiceVoucherLineDto.");

            if (outgoingInvoiceVoucherLineDto.AccountIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.AccountIdOption.Value != null)
                    writer.WriteNumber("AccountId", outgoingInvoiceVoucherLineDto.AccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccountId");

            if (outgoingInvoiceVoucherLineDto.AccrualOption.IsSet)
            {
                writer.WritePropertyName("Accrual");
                JsonSerializer.Serialize(writer, outgoingInvoiceVoucherLineDto.Accrual, jsonSerializerOptions);
            }
            if (outgoingInvoiceVoucherLineDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", outgoingInvoiceVoucherLineDto.CurrencyAmountOption.Value!.Value);

            if (outgoingInvoiceVoucherLineDto.DepartmentIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", outgoingInvoiceVoucherLineDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (outgoingInvoiceVoucherLineDto.DescriptionOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", outgoingInvoiceVoucherLineDto.Description);
                else
                    writer.WriteNull("Description");

            if (outgoingInvoiceVoucherLineDto.Dim1IdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", outgoingInvoiceVoucherLineDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (outgoingInvoiceVoucherLineDto.Dim2IdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", outgoingInvoiceVoucherLineDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (outgoingInvoiceVoucherLineDto.Dim3IdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", outgoingInvoiceVoucherLineDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (outgoingInvoiceVoucherLineDto.LocationIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", outgoingInvoiceVoucherLineDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (outgoingInvoiceVoucherLineDto.ProductIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", outgoingInvoiceVoucherLineDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (outgoingInvoiceVoucherLineDto.ProjectIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", outgoingInvoiceVoucherLineDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (outgoingInvoiceVoucherLineDto.QuantityOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", outgoingInvoiceVoucherLineDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (outgoingInvoiceVoucherLineDto.QuantityOrderedOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.QuantityOrderedOption.Value != null)
                    writer.WriteNumber("QuantityOrdered", outgoingInvoiceVoucherLineDto.QuantityOrderedOption.Value!.Value);
                else
                    writer.WriteNull("QuantityOrdered");

            if (outgoingInvoiceVoucherLineDto.UnitOfMeasureTypeOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.UnitOfMeasureTypeOption!.Value != null)
                {
                    var unitOfMeasureTypeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(outgoingInvoiceVoucherLineDto.UnitOfMeasureTypeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureType", unitOfMeasureTypeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureType");
            if (outgoingInvoiceVoucherLineDto.VatIdOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.VatIdOption.Value != null)
                    writer.WriteNumber("VatId", outgoingInvoiceVoucherLineDto.VatIdOption.Value!.Value);
                else
                    writer.WriteNull("VatId");

            if (outgoingInvoiceVoucherLineDto.VatReturnSpecificationOption.IsSet)
                if (outgoingInvoiceVoucherLineDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(outgoingInvoiceVoucherLineDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
        }
    }
}
