// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Status of an assignment (draft vs active vs archived)&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Draft&lt;/i&gt; - The assignment is in a draft state&lt;/li&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The assignment is active&lt;/li&gt;&lt;li&gt;&lt;i&gt;Archived&lt;/i&gt; - The assigment is archived&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Status of an assignment (draft vs active vs archived)&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Draft&lt;/i&gt; - The assignment is in a draft state&lt;/li&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The assignment is active&lt;/li&gt;&lt;li&gt;&lt;i&gt;Archived&lt;/i&gt; - The assigment is archived&lt;/li&gt;&lt;/ul&gt;</value>
    public enum AssignmentAgreementStatus
    {
        /// <summary>
        /// Enum Draft for value: Draft
        /// </summary>
        Draft = 1,

        /// <summary>
        /// Enum Active for value: Active
        /// </summary>
        Active = 2,

        /// <summary>
        /// Enum Archived for value: Archived
        /// </summary>
        Archived = 3
    }

    /// <summary>
    /// Converts <see cref="AssignmentAgreementStatus"/> to and from the JSON value
    /// </summary>
    public static class AssignmentAgreementStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AssignmentAgreementStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssignmentAgreementStatus FromString(string value)
        {
            if (value.Equals("Draft"))
                return AssignmentAgreementStatus.Draft;

            if (value.Equals("Active"))
                return AssignmentAgreementStatus.Active;

            if (value.Equals("Archived"))
                return AssignmentAgreementStatus.Archived;

            throw new NotImplementedException($"Could not convert value to type AssignmentAgreementStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AssignmentAgreementStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AssignmentAgreementStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("Draft"))
                return AssignmentAgreementStatus.Draft;

            if (value.Equals("Active"))
                return AssignmentAgreementStatus.Active;

            if (value.Equals("Archived"))
                return AssignmentAgreementStatus.Archived;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AssignmentAgreementStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(AssignmentAgreementStatus value)
        {
            if (value == AssignmentAgreementStatus.Draft)
                return "Draft";

            if (value == AssignmentAgreementStatus.Active)
                return "Active";

            if (value == AssignmentAgreementStatus.Archived)
                return "Archived";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssignmentAgreementStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AssignmentAgreementStatusJsonConverter : JsonConverter<AssignmentAgreementStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssignmentAgreementStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssignmentAgreementStatus? result = rawValue == null
                ? null
                : AssignmentAgreementStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AssignmentAgreementStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentAgreementStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssignmentAgreementStatus assignmentAgreementStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assignmentAgreementStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssignmentAgreementStatus"/>
    /// </summary>
    public class AssignmentAgreementStatusNullableJsonConverter : JsonConverter<AssignmentAgreementStatus?>
    {
        /// <summary>
        /// Returns a AssignmentAgreementStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AssignmentAgreementStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AssignmentAgreementStatus? result = rawValue == null
                ? null
                : AssignmentAgreementStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentAgreementStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AssignmentAgreementStatus? assignmentAgreementStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(assignmentAgreementStatus?.ToString() ?? "null");
        }
    }
}
