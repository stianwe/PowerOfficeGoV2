// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Represents a customer balance.
    /// </summary>
    public partial class CustomerBalanceDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerBalanceDto" /> class.
        /// </summary>
        /// <param name="balance">The current total balance of the customer, as of the date (inclusive) provided in the query.</param>
        /// <param name="customerAccountNo">The customer account number for the related balance.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerExternalNo">The external number of the customer for the related balance, if set on the Customer entity.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.</param>
        /// <param name="customerId">The identifier of the customer this balance is related to.  Customers can be queried and identified using the Customer service.</param>
        /// <param name="customerName">The name of the customer for the related balance.  Customers can be queried and identified using the Customer service.</param>
        [JsonConstructor]
        internal CustomerBalanceDto(Option<double?> balance = default, Option<long?> customerAccountNo = default, Option<long?> customerExternalNo = default, Option<long?> customerId = default, Option<string?> customerName = default)
        {
            BalanceOption = balance;
            CustomerAccountNoOption = customerAccountNo;
            CustomerExternalNoOption = customerExternalNo;
            CustomerIdOption = customerId;
            CustomerNameOption = customerName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The current total balance of the customer, as of the date (inclusive) provided in the query.
        /// </summary>
        /// <value>The current total balance of the customer, as of the date (inclusive) provided in the query.</value>
        /* <example>502.25</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Used to track the state of CustomerAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerAccountNoOption { get; }

        /// <summary>
        /// The customer account number for the related balance.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The customer account number for the related balance.  CustomerAccountNo will also represent the Customer number.  Customers can be queried and identified using the Customer service.</value>
        /* <example>10000</example> */
        [JsonPropertyName("CustomerAccountNo")]
        public long? CustomerAccountNo { get { return this.CustomerAccountNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerExternalNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerExternalNoOption { get; }

        /// <summary>
        /// The external number of the customer for the related balance, if set on the Customer entity.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.
        /// </summary>
        /// <value>The external number of the customer for the related balance, if set on the Customer entity.  An external number set on the customer is often used to reference the customer number in the external system, if the customer numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.</value>
        /* <example>10000</example> */
        [JsonPropertyName("CustomerExternalNo")]
        public long? CustomerExternalNo { get { return this.CustomerExternalNoOption; } }

        /// <summary>
        /// Used to track the state of CustomerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerIdOption { get; }

        /// <summary>
        /// The identifier of the customer this balance is related to.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The identifier of the customer this balance is related to.  Customers can be queried and identified using the Customer service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerId")]
        public long? CustomerId { get { return this.CustomerIdOption; } }

        /// <summary>
        /// Used to track the state of CustomerName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomerNameOption { get; }

        /// <summary>
        /// The name of the customer for the related balance.  Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The name of the customer for the related balance.  Customers can be queried and identified using the Customer service.</value>
        /* <example>Coca-Cola AS</example> */
        [JsonPropertyName("CustomerName")]
        public string? CustomerName { get { return this.CustomerNameOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerBalanceDto {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CustomerAccountNo: ").Append(CustomerAccountNo).Append("\n");
            sb.Append("  CustomerExternalNo: ").Append(CustomerExternalNo).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomerBalanceDto" />
    /// </summary>
    public class CustomerBalanceDtoJsonConverter : JsonConverter<CustomerBalanceDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomerBalanceDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomerBalanceDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> balance = default;
            Option<long?> customerAccountNo = default;
            Option<long?> customerExternalNo = default;
            Option<long?> customerId = default;
            Option<string?> customerName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomerAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerExternalNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerExternalNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerName":
                            customerName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class CustomerBalanceDto.");

            return new CustomerBalanceDto(balance, customerAccountNo, customerExternalNo, customerId, customerName);
        }

        /// <summary>
        /// Serializes a <see cref="CustomerBalanceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerBalanceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomerBalanceDto customerBalanceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customerBalanceDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomerBalanceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customerBalanceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomerBalanceDto customerBalanceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customerBalanceDto.BalanceOption.IsSet)
                writer.WriteNumber("Balance", customerBalanceDto.BalanceOption.Value!.Value);

            if (customerBalanceDto.CustomerAccountNoOption.IsSet)
                if (customerBalanceDto.CustomerAccountNoOption.Value != null)
                    writer.WriteNumber("CustomerAccountNo", customerBalanceDto.CustomerAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerAccountNo");

            if (customerBalanceDto.CustomerExternalNoOption.IsSet)
                if (customerBalanceDto.CustomerExternalNoOption.Value != null)
                    writer.WriteNumber("CustomerExternalNo", customerBalanceDto.CustomerExternalNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerExternalNo");

            if (customerBalanceDto.CustomerIdOption.IsSet)
                if (customerBalanceDto.CustomerIdOption.Value != null)
                    writer.WriteNumber("CustomerId", customerBalanceDto.CustomerIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerId");

            if (customerBalanceDto.CustomerNameOption.IsSet)
                if (customerBalanceDto.CustomerNameOption.Value != null)
                    writer.WriteString("CustomerName", customerBalanceDto.CustomerName);
                else
                    writer.WriteNull("CustomerName");
        }
    }
}
