// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Vat return specification used for giving extra vat information about the transaction. Will be reported from 2022 in the norwegian vat return.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;Adjustment&lt;/i&gt; - Adjustments (Norwegian: Justering)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LossesOnClaims&lt;/i&gt; - Losses on claims (Norwegian: Tap på krav)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReversalOfInputValueAddedTax&lt;/i&gt; - Reversal of input value added tax (Norwegian: Tilbakeføring av inngående merverdiavgift)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Withdrawals&lt;/i&gt; - Withdrawals (Norwegian: Uttak)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdjustmentVatCompensationRealProperty&lt;/i&gt; - Adjustment of value added tax (VAT) compensation for real estate (Norwegian: Justering av merverdiavgiftskompensasjon for fast eiendom)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchasesEligibleForCompensation&lt;/i&gt; - Purchases eligible for compensation (Norwegian: Kjøp med kompensasjonsrett). This specification can not be used by the API directly when creating vouchers/account transactions, but will appear on account transactions on outgoing vat on purchases on client&#39;s eligible for compensation.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Vat return specification used for giving extra vat information about the transaction. Will be reported from 2022 in the norwegian vat return.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;Adjustment&lt;/i&gt; - Adjustments (Norwegian: Justering)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LossesOnClaims&lt;/i&gt; - Losses on claims (Norwegian: Tap på krav)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReversalOfInputValueAddedTax&lt;/i&gt; - Reversal of input value added tax (Norwegian: Tilbakeføring av inngående merverdiavgift)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Withdrawals&lt;/i&gt; - Withdrawals (Norwegian: Uttak)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdjustmentVatCompensationRealProperty&lt;/i&gt; - Adjustment of value added tax (VAT) compensation for real estate (Norwegian: Justering av merverdiavgiftskompensasjon for fast eiendom)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchasesEligibleForCompensation&lt;/i&gt; - Purchases eligible for compensation (Norwegian: Kjøp med kompensasjonsrett). This specification can not be used by the API directly when creating vouchers/account transactions, but will appear on account transactions on outgoing vat on purchases on client&#39;s eligible for compensation.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum VatReturnSpecification
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Adjustment for value: Adjustment
        /// </summary>
        Adjustment = 2,

        /// <summary>
        /// Enum LossesOnClaims for value: LossesOnClaims
        /// </summary>
        LossesOnClaims = 3,

        /// <summary>
        /// Enum ReversalOfInputValueAddedTax for value: ReversalOfInputValueAddedTax
        /// </summary>
        ReversalOfInputValueAddedTax = 4,

        /// <summary>
        /// Enum Withdrawals for value: Withdrawals
        /// </summary>
        Withdrawals = 5,

        /// <summary>
        /// Enum AdjustmentVatCompensationRealProperty for value: AdjustmentVatCompensationRealProperty
        /// </summary>
        AdjustmentVatCompensationRealProperty = 6,

        /// <summary>
        /// Enum PurchasesEligibleForCompensation for value: PurchasesEligibleForCompensation
        /// </summary>
        PurchasesEligibleForCompensation = 7
    }

    /// <summary>
    /// Converts <see cref="VatReturnSpecification"/> to and from the JSON value
    /// </summary>
    public static class VatReturnSpecificationValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VatReturnSpecification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatReturnSpecification FromString(string value)
        {
            if (value.Equals("None"))
                return VatReturnSpecification.None;

            if (value.Equals("Adjustment"))
                return VatReturnSpecification.Adjustment;

            if (value.Equals("LossesOnClaims"))
                return VatReturnSpecification.LossesOnClaims;

            if (value.Equals("ReversalOfInputValueAddedTax"))
                return VatReturnSpecification.ReversalOfInputValueAddedTax;

            if (value.Equals("Withdrawals"))
                return VatReturnSpecification.Withdrawals;

            if (value.Equals("AdjustmentVatCompensationRealProperty"))
                return VatReturnSpecification.AdjustmentVatCompensationRealProperty;

            if (value.Equals("PurchasesEligibleForCompensation"))
                return VatReturnSpecification.PurchasesEligibleForCompensation;

            throw new NotImplementedException($"Could not convert value to type VatReturnSpecification: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VatReturnSpecification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatReturnSpecification? FromStringOrDefault(string value)
        {
            if (value.Equals("None"))
                return VatReturnSpecification.None;

            if (value.Equals("Adjustment"))
                return VatReturnSpecification.Adjustment;

            if (value.Equals("LossesOnClaims"))
                return VatReturnSpecification.LossesOnClaims;

            if (value.Equals("ReversalOfInputValueAddedTax"))
                return VatReturnSpecification.ReversalOfInputValueAddedTax;

            if (value.Equals("Withdrawals"))
                return VatReturnSpecification.Withdrawals;

            if (value.Equals("AdjustmentVatCompensationRealProperty"))
                return VatReturnSpecification.AdjustmentVatCompensationRealProperty;

            if (value.Equals("PurchasesEligibleForCompensation"))
                return VatReturnSpecification.PurchasesEligibleForCompensation;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VatReturnSpecification"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VatReturnSpecification value)
        {
            if (value == VatReturnSpecification.None)
                return "None";

            if (value == VatReturnSpecification.Adjustment)
                return "Adjustment";

            if (value == VatReturnSpecification.LossesOnClaims)
                return "LossesOnClaims";

            if (value == VatReturnSpecification.ReversalOfInputValueAddedTax)
                return "ReversalOfInputValueAddedTax";

            if (value == VatReturnSpecification.Withdrawals)
                return "Withdrawals";

            if (value == VatReturnSpecification.AdjustmentVatCompensationRealProperty)
                return "AdjustmentVatCompensationRealProperty";

            if (value == VatReturnSpecification.PurchasesEligibleForCompensation)
                return "PurchasesEligibleForCompensation";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatReturnSpecification"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VatReturnSpecificationJsonConverter : JsonConverter<VatReturnSpecification>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatReturnSpecification Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatReturnSpecification? result = rawValue == null
                ? null
                : VatReturnSpecificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VatReturnSpecification to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatReturnSpecification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatReturnSpecification vatReturnSpecification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(vatReturnSpecification.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatReturnSpecification"/>
    /// </summary>
    public class VatReturnSpecificationNullableJsonConverter : JsonConverter<VatReturnSpecification?>
    {
        /// <summary>
        /// Returns a VatReturnSpecification from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatReturnSpecification? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatReturnSpecification? result = rawValue == null
                ? null
                : VatReturnSpecificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatReturnSpecification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatReturnSpecification? vatReturnSpecification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(vatReturnSpecification?.ToString() ?? "null");
        }
    }
}
