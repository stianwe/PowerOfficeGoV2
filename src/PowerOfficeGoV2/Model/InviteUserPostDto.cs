// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The available properties when inviting users to Go.
    /// </summary>
    public partial class InviteUserPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteUserPostDto" /> class.
        /// </summary>
        /// <param name="accessRoleId">The access role id the user have on the client.</param>
        /// <param name="emailAddress">The e-mail address of the user.</param>
        /// <param name="firstName">The first name of the user.</param>
        /// <param name="fromDate">From date, inclusive.  The user will have access to the client from this date.  If not set, the user will have access from the day the user accept the invitation.</param>
        /// <param name="inviteAsEmployee">Indicates whether the user should be added as an employee on the client.  If true, an employee object will be created and linked to the user after the invitation is accepted.</param>
        /// <param name="lastName">The last name of the user.</param>
        /// <param name="toDate">To date, inclusive.  The user will have access to the client until and including this date.  Afterwards, the user is deactivated on the client.  If not set, the user will have no time restricted access.</param>
        [JsonConstructor]
        public InviteUserPostDto(Guid accessRoleId, string? emailAddress = default, string? firstName = default, Option<DateOnly?> fromDate = default, Option<bool?> inviteAsEmployee = default, string? lastName = default, Option<DateOnly?> toDate = default)
        {
            AccessRoleId = accessRoleId;
            EmailAddress = emailAddress;
            FirstName = firstName;
            FromDateOption = fromDate;
            InviteAsEmployeeOption = inviteAsEmployee;
            LastName = lastName;
            ToDateOption = toDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The access role id the user have on the client.
        /// </summary>
        /// <value>The access role id the user have on the client.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("AccessRoleId")]
        public Guid AccessRoleId { get; set; }

        /// <summary>
        /// The e-mail address of the user.
        /// </summary>
        /// <value>The e-mail address of the user.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get; set; }

        /// <summary>
        /// The first name of the user.
        /// </summary>
        /// <value>The first name of the user.</value>
        /* <example>Espen</example> */
        [JsonPropertyName("FirstName")]
        public string? FirstName { get; set; }

        /// <summary>
        /// Used to track the state of FromDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> FromDateOption { get; private set; }

        /// <summary>
        /// From date, inclusive.  The user will have access to the client from this date.  If not set, the user will have access from the day the user accept the invitation.
        /// </summary>
        /// <value>From date, inclusive.  The user will have access to the client from this date.  If not set, the user will have access from the day the user accept the invitation.</value>
        /* <example>Mon Jan 01 01:00:00 CET 2024</example> */
        [JsonPropertyName("FromDate")]
        public DateOnly? FromDate { get { return this.FromDateOption; } set { this.FromDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of InviteAsEmployee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InviteAsEmployeeOption { get; private set; }

        /// <summary>
        /// Indicates whether the user should be added as an employee on the client.  If true, an employee object will be created and linked to the user after the invitation is accepted.
        /// </summary>
        /// <value>Indicates whether the user should be added as an employee on the client.  If true, an employee object will be created and linked to the user after the invitation is accepted.</value>
        /* <example>true</example> */
        [JsonPropertyName("InviteAsEmployee")]
        public bool? InviteAsEmployee { get { return this.InviteAsEmployeeOption; } set { this.InviteAsEmployeeOption = new(value); } }

        /// <summary>
        /// The last name of the user.
        /// </summary>
        /// <value>The last name of the user.</value>
        /* <example>Askeladd</example> */
        [JsonPropertyName("LastName")]
        public string? LastName { get; set; }

        /// <summary>
        /// Used to track the state of ToDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ToDateOption { get; private set; }

        /// <summary>
        /// To date, inclusive.  The user will have access to the client until and including this date.  Afterwards, the user is deactivated on the client.  If not set, the user will have no time restricted access.
        /// </summary>
        /// <value>To date, inclusive.  The user will have access to the client until and including this date.  Afterwards, the user is deactivated on the client.  If not set, the user will have no time restricted access.</value>
        /* <example>Wed Jan 31 01:00:00 CET 2024</example> */
        [JsonPropertyName("ToDate")]
        public DateOnly? ToDate { get { return this.ToDateOption; } set { this.ToDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InviteUserPostDto {\n");
            sb.Append("  AccessRoleId: ").Append(AccessRoleId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  InviteAsEmployee: ").Append(InviteAsEmployee).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InviteUserPostDto" />
    /// </summary>
    public class InviteUserPostDtoJsonConverter : JsonConverter<InviteUserPostDto>
    {
        /// <summary>
        /// The format to use to serialize FromDate
        /// </summary>
        public static string FromDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ToDate
        /// </summary>
        public static string ToDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="InviteUserPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InviteUserPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> accessRoleId = default;
            Option<string?> emailAddress = default;
            Option<string?> firstName = default;
            Option<DateOnly?> fromDate = default;
            Option<bool?> inviteAsEmployee = default;
            Option<string?> lastName = default;
            Option<DateOnly?> toDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccessRoleId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accessRoleId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "FirstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "FromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "InviteAsEmployee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inviteAsEmployee = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ToDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accessRoleId.IsSet)
                throw new ArgumentException("Property is required for class InviteUserPostDto.", nameof(accessRoleId));

            if (!emailAddress.IsSet)
                throw new ArgumentException("Property is required for class InviteUserPostDto.", nameof(emailAddress));

            if (!firstName.IsSet)
                throw new ArgumentException("Property is required for class InviteUserPostDto.", nameof(firstName));

            if (!lastName.IsSet)
                throw new ArgumentException("Property is required for class InviteUserPostDto.", nameof(lastName));

            if (accessRoleId.IsSet && accessRoleId.Value == null)
                throw new ArgumentNullException(nameof(accessRoleId), "Property is not nullable for class InviteUserPostDto.");

            return new InviteUserPostDto(accessRoleId.Value!.Value!, emailAddress.Value!, firstName.Value!, fromDate, inviteAsEmployee, lastName.Value!, toDate);
        }

        /// <summary>
        /// Serializes a <see cref="InviteUserPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inviteUserPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InviteUserPostDto inviteUserPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inviteUserPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InviteUserPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inviteUserPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InviteUserPostDto inviteUserPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("AccessRoleId", inviteUserPostDto.AccessRoleId);

            if (inviteUserPostDto.EmailAddress != null)
                writer.WriteString("EmailAddress", inviteUserPostDto.EmailAddress);
            else
                writer.WriteNull("EmailAddress");

            if (inviteUserPostDto.FirstName != null)
                writer.WriteString("FirstName", inviteUserPostDto.FirstName);
            else
                writer.WriteNull("FirstName");

            if (inviteUserPostDto.FromDateOption.IsSet)
                if (inviteUserPostDto.FromDateOption.Value != null)
                    writer.WriteString("FromDate", inviteUserPostDto.FromDateOption.Value!.Value.ToString(FromDateFormat));
                else
                    writer.WriteNull("FromDate");

            if (inviteUserPostDto.InviteAsEmployeeOption.IsSet)
                if (inviteUserPostDto.InviteAsEmployeeOption.Value != null)
                    writer.WriteBoolean("InviteAsEmployee", inviteUserPostDto.InviteAsEmployeeOption.Value!.Value);
                else
                    writer.WriteNull("InviteAsEmployee");

            if (inviteUserPostDto.LastName != null)
                writer.WriteString("LastName", inviteUserPostDto.LastName);
            else
                writer.WriteNull("LastName");

            if (inviteUserPostDto.ToDateOption.IsSet)
                if (inviteUserPostDto.ToDateOption.Value != null)
                    writer.WriteString("ToDate", inviteUserPostDto.ToDateOption.Value!.Value.ToString(ToDateFormat));
                else
                    writer.WriteNull("ToDate");
        }
    }
}
