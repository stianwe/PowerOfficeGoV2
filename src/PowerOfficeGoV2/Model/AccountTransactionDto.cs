// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// AccountTransaction representing an accounting entry. This is a single posted amount on a general ledger account.
    /// </summary>
    public partial class AccountTransactionDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTransactionDto" /> class.
        /// </summary>
        /// <param name="accountId">The Id of the general ledger account account.</param>
        /// <param name="accountNo">The general ledger account code. Information of accounts can be retrieved using the GeneralLedgerAccount service.  Always present on transactions.</param>
        /// <param name="agricultureDepartment">agricultureDepartment</param>
        /// <param name="amount">The posted amount on the account. Amount is always presented in the client currency.  Always present on transactions.</param>
        /// <param name="bankTransferId">The identifier of a bank transfer.  If provided on an accounting entry, this accounting entry is created from a remittance of a bank transfer with a given id.</param>
        /// <param name="contactId">The id of the contact entity if the transaction is related to an employeAccountNo, customerAccountNo or supplierAccountNo.  Employees, Customers and Suppliers are all contact entities in Go, meaning that they might share the id if the contact is registered as both an employee/customer or customer/supplier in Go.</param>
        /// <param name="correctionOfVoucherId">The id of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers</param>
        /// <param name="correctionOfVoucherNo">The voucher number of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers.</param>
        /// <param name="createdDateTimeOffset">The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.</param>
        /// <param name="currencyAmount">The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.</param>
        /// <param name="currencyCode">The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="customerAccountNo">The customer account number this account transaction is posted on, that is provided if the account is a customer subledger account.   If present, CustomerAccountNo will also represent the Customer number. Customers can be queried and identified using the Customer service.</param>
        /// <param name="departmentCode">The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="departmentId">The department Id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="description">The description of the transaction.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the account transaction.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the account transaction.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the account transaction.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the account transaction.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the account transaction.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the account transaction.</param>
        /// <param name="employeeAccountNo">The employee account number this account transaction is posted on that is provided if the account is a employee subledger account.  If present, EmployeeAccountNo will also represent the Employee number. Employees can be queried and identified using the Employee service.</param>
        /// <param name="externalImportReference">The ExternalImportReference, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.</param>
        /// <param name="id">The value that uniquely identifies this accounting entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.</param>
        /// <param name="importedVoucherNo">The imported voucher number, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system.</param>
        /// <param name="isNoteMainEntry">A value indicating whether this instance is the main subledger entry for a note (invoice/expense).</param>
        /// <param name="isReversed">A value indicating whether the voucher this transaction belong to have been reversed by an reversal voucher.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the account transaction.  No changes with accounting effect can be made on a posted voucher in Go, making this timestamp equal the created timestamp in most cases.  However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp.  This property can be used when polling for new entries and where changes in description are needed from Go - but voucherNo and createdDateTimeOffset are better suited to query new entries if not.  If this property is used, changed transactions should replace what was previously stored in the external system.  Note again that no changes can be made that affects the accounting as such.  Always present on transactions.</param>
        /// <param name="locationCode">The code of the location dimension associated with the account transaction, if set.</param>
        /// <param name="locationId">The id of the location dimension associated with the account transaction, if location code is set.</param>
        /// <param name="postingDate">The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</param>
        /// <param name="productCode">The product code. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.</param>
        /// <param name="productId">The product id. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.</param>
        /// <param name="projectCode">The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</param>
        /// <param name="projectId">The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</param>
        /// <param name="quantity">The quantity that was set on the voucher line generating this account transaction.</param>
        /// <param name="quantity2">The quantity2 that was set on the voucher line generating this account transaction.</param>
        /// <param name="reversedVoucherId">The id of the of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.</param>
        /// <param name="reversedVoucherNo">The voucher number of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.</param>
        /// <param name="subLedgerEntryId">The subledger entry id.  If this AccountTransaction is on a subledger account this property will represent the Id of the subledger entry related to this transaction.  This will match the Id in the CustomerLedger or SupplierLedger if querying these services for transactions.</param>
        /// <param name="supplierAccountNo">The supplier account number this account transaction is posted on that is provided if the account is a supplier subledger account.  If present, SupplierAccountNo will also represent the Supplier number. Suppliers can be queried and identified using the Supplier service.</param>
        /// <param name="vatAmount">The vat amount on this transaction.</param>
        /// <param name="vatCode">The vat code.  Standard codes in Go is based on the SAF-T standard. Codes and any custom codes can be queried and identified using the VatCode service.</param>
        /// <param name="vatId">The vat id for the vat code used on the transaction.  Codes and any custom codes can be queried and identified using the VatCode service.</param>
        /// <param name="vatRate">The vat rate for the vat code used on the transaction.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        /// <param name="voucherDate">The date of the voucher. This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.</param>
        /// <param name="voucherDescription">The description of the voucher if set.</param>
        /// <param name="voucherId">The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.</param>
        /// <param name="voucherNo">The voucher number. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.</param>
        /// <param name="voucherType">voucherType</param>
        [JsonConstructor]
        public AccountTransactionDto(Option<long?> accountId = default, Option<long?> accountNo = default, Option<AgricultureDepartment?> agricultureDepartment = default, Option<double?> amount = default, Option<Guid?> bankTransferId = default, Option<long?> contactId = default, Option<Guid?> correctionOfVoucherId = default, Option<long?> correctionOfVoucherNo = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<long?> customerAccountNo = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> description = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<long?> employeeAccountNo = default, Option<string?> externalImportReference = default, Option<long?> id = default, Option<long?> importedVoucherNo = default, Option<bool?> isNoteMainEntry = default, Option<bool?> isReversed = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<DateTimeOffset?> postingDate = default, Option<string?> productCode = default, Option<long?> productId = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> quantity2 = default, Option<Guid?> reversedVoucherId = default, Option<long?> reversedVoucherNo = default, Option<long?> subLedgerEntryId = default, Option<long?> supplierAccountNo = default, Option<double?> vatAmount = default, Option<string?> vatCode = default, Option<int?> vatId = default, Option<double?> vatRate = default, Option<VatReturnSpecification?> vatReturnSpecification = default, Option<DateTimeOffset?> voucherDate = default, Option<string?> voucherDescription = default, Option<Guid?> voucherId = default, Option<long?> voucherNo = default, Option<VoucherType?> voucherType = default)
        {
            AccountIdOption = accountId;
            AccountNoOption = accountNo;
            AgricultureDepartmentOption = agricultureDepartment;
            AmountOption = amount;
            BankTransferIdOption = bankTransferId;
            ContactIdOption = contactId;
            CorrectionOfVoucherIdOption = correctionOfVoucherId;
            CorrectionOfVoucherNoOption = correctionOfVoucherNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CustomerAccountNoOption = customerAccountNo;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            EmployeeAccountNoOption = employeeAccountNo;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            ImportedVoucherNoOption = importedVoucherNo;
            IsNoteMainEntryOption = isNoteMainEntry;
            IsReversedOption = isReversed;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            PostingDateOption = postingDate;
            ProductCodeOption = productCode;
            ProductIdOption = productId;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            Quantity2Option = quantity2;
            ReversedVoucherIdOption = reversedVoucherId;
            ReversedVoucherNoOption = reversedVoucherNo;
            SubLedgerEntryIdOption = subLedgerEntryId;
            SupplierAccountNoOption = supplierAccountNo;
            VatAmountOption = vatAmount;
            VatCodeOption = vatCode;
            VatIdOption = vatId;
            VatRateOption = vatRate;
            VatReturnSpecificationOption = vatReturnSpecification;
            VoucherDateOption = voucherDate;
            VoucherDescriptionOption = voucherDescription;
            VoucherIdOption = voucherId;
            VoucherNoOption = voucherNo;
            VoucherTypeOption = voucherType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> AgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDepartment
        /// </summary>
        [JsonPropertyName("AgricultureDepartment")]
        public AgricultureDepartment? AgricultureDepartment { get { return this.AgricultureDepartmentOption; } set { this.AgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherType?> VoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [JsonPropertyName("VoucherType")]
        public VoucherType? VoucherType { get { return this.VoucherTypeOption; } set { this.VoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; }

        /// <summary>
        /// The Id of the general ledger account account.
        /// </summary>
        /// <value>The Id of the general ledger account account.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountNoOption { get; }

        /// <summary>
        /// The general ledger account code. Information of accounts can be retrieved using the GeneralLedgerAccount service.  Always present on transactions.
        /// </summary>
        /// <value>The general ledger account code. Information of accounts can be retrieved using the GeneralLedgerAccount service.  Always present on transactions.</value>
        /* <example>3000</example> */
        [JsonPropertyName("AccountNo")]
        public long? AccountNo { get { return this.AccountNoOption; } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AmountOption { get; }

        /// <summary>
        /// The posted amount on the account. Amount is always presented in the client currency.  Always present on transactions.
        /// </summary>
        /// <value>The posted amount on the account. Amount is always presented in the client currency.  Always present on transactions.</value>
        /* <example>99</example> */
        [JsonPropertyName("Amount")]
        public double? Amount { get { return this.AmountOption; } }

        /// <summary>
        /// Used to track the state of BankTransferId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> BankTransferIdOption { get; }

        /// <summary>
        /// The identifier of a bank transfer.  If provided on an accounting entry, this accounting entry is created from a remittance of a bank transfer with a given id.
        /// </summary>
        /// <value>The identifier of a bank transfer.  If provided on an accounting entry, this accounting entry is created from a remittance of a bank transfer with a given id.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("BankTransferId")]
        public Guid? BankTransferId { get { return this.BankTransferIdOption; } }

        /// <summary>
        /// Used to track the state of ContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContactIdOption { get; }

        /// <summary>
        /// The id of the contact entity if the transaction is related to an employeAccountNo, customerAccountNo or supplierAccountNo.  Employees, Customers and Suppliers are all contact entities in Go, meaning that they might share the id if the contact is registered as both an employee/customer or customer/supplier in Go.
        /// </summary>
        /// <value>The id of the contact entity if the transaction is related to an employeAccountNo, customerAccountNo or supplierAccountNo.  Employees, Customers and Suppliers are all contact entities in Go, meaning that they might share the id if the contact is registered as both an employee/customer or customer/supplier in Go.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ContactId")]
        public long? ContactId { get { return this.ContactIdOption; } }

        /// <summary>
        /// Used to track the state of CorrectionOfVoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CorrectionOfVoucherIdOption { get; }

        /// <summary>
        /// The id of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers
        /// </summary>
        /// <value>The id of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("CorrectionOfVoucherId")]
        public Guid? CorrectionOfVoucherId { get { return this.CorrectionOfVoucherIdOption; } }

        /// <summary>
        /// Used to track the state of CorrectionOfVoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CorrectionOfVoucherNoOption { get; }

        /// <summary>
        /// The voucher number of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers.
        /// </summary>
        /// <value>The voucher number of the original voucher that has been corrected by this voucher (where this transactions are part of the correction voucher).  Only present on transactions that are part of correction vouchers.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CorrectionOfVoucherNo")]
        public long? CorrectionOfVoucherNo { get { return this.CorrectionOfVoucherNoOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.
        /// </summary>
        /// <value>The created timestamp.  This is the timestamp the transaction was created, and may differ from the timestamp of accounting effect for the transaction (ie the property PostingDate).  Always present on transactions.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.
        /// </summary>
        /// <value>The created from import journal identifier, if present.  Provided if this account transaction has been created in Go by an import.</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; }

        /// <summary>
        /// The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.
        /// </summary>
        /// <value>The currency amount. Differs from Amount if the transaction was posted with a currency other than the client currency.</value>
        /* <example>8.5212</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>USD</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of CustomerAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerAccountNoOption { get; }

        /// <summary>
        /// The customer account number this account transaction is posted on, that is provided if the account is a customer subledger account.   If present, CustomerAccountNo will also represent the Customer number. Customers can be queried and identified using the Customer service.
        /// </summary>
        /// <value>The customer account number this account transaction is posted on, that is provided if the account is a customer subledger account.   If present, CustomerAccountNo will also represent the Customer number. Customers can be queried and identified using the Customer service.</value>
        /* <example>10000</example> */
        [JsonPropertyName("CustomerAccountNo")]
        public long? CustomerAccountNo { get { return this.CustomerAccountNoOption; } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department code. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</value>
        /* <example>110</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; }

        /// <summary>
        /// The department Id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department Id. Available if the transaction was posted with department.  Departments can be queried and identified using the Department service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; }

        /// <summary>
        /// The description of the transaction.
        /// </summary>
        /// <value>The description of the transaction.</value>
        /* <example>Hello accounting world</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with the account transaction.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the account transaction.</value>
        /* <example>dimcode111</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; }

        /// <summary>
        /// The id of the dimension 1 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with the account transaction.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the account transaction.</value>
        /* <example>dimcode222</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; }

        /// <summary>
        /// The id of the dimension 2 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with the account transaction.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the account transaction.</value>
        /* <example>dimcode333</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; }

        /// <summary>
        /// The id of the dimension 3 associated with the account transaction.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the account transaction.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } }

        /// <summary>
        /// Used to track the state of EmployeeAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployeeAccountNoOption { get; }

        /// <summary>
        /// The employee account number this account transaction is posted on that is provided if the account is a employee subledger account.  If present, EmployeeAccountNo will also represent the Employee number. Employees can be queried and identified using the Employee service.
        /// </summary>
        /// <value>The employee account number this account transaction is posted on that is provided if the account is a employee subledger account.  If present, EmployeeAccountNo will also represent the Employee number. Employees can be queried and identified using the Employee service.</value>
        /* <example>3</example> */
        [JsonPropertyName("EmployeeAccountNo")]
        public long? EmployeeAccountNo { get { return this.EmployeeAccountNoOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; }

        /// <summary>
        /// The ExternalImportReference, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.
        /// </summary>
        /// <value>The ExternalImportReference, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system and ensure a duplicate check when posting the voucher to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check transaction.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The value that uniquely identifies this accounting entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.
        /// </summary>
        /// <value>The value that uniquely identifies this accounting entry. The Id is assigned by Go when the transactions is posted in Go.  Always present on transactions.</value>
        /* <example>476023749</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ImportedVoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedVoucherNoOption { get; }

        /// <summary>
        /// The imported voucher number, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system.
        /// </summary>
        /// <value>The imported voucher number, if available.  This property can be set by integrations posting vouchers in Go, in order to reference the external system.</value>
        /* <example>123</example> */
        [JsonPropertyName("ImportedVoucherNo")]
        public long? ImportedVoucherNo { get { return this.ImportedVoucherNoOption; } }

        /// <summary>
        /// Used to track the state of IsNoteMainEntry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsNoteMainEntryOption { get; }

        /// <summary>
        /// A value indicating whether this instance is the main subledger entry for a note (invoice/expense).
        /// </summary>
        /// <value>A value indicating whether this instance is the main subledger entry for a note (invoice/expense).</value>
        /* <example>true</example> */
        [JsonPropertyName("IsNoteMainEntry")]
        public bool? IsNoteMainEntry { get { return this.IsNoteMainEntryOption; } }

        /// <summary>
        /// Used to track the state of IsReversed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReversedOption { get; }

        /// <summary>
        /// A value indicating whether the voucher this transaction belong to have been reversed by an reversal voucher.
        /// </summary>
        /// <value>A value indicating whether the voucher this transaction belong to have been reversed by an reversal voucher.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsReversed")]
        public bool? IsReversed { get { return this.IsReversedOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the account transaction.  No changes with accounting effect can be made on a posted voucher in Go, making this timestamp equal the created timestamp in most cases.  However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp.  This property can be used when polling for new entries and where changes in description are needed from Go - but voucherNo and createdDateTimeOffset are better suited to query new entries if not.  If this property is used, changed transactions should replace what was previously stored in the external system.  Note again that no changes can be made that affects the accounting as such.  Always present on transactions.
        /// </summary>
        /// <value>The timestamp of the last change of the account transaction.  No changes with accounting effect can be made on a posted voucher in Go, making this timestamp equal the created timestamp in most cases.  However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp.  This property can be used when polling for new entries and where changes in description are needed from Go - but voucherNo and createdDateTimeOffset are better suited to query new entries if not.  If this property is used, changed transactions should replace what was previously stored in the external system.  Note again that no changes can be made that affects the accounting as such.  Always present on transactions.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with the account transaction, if set.
        /// </summary>
        /// <value>The code of the location dimension associated with the account transaction, if set.</value>
        /* <example>L1337</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; }

        /// <summary>
        /// The id of the location dimension associated with the account transaction, if location code is set.
        /// </summary>
        /// <value>The id of the location dimension associated with the account transaction, if location code is set.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } }

        /// <summary>
        /// Used to track the state of PostingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> PostingDateOption { get; }

        /// <summary>
        /// The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.
        /// </summary>
        /// <value>The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</value>
        /* <example>Tue Sep 28 02:00:00 CEST 2021</example> */
        [JsonPropertyName("PostingDate")]
        public DateTimeOffset? PostingDate { get { return this.PostingDateOption; } }

        /// <summary>
        /// Used to track the state of ProductCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductCodeOption { get; }

        /// <summary>
        /// The product code. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.
        /// </summary>
        /// <value>The product code. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.</value>
        /* <example>10</example> */
        [JsonPropertyName("ProductCode")]
        public string? ProductCode { get { return this.ProductCodeOption; } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; }

        /// <summary>
        /// The product id. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.
        /// </summary>
        /// <value>The product id. Available if the transaction was posted with product.  Products can be queried and identified using the Product service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project code. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</value>
        /* <example>100</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project id. Available if the transaction was posted with project.  Projects can be queried and identified using the Project service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; }

        /// <summary>
        /// The quantity that was set on the voucher line generating this account transaction.
        /// </summary>
        /// <value>The quantity that was set on the voucher line generating this account transaction.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } }

        /// <summary>
        /// Used to track the state of Quantity2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Quantity2Option { get; }

        /// <summary>
        /// The quantity2 that was set on the voucher line generating this account transaction.
        /// </summary>
        /// <value>The quantity2 that was set on the voucher line generating this account transaction.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity2")]
        public double? Quantity2 { get { return this.Quantity2Option; } }

        /// <summary>
        /// Used to track the state of ReversedVoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ReversedVoucherIdOption { get; }

        /// <summary>
        /// The id of the of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.
        /// </summary>
        /// <value>The id of the of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("ReversedVoucherId")]
        public Guid? ReversedVoucherId { get { return this.ReversedVoucherIdOption; } }

        /// <summary>
        /// Used to track the state of ReversedVoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ReversedVoucherNoOption { get; }

        /// <summary>
        /// The voucher number of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.
        /// </summary>
        /// <value>The voucher number of the original voucher that has been reversed.  This property is only available for reversal vouchers (type 99), and link the reversal voucher to the original voucher that has been reversed in Go.</value>
        /* <example>15544</example> */
        [JsonPropertyName("ReversedVoucherNo")]
        public long? ReversedVoucherNo { get { return this.ReversedVoucherNoOption; } }

        /// <summary>
        /// Used to track the state of SubLedgerEntryId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SubLedgerEntryIdOption { get; }

        /// <summary>
        /// The subledger entry id.  If this AccountTransaction is on a subledger account this property will represent the Id of the subledger entry related to this transaction.  This will match the Id in the CustomerLedger or SupplierLedger if querying these services for transactions.
        /// </summary>
        /// <value>The subledger entry id.  If this AccountTransaction is on a subledger account this property will represent the Id of the subledger entry related to this transaction.  This will match the Id in the CustomerLedger or SupplierLedger if querying these services for transactions.</value>
        /* <example>123</example> */
        [JsonPropertyName("SubLedgerEntryId")]
        public long? SubLedgerEntryId { get { return this.SubLedgerEntryIdOption; } }

        /// <summary>
        /// Used to track the state of SupplierAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierAccountNoOption { get; }

        /// <summary>
        /// The supplier account number this account transaction is posted on that is provided if the account is a supplier subledger account.  If present, SupplierAccountNo will also represent the Supplier number. Suppliers can be queried and identified using the Supplier service.
        /// </summary>
        /// <value>The supplier account number this account transaction is posted on that is provided if the account is a supplier subledger account.  If present, SupplierAccountNo will also represent the Supplier number. Suppliers can be queried and identified using the Supplier service.</value>
        /* <example>2000</example> */
        [JsonPropertyName("SupplierAccountNo")]
        public long? SupplierAccountNo { get { return this.SupplierAccountNoOption; } }

        /// <summary>
        /// Used to track the state of VatAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VatAmountOption { get; }

        /// <summary>
        /// The vat amount on this transaction.
        /// </summary>
        /// <value>The vat amount on this transaction.</value>
        /* <example>-71.14</example> */
        [JsonPropertyName("VatAmount")]
        public double? VatAmount { get { return this.VatAmountOption; } }

        /// <summary>
        /// Used to track the state of VatCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VatCodeOption { get; }

        /// <summary>
        /// The vat code.  Standard codes in Go is based on the SAF-T standard. Codes and any custom codes can be queried and identified using the VatCode service.
        /// </summary>
        /// <value>The vat code.  Standard codes in Go is based on the SAF-T standard. Codes and any custom codes can be queried and identified using the VatCode service.</value>
        /* <example>33</example> */
        [JsonPropertyName("VatCode")]
        public string? VatCode { get { return this.VatCodeOption; } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatIdOption { get; }

        /// <summary>
        /// The vat id for the vat code used on the transaction.  Codes and any custom codes can be queried and identified using the VatCode service.
        /// </summary>
        /// <value>The vat id for the vat code used on the transaction.  Codes and any custom codes can be queried and identified using the VatCode service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("VatId")]
        public int? VatId { get { return this.VatIdOption; } }

        /// <summary>
        /// Used to track the state of VatRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VatRateOption { get; }

        /// <summary>
        /// The vat rate for the vat code used on the transaction.
        /// </summary>
        /// <value>The vat rate for the vat code used on the transaction.</value>
        /* <example>0.12</example> */
        [JsonPropertyName("VatRate")]
        public double? VatRate { get { return this.VatRateOption; } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> VoucherDateOption { get; }

        /// <summary>
        /// The date of the voucher. This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.
        /// </summary>
        /// <value>The date of the voucher. This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for the voucher.  Always present on transactions.</value>
        /* <example>Sat Jul 25 02:00:00 CEST 2020</example> */
        [JsonPropertyName("VoucherDate")]
        public DateTimeOffset? VoucherDate { get { return this.VoucherDateOption; } }

        /// <summary>
        /// Used to track the state of VoucherDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VoucherDescriptionOption { get; }

        /// <summary>
        /// The description of the voucher if set.
        /// </summary>
        /// <value>The description of the voucher if set.</value>
        /* <example>Hello</example> */
        [JsonPropertyName("VoucherDescription")]
        public string? VoucherDescription { get { return this.VoucherDescriptionOption; } }

        /// <summary>
        /// Used to track the state of VoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> VoucherIdOption { get; }

        /// <summary>
        /// The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.
        /// </summary>
        /// <value>The voucher identifier.  The Id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher.  Always present on transactions.</value>
        /* <example>ee373540-ca8d-4562-8fb6-6fb52de47722</example> */
        [JsonPropertyName("VoucherId")]
        public Guid? VoucherId { get { return this.VoucherIdOption; } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.
        /// </summary>
        /// <value>The voucher number. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on transactions.</value>
        /* <example>15545</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountTransactionDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AgricultureDepartment: ").Append(AgricultureDepartment).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BankTransferId: ").Append(BankTransferId).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CorrectionOfVoucherId: ").Append(CorrectionOfVoucherId).Append("\n");
            sb.Append("  CorrectionOfVoucherNo: ").Append(CorrectionOfVoucherNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomerAccountNo: ").Append(CustomerAccountNo).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  EmployeeAccountNo: ").Append(EmployeeAccountNo).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedVoucherNo: ").Append(ImportedVoucherNo).Append("\n");
            sb.Append("  IsNoteMainEntry: ").Append(IsNoteMainEntry).Append("\n");
            sb.Append("  IsReversed: ").Append(IsReversed).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  PostingDate: ").Append(PostingDate).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Quantity2: ").Append(Quantity2).Append("\n");
            sb.Append("  ReversedVoucherId: ").Append(ReversedVoucherId).Append("\n");
            sb.Append("  ReversedVoucherNo: ").Append(ReversedVoucherNo).Append("\n");
            sb.Append("  SubLedgerEntryId: ").Append(SubLedgerEntryId).Append("\n");
            sb.Append("  SupplierAccountNo: ").Append(SupplierAccountNo).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherDescription: ").Append(VoucherDescription).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AccountTransactionDto" />
    /// </summary>
    public class AccountTransactionDtoJsonConverter : JsonConverter<AccountTransactionDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PostingDate
        /// </summary>
        public static string PostingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="AccountTransactionDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AccountTransactionDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<long?> accountNo = default;
            Option<AgricultureDepartment?> agricultureDepartment = default;
            Option<double?> amount = default;
            Option<Guid?> bankTransferId = default;
            Option<long?> contactId = default;
            Option<Guid?> correctionOfVoucherId = default;
            Option<long?> correctionOfVoucherNo = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<long?> customerAccountNo = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<long?> employeeAccountNo = default;
            Option<string?> externalImportReference = default;
            Option<long?> id = default;
            Option<long?> importedVoucherNo = default;
            Option<bool?> isNoteMainEntry = default;
            Option<bool?> isReversed = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<DateTimeOffset?> postingDate = default;
            Option<string?> productCode = default;
            Option<long?> productId = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> quantity2 = default;
            Option<Guid?> reversedVoucherId = default;
            Option<long?> reversedVoucherNo = default;
            Option<long?> subLedgerEntryId = default;
            Option<long?> supplierAccountNo = default;
            Option<double?> vatAmount = default;
            Option<string?> vatCode = default;
            Option<int?> vatId = default;
            Option<double?> vatRate = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;
            Option<DateTimeOffset?> voucherDate = default;
            Option<string?> voucherDescription = default;
            Option<Guid?> voucherId = default;
            Option<long?> voucherNo = default;
            Option<VoucherType?> voucherType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AgricultureDepartment":
                            string? agricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (agricultureDepartmentRawValue != null)
                                agricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(agricultureDepartmentRawValue));
                            break;
                        case "Amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BankTransferId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bankTransferId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CorrectionOfVoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                correctionOfVoucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CorrectionOfVoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                correctionOfVoucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployeeAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employeeAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ImportedVoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedVoucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsNoteMainEntry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isNoteMainEntry = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsReversed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReversed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PostingDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postingDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ProductCode":
                            productCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Quantity2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity2 = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ReversedVoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reversedVoucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ReversedVoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reversedVoucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SubLedgerEntryId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subLedgerEntryId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VatAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatCode":
                            vatCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "VatRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherDescription":
                            voucherDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherType":
                            string? voucherTypeRawValue = utf8JsonReader.GetString();
                            if (voucherTypeRawValue != null)
                                voucherType = new Option<VoucherType?>(VoucherTypeValueConverter.FromStringOrDefault(voucherTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class AccountTransactionDto.");

            if (accountNo.IsSet && accountNo.Value == null)
                throw new ArgumentNullException(nameof(accountNo), "Property is not nullable for class AccountTransactionDto.");

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class AccountTransactionDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class AccountTransactionDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class AccountTransactionDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AccountTransactionDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class AccountTransactionDto.");

            if (postingDate.IsSet && postingDate.Value == null)
                throw new ArgumentNullException(nameof(postingDate), "Property is not nullable for class AccountTransactionDto.");

            if (vatAmount.IsSet && vatAmount.Value == null)
                throw new ArgumentNullException(nameof(vatAmount), "Property is not nullable for class AccountTransactionDto.");

            if (vatId.IsSet && vatId.Value == null)
                throw new ArgumentNullException(nameof(vatId), "Property is not nullable for class AccountTransactionDto.");

            if (vatRate.IsSet && vatRate.Value == null)
                throw new ArgumentNullException(nameof(vatRate), "Property is not nullable for class AccountTransactionDto.");

            if (voucherDate.IsSet && voucherDate.Value == null)
                throw new ArgumentNullException(nameof(voucherDate), "Property is not nullable for class AccountTransactionDto.");

            if (voucherId.IsSet && voucherId.Value == null)
                throw new ArgumentNullException(nameof(voucherId), "Property is not nullable for class AccountTransactionDto.");

            if (voucherNo.IsSet && voucherNo.Value == null)
                throw new ArgumentNullException(nameof(voucherNo), "Property is not nullable for class AccountTransactionDto.");

            return new AccountTransactionDto(accountId, accountNo, agricultureDepartment, amount, bankTransferId, contactId, correctionOfVoucherId, correctionOfVoucherNo, createdDateTimeOffset, createdFromImportJournalId, currencyAmount, currencyCode, customerAccountNo, departmentCode, departmentId, description, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, employeeAccountNo, externalImportReference, id, importedVoucherNo, isNoteMainEntry, isReversed, lastChangedDateTimeOffset, locationCode, locationId, postingDate, productCode, productId, projectCode, projectId, quantity, quantity2, reversedVoucherId, reversedVoucherNo, subLedgerEntryId, supplierAccountNo, vatAmount, vatCode, vatId, vatRate, vatReturnSpecification, voucherDate, voucherDescription, voucherId, voucherNo, voucherType);
        }

        /// <summary>
        /// Serializes a <see cref="AccountTransactionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTransactionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AccountTransactionDto accountTransactionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, accountTransactionDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AccountTransactionDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="accountTransactionDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AccountTransactionDto accountTransactionDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (accountTransactionDto.AccountIdOption.IsSet)
                writer.WriteNumber("AccountId", accountTransactionDto.AccountIdOption.Value!.Value);

            if (accountTransactionDto.AccountNoOption.IsSet)
                writer.WriteNumber("AccountNo", accountTransactionDto.AccountNoOption.Value!.Value);

            if (accountTransactionDto.AgricultureDepartmentOption.IsSet)
                if (accountTransactionDto.AgricultureDepartmentOption!.Value != null)
                {
                    var agricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(accountTransactionDto.AgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("AgricultureDepartment", agricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("AgricultureDepartment");
            if (accountTransactionDto.AmountOption.IsSet)
                writer.WriteNumber("Amount", accountTransactionDto.AmountOption.Value!.Value);

            if (accountTransactionDto.BankTransferIdOption.IsSet)
                if (accountTransactionDto.BankTransferIdOption.Value != null)
                    writer.WriteString("BankTransferId", accountTransactionDto.BankTransferIdOption.Value!.Value);
                else
                    writer.WriteNull("BankTransferId");

            if (accountTransactionDto.ContactIdOption.IsSet)
                if (accountTransactionDto.ContactIdOption.Value != null)
                    writer.WriteNumber("ContactId", accountTransactionDto.ContactIdOption.Value!.Value);
                else
                    writer.WriteNull("ContactId");

            if (accountTransactionDto.CorrectionOfVoucherIdOption.IsSet)
                if (accountTransactionDto.CorrectionOfVoucherIdOption.Value != null)
                    writer.WriteString("CorrectionOfVoucherId", accountTransactionDto.CorrectionOfVoucherIdOption.Value!.Value);
                else
                    writer.WriteNull("CorrectionOfVoucherId");

            if (accountTransactionDto.CorrectionOfVoucherNoOption.IsSet)
                if (accountTransactionDto.CorrectionOfVoucherNoOption.Value != null)
                    writer.WriteNumber("CorrectionOfVoucherNo", accountTransactionDto.CorrectionOfVoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("CorrectionOfVoucherNo");

            if (accountTransactionDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", accountTransactionDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (accountTransactionDto.CreatedFromImportJournalIdOption.IsSet)
                if (accountTransactionDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", accountTransactionDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (accountTransactionDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", accountTransactionDto.CurrencyAmountOption.Value!.Value);

            if (accountTransactionDto.CurrencyCodeOption.IsSet)
                if (accountTransactionDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", accountTransactionDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (accountTransactionDto.CustomerAccountNoOption.IsSet)
                if (accountTransactionDto.CustomerAccountNoOption.Value != null)
                    writer.WriteNumber("CustomerAccountNo", accountTransactionDto.CustomerAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerAccountNo");

            if (accountTransactionDto.DepartmentCodeOption.IsSet)
                if (accountTransactionDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", accountTransactionDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (accountTransactionDto.DepartmentIdOption.IsSet)
                if (accountTransactionDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", accountTransactionDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (accountTransactionDto.DescriptionOption.IsSet)
                if (accountTransactionDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", accountTransactionDto.Description);
                else
                    writer.WriteNull("Description");

            if (accountTransactionDto.Dim1CodeOption.IsSet)
                if (accountTransactionDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", accountTransactionDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (accountTransactionDto.Dim1IdOption.IsSet)
                if (accountTransactionDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", accountTransactionDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (accountTransactionDto.Dim2CodeOption.IsSet)
                if (accountTransactionDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", accountTransactionDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (accountTransactionDto.Dim2IdOption.IsSet)
                if (accountTransactionDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", accountTransactionDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (accountTransactionDto.Dim3CodeOption.IsSet)
                if (accountTransactionDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", accountTransactionDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (accountTransactionDto.Dim3IdOption.IsSet)
                if (accountTransactionDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", accountTransactionDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (accountTransactionDto.EmployeeAccountNoOption.IsSet)
                if (accountTransactionDto.EmployeeAccountNoOption.Value != null)
                    writer.WriteNumber("EmployeeAccountNo", accountTransactionDto.EmployeeAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("EmployeeAccountNo");

            if (accountTransactionDto.ExternalImportReferenceOption.IsSet)
                if (accountTransactionDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", accountTransactionDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (accountTransactionDto.IdOption.IsSet)
                writer.WriteNumber("Id", accountTransactionDto.IdOption.Value!.Value);

            if (accountTransactionDto.ImportedVoucherNoOption.IsSet)
                if (accountTransactionDto.ImportedVoucherNoOption.Value != null)
                    writer.WriteNumber("ImportedVoucherNo", accountTransactionDto.ImportedVoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedVoucherNo");

            if (accountTransactionDto.IsNoteMainEntryOption.IsSet)
                if (accountTransactionDto.IsNoteMainEntryOption.Value != null)
                    writer.WriteBoolean("IsNoteMainEntry", accountTransactionDto.IsNoteMainEntryOption.Value!.Value);
                else
                    writer.WriteNull("IsNoteMainEntry");

            if (accountTransactionDto.IsReversedOption.IsSet)
                if (accountTransactionDto.IsReversedOption.Value != null)
                    writer.WriteBoolean("IsReversed", accountTransactionDto.IsReversedOption.Value!.Value);
                else
                    writer.WriteNull("IsReversed");

            if (accountTransactionDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", accountTransactionDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (accountTransactionDto.LocationCodeOption.IsSet)
                if (accountTransactionDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", accountTransactionDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (accountTransactionDto.LocationIdOption.IsSet)
                if (accountTransactionDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", accountTransactionDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (accountTransactionDto.PostingDateOption.IsSet)
                writer.WriteString("PostingDate", accountTransactionDto.PostingDateOption.Value!.Value.ToString(PostingDateFormat));

            if (accountTransactionDto.ProductCodeOption.IsSet)
                if (accountTransactionDto.ProductCodeOption.Value != null)
                    writer.WriteString("ProductCode", accountTransactionDto.ProductCode);
                else
                    writer.WriteNull("ProductCode");

            if (accountTransactionDto.ProductIdOption.IsSet)
                if (accountTransactionDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", accountTransactionDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (accountTransactionDto.ProjectCodeOption.IsSet)
                if (accountTransactionDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", accountTransactionDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (accountTransactionDto.ProjectIdOption.IsSet)
                if (accountTransactionDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", accountTransactionDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (accountTransactionDto.QuantityOption.IsSet)
                if (accountTransactionDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", accountTransactionDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (accountTransactionDto.Quantity2Option.IsSet)
                if (accountTransactionDto.Quantity2Option.Value != null)
                    writer.WriteNumber("Quantity2", accountTransactionDto.Quantity2Option.Value!.Value);
                else
                    writer.WriteNull("Quantity2");

            if (accountTransactionDto.ReversedVoucherIdOption.IsSet)
                if (accountTransactionDto.ReversedVoucherIdOption.Value != null)
                    writer.WriteString("ReversedVoucherId", accountTransactionDto.ReversedVoucherIdOption.Value!.Value);
                else
                    writer.WriteNull("ReversedVoucherId");

            if (accountTransactionDto.ReversedVoucherNoOption.IsSet)
                if (accountTransactionDto.ReversedVoucherNoOption.Value != null)
                    writer.WriteNumber("ReversedVoucherNo", accountTransactionDto.ReversedVoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("ReversedVoucherNo");

            if (accountTransactionDto.SubLedgerEntryIdOption.IsSet)
                if (accountTransactionDto.SubLedgerEntryIdOption.Value != null)
                    writer.WriteNumber("SubLedgerEntryId", accountTransactionDto.SubLedgerEntryIdOption.Value!.Value);
                else
                    writer.WriteNull("SubLedgerEntryId");

            if (accountTransactionDto.SupplierAccountNoOption.IsSet)
                if (accountTransactionDto.SupplierAccountNoOption.Value != null)
                    writer.WriteNumber("SupplierAccountNo", accountTransactionDto.SupplierAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("SupplierAccountNo");

            if (accountTransactionDto.VatAmountOption.IsSet)
                writer.WriteNumber("VatAmount", accountTransactionDto.VatAmountOption.Value!.Value);

            if (accountTransactionDto.VatCodeOption.IsSet)
                if (accountTransactionDto.VatCodeOption.Value != null)
                    writer.WriteString("VatCode", accountTransactionDto.VatCode);
                else
                    writer.WriteNull("VatCode");

            if (accountTransactionDto.VatIdOption.IsSet)
                writer.WriteNumber("VatId", accountTransactionDto.VatIdOption.Value!.Value);

            if (accountTransactionDto.VatRateOption.IsSet)
                writer.WriteNumber("VatRate", accountTransactionDto.VatRateOption.Value!.Value);

            if (accountTransactionDto.VatReturnSpecificationOption.IsSet)
                if (accountTransactionDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(accountTransactionDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
            if (accountTransactionDto.VoucherDateOption.IsSet)
                writer.WriteString("VoucherDate", accountTransactionDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));

            if (accountTransactionDto.VoucherDescriptionOption.IsSet)
                if (accountTransactionDto.VoucherDescriptionOption.Value != null)
                    writer.WriteString("VoucherDescription", accountTransactionDto.VoucherDescription);
                else
                    writer.WriteNull("VoucherDescription");

            if (accountTransactionDto.VoucherIdOption.IsSet)
                writer.WriteString("VoucherId", accountTransactionDto.VoucherIdOption.Value!.Value);

            if (accountTransactionDto.VoucherNoOption.IsSet)
                writer.WriteNumber("VoucherNo", accountTransactionDto.VoucherNoOption.Value!.Value);

            if (accountTransactionDto.VoucherTypeOption.IsSet)
                if (accountTransactionDto.VoucherTypeOption!.Value != null)
                {
                    var voucherTypeRawValue = VoucherTypeValueConverter.ToJsonValue(accountTransactionDto.VoucherTypeOption.Value!.Value);
                    writer.WriteString("VoucherType", voucherTypeRawValue);
                }
                else
                    writer.WriteNull("VoucherType");
        }
    }
}
