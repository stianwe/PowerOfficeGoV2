// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining the months of a year.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;January&lt;/i&gt; - January&lt;/li&gt;&lt;li&gt;&lt;i&gt;February&lt;/i&gt; - February&lt;/li&gt;&lt;li&gt;&lt;i&gt;March&lt;/i&gt; - March&lt;/li&gt;&lt;li&gt;&lt;i&gt;April&lt;/i&gt; - April&lt;/li&gt;&lt;li&gt;&lt;i&gt;May&lt;/i&gt; - May&lt;/li&gt;&lt;li&gt;&lt;i&gt;June&lt;/i&gt; - June&lt;/li&gt;&lt;li&gt;&lt;i&gt;July&lt;/i&gt; - July&lt;/li&gt;&lt;li&gt;&lt;i&gt;August&lt;/i&gt; - August&lt;/li&gt;&lt;li&gt;&lt;i&gt;September&lt;/i&gt; - September&lt;/li&gt;&lt;li&gt;&lt;i&gt;October&lt;/i&gt; - October&lt;/li&gt;&lt;li&gt;&lt;i&gt;November&lt;/i&gt; - November&lt;/li&gt;&lt;li&gt;&lt;i&gt;December&lt;/i&gt; - December&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining the months of a year.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;January&lt;/i&gt; - January&lt;/li&gt;&lt;li&gt;&lt;i&gt;February&lt;/i&gt; - February&lt;/li&gt;&lt;li&gt;&lt;i&gt;March&lt;/i&gt; - March&lt;/li&gt;&lt;li&gt;&lt;i&gt;April&lt;/i&gt; - April&lt;/li&gt;&lt;li&gt;&lt;i&gt;May&lt;/i&gt; - May&lt;/li&gt;&lt;li&gt;&lt;i&gt;June&lt;/i&gt; - June&lt;/li&gt;&lt;li&gt;&lt;i&gt;July&lt;/i&gt; - July&lt;/li&gt;&lt;li&gt;&lt;i&gt;August&lt;/i&gt; - August&lt;/li&gt;&lt;li&gt;&lt;i&gt;September&lt;/i&gt; - September&lt;/li&gt;&lt;li&gt;&lt;i&gt;October&lt;/i&gt; - October&lt;/li&gt;&lt;li&gt;&lt;i&gt;November&lt;/i&gt; - November&lt;/li&gt;&lt;li&gt;&lt;i&gt;December&lt;/i&gt; - December&lt;/li&gt;&lt;/ul&gt;</value>
    public enum Months
    {
        /// <summary>
        /// Enum January for value: January
        /// </summary>
        January = 1,

        /// <summary>
        /// Enum February for value: February
        /// </summary>
        February = 2,

        /// <summary>
        /// Enum March for value: March
        /// </summary>
        March = 3,

        /// <summary>
        /// Enum April for value: April
        /// </summary>
        April = 4,

        /// <summary>
        /// Enum May for value: May
        /// </summary>
        May = 5,

        /// <summary>
        /// Enum June for value: June
        /// </summary>
        June = 6,

        /// <summary>
        /// Enum July for value: July
        /// </summary>
        July = 7,

        /// <summary>
        /// Enum August for value: August
        /// </summary>
        August = 8,

        /// <summary>
        /// Enum September for value: September
        /// </summary>
        September = 9,

        /// <summary>
        /// Enum October for value: October
        /// </summary>
        October = 10,

        /// <summary>
        /// Enum November for value: November
        /// </summary>
        November = 11,

        /// <summary>
        /// Enum December for value: December
        /// </summary>
        December = 12
    }

    /// <summary>
    /// Converts <see cref="Months"/> to and from the JSON value
    /// </summary>
    public static class MonthsValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="Months"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Months FromString(string value)
        {
            if (value.Equals("January"))
                return Months.January;

            if (value.Equals("February"))
                return Months.February;

            if (value.Equals("March"))
                return Months.March;

            if (value.Equals("April"))
                return Months.April;

            if (value.Equals("May"))
                return Months.May;

            if (value.Equals("June"))
                return Months.June;

            if (value.Equals("July"))
                return Months.July;

            if (value.Equals("August"))
                return Months.August;

            if (value.Equals("September"))
                return Months.September;

            if (value.Equals("October"))
                return Months.October;

            if (value.Equals("November"))
                return Months.November;

            if (value.Equals("December"))
                return Months.December;

            throw new NotImplementedException($"Could not convert value to type Months: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="Months"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static Months? FromStringOrDefault(string value)
        {
            if (value.Equals("January"))
                return Months.January;

            if (value.Equals("February"))
                return Months.February;

            if (value.Equals("March"))
                return Months.March;

            if (value.Equals("April"))
                return Months.April;

            if (value.Equals("May"))
                return Months.May;

            if (value.Equals("June"))
                return Months.June;

            if (value.Equals("July"))
                return Months.July;

            if (value.Equals("August"))
                return Months.August;

            if (value.Equals("September"))
                return Months.September;

            if (value.Equals("October"))
                return Months.October;

            if (value.Equals("November"))
                return Months.November;

            if (value.Equals("December"))
                return Months.December;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="Months"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(Months value)
        {
            if (value == Months.January)
                return "January";

            if (value == Months.February)
                return "February";

            if (value == Months.March)
                return "March";

            if (value == Months.April)
                return "April";

            if (value == Months.May)
                return "May";

            if (value == Months.June)
                return "June";

            if (value == Months.July)
                return "July";

            if (value == Months.August)
                return "August";

            if (value == Months.September)
                return "September";

            if (value == Months.October)
                return "October";

            if (value == Months.November)
                return "November";

            if (value == Months.December)
                return "December";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Months"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MonthsJsonConverter : JsonConverter<Months>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Months Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Months? result = rawValue == null
                ? null
                : MonthsValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Months to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="months"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Months months, JsonSerializerOptions options)
        {
            writer.WriteStringValue(months.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Months"/>
    /// </summary>
    public class MonthsNullableJsonConverter : JsonConverter<Months?>
    {
        /// <summary>
        /// Returns a Months from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Months? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Months? result = rawValue == null
                ? null
                : MonthsValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="months"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Months? months, JsonSerializerOptions options)
        {
            writer.WriteStringValue(months?.ToString() ?? "null");
        }
    }
}
