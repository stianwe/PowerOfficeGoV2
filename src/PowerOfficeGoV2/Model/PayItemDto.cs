// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The pay item DTO contains all properties relevant to a pay item in Go.
    /// </summary>
    public partial class PayItemDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayItemDto" /> class.
        /// </summary>
        /// <param name="accountId">The Id of the general ledger account used, if the posting type is set to general ledger account.</param>
        /// <param name="benefit">benefit</param>
        /// <param name="benefitDescription">benefitDescription</param>
        /// <param name="code">The code of the pay item.</param>
        /// <param name="createdDateTimeOffset">The timestamp the pay item entity was created.</param>
        /// <param name="deductionPayItemId">The identifier of the separate pay item this instance is linked to,  if this pay item instance have a processing type that link to a deduction pay item.</param>
        /// <param name="earnedContinentalShelf">The continental shelf reporting of the pay item.  Null if no continental shelf reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.  True if the benefit is earned on continental shelf.  False if the benefit is not earned on continental shelf.</param>
        /// <param name="earnedSupportVessel">Defines the support vessel reporting type of the pay item.   The support vessel reporting of the pay item.   Null if no support vessel reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.   True if the benefit is earned on support vessel.   False if the benefit is not earned on support vessel.</param>
        /// <param name="earningsCountryCode">The earnings country code, relevant if report earnings country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).</param>
        /// <param name="employerContributionBasis">Value indicating whether this pay item should be included in the calculation of employer&#39;s contribution.</param>
        /// <param name="fnoReporting">fnoReporting</param>
        /// <param name="fullTaxOnHalfTaxPayrolls">Value indicating whether this pay item should calculate ordinary tax when used in a half tax payroll.</param>
        /// <param name="holidayPayBasis">Value indicating whether this pay item should be included in the calculation of holiday pay.</param>
        /// <param name="id">The identifier of the pay item.</param>
        /// <param name="includeInIncomeReport">Value indicating whether this pay item should be included in the income reporting.</param>
        /// <param name="isActive">Value indicating whether this instance is active.  Inactive pay items disable the usage of that pay item on salary lines.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the pay item.</param>
        /// <param name="name">The name of the pay item.</param>
        /// <param name="oppositeAccountId">The id of the general ledger account to post opposite transaction.</param>
        /// <param name="pensionBasis">Value indicating whether this pay item should be included in the calculation of pension.</param>
        /// <param name="percentage">The percentage, relevant for pay items with percentage processing type.  Examples: A value of 50 reflect as 50% in the GUI, and a value of -50 reflect as -50% in the GUI.  Example of use case: Pay item for 50% overtime will have 150 set, in order to calculate the correct hourly wage when used.</param>
        /// <param name="postingType">postingType</param>
        /// <param name="processingType">processingType</param>
        /// <param name="rate">The rate for of the pay item, relevant if the processing type include a fixed rate.  Rates set on the pay item will be overridden if a rate is set on the salary line using the pay item.</param>
        /// <param name="roundingPrecision">roundingPrecision</param>
        /// <param name="specialIncomeCondition">specialIncomeCondition</param>
        /// <param name="taxCountryCode">The tax country code, relevant if tax country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).</param>
        /// <param name="taxDeduction">taxDeduction</param>
        /// <param name="tradeUnionBasis">Value indicating whether this pay item should be included in the calculation of trade union basis.</param>
        [JsonConstructor]
        public PayItemDto(Option<long?> accountId = default, Option<BenefitType?> benefit = default, Option<BenefitDescriptionType?> benefitDescription = default, Option<string?> code = default, Option<DateTime?> createdDateTimeOffset = default, Option<Guid?> deductionPayItemId = default, Option<bool?> earnedContinentalShelf = default, Option<bool?> earnedSupportVessel = default, Option<string?> earningsCountryCode = default, Option<bool?> employerContributionBasis = default, Option<FnoReportingType?> fnoReporting = default, Option<bool?> fullTaxOnHalfTaxPayrolls = default, Option<bool?> holidayPayBasis = default, Option<Guid?> id = default, Option<bool?> includeInIncomeReport = default, Option<bool?> isActive = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> name = default, Option<long?> oppositeAccountId = default, Option<bool?> pensionBasis = default, Option<double?> percentage = default, Option<PostingType?> postingType = default, Option<ProcessingType?> processingType = default, Option<double?> rate = default, Option<RoundingPrecisionType?> roundingPrecision = default, Option<SpecialIncomeConditionType?> specialIncomeCondition = default, Option<string?> taxCountryCode = default, Option<TaxDeductionType?> taxDeduction = default, Option<bool?> tradeUnionBasis = default)
        {
            AccountIdOption = accountId;
            BenefitOption = benefit;
            BenefitDescriptionOption = benefitDescription;
            CodeOption = code;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            DeductionPayItemIdOption = deductionPayItemId;
            EarnedContinentalShelfOption = earnedContinentalShelf;
            EarnedSupportVesselOption = earnedSupportVessel;
            EarningsCountryCodeOption = earningsCountryCode;
            EmployerContributionBasisOption = employerContributionBasis;
            FnoReportingOption = fnoReporting;
            FullTaxOnHalfTaxPayrollsOption = fullTaxOnHalfTaxPayrolls;
            HolidayPayBasisOption = holidayPayBasis;
            IdOption = id;
            IncludeInIncomeReportOption = includeInIncomeReport;
            IsActiveOption = isActive;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            NameOption = name;
            OppositeAccountIdOption = oppositeAccountId;
            PensionBasisOption = pensionBasis;
            PercentageOption = percentage;
            PostingTypeOption = postingType;
            ProcessingTypeOption = processingType;
            RateOption = rate;
            RoundingPrecisionOption = roundingPrecision;
            SpecialIncomeConditionOption = specialIncomeCondition;
            TaxCountryCodeOption = taxCountryCode;
            TaxDeductionOption = taxDeduction;
            TradeUnionBasisOption = tradeUnionBasis;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Benefit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BenefitType?> BenefitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Benefit
        /// </summary>
        [JsonPropertyName("Benefit")]
        public BenefitType? Benefit { get { return this.BenefitOption; } set { this.BenefitOption = new(value); } }

        /// <summary>
        /// Used to track the state of BenefitDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BenefitDescriptionType?> BenefitDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets BenefitDescription
        /// </summary>
        [JsonPropertyName("BenefitDescription")]
        public BenefitDescriptionType? BenefitDescription { get { return this.BenefitDescriptionOption; } set { this.BenefitDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FnoReporting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FnoReportingType?> FnoReportingOption { get; private set; }

        /// <summary>
        /// Gets or Sets FnoReporting
        /// </summary>
        [JsonPropertyName("FnoReporting")]
        public FnoReportingType? FnoReporting { get { return this.FnoReportingOption; } set { this.FnoReportingOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostingType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PostingType?> PostingTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PostingType
        /// </summary>
        [JsonPropertyName("PostingType")]
        public PostingType? PostingType { get { return this.PostingTypeOption; } set { this.PostingTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessingType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProcessingType?> ProcessingTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessingType
        /// </summary>
        [JsonPropertyName("ProcessingType")]
        public ProcessingType? ProcessingType { get { return this.ProcessingTypeOption; } set { this.ProcessingTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RoundingPrecision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RoundingPrecisionType?> RoundingPrecisionOption { get; private set; }

        /// <summary>
        /// Gets or Sets RoundingPrecision
        /// </summary>
        [JsonPropertyName("RoundingPrecision")]
        public RoundingPrecisionType? RoundingPrecision { get { return this.RoundingPrecisionOption; } set { this.RoundingPrecisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpecialIncomeCondition
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SpecialIncomeConditionType?> SpecialIncomeConditionOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpecialIncomeCondition
        /// </summary>
        [JsonPropertyName("SpecialIncomeCondition")]
        public SpecialIncomeConditionType? SpecialIncomeCondition { get { return this.SpecialIncomeConditionOption; } set { this.SpecialIncomeConditionOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxDeduction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxDeductionType?> TaxDeductionOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxDeduction
        /// </summary>
        [JsonPropertyName("TaxDeduction")]
        public TaxDeductionType? TaxDeduction { get { return this.TaxDeductionOption; } set { this.TaxDeductionOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; }

        /// <summary>
        /// The Id of the general ledger account used, if the posting type is set to general ledger account.
        /// </summary>
        /// <value>The Id of the general ledger account used, if the posting type is set to general ledger account.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; }

        /// <summary>
        /// The code of the pay item.
        /// </summary>
        /// <value>The code of the pay item.</value>
        /* <example>10</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the pay item entity was created.
        /// </summary>
        /// <value>The timestamp the pay item entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of DeductionPayItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DeductionPayItemIdOption { get; }

        /// <summary>
        /// The identifier of the separate pay item this instance is linked to,  if this pay item instance have a processing type that link to a deduction pay item.
        /// </summary>
        /// <value>The identifier of the separate pay item this instance is linked to,  if this pay item instance have a processing type that link to a deduction pay item.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("DeductionPayItemId")]
        public Guid? DeductionPayItemId { get { return this.DeductionPayItemIdOption; } }

        /// <summary>
        /// Used to track the state of EarnedContinentalShelf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EarnedContinentalShelfOption { get; }

        /// <summary>
        /// The continental shelf reporting of the pay item.  Null if no continental shelf reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.  True if the benefit is earned on continental shelf.  False if the benefit is not earned on continental shelf.
        /// </summary>
        /// <value>The continental shelf reporting of the pay item.  Null if no continental shelf reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.  True if the benefit is earned on continental shelf.  False if the benefit is not earned on continental shelf.</value>
        [JsonPropertyName("EarnedContinentalShelf")]
        public bool? EarnedContinentalShelf { get { return this.EarnedContinentalShelfOption; } }

        /// <summary>
        /// Used to track the state of EarnedSupportVessel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EarnedSupportVesselOption { get; }

        /// <summary>
        /// Defines the support vessel reporting type of the pay item.   The support vessel reporting of the pay item.   Null if no support vessel reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.   True if the benefit is earned on support vessel.   False if the benefit is not earned on support vessel.
        /// </summary>
        /// <value>Defines the support vessel reporting type of the pay item.   The support vessel reporting of the pay item.   Null if no support vessel reporting is relevant for the pay item (benefit), and it should not be reported to Altinn.   True if the benefit is earned on support vessel.   False if the benefit is not earned on support vessel.</value>
        /* <example>true</example> */
        [JsonPropertyName("EarnedSupportVessel")]
        public bool? EarnedSupportVessel { get { return this.EarnedSupportVesselOption; } }

        /// <summary>
        /// Used to track the state of EarningsCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EarningsCountryCodeOption { get; }

        /// <summary>
        /// The earnings country code, relevant if report earnings country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).
        /// </summary>
        /// <value>The earnings country code, relevant if report earnings country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).</value>
        /* <example>NO</example> */
        [JsonPropertyName("EarningsCountryCode")]
        public string? EarningsCountryCode { get { return this.EarningsCountryCodeOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmployerContributionBasisOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should be included in the calculation of employer&#39;s contribution.
        /// </summary>
        /// <value>Value indicating whether this pay item should be included in the calculation of employer&#39;s contribution.</value>
        /* <example>true</example> */
        [JsonPropertyName("EmployerContributionBasis")]
        public bool? EmployerContributionBasis { get { return this.EmployerContributionBasisOption; } }

        /// <summary>
        /// Used to track the state of FullTaxOnHalfTaxPayrolls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FullTaxOnHalfTaxPayrollsOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should calculate ordinary tax when used in a half tax payroll.
        /// </summary>
        /// <value>Value indicating whether this pay item should calculate ordinary tax when used in a half tax payroll.</value>
        /* <example>true</example> */
        [JsonPropertyName("FullTaxOnHalfTaxPayrolls")]
        public bool? FullTaxOnHalfTaxPayrolls { get { return this.FullTaxOnHalfTaxPayrollsOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HolidayPayBasisOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should be included in the calculation of holiday pay.
        /// </summary>
        /// <value>Value indicating whether this pay item should be included in the calculation of holiday pay.</value>
        /* <example>true</example> */
        [JsonPropertyName("HolidayPayBasis")]
        public bool? HolidayPayBasis { get { return this.HolidayPayBasisOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The identifier of the pay item.
        /// </summary>
        /// <value>The identifier of the pay item.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IncludeInIncomeReport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeInIncomeReportOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should be included in the income reporting.
        /// </summary>
        /// <value>Value indicating whether this pay item should be included in the income reporting.</value>
        /* <example>true</example> */
        [JsonPropertyName("IncludeInIncomeReport")]
        public bool? IncludeInIncomeReport { get { return this.IncludeInIncomeReportOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; }

        /// <summary>
        /// Value indicating whether this instance is active.  Inactive pay items disable the usage of that pay item on salary lines.
        /// </summary>
        /// <value>Value indicating whether this instance is active.  Inactive pay items disable the usage of that pay item on salary lines.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the pay item.
        /// </summary>
        /// <value>The timestamp of the last change of the pay item.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; }

        /// <summary>
        /// The name of the pay item.
        /// </summary>
        /// <value>The name of the pay item.</value>
        /* <example>Timelønn</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } }

        /// <summary>
        /// Used to track the state of OppositeAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OppositeAccountIdOption { get; }

        /// <summary>
        /// The id of the general ledger account to post opposite transaction.
        /// </summary>
        /// <value>The id of the general ledger account to post opposite transaction.</value>
        /* <example>12345</example> */
        [JsonPropertyName("OppositeAccountId")]
        public long? OppositeAccountId { get { return this.OppositeAccountIdOption; } }

        /// <summary>
        /// Used to track the state of PensionBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PensionBasisOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should be included in the calculation of pension.
        /// </summary>
        /// <value>Value indicating whether this pay item should be included in the calculation of pension.</value>
        /* <example>true</example> */
        [JsonPropertyName("PensionBasis")]
        public bool? PensionBasis { get { return this.PensionBasisOption; } }

        /// <summary>
        /// Used to track the state of Percentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PercentageOption { get; }

        /// <summary>
        /// The percentage, relevant for pay items with percentage processing type.  Examples: A value of 50 reflect as 50% in the GUI, and a value of -50 reflect as -50% in the GUI.  Example of use case: Pay item for 50% overtime will have 150 set, in order to calculate the correct hourly wage when used.
        /// </summary>
        /// <value>The percentage, relevant for pay items with percentage processing type.  Examples: A value of 50 reflect as 50% in the GUI, and a value of -50 reflect as -50% in the GUI.  Example of use case: Pay item for 50% overtime will have 150 set, in order to calculate the correct hourly wage when used.</value>
        /* <example>-100</example> */
        [JsonPropertyName("Percentage")]
        public double? Percentage { get { return this.PercentageOption; } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> RateOption { get; }

        /// <summary>
        /// The rate for of the pay item, relevant if the processing type include a fixed rate.  Rates set on the pay item will be overridden if a rate is set on the salary line using the pay item.
        /// </summary>
        /// <value>The rate for of the pay item, relevant if the processing type include a fixed rate.  Rates set on the pay item will be overridden if a rate is set on the salary line using the pay item.</value>
        /* <example>250</example> */
        [JsonPropertyName("Rate")]
        public double? Rate { get { return this.RateOption; } }

        /// <summary>
        /// Used to track the state of TaxCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxCountryCodeOption { get; }

        /// <summary>
        /// The tax country code, relevant if tax country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).
        /// </summary>
        /// <value>The tax country code, relevant if tax country is to be reported on this pay item.  ISO 3166-1 alfa-2 country code (two characters).</value>
        /* <example>NO</example> */
        [JsonPropertyName("TaxCountryCode")]
        public string? TaxCountryCode { get { return this.TaxCountryCodeOption; } }

        /// <summary>
        /// Used to track the state of TradeUnionBasis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TradeUnionBasisOption { get; }

        /// <summary>
        /// Value indicating whether this pay item should be included in the calculation of trade union basis.
        /// </summary>
        /// <value>Value indicating whether this pay item should be included in the calculation of trade union basis.</value>
        /* <example>true</example> */
        [JsonPropertyName("TradeUnionBasis")]
        public bool? TradeUnionBasis { get { return this.TradeUnionBasisOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayItemDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Benefit: ").Append(Benefit).Append("\n");
            sb.Append("  BenefitDescription: ").Append(BenefitDescription).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  DeductionPayItemId: ").Append(DeductionPayItemId).Append("\n");
            sb.Append("  EarnedContinentalShelf: ").Append(EarnedContinentalShelf).Append("\n");
            sb.Append("  EarnedSupportVessel: ").Append(EarnedSupportVessel).Append("\n");
            sb.Append("  EarningsCountryCode: ").Append(EarningsCountryCode).Append("\n");
            sb.Append("  EmployerContributionBasis: ").Append(EmployerContributionBasis).Append("\n");
            sb.Append("  FnoReporting: ").Append(FnoReporting).Append("\n");
            sb.Append("  FullTaxOnHalfTaxPayrolls: ").Append(FullTaxOnHalfTaxPayrolls).Append("\n");
            sb.Append("  HolidayPayBasis: ").Append(HolidayPayBasis).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IncludeInIncomeReport: ").Append(IncludeInIncomeReport).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OppositeAccountId: ").Append(OppositeAccountId).Append("\n");
            sb.Append("  PensionBasis: ").Append(PensionBasis).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  PostingType: ").Append(PostingType).Append("\n");
            sb.Append("  ProcessingType: ").Append(ProcessingType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RoundingPrecision: ").Append(RoundingPrecision).Append("\n");
            sb.Append("  SpecialIncomeCondition: ").Append(SpecialIncomeCondition).Append("\n");
            sb.Append("  TaxCountryCode: ").Append(TaxCountryCode).Append("\n");
            sb.Append("  TaxDeduction: ").Append(TaxDeduction).Append("\n");
            sb.Append("  TradeUnionBasis: ").Append(TradeUnionBasis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 200.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayItemDto" />
    /// </summary>
    public class PayItemDtoJsonConverter : JsonConverter<PayItemDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PayItemDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PayItemDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<BenefitType?> benefit = default;
            Option<BenefitDescriptionType?> benefitDescription = default;
            Option<string?> code = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<Guid?> deductionPayItemId = default;
            Option<bool?> earnedContinentalShelf = default;
            Option<bool?> earnedSupportVessel = default;
            Option<string?> earningsCountryCode = default;
            Option<bool?> employerContributionBasis = default;
            Option<FnoReportingType?> fnoReporting = default;
            Option<bool?> fullTaxOnHalfTaxPayrolls = default;
            Option<bool?> holidayPayBasis = default;
            Option<Guid?> id = default;
            Option<bool?> includeInIncomeReport = default;
            Option<bool?> isActive = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> name = default;
            Option<long?> oppositeAccountId = default;
            Option<bool?> pensionBasis = default;
            Option<double?> percentage = default;
            Option<PostingType?> postingType = default;
            Option<ProcessingType?> processingType = default;
            Option<double?> rate = default;
            Option<RoundingPrecisionType?> roundingPrecision = default;
            Option<SpecialIncomeConditionType?> specialIncomeCondition = default;
            Option<string?> taxCountryCode = default;
            Option<TaxDeductionType?> taxDeduction = default;
            Option<bool?> tradeUnionBasis = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Benefit":
                            string? benefitRawValue = utf8JsonReader.GetString();
                            if (benefitRawValue != null)
                                benefit = new Option<BenefitType?>(BenefitTypeValueConverter.FromStringOrDefault(benefitRawValue));
                            break;
                        case "BenefitDescription":
                            string? benefitDescriptionRawValue = utf8JsonReader.GetString();
                            if (benefitDescriptionRawValue != null)
                                benefitDescription = new Option<BenefitDescriptionType?>(BenefitDescriptionTypeValueConverter.FromStringOrDefault(benefitDescriptionRawValue));
                            break;
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DeductionPayItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deductionPayItemId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "EarnedContinentalShelf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                earnedContinentalShelf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "EarnedSupportVessel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                earnedSupportVessel = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "EarningsCountryCode":
                            earningsCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EmployerContributionBasis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionBasis = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "FnoReporting":
                            string? fnoReportingRawValue = utf8JsonReader.GetString();
                            if (fnoReportingRawValue != null)
                                fnoReporting = new Option<FnoReportingType?>(FnoReportingTypeValueConverter.FromStringOrDefault(fnoReportingRawValue));
                            break;
                        case "FullTaxOnHalfTaxPayrolls":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fullTaxOnHalfTaxPayrolls = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "HolidayPayBasis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayBasis = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "IncludeInIncomeReport":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                includeInIncomeReport = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OppositeAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oppositeAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PensionBasis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pensionBasis = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Percentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                percentage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "PostingType":
                            string? postingTypeRawValue = utf8JsonReader.GetString();
                            if (postingTypeRawValue != null)
                                postingType = new Option<PostingType?>(PostingTypeValueConverter.FromStringOrDefault(postingTypeRawValue));
                            break;
                        case "ProcessingType":
                            string? processingTypeRawValue = utf8JsonReader.GetString();
                            if (processingTypeRawValue != null)
                                processingType = new Option<ProcessingType?>(ProcessingTypeValueConverter.FromStringOrDefault(processingTypeRawValue));
                            break;
                        case "Rate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "RoundingPrecision":
                            string? roundingPrecisionRawValue = utf8JsonReader.GetString();
                            if (roundingPrecisionRawValue != null)
                                roundingPrecision = new Option<RoundingPrecisionType?>(RoundingPrecisionTypeValueConverter.FromStringOrDefault(roundingPrecisionRawValue));
                            break;
                        case "SpecialIncomeCondition":
                            string? specialIncomeConditionRawValue = utf8JsonReader.GetString();
                            if (specialIncomeConditionRawValue != null)
                                specialIncomeCondition = new Option<SpecialIncomeConditionType?>(SpecialIncomeConditionTypeValueConverter.FromStringOrDefault(specialIncomeConditionRawValue));
                            break;
                        case "TaxCountryCode":
                            taxCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TaxDeduction":
                            string? taxDeductionRawValue = utf8JsonReader.GetString();
                            if (taxDeductionRawValue != null)
                                taxDeduction = new Option<TaxDeductionType?>(TaxDeductionTypeValueConverter.FromStringOrDefault(taxDeductionRawValue));
                            break;
                        case "TradeUnionBasis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tradeUnionBasis = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class PayItemDto.");

            if (employerContributionBasis.IsSet && employerContributionBasis.Value == null)
                throw new ArgumentNullException(nameof(employerContributionBasis), "Property is not nullable for class PayItemDto.");

            if (fullTaxOnHalfTaxPayrolls.IsSet && fullTaxOnHalfTaxPayrolls.Value == null)
                throw new ArgumentNullException(nameof(fullTaxOnHalfTaxPayrolls), "Property is not nullable for class PayItemDto.");

            if (holidayPayBasis.IsSet && holidayPayBasis.Value == null)
                throw new ArgumentNullException(nameof(holidayPayBasis), "Property is not nullable for class PayItemDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PayItemDto.");

            if (includeInIncomeReport.IsSet && includeInIncomeReport.Value == null)
                throw new ArgumentNullException(nameof(includeInIncomeReport), "Property is not nullable for class PayItemDto.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class PayItemDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class PayItemDto.");

            if (pensionBasis.IsSet && pensionBasis.Value == null)
                throw new ArgumentNullException(nameof(pensionBasis), "Property is not nullable for class PayItemDto.");

            if (tradeUnionBasis.IsSet && tradeUnionBasis.Value == null)
                throw new ArgumentNullException(nameof(tradeUnionBasis), "Property is not nullable for class PayItemDto.");

            return new PayItemDto(accountId, benefit, benefitDescription, code, createdDateTimeOffset, deductionPayItemId, earnedContinentalShelf, earnedSupportVessel, earningsCountryCode, employerContributionBasis, fnoReporting, fullTaxOnHalfTaxPayrolls, holidayPayBasis, id, includeInIncomeReport, isActive, lastChangedDateTimeOffset, name, oppositeAccountId, pensionBasis, percentage, postingType, processingType, rate, roundingPrecision, specialIncomeCondition, taxCountryCode, taxDeduction, tradeUnionBasis);
        }

        /// <summary>
        /// Serializes a <see cref="PayItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PayItemDto payItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, payItemDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PayItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PayItemDto payItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (payItemDto.AccountIdOption.IsSet)
                if (payItemDto.AccountIdOption.Value != null)
                    writer.WriteNumber("AccountId", payItemDto.AccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccountId");

            if (payItemDto.BenefitOption.IsSet)
                if (payItemDto.BenefitOption!.Value != null)
                {
                    var benefitRawValue = BenefitTypeValueConverter.ToJsonValue(payItemDto.BenefitOption.Value!.Value);
                    writer.WriteString("Benefit", benefitRawValue);
                }
                else
                    writer.WriteNull("Benefit");
            if (payItemDto.BenefitDescriptionOption.IsSet)
                if (payItemDto.BenefitDescriptionOption!.Value != null)
                {
                    var benefitDescriptionRawValue = BenefitDescriptionTypeValueConverter.ToJsonValue(payItemDto.BenefitDescriptionOption.Value!.Value);
                    writer.WriteString("BenefitDescription", benefitDescriptionRawValue);
                }
                else
                    writer.WriteNull("BenefitDescription");
            if (payItemDto.CodeOption.IsSet)
                if (payItemDto.CodeOption.Value != null)
                    writer.WriteString("Code", payItemDto.Code);
                else
                    writer.WriteNull("Code");

            if (payItemDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", payItemDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (payItemDto.DeductionPayItemIdOption.IsSet)
                if (payItemDto.DeductionPayItemIdOption.Value != null)
                    writer.WriteString("DeductionPayItemId", payItemDto.DeductionPayItemIdOption.Value!.Value);
                else
                    writer.WriteNull("DeductionPayItemId");

            if (payItemDto.EarnedContinentalShelfOption.IsSet)
                if (payItemDto.EarnedContinentalShelfOption.Value != null)
                    writer.WriteBoolean("EarnedContinentalShelf", payItemDto.EarnedContinentalShelfOption.Value!.Value);
                else
                    writer.WriteNull("EarnedContinentalShelf");

            if (payItemDto.EarnedSupportVesselOption.IsSet)
                if (payItemDto.EarnedSupportVesselOption.Value != null)
                    writer.WriteBoolean("EarnedSupportVessel", payItemDto.EarnedSupportVesselOption.Value!.Value);
                else
                    writer.WriteNull("EarnedSupportVessel");

            if (payItemDto.EarningsCountryCodeOption.IsSet)
                if (payItemDto.EarningsCountryCodeOption.Value != null)
                    writer.WriteString("EarningsCountryCode", payItemDto.EarningsCountryCode);
                else
                    writer.WriteNull("EarningsCountryCode");

            if (payItemDto.EmployerContributionBasisOption.IsSet)
                writer.WriteBoolean("EmployerContributionBasis", payItemDto.EmployerContributionBasisOption.Value!.Value);

            if (payItemDto.FnoReportingOption.IsSet)
                if (payItemDto.FnoReportingOption!.Value != null)
                {
                    var fnoReportingRawValue = FnoReportingTypeValueConverter.ToJsonValue(payItemDto.FnoReportingOption.Value!.Value);
                    writer.WriteString("FnoReporting", fnoReportingRawValue);
                }
                else
                    writer.WriteNull("FnoReporting");
            if (payItemDto.FullTaxOnHalfTaxPayrollsOption.IsSet)
                writer.WriteBoolean("FullTaxOnHalfTaxPayrolls", payItemDto.FullTaxOnHalfTaxPayrollsOption.Value!.Value);

            if (payItemDto.HolidayPayBasisOption.IsSet)
                writer.WriteBoolean("HolidayPayBasis", payItemDto.HolidayPayBasisOption.Value!.Value);

            if (payItemDto.IdOption.IsSet)
                writer.WriteString("Id", payItemDto.IdOption.Value!.Value);

            if (payItemDto.IncludeInIncomeReportOption.IsSet)
                writer.WriteBoolean("IncludeInIncomeReport", payItemDto.IncludeInIncomeReportOption.Value!.Value);

            if (payItemDto.IsActiveOption.IsSet)
                writer.WriteBoolean("IsActive", payItemDto.IsActiveOption.Value!.Value);

            if (payItemDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", payItemDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (payItemDto.NameOption.IsSet)
                if (payItemDto.NameOption.Value != null)
                    writer.WriteString("Name", payItemDto.Name);
                else
                    writer.WriteNull("Name");

            if (payItemDto.OppositeAccountIdOption.IsSet)
                if (payItemDto.OppositeAccountIdOption.Value != null)
                    writer.WriteNumber("OppositeAccountId", payItemDto.OppositeAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OppositeAccountId");

            if (payItemDto.PensionBasisOption.IsSet)
                writer.WriteBoolean("PensionBasis", payItemDto.PensionBasisOption.Value!.Value);

            if (payItemDto.PercentageOption.IsSet)
                if (payItemDto.PercentageOption.Value != null)
                    writer.WriteNumber("Percentage", payItemDto.PercentageOption.Value!.Value);
                else
                    writer.WriteNull("Percentage");

            if (payItemDto.PostingTypeOption.IsSet)
                if (payItemDto.PostingTypeOption!.Value != null)
                {
                    var postingTypeRawValue = PostingTypeValueConverter.ToJsonValue(payItemDto.PostingTypeOption.Value!.Value);
                    writer.WriteString("PostingType", postingTypeRawValue);
                }
                else
                    writer.WriteNull("PostingType");
            if (payItemDto.ProcessingTypeOption.IsSet)
                if (payItemDto.ProcessingTypeOption!.Value != null)
                {
                    var processingTypeRawValue = ProcessingTypeValueConverter.ToJsonValue(payItemDto.ProcessingTypeOption.Value!.Value);
                    writer.WriteString("ProcessingType", processingTypeRawValue);
                }
                else
                    writer.WriteNull("ProcessingType");
            if (payItemDto.RateOption.IsSet)
                if (payItemDto.RateOption.Value != null)
                    writer.WriteNumber("Rate", payItemDto.RateOption.Value!.Value);
                else
                    writer.WriteNull("Rate");

            if (payItemDto.RoundingPrecisionOption.IsSet)
                if (payItemDto.RoundingPrecisionOption!.Value != null)
                {
                    var roundingPrecisionRawValue = RoundingPrecisionTypeValueConverter.ToJsonValue(payItemDto.RoundingPrecisionOption.Value!.Value);
                    writer.WriteString("RoundingPrecision", roundingPrecisionRawValue);
                }
                else
                    writer.WriteNull("RoundingPrecision");
            if (payItemDto.SpecialIncomeConditionOption.IsSet)
                if (payItemDto.SpecialIncomeConditionOption!.Value != null)
                {
                    var specialIncomeConditionRawValue = SpecialIncomeConditionTypeValueConverter.ToJsonValue(payItemDto.SpecialIncomeConditionOption.Value!.Value);
                    writer.WriteString("SpecialIncomeCondition", specialIncomeConditionRawValue);
                }
                else
                    writer.WriteNull("SpecialIncomeCondition");
            if (payItemDto.TaxCountryCodeOption.IsSet)
                if (payItemDto.TaxCountryCodeOption.Value != null)
                    writer.WriteString("TaxCountryCode", payItemDto.TaxCountryCode);
                else
                    writer.WriteNull("TaxCountryCode");

            if (payItemDto.TaxDeductionOption.IsSet)
                if (payItemDto.TaxDeductionOption!.Value != null)
                {
                    var taxDeductionRawValue = TaxDeductionTypeValueConverter.ToJsonValue(payItemDto.TaxDeductionOption.Value!.Value);
                    writer.WriteString("TaxDeduction", taxDeductionRawValue);
                }
                else
                    writer.WriteNull("TaxDeduction");
            if (payItemDto.TradeUnionBasisOption.IsSet)
                writer.WriteBoolean("TradeUnionBasis", payItemDto.TradeUnionBasisOption.Value!.Value);
        }
    }
}
