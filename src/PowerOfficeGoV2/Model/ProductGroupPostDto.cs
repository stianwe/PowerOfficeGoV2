// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for creating a ProductGroup.
    /// </summary>
    public partial class ProductGroupPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductGroupPostDto" /> class.
        /// </summary>
        /// <param name="code">The code of the product group.</param>
        /// <param name="description">The description of the product group.</param>
        /// <param name="isArchived">Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.</param>
        /// <param name="name">The name of the product group.</param>
        /// <param name="optionalSalesAccount">The code of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.</param>
        /// <param name="optionalSalesAccountAgricultureDepartment">optionalSalesAccountAgricultureDepartment</param>
        /// <param name="optionalSalesAccountId">The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</param>
        /// <param name="productType">productType</param>
        /// <param name="standardSalesAccount">The code of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.</param>
        /// <param name="standardSalesAccountAgricultureDepartment">standardSalesAccountAgricultureDepartment</param>
        /// <param name="standardSalesAccountId">The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</param>
        /// <param name="unitCost">The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode</param>
        /// <param name="unitPrice">The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.</param>
        [JsonConstructor]
        public ProductGroupPostDto(Option<string?> code = default, Option<string?> description = default, Option<bool?> isArchived = default, Option<string?> name = default, Option<long?> optionalSalesAccount = default, Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default, Option<long?> optionalSalesAccountId = default, Option<ProductType?> productType = default, Option<long?> standardSalesAccount = default, Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default, Option<long?> standardSalesAccountId = default, Option<double?> unitCost = default, Option<UnitOfMeasureType?> unitOfMeasureCode = default, Option<double?> unitPrice = default)
        {
            CodeOption = code;
            DescriptionOption = description;
            IsArchivedOption = isArchived;
            NameOption = name;
            OptionalSalesAccountOption = optionalSalesAccount;
            OptionalSalesAccountAgricultureDepartmentOption = optionalSalesAccountAgricultureDepartment;
            OptionalSalesAccountIdOption = optionalSalesAccountId;
            ProductTypeOption = productType;
            StandardSalesAccountOption = standardSalesAccount;
            StandardSalesAccountAgricultureDepartmentOption = standardSalesAccountAgricultureDepartment;
            StandardSalesAccountIdOption = standardSalesAccountId;
            UnitCostOption = unitCost;
            UnitOfMeasureCodeOption = unitOfMeasureCode;
            UnitPriceOption = unitPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> OptionalSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("OptionalSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? OptionalSalesAccountAgricultureDepartment { get { return this.OptionalSalesAccountAgricultureDepartmentOption; } set { this.OptionalSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProductType?> ProductTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("ProductType")]
        public ProductType? ProductType { get { return this.ProductTypeOption; } set { this.ProductTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> StandardSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("StandardSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? StandardSalesAccountAgricultureDepartment { get { return this.StandardSalesAccountAgricultureDepartmentOption; } set { this.StandardSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitOfMeasureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureCode
        /// </summary>
        [JsonPropertyName("UnitOfMeasureCode")]
        public UnitOfMeasureType? UnitOfMeasureCode { get { return this.UnitOfMeasureCodeOption; } set { this.UnitOfMeasureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the product group.
        /// </summary>
        /// <value>The code of the product group.</value>
        /* <example>BA12</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the product group.
        /// </summary>
        /// <value>The description of the product group.</value>
        /* <example>Bottomless boxes of mysteries</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.
        /// </summary>
        /// <value>Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the product group.
        /// </summary>
        /// <value>The name of the product group.</value>
        /* <example>Big blue boxes</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionalSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountOption { get; private set; }

        /// <summary>
        /// The code of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.
        /// </summary>
        /// <value>The code of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.</value>
        /* <example>3100</example> */
        [JsonPropertyName("OptionalSalesAccount")]
        public long? OptionalSalesAccount { get { return this.OptionalSalesAccountOption; } set { this.OptionalSalesAccountOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionalSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.
        /// </summary>
        /// <value>The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</value>
        /* <example>123456</example> */
        [JsonPropertyName("OptionalSalesAccountId")]
        public long? OptionalSalesAccountId { get { return this.OptionalSalesAccountIdOption; } set { this.OptionalSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountOption { get; private set; }

        /// <summary>
        /// The code of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.
        /// </summary>
        /// <value>The code of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.</value>
        /* <example>3000</example> */
        [JsonPropertyName("StandardSalesAccount")]
        public long? StandardSalesAccount { get { return this.StandardSalesAccountOption; } set { this.StandardSalesAccountOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.
        /// </summary>
        /// <value>The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</value>
        /* <example>123456</example> */
        [JsonPropertyName("StandardSalesAccountId")]
        public long? StandardSalesAccountId { get { return this.StandardSalesAccountIdOption; } set { this.StandardSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitCostOption { get; private set; }

        /// <summary>
        /// The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.
        /// </summary>
        /// <value>The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.</value>
        /* <example>69.42</example> */
        [JsonPropertyName("UnitCost")]
        public double? UnitCost { get { return this.UnitCostOption; } set { this.UnitCostOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitPriceOption { get; private set; }

        /// <summary>
        /// The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.
        /// </summary>
        /// <value>The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.</value>
        /* <example>100.12</example> */
        [JsonPropertyName("UnitPrice")]
        public double? UnitPrice { get { return this.UnitPriceOption; } set { this.UnitPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductGroupPostDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OptionalSalesAccount: ").Append(OptionalSalesAccount).Append("\n");
            sb.Append("  OptionalSalesAccountAgricultureDepartment: ").Append(OptionalSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  OptionalSalesAccountId: ").Append(OptionalSalesAccountId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  StandardSalesAccount: ").Append(StandardSalesAccount).Append("\n");
            sb.Append("  StandardSalesAccountAgricultureDepartment: ").Append(StandardSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  StandardSalesAccountId: ").Append(StandardSalesAccountId).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 200.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductGroupPostDto" />
    /// </summary>
    public class ProductGroupPostDtoJsonConverter : JsonConverter<ProductGroupPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProductGroupPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProductGroupPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> description = default;
            Option<bool?> isArchived = default;
            Option<string?> name = default;
            Option<long?> optionalSalesAccount = default;
            Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default;
            Option<long?> optionalSalesAccountId = default;
            Option<ProductType?> productType = default;
            Option<long?> standardSalesAccount = default;
            Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default;
            Option<long?> standardSalesAccountId = default;
            Option<double?> unitCost = default;
            Option<UnitOfMeasureType?> unitOfMeasureCode = default;
            Option<double?> unitPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OptionalSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OptionalSalesAccountAgricultureDepartment":
                            string? optionalSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (optionalSalesAccountAgricultureDepartmentRawValue != null)
                                optionalSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(optionalSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "OptionalSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductType":
                            string? productTypeRawValue = utf8JsonReader.GetString();
                            if (productTypeRawValue != null)
                                productType = new Option<ProductType?>(ProductTypeValueConverter.FromStringOrDefault(productTypeRawValue));
                            break;
                        case "StandardSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StandardSalesAccountAgricultureDepartment":
                            string? standardSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (standardSalesAccountAgricultureDepartmentRawValue != null)
                                standardSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(standardSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "StandardSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "UnitCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitCost = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitOfMeasureCode":
                            string? unitOfMeasureCodeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureCodeRawValue != null)
                                unitOfMeasureCode = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureCodeRawValue));
                            break;
                        case "UnitPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ProductGroupPostDto(code, description, isArchived, name, optionalSalesAccount, optionalSalesAccountAgricultureDepartment, optionalSalesAccountId, productType, standardSalesAccount, standardSalesAccountAgricultureDepartment, standardSalesAccountId, unitCost, unitOfMeasureCode, unitPrice);
        }

        /// <summary>
        /// Serializes a <see cref="ProductGroupPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productGroupPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProductGroupPostDto productGroupPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, productGroupPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProductGroupPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productGroupPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProductGroupPostDto productGroupPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (productGroupPostDto.CodeOption.IsSet)
                if (productGroupPostDto.CodeOption.Value != null)
                    writer.WriteString("Code", productGroupPostDto.Code);
                else
                    writer.WriteNull("Code");

            if (productGroupPostDto.DescriptionOption.IsSet)
                if (productGroupPostDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", productGroupPostDto.Description);
                else
                    writer.WriteNull("Description");

            if (productGroupPostDto.IsArchivedOption.IsSet)
                if (productGroupPostDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", productGroupPostDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (productGroupPostDto.NameOption.IsSet)
                if (productGroupPostDto.NameOption.Value != null)
                    writer.WriteString("Name", productGroupPostDto.Name);
                else
                    writer.WriteNull("Name");

            if (productGroupPostDto.OptionalSalesAccountOption.IsSet)
                if (productGroupPostDto.OptionalSalesAccountOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccount", productGroupPostDto.OptionalSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccount");

            if (productGroupPostDto.OptionalSalesAccountAgricultureDepartmentOption.IsSet)
                if (productGroupPostDto.OptionalSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var optionalSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productGroupPostDto.OptionalSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("OptionalSalesAccountAgricultureDepartment", optionalSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("OptionalSalesAccountAgricultureDepartment");
            if (productGroupPostDto.OptionalSalesAccountIdOption.IsSet)
                if (productGroupPostDto.OptionalSalesAccountIdOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccountId", productGroupPostDto.OptionalSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccountId");

            if (productGroupPostDto.ProductTypeOption.IsSet)
                if (productGroupPostDto.ProductTypeOption!.Value != null)
                {
                    var productTypeRawValue = ProductTypeValueConverter.ToJsonValue(productGroupPostDto.ProductTypeOption.Value!.Value);
                    writer.WriteString("ProductType", productTypeRawValue);
                }
                else
                    writer.WriteNull("ProductType");
            if (productGroupPostDto.StandardSalesAccountOption.IsSet)
                if (productGroupPostDto.StandardSalesAccountOption.Value != null)
                    writer.WriteNumber("StandardSalesAccount", productGroupPostDto.StandardSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccount");

            if (productGroupPostDto.StandardSalesAccountAgricultureDepartmentOption.IsSet)
                if (productGroupPostDto.StandardSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var standardSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productGroupPostDto.StandardSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("StandardSalesAccountAgricultureDepartment", standardSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("StandardSalesAccountAgricultureDepartment");
            if (productGroupPostDto.StandardSalesAccountIdOption.IsSet)
                if (productGroupPostDto.StandardSalesAccountIdOption.Value != null)
                    writer.WriteNumber("StandardSalesAccountId", productGroupPostDto.StandardSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccountId");

            if (productGroupPostDto.UnitCostOption.IsSet)
                if (productGroupPostDto.UnitCostOption.Value != null)
                    writer.WriteNumber("UnitCost", productGroupPostDto.UnitCostOption.Value!.Value);
                else
                    writer.WriteNull("UnitCost");

            if (productGroupPostDto.UnitOfMeasureCodeOption.IsSet)
                if (productGroupPostDto.UnitOfMeasureCodeOption!.Value != null)
                {
                    var unitOfMeasureCodeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(productGroupPostDto.UnitOfMeasureCodeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureCode", unitOfMeasureCodeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureCode");
            if (productGroupPostDto.UnitPriceOption.IsSet)
                if (productGroupPostDto.UnitPriceOption.Value != null)
                    writer.WriteNumber("UnitPrice", productGroupPostDto.UnitPriceOption.Value!.Value);
                else
                    writer.WriteNull("UnitPrice");
        }
    }
}
