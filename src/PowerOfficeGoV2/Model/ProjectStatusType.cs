// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Project Status representing the status of the project.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Tentative&lt;/i&gt; - The project is on hold.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The project is in progress.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Archived&lt;/i&gt; - The project is archived.&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotStarted&lt;/i&gt; - The project has not yet started.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Complete&lt;/i&gt; - The project is completed.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Project Status representing the status of the project.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Tentative&lt;/i&gt; - The project is on hold.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The project is in progress.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Archived&lt;/i&gt; - The project is archived.&lt;/li&gt;&lt;li&gt;&lt;i&gt;NotStarted&lt;/i&gt; - The project has not yet started.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Complete&lt;/i&gt; - The project is completed.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ProjectStatusType
    {
        /// <summary>
        /// Enum Tentative for value: Tentative
        /// </summary>
        Tentative = 1,

        /// <summary>
        /// Enum Active for value: Active
        /// </summary>
        Active = 2,

        /// <summary>
        /// Enum Archived for value: Archived
        /// </summary>
        Archived = 3,

        /// <summary>
        /// Enum NotStarted for value: NotStarted
        /// </summary>
        NotStarted = 4,

        /// <summary>
        /// Enum Complete for value: Complete
        /// </summary>
        Complete = 5
    }

    /// <summary>
    /// Converts <see cref="ProjectStatusType"/> to and from the JSON value
    /// </summary>
    public static class ProjectStatusTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProjectStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectStatusType FromString(string value)
        {
            if (value.Equals("Tentative"))
                return ProjectStatusType.Tentative;

            if (value.Equals("Active"))
                return ProjectStatusType.Active;

            if (value.Equals("Archived"))
                return ProjectStatusType.Archived;

            if (value.Equals("NotStarted"))
                return ProjectStatusType.NotStarted;

            if (value.Equals("Complete"))
                return ProjectStatusType.Complete;

            throw new NotImplementedException($"Could not convert value to type ProjectStatusType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProjectStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectStatusType? FromStringOrDefault(string value)
        {
            if (value.Equals("Tentative"))
                return ProjectStatusType.Tentative;

            if (value.Equals("Active"))
                return ProjectStatusType.Active;

            if (value.Equals("Archived"))
                return ProjectStatusType.Archived;

            if (value.Equals("NotStarted"))
                return ProjectStatusType.NotStarted;

            if (value.Equals("Complete"))
                return ProjectStatusType.Complete;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProjectStatusType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProjectStatusType value)
        {
            if (value == ProjectStatusType.Tentative)
                return "Tentative";

            if (value == ProjectStatusType.Active)
                return "Active";

            if (value == ProjectStatusType.Archived)
                return "Archived";

            if (value == ProjectStatusType.NotStarted)
                return "NotStarted";

            if (value == ProjectStatusType.Complete)
                return "Complete";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectStatusType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProjectStatusTypeJsonConverter : JsonConverter<ProjectStatusType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectStatusType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectStatusType? result = rawValue == null
                ? null
                : ProjectStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProjectStatusType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectStatusType projectStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectStatusType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectStatusType"/>
    /// </summary>
    public class ProjectStatusTypeNullableJsonConverter : JsonConverter<ProjectStatusType?>
    {
        /// <summary>
        /// Returns a ProjectStatusType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectStatusType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectStatusType? result = rawValue == null
                ? null
                : ProjectStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectStatusType? projectStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectStatusType?.ToString() ?? "null");
        }
    }
}
