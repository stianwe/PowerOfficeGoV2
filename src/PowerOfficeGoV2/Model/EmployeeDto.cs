// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employee DTO contains properties relevant to an employee object in Go
    /// </summary>
    public partial class EmployeeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeDto" /> class.
        /// </summary>
        /// <param name="contactCreatedDateTimeOffset">The timestamp the contact entity was created.  This might differ from the employee created timestamp, if the contact was first created as a customer/supplier.</param>
        /// <param name="contactGroupIds">The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid).  If the employee was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="dateOfBirth">The date of birth of the employee.</param>
        /// <param name="departmentCode">The code of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.</param>
        /// <param name="departmentId">The id of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.</param>
        /// <param name="emailAddress">The (general) e-mail address registered for the employee.</param>
        /// <param name="employeeCreatedDateTimeOffset">The timestamp the contact first became an employee.  For contacts being only employees, this property will be equal to the contactCreatedDateTimeOffset property.</param>
        /// <param name="endDate">The end date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).</param>
        /// <param name="expenseBankAccountId">The identifier of the bank account used for expense payments to the employee (norwegian: \&quot;utlegg\&quot;)</param>
        /// <param name="externalImportReference">The external import reference of the employee.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</param>
        /// <param name="externalNumber">The external number of the employee.  This field can be used to reference the employee number in the external system, if the employee numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the employee number. I.e. when importing vouchers with employee sub-ledger entries using a file, with the employee number 1 set in the file, the import will choose the employee with ExternalNumber 1 over the employee with Number 1. This is the case for file imports only.</param>
        /// <param name="firstName">The first name of the employee.  Required when creating new employees (POST operations).</param>
        /// <param name="gender">gender</param>
        /// <param name="hiredDate">The date the employee was hired.</param>
        /// <param name="id">The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.</param>
        /// <param name="internationalIdCountryCode">The ISO 3166-1 alfa-2 country code (Two characters).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.</param>
        /// <param name="internationalIdNumber">The international Id number. For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if it&#39;s empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to SSN and gender).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.</param>
        /// <param name="internationalIdReportToAltinn">Value indicating whether International ID should be reported to Altinn (Related to tax card and payroll reporting).</param>
        /// <param name="internationalIdType">internationalIdType</param>
        /// <param name="isArchived">Value indicating whether this contact entity is/should be archived (set inactive).  Cannot be set if the contact have ledger balances (as either an employee, a customer or as a supplier).</param>
        /// <param name="jobTitle">The job title of the employee.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the employee.  Note that this property do not reflect changes in sub-entities (address, employment relationship settings etc.) related to the contact.</param>
        /// <param name="lastName">The last name of the employee.  Required when creating new employees (POST operations).</param>
        /// <param name="locationCode">The code of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.</param>
        /// <param name="locationId">The id of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="managerEmployeeId">The employee id of the manager of the employee.</param>
        /// <param name="managerEmployeeNo">The employee number of the manager of the employee.</param>
        /// <param name="nationalIdNumber">The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.</param>
        /// <param name="number">The number of the employee.  The number will also represent the employee ledger account, used for employee ledger transactions.  When creating new employees and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the employee legder numberseries that exist on the client in Go.</param>
        /// <param name="phoneNumber">The phone number of the employee.</param>
        /// <param name="salaryBankAccountId">The identifier of the bank account used for salary payments</param>
        /// <param name="startDate">The start date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).</param>
        /// <param name="subledgerAccountId">The identifier of the subledger account associated with the employee.</param>
        /// <param name="travelExpenseBankAccountId">The identifier of the bank account used for travel expense payments to the employee (norwegian: \&quot;reiseregninger\&quot;)</param>
        [JsonConstructor]
        public EmployeeDto(Option<DateTime?> contactCreatedDateTimeOffset = default, Option<List<long>?> contactGroupIds = default, Option<Guid?> createdFromImportJournalId = default, Option<DateOnly?> dateOfBirth = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> emailAddress = default, Option<DateTime?> employeeCreatedDateTimeOffset = default, Option<DateOnly?> endDate = default, Option<long?> expenseBankAccountId = default, Option<string?> externalImportReference = default, Option<long?> externalNumber = default, Option<string?> firstName = default, Option<Gender?> gender = default, Option<DateOnly?> hiredDate = default, Option<long?> id = default, Option<string?> internationalIdCountryCode = default, Option<string?> internationalIdNumber = default, Option<bool?> internationalIdReportToAltinn = default, Option<InternationalIdType?> internationalIdType = default, Option<bool?> isArchived = default, Option<string?> jobTitle = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> lastName = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<ContactAddressDto?> mailAddress = default, Option<long?> managerEmployeeId = default, Option<long?> managerEmployeeNo = default, Option<string?> nationalIdNumber = default, Option<long?> number = default, Option<string?> phoneNumber = default, Option<long?> salaryBankAccountId = default, Option<DateOnly?> startDate = default, Option<long?> subledgerAccountId = default, Option<long?> travelExpenseBankAccountId = default)
        {
            ContactCreatedDateTimeOffsetOption = contactCreatedDateTimeOffset;
            ContactGroupIdsOption = contactGroupIds;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            DateOfBirthOption = dateOfBirth;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            EmailAddressOption = emailAddress;
            EmployeeCreatedDateTimeOffsetOption = employeeCreatedDateTimeOffset;
            EndDateOption = endDate;
            ExpenseBankAccountIdOption = expenseBankAccountId;
            ExternalImportReferenceOption = externalImportReference;
            ExternalNumberOption = externalNumber;
            FirstNameOption = firstName;
            GenderOption = gender;
            HiredDateOption = hiredDate;
            IdOption = id;
            InternationalIdCountryCodeOption = internationalIdCountryCode;
            InternationalIdNumberOption = internationalIdNumber;
            InternationalIdReportToAltinnOption = internationalIdReportToAltinn;
            InternationalIdTypeOption = internationalIdType;
            IsArchivedOption = isArchived;
            JobTitleOption = jobTitle;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LastNameOption = lastName;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            MailAddressOption = mailAddress;
            ManagerEmployeeIdOption = managerEmployeeId;
            ManagerEmployeeNoOption = managerEmployeeNo;
            NationalIdNumberOption = nationalIdNumber;
            NumberOption = number;
            PhoneNumberOption = phoneNumber;
            SalaryBankAccountIdOption = salaryBankAccountId;
            StartDateOption = startDate;
            SubledgerAccountIdOption = subledgerAccountId;
            TravelExpenseBankAccountIdOption = travelExpenseBankAccountId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Gender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Gender?> GenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonPropertyName("Gender")]
        public Gender? Gender { get { return this.GenderOption; } set { this.GenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalIdType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InternationalIdType?> InternationalIdTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InternationalIdType
        /// </summary>
        [JsonPropertyName("InternationalIdType")]
        public InternationalIdType? InternationalIdType { get { return this.InternationalIdTypeOption; } set { this.InternationalIdTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ContactCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact entity was created.  This might differ from the employee created timestamp, if the contact was first created as a customer/supplier.
        /// </summary>
        /// <value>The timestamp the contact entity was created.  This might differ from the employee created timestamp, if the contact was first created as a customer/supplier.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("ContactCreatedDateTimeOffset")]
        public DateTime? ContactCreatedDateTimeOffset { get { return this.ContactCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ContactGroupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ContactGroupIdsOption { get; private set; }

        /// <summary>
        /// The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.
        /// </summary>
        /// <value>The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</value>
        [JsonPropertyName("ContactGroupIds")]
        public List<long>? ContactGroupIds { get { return this.ContactGroupIdsOption; } set { this.ContactGroupIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid).  If the employee was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid).  If the employee was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The date of birth of the employee.
        /// </summary>
        /// <value>The date of birth of the employee.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("DateOfBirth")]
        public DateOnly? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.
        /// </summary>
        /// <value>The code of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.
        /// </summary>
        /// <value>The id of the department this employee is associated with.  Use the Departments endpoint to retrieve and/or create departments.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// The (general) e-mail address registered for the employee.
        /// </summary>
        /// <value>The (general) e-mail address registered for the employee.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmployeeCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EmployeeCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact first became an employee.  For contacts being only employees, this property will be equal to the contactCreatedDateTimeOffset property.
        /// </summary>
        /// <value>The timestamp the contact first became an employee.  For contacts being only employees, this property will be equal to the contactCreatedDateTimeOffset property.</value>
        /* <example>2021-09-30T00:00Z</example> */
        [JsonPropertyName("EmployeeCreatedDateTimeOffset")]
        public DateTime? EmployeeCreatedDateTimeOffset { get { return this.EmployeeCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).
        /// </summary>
        /// <value>The end date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("EndDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpenseBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExpenseBankAccountIdOption { get; }

        /// <summary>
        /// The identifier of the bank account used for expense payments to the employee (norwegian: \&quot;utlegg\&quot;)
        /// </summary>
        /// <value>The identifier of the bank account used for expense payments to the employee (norwegian: \&quot;utlegg\&quot;)</value>
        /* <example>123546</example> */
        [JsonPropertyName("ExpenseBankAccountId")]
        public long? ExpenseBankAccountId { get { return this.ExpenseBankAccountIdOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference of the employee.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.
        /// </summary>
        /// <value>The external import reference of the employee.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</value>
        /* <example>abc123-def456</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExternalNumberOption { get; private set; }

        /// <summary>
        /// The external number of the employee.  This field can be used to reference the employee number in the external system, if the employee numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the employee number. I.e. when importing vouchers with employee sub-ledger entries using a file, with the employee number 1 set in the file, the import will choose the employee with ExternalNumber 1 over the employee with Number 1. This is the case for file imports only.
        /// </summary>
        /// <value>The external number of the employee.  This field can be used to reference the employee number in the external system, if the employee numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the employee number. I.e. when importing vouchers with employee sub-ledger entries using a file, with the employee number 1 set in the file, the import will choose the employee with ExternalNumber 1 over the employee with Number 1. This is the case for file imports only.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ExternalNumber")]
        public long? ExternalNumber { get { return this.ExternalNumberOption; } set { this.ExternalNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// The first name of the employee.  Required when creating new employees (POST operations).
        /// </summary>
        /// <value>The first name of the employee.  Required when creating new employees (POST operations).</value>
        /* <example>Henry</example> */
        [JsonPropertyName("FirstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of HiredDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> HiredDateOption { get; private set; }

        /// <summary>
        /// The date the employee was hired.
        /// </summary>
        /// <value>The date the employee was hired.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("HiredDate")]
        public DateOnly? HiredDate { get { return this.HiredDateOption; } set { this.HiredDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </summary>
        /// <value>The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InternationalIdCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InternationalIdCountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code (Two characters).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code (Two characters).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.</value>
        /* <example>SE</example> */
        [JsonPropertyName("InternationalIdCountryCode")]
        public string? InternationalIdCountryCode { get { return this.InternationalIdCountryCodeOption; } set { this.InternationalIdCountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalIdNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InternationalIdNumberOption { get; private set; }

        /// <summary>
        /// The international Id number. For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if it&#39;s empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to SSN and gender).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.
        /// </summary>
        /// <value>The international Id number. For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if it&#39;s empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to SSN and gender).  Relevant (and required) only if InternationalIdReportToAltinn is set to true.</value>
        /* <example>AB123456</example> */
        [JsonPropertyName("InternationalIdNumber")]
        public string? InternationalIdNumber { get { return this.InternationalIdNumberOption; } set { this.InternationalIdNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternationalIdReportToAltinn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InternationalIdReportToAltinnOption { get; private set; }

        /// <summary>
        /// Value indicating whether International ID should be reported to Altinn (Related to tax card and payroll reporting).
        /// </summary>
        /// <value>Value indicating whether International ID should be reported to Altinn (Related to tax card and payroll reporting).</value>
        /* <example>false</example> */
        [JsonPropertyName("InternationalIdReportToAltinn")]
        public bool? InternationalIdReportToAltinn { get { return this.InternationalIdReportToAltinnOption; } set { this.InternationalIdReportToAltinnOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// Value indicating whether this contact entity is/should be archived (set inactive).  Cannot be set if the contact have ledger balances (as either an employee, a customer or as a supplier).
        /// </summary>
        /// <value>Value indicating whether this contact entity is/should be archived (set inactive).  Cannot be set if the contact have ledger balances (as either an employee, a customer or as a supplier).</value>
        /* <example>false</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of JobTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobTitleOption { get; private set; }

        /// <summary>
        /// The job title of the employee.
        /// </summary>
        /// <value>The job title of the employee.</value>
        /* <example>Top Salesman</example> */
        [JsonPropertyName("JobTitle")]
        public string? JobTitle { get { return this.JobTitleOption; } set { this.JobTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the employee.  Note that this property do not reflect changes in sub-entities (address, employment relationship settings etc.) related to the contact.
        /// </summary>
        /// <value>The timestamp of the last change of the employee.  Note that this property do not reflect changes in sub-entities (address, employment relationship settings etc.) related to the contact.</value>
        /* <example>2021-09-30T15:12:11.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// The last name of the employee.  Required when creating new employees (POST operations).
        /// </summary>
        /// <value>The last name of the employee.  Required when creating new employees (POST operations).</value>
        /* <example>Ford</example> */
        [JsonPropertyName("LastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.
        /// </summary>
        /// <value>The code of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.</value>
        /* <example>1B</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.
        /// </summary>
        /// <value>The id of the location this employee is associated with.  Use the Locations endpoint to retrieve and/or create locations.</value>
        /* <example>123546</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContactAddressDto?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public ContactAddressDto? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ManagerEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ManagerEmployeeIdOption { get; private set; }

        /// <summary>
        /// The employee id of the manager of the employee.
        /// </summary>
        /// <value>The employee id of the manager of the employee.</value>
        /* <example>123546</example> */
        [JsonPropertyName("ManagerEmployeeId")]
        public long? ManagerEmployeeId { get { return this.ManagerEmployeeIdOption; } set { this.ManagerEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ManagerEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ManagerEmployeeNoOption { get; }

        /// <summary>
        /// The employee number of the manager of the employee.
        /// </summary>
        /// <value>The employee number of the manager of the employee.</value>
        /* <example>10</example> */
        [JsonPropertyName("ManagerEmployeeNo")]
        public long? ManagerEmployeeNo { get { return this.ManagerEmployeeNoOption; } }

        /// <summary>
        /// Used to track the state of NationalIdNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NationalIdNumberOption { get; private set; }

        /// <summary>
        /// The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.
        /// </summary>
        /// <value>The (Norwegian) national identity number (also called Social Security Number) or D-number.  For privacy reasons queries returns &#39;hidden&#39; if this field has a value and null if empty.  Access to retrieving the value must be granted by the api team by a special privilege (which also grant access to InternationalId and gender).  Note that the number is validated for the correct syntax when set.</value>
        /* <example>30011679680</example> */
        [JsonPropertyName("NationalIdNumber")]
        public string? NationalIdNumber { get { return this.NationalIdNumberOption; } set { this.NationalIdNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NumberOption { get; private set; }

        /// <summary>
        /// The number of the employee.  The number will also represent the employee ledger account, used for employee ledger transactions.  When creating new employees and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the employee legder numberseries that exist on the client in Go.
        /// </summary>
        /// <value>The number of the employee.  The number will also represent the employee ledger account, used for employee ledger transactions.  When creating new employees and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the employee legder numberseries that exist on the client in Go.</value>
        /* <example>2</example> */
        [JsonPropertyName("Number")]
        public long? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// The phone number of the employee.
        /// </summary>
        /// <value>The phone number of the employee.</value>
        /* <example>+4712345678</example> */
        [JsonPropertyName("PhoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalaryBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalaryBankAccountIdOption { get; }

        /// <summary>
        /// The identifier of the bank account used for salary payments
        /// </summary>
        /// <value>The identifier of the bank account used for salary payments</value>
        /* <example>123546</example> */
        [JsonPropertyName("SalaryBankAccountId")]
        public long? SalaryBankAccountId { get { return this.SalaryBankAccountIdOption; } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StartDateOption { get; private set; }

        /// <summary>
        /// The start date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).
        /// </summary>
        /// <value>The start date of the employment of this employee.  Note that this field has no relation to the employment entity that is reported (a-melding).</value>
        [JsonPropertyName("StartDate")]
        public DateOnly? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of the subledger account associated with the employee.
        /// </summary>
        /// <value>The identifier of the subledger account associated with the employee.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SubledgerAccountId")]
        public long? SubledgerAccountId { get { return this.SubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of TravelExpenseBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TravelExpenseBankAccountIdOption { get; }

        /// <summary>
        /// The identifier of the bank account used for travel expense payments to the employee (norwegian: \&quot;reiseregninger\&quot;)
        /// </summary>
        /// <value>The identifier of the bank account used for travel expense payments to the employee (norwegian: \&quot;reiseregninger\&quot;)</value>
        /* <example>123546</example> */
        [JsonPropertyName("TravelExpenseBankAccountId")]
        public long? TravelExpenseBankAccountId { get { return this.TravelExpenseBankAccountIdOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmployeeDto {\n");
            sb.Append("  ContactCreatedDateTimeOffset: ").Append(ContactCreatedDateTimeOffset).Append("\n");
            sb.Append("  ContactGroupIds: ").Append(ContactGroupIds).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  EmployeeCreatedDateTimeOffset: ").Append(EmployeeCreatedDateTimeOffset).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExpenseBankAccountId: ").Append(ExpenseBankAccountId).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  ExternalNumber: ").Append(ExternalNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  HiredDate: ").Append(HiredDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternationalIdCountryCode: ").Append(InternationalIdCountryCode).Append("\n");
            sb.Append("  InternationalIdNumber: ").Append(InternationalIdNumber).Append("\n");
            sb.Append("  InternationalIdReportToAltinn: ").Append(InternationalIdReportToAltinn).Append("\n");
            sb.Append("  InternationalIdType: ").Append(InternationalIdType).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  ManagerEmployeeId: ").Append(ManagerEmployeeId).Append("\n");
            sb.Append("  ManagerEmployeeNo: ").Append(ManagerEmployeeNo).Append("\n");
            sb.Append("  NationalIdNumber: ").Append(NationalIdNumber).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  SalaryBankAccountId: ").Append(SalaryBankAccountId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  SubledgerAccountId: ").Append(SubledgerAccountId).Append("\n");
            sb.Append("  TravelExpenseBankAccountId: ").Append(TravelExpenseBankAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployeeDto" />
    /// </summary>
    public class EmployeeDtoJsonConverter : JsonConverter<EmployeeDto>
    {
        /// <summary>
        /// The format to use to serialize ContactCreatedDateTimeOffset
        /// </summary>
        public static string ContactCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EmployeeCreatedDateTimeOffset
        /// </summary>
        public static string EmployeeCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize HiredDate
        /// </summary>
        public static string HiredDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmployeeDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmployeeDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> contactCreatedDateTimeOffset = default;
            Option<List<long>?> contactGroupIds = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<DateOnly?> dateOfBirth = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> emailAddress = default;
            Option<DateTime?> employeeCreatedDateTimeOffset = default;
            Option<DateOnly?> endDate = default;
            Option<long?> expenseBankAccountId = default;
            Option<string?> externalImportReference = default;
            Option<long?> externalNumber = default;
            Option<string?> firstName = default;
            Option<Gender?> gender = default;
            Option<DateOnly?> hiredDate = default;
            Option<long?> id = default;
            Option<string?> internationalIdCountryCode = default;
            Option<string?> internationalIdNumber = default;
            Option<bool?> internationalIdReportToAltinn = default;
            Option<InternationalIdType?> internationalIdType = default;
            Option<bool?> isArchived = default;
            Option<string?> jobTitle = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> lastName = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<ContactAddressDto?> mailAddress = default;
            Option<long?> managerEmployeeId = default;
            Option<long?> managerEmployeeNo = default;
            Option<string?> nationalIdNumber = default;
            Option<long?> number = default;
            Option<string?> phoneNumber = default;
            Option<long?> salaryBankAccountId = default;
            Option<DateOnly?> startDate = default;
            Option<long?> subledgerAccountId = default;
            Option<long?> travelExpenseBankAccountId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ContactCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ContactGroupIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactGroupIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "DateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EmployeeCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employeeCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExpenseBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expenseBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                externalNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FirstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Gender":
                            string? genderRawValue = utf8JsonReader.GetString();
                            if (genderRawValue != null)
                                gender = new Option<Gender?>(GenderValueConverter.FromStringOrDefault(genderRawValue));
                            break;
                        case "HiredDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hiredDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InternationalIdCountryCode":
                            internationalIdCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "InternationalIdNumber":
                            internationalIdNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "InternationalIdReportToAltinn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                internationalIdReportToAltinn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "InternationalIdType":
                            string? internationalIdTypeRawValue = utf8JsonReader.GetString();
                            if (internationalIdTypeRawValue != null)
                                internationalIdType = new Option<InternationalIdType?>(InternationalIdTypeValueConverter.FromStringOrDefault(internationalIdTypeRawValue));
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "JobTitle":
                            jobTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<ContactAddressDto?>(JsonSerializer.Deserialize<ContactAddressDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ManagerEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ManagerEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NationalIdNumber":
                            nationalIdNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PhoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SalaryBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salaryBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "SubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TravelExpenseBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                travelExpenseBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactCreatedDateTimeOffset.IsSet && contactCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(contactCreatedDateTimeOffset), "Property is not nullable for class EmployeeDto.");

            if (employeeCreatedDateTimeOffset.IsSet && employeeCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(employeeCreatedDateTimeOffset), "Property is not nullable for class EmployeeDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmployeeDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class EmployeeDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class EmployeeDto.");

            if (subledgerAccountId.IsSet && subledgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(subledgerAccountId), "Property is not nullable for class EmployeeDto.");

            return new EmployeeDto(contactCreatedDateTimeOffset, contactGroupIds, createdFromImportJournalId, dateOfBirth, departmentCode, departmentId, emailAddress, employeeCreatedDateTimeOffset, endDate, expenseBankAccountId, externalImportReference, externalNumber, firstName, gender, hiredDate, id, internationalIdCountryCode, internationalIdNumber, internationalIdReportToAltinn, internationalIdType, isArchived, jobTitle, lastChangedDateTimeOffset, lastName, locationCode, locationId, mailAddress, managerEmployeeId, managerEmployeeNo, nationalIdNumber, number, phoneNumber, salaryBankAccountId, startDate, subledgerAccountId, travelExpenseBankAccountId);
        }

        /// <summary>
        /// Serializes a <see cref="EmployeeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employeeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmployeeDto employeeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employeeDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmployeeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employeeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmployeeDto employeeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employeeDto.MailAddressOption.IsSet && employeeDto.MailAddress == null)
                throw new ArgumentNullException(nameof(employeeDto.MailAddress), "Property is required for class EmployeeDto.");

            if (employeeDto.ContactCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("ContactCreatedDateTimeOffset", employeeDto.ContactCreatedDateTimeOffsetOption.Value!.Value.ToString(ContactCreatedDateTimeOffsetFormat));

            if (employeeDto.ContactGroupIdsOption.IsSet)
                if (employeeDto.ContactGroupIdsOption.Value != null)
                {
                    writer.WritePropertyName("ContactGroupIds");
                    JsonSerializer.Serialize(writer, employeeDto.ContactGroupIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ContactGroupIds");
            if (employeeDto.CreatedFromImportJournalIdOption.IsSet)
                if (employeeDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", employeeDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (employeeDto.DateOfBirthOption.IsSet)
                if (employeeDto.DateOfBirthOption.Value != null)
                    writer.WriteString("DateOfBirth", employeeDto.DateOfBirthOption.Value!.Value.ToString(DateOfBirthFormat));
                else
                    writer.WriteNull("DateOfBirth");

            if (employeeDto.DepartmentCodeOption.IsSet)
                if (employeeDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", employeeDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (employeeDto.DepartmentIdOption.IsSet)
                if (employeeDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", employeeDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (employeeDto.EmailAddressOption.IsSet)
                if (employeeDto.EmailAddressOption.Value != null)
                    writer.WriteString("EmailAddress", employeeDto.EmailAddress);
                else
                    writer.WriteNull("EmailAddress");

            if (employeeDto.EmployeeCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("EmployeeCreatedDateTimeOffset", employeeDto.EmployeeCreatedDateTimeOffsetOption.Value!.Value.ToString(EmployeeCreatedDateTimeOffsetFormat));

            if (employeeDto.EndDateOption.IsSet)
                if (employeeDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", employeeDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (employeeDto.ExpenseBankAccountIdOption.IsSet)
                if (employeeDto.ExpenseBankAccountIdOption.Value != null)
                    writer.WriteNumber("ExpenseBankAccountId", employeeDto.ExpenseBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("ExpenseBankAccountId");

            if (employeeDto.ExternalImportReferenceOption.IsSet)
                if (employeeDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", employeeDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (employeeDto.ExternalNumberOption.IsSet)
                if (employeeDto.ExternalNumberOption.Value != null)
                    writer.WriteNumber("ExternalNumber", employeeDto.ExternalNumberOption.Value!.Value);
                else
                    writer.WriteNull("ExternalNumber");

            if (employeeDto.FirstNameOption.IsSet)
                if (employeeDto.FirstNameOption.Value != null)
                    writer.WriteString("FirstName", employeeDto.FirstName);
                else
                    writer.WriteNull("FirstName");

            if (employeeDto.GenderOption.IsSet)
                if (employeeDto.GenderOption!.Value != null)
                {
                    var genderRawValue = GenderValueConverter.ToJsonValue(employeeDto.GenderOption.Value!.Value);
                    writer.WriteString("Gender", genderRawValue);
                }
                else
                    writer.WriteNull("Gender");
            if (employeeDto.HiredDateOption.IsSet)
                if (employeeDto.HiredDateOption.Value != null)
                    writer.WriteString("HiredDate", employeeDto.HiredDateOption.Value!.Value.ToString(HiredDateFormat));
                else
                    writer.WriteNull("HiredDate");

            if (employeeDto.IdOption.IsSet)
                writer.WriteNumber("Id", employeeDto.IdOption.Value!.Value);

            if (employeeDto.InternationalIdCountryCodeOption.IsSet)
                if (employeeDto.InternationalIdCountryCodeOption.Value != null)
                    writer.WriteString("InternationalIdCountryCode", employeeDto.InternationalIdCountryCode);
                else
                    writer.WriteNull("InternationalIdCountryCode");

            if (employeeDto.InternationalIdNumberOption.IsSet)
                if (employeeDto.InternationalIdNumberOption.Value != null)
                    writer.WriteString("InternationalIdNumber", employeeDto.InternationalIdNumber);
                else
                    writer.WriteNull("InternationalIdNumber");

            if (employeeDto.InternationalIdReportToAltinnOption.IsSet)
                if (employeeDto.InternationalIdReportToAltinnOption.Value != null)
                    writer.WriteBoolean("InternationalIdReportToAltinn", employeeDto.InternationalIdReportToAltinnOption.Value!.Value);
                else
                    writer.WriteNull("InternationalIdReportToAltinn");

            if (employeeDto.InternationalIdTypeOption.IsSet)
                if (employeeDto.InternationalIdTypeOption!.Value != null)
                {
                    var internationalIdTypeRawValue = InternationalIdTypeValueConverter.ToJsonValue(employeeDto.InternationalIdTypeOption.Value!.Value);
                    writer.WriteString("InternationalIdType", internationalIdTypeRawValue);
                }
                else
                    writer.WriteNull("InternationalIdType");
            if (employeeDto.IsArchivedOption.IsSet)
                if (employeeDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", employeeDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (employeeDto.JobTitleOption.IsSet)
                if (employeeDto.JobTitleOption.Value != null)
                    writer.WriteString("JobTitle", employeeDto.JobTitle);
                else
                    writer.WriteNull("JobTitle");

            if (employeeDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", employeeDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (employeeDto.LastNameOption.IsSet)
                if (employeeDto.LastNameOption.Value != null)
                    writer.WriteString("LastName", employeeDto.LastName);
                else
                    writer.WriteNull("LastName");

            if (employeeDto.LocationCodeOption.IsSet)
                if (employeeDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", employeeDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (employeeDto.LocationIdOption.IsSet)
                if (employeeDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", employeeDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (employeeDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, employeeDto.MailAddress, jsonSerializerOptions);
            }
            if (employeeDto.ManagerEmployeeIdOption.IsSet)
                if (employeeDto.ManagerEmployeeIdOption.Value != null)
                    writer.WriteNumber("ManagerEmployeeId", employeeDto.ManagerEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("ManagerEmployeeId");

            if (employeeDto.ManagerEmployeeNoOption.IsSet)
                if (employeeDto.ManagerEmployeeNoOption.Value != null)
                    writer.WriteNumber("ManagerEmployeeNo", employeeDto.ManagerEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("ManagerEmployeeNo");

            if (employeeDto.NationalIdNumberOption.IsSet)
                if (employeeDto.NationalIdNumberOption.Value != null)
                    writer.WriteString("NationalIdNumber", employeeDto.NationalIdNumber);
                else
                    writer.WriteNull("NationalIdNumber");

            if (employeeDto.NumberOption.IsSet)
                if (employeeDto.NumberOption.Value != null)
                    writer.WriteNumber("Number", employeeDto.NumberOption.Value!.Value);
                else
                    writer.WriteNull("Number");

            if (employeeDto.PhoneNumberOption.IsSet)
                if (employeeDto.PhoneNumberOption.Value != null)
                    writer.WriteString("PhoneNumber", employeeDto.PhoneNumber);
                else
                    writer.WriteNull("PhoneNumber");

            if (employeeDto.SalaryBankAccountIdOption.IsSet)
                if (employeeDto.SalaryBankAccountIdOption.Value != null)
                    writer.WriteNumber("SalaryBankAccountId", employeeDto.SalaryBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SalaryBankAccountId");

            if (employeeDto.StartDateOption.IsSet)
                if (employeeDto.StartDateOption.Value != null)
                    writer.WriteString("StartDate", employeeDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
                else
                    writer.WriteNull("StartDate");

            if (employeeDto.SubledgerAccountIdOption.IsSet)
                writer.WriteNumber("SubledgerAccountId", employeeDto.SubledgerAccountIdOption.Value!.Value);

            if (employeeDto.TravelExpenseBankAccountIdOption.IsSet)
                if (employeeDto.TravelExpenseBankAccountIdOption.Value != null)
                    writer.WriteNumber("TravelExpenseBankAccountId", employeeDto.TravelExpenseBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("TravelExpenseBankAccountId");
        }
    }
}
