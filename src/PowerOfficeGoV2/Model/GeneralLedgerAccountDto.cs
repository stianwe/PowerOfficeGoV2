// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The General Ledger Account DTO contains all properties relevant to a GeneralLedgerAccount-object in Go
    /// </summary>
    public partial class GeneralLedgerAccountDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralLedgerAccountDto" /> class.
        /// </summary>
        /// <param name="accountNo">The number of the account.</param>
        /// <param name="agricultureDepartment">agricultureDepartment</param>
        /// <param name="currencyCode">The standard code of the currency associated with the account.</param>
        /// <param name="departmentCode">The code of the department associated with the account.</param>
        /// <param name="departmentId">The id of the department associated with the account.</param>
        /// <param name="generalLedgerAccountType">generalLedgerAccountType</param>
        /// <param name="id">The unique identifier of the account.  This identifier is unique and assigned by PowerOffice Go when a new entity is created, and should be provided when an entity should be edited.</param>
        /// <param name="isActive">Value indicating whether this account is active.  Accounts that are not active will not be available for users in the journal entry GUI.</param>
        /// <param name="isDepartmentRequired">Value indicating whether department is a required property to set on transactions on this account.</param>
        /// <param name="isProjectRequired">Value indicating whether project is a required property to set on transactions on this account.</param>
        /// <param name="isVatCodeLocked">Value indicating whether the account is locked to a VAT code. If true, only VatCode can be used on transactions on this account.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp when the last change in settings for this account occurred.</param>
        /// <param name="name">The name of the account.</param>
        /// <param name="unit1">unit1</param>
        /// <param name="unit2">unit2</param>
        /// <param name="vatCode">The VAT code associated with the account.  Standard codes in Go is based on the SAF-T standard.  Codes and any custom codes can be queried and identified using the VatCode service.</param>
        /// <param name="vatCodeId">The id of the VAT Code associated with the account.  VatCode or VatCodeId must be supplied when creating a general ledger account.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        [JsonConstructor]
        public GeneralLedgerAccountDto(Option<long?> accountNo = default, Option<AgricultureDepartment?> agricultureDepartment = default, Option<string?> currencyCode = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<GeneralLedgerAccountType?> generalLedgerAccountType = default, Option<long?> id = default, Option<bool?> isActive = default, Option<bool?> isDepartmentRequired = default, Option<bool?> isProjectRequired = default, Option<bool?> isVatCodeLocked = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<string?> name = default, Option<UnitOfMeasureType?> unit1 = default, Option<UnitOfMeasureType?> unit2 = default, Option<string?> vatCode = default, Option<int?> vatCodeId = default, Option<VatReturnSpecification?> vatReturnSpecification = default)
        {
            AccountNoOption = accountNo;
            AgricultureDepartmentOption = agricultureDepartment;
            CurrencyCodeOption = currencyCode;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            GeneralLedgerAccountTypeOption = generalLedgerAccountType;
            IdOption = id;
            IsActiveOption = isActive;
            IsDepartmentRequiredOption = isDepartmentRequired;
            IsProjectRequiredOption = isProjectRequired;
            IsVatCodeLockedOption = isVatCodeLocked;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            NameOption = name;
            Unit1Option = unit1;
            Unit2Option = unit2;
            VatCodeOption = vatCode;
            VatCodeIdOption = vatCodeId;
            VatReturnSpecificationOption = vatReturnSpecification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> AgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDepartment
        /// </summary>
        [JsonPropertyName("AgricultureDepartment")]
        public AgricultureDepartment? AgricultureDepartment { get { return this.AgricultureDepartmentOption; } set { this.AgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeneralLedgerAccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GeneralLedgerAccountType?> GeneralLedgerAccountTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets GeneralLedgerAccountType
        /// </summary>
        [JsonPropertyName("GeneralLedgerAccountType")]
        public GeneralLedgerAccountType? GeneralLedgerAccountType { get { return this.GeneralLedgerAccountTypeOption; } set { this.GeneralLedgerAccountTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Unit1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> Unit1Option { get; private set; }

        /// <summary>
        /// Gets or Sets Unit1
        /// </summary>
        [JsonPropertyName("Unit1")]
        public UnitOfMeasureType? Unit1 { get { return this.Unit1Option; } set { this.Unit1Option = new(value); } }

        /// <summary>
        /// Used to track the state of Unit2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> Unit2Option { get; private set; }

        /// <summary>
        /// Gets or Sets Unit2
        /// </summary>
        [JsonPropertyName("Unit2")]
        public UnitOfMeasureType? Unit2 { get { return this.Unit2Option; } set { this.Unit2Option = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountNoOption { get; }

        /// <summary>
        /// The number of the account.
        /// </summary>
        /// <value>The number of the account.</value>
        /* <example>3000</example> */
        [JsonPropertyName("AccountNo")]
        public long? AccountNo { get { return this.AccountNoOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The standard code of the currency associated with the account.
        /// </summary>
        /// <value>The standard code of the currency associated with the account.</value>
        /* <example>USD</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department associated with the account.
        /// </summary>
        /// <value>The code of the department associated with the account.</value>
        /* <example>110</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department associated with the account.
        /// </summary>
        /// <value>The id of the department associated with the account.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The unique identifier of the account.  This identifier is unique and assigned by PowerOffice Go when a new entity is created, and should be provided when an entity should be edited.
        /// </summary>
        /// <value>The unique identifier of the account.  This identifier is unique and assigned by PowerOffice Go when a new entity is created, and should be provided when an entity should be edited.</value>
        /* <example>476023749</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Value indicating whether this account is active.  Accounts that are not active will not be available for users in the journal entry GUI.
        /// </summary>
        /// <value>Value indicating whether this account is active.  Accounts that are not active will not be available for users in the journal entry GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDepartmentRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDepartmentRequiredOption { get; private set; }

        /// <summary>
        /// Value indicating whether department is a required property to set on transactions on this account.
        /// </summary>
        /// <value>Value indicating whether department is a required property to set on transactions on this account.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsDepartmentRequired")]
        public bool? IsDepartmentRequired { get { return this.IsDepartmentRequiredOption; } set { this.IsDepartmentRequiredOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProjectRequired
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProjectRequiredOption { get; private set; }

        /// <summary>
        /// Value indicating whether project is a required property to set on transactions on this account.
        /// </summary>
        /// <value>Value indicating whether project is a required property to set on transactions on this account.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsProjectRequired")]
        public bool? IsProjectRequired { get { return this.IsProjectRequiredOption; } set { this.IsProjectRequiredOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsVatCodeLocked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVatCodeLockedOption { get; private set; }

        /// <summary>
        /// Value indicating whether the account is locked to a VAT code. If true, only VatCode can be used on transactions on this account.
        /// </summary>
        /// <value>Value indicating whether the account is locked to a VAT code. If true, only VatCode can be used on transactions on this account.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsVatCodeLocked")]
        public bool? IsVatCodeLocked { get { return this.IsVatCodeLockedOption; } set { this.IsVatCodeLockedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the last change in settings for this account occurred.
        /// </summary>
        /// <value>The timestamp when the last change in settings for this account occurred.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the account.
        /// </summary>
        /// <value>The name of the account.</value>
        /* <example>Kundefordringer</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VatCodeOption { get; }

        /// <summary>
        /// The VAT code associated with the account.  Standard codes in Go is based on the SAF-T standard.  Codes and any custom codes can be queried and identified using the VatCode service.
        /// </summary>
        /// <value>The VAT code associated with the account.  Standard codes in Go is based on the SAF-T standard.  Codes and any custom codes can be queried and identified using the VatCode service.</value>
        /* <example>33</example> */
        [JsonPropertyName("VatCode")]
        public string? VatCode { get { return this.VatCodeOption; } }

        /// <summary>
        /// Used to track the state of VatCodeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatCodeIdOption { get; private set; }

        /// <summary>
        /// The id of the VAT Code associated with the account.  VatCode or VatCodeId must be supplied when creating a general ledger account.
        /// </summary>
        /// <value>The id of the VAT Code associated with the account.  VatCode or VatCodeId must be supplied when creating a general ledger account.</value>
        [JsonPropertyName("VatCodeId")]
        public int? VatCodeId { get { return this.VatCodeIdOption; } set { this.VatCodeIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneralLedgerAccountDto {\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AgricultureDepartment: ").Append(AgricultureDepartment).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  GeneralLedgerAccountType: ").Append(GeneralLedgerAccountType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDepartmentRequired: ").Append(IsDepartmentRequired).Append("\n");
            sb.Append("  IsProjectRequired: ").Append(IsProjectRequired).Append("\n");
            sb.Append("  IsVatCodeLocked: ").Append(IsVatCodeLocked).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Unit1: ").Append(Unit1).Append("\n");
            sb.Append("  Unit2: ").Append(Unit2).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  VatCodeId: ").Append(VatCodeId).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GeneralLedgerAccountDto" />
    /// </summary>
    public class GeneralLedgerAccountDtoJsonConverter : JsonConverter<GeneralLedgerAccountDto>
    {
        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GeneralLedgerAccountDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GeneralLedgerAccountDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountNo = default;
            Option<AgricultureDepartment?> agricultureDepartment = default;
            Option<string?> currencyCode = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<GeneralLedgerAccountType?> generalLedgerAccountType = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<bool?> isDepartmentRequired = default;
            Option<bool?> isProjectRequired = default;
            Option<bool?> isVatCodeLocked = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<string?> name = default;
            Option<UnitOfMeasureType?> unit1 = default;
            Option<UnitOfMeasureType?> unit2 = default;
            Option<string?> vatCode = default;
            Option<int?> vatCodeId = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AgricultureDepartment":
                            string? agricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (agricultureDepartmentRawValue != null)
                                agricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(agricultureDepartmentRawValue));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "GeneralLedgerAccountType":
                            string? generalLedgerAccountTypeRawValue = utf8JsonReader.GetString();
                            if (generalLedgerAccountTypeRawValue != null)
                                generalLedgerAccountType = new Option<GeneralLedgerAccountType?>(GeneralLedgerAccountTypeValueConverter.FromStringOrDefault(generalLedgerAccountTypeRawValue));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsDepartmentRequired":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDepartmentRequired = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsProjectRequired":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isProjectRequired = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsVatCodeLocked":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isVatCodeLocked = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Unit1":
                            string? unit1RawValue = utf8JsonReader.GetString();
                            if (unit1RawValue != null)
                                unit1 = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unit1RawValue));
                            break;
                        case "Unit2":
                            string? unit2RawValue = utf8JsonReader.GetString();
                            if (unit2RawValue != null)
                                unit2 = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unit2RawValue));
                            break;
                        case "VatCode":
                            vatCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VatCodeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatCodeId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountNo.IsSet && accountNo.Value == null)
                throw new ArgumentNullException(nameof(accountNo), "Property is not nullable for class GeneralLedgerAccountDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GeneralLedgerAccountDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class GeneralLedgerAccountDto.");

            return new GeneralLedgerAccountDto(accountNo, agricultureDepartment, currencyCode, departmentCode, departmentId, generalLedgerAccountType, id, isActive, isDepartmentRequired, isProjectRequired, isVatCodeLocked, lastChangedDateTimeOffset, name, unit1, unit2, vatCode, vatCodeId, vatReturnSpecification);
        }

        /// <summary>
        /// Serializes a <see cref="GeneralLedgerAccountDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generalLedgerAccountDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GeneralLedgerAccountDto generalLedgerAccountDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generalLedgerAccountDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GeneralLedgerAccountDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generalLedgerAccountDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GeneralLedgerAccountDto generalLedgerAccountDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generalLedgerAccountDto.AccountNoOption.IsSet)
                writer.WriteNumber("AccountNo", generalLedgerAccountDto.AccountNoOption.Value!.Value);

            if (generalLedgerAccountDto.AgricultureDepartmentOption.IsSet)
                if (generalLedgerAccountDto.AgricultureDepartmentOption!.Value != null)
                {
                    var agricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(generalLedgerAccountDto.AgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("AgricultureDepartment", agricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("AgricultureDepartment");
            if (generalLedgerAccountDto.CurrencyCodeOption.IsSet)
                if (generalLedgerAccountDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", generalLedgerAccountDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (generalLedgerAccountDto.DepartmentCodeOption.IsSet)
                if (generalLedgerAccountDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", generalLedgerAccountDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (generalLedgerAccountDto.DepartmentIdOption.IsSet)
                if (generalLedgerAccountDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", generalLedgerAccountDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (generalLedgerAccountDto.GeneralLedgerAccountTypeOption.IsSet)
                if (generalLedgerAccountDto.GeneralLedgerAccountTypeOption!.Value != null)
                {
                    var generalLedgerAccountTypeRawValue = GeneralLedgerAccountTypeValueConverter.ToJsonValue(generalLedgerAccountDto.GeneralLedgerAccountTypeOption.Value!.Value);
                    writer.WriteString("GeneralLedgerAccountType", generalLedgerAccountTypeRawValue);
                }
                else
                    writer.WriteNull("GeneralLedgerAccountType");
            if (generalLedgerAccountDto.IdOption.IsSet)
                writer.WriteNumber("Id", generalLedgerAccountDto.IdOption.Value!.Value);

            if (generalLedgerAccountDto.IsActiveOption.IsSet)
                if (generalLedgerAccountDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", generalLedgerAccountDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (generalLedgerAccountDto.IsDepartmentRequiredOption.IsSet)
                if (generalLedgerAccountDto.IsDepartmentRequiredOption.Value != null)
                    writer.WriteBoolean("IsDepartmentRequired", generalLedgerAccountDto.IsDepartmentRequiredOption.Value!.Value);
                else
                    writer.WriteNull("IsDepartmentRequired");

            if (generalLedgerAccountDto.IsProjectRequiredOption.IsSet)
                if (generalLedgerAccountDto.IsProjectRequiredOption.Value != null)
                    writer.WriteBoolean("IsProjectRequired", generalLedgerAccountDto.IsProjectRequiredOption.Value!.Value);
                else
                    writer.WriteNull("IsProjectRequired");

            if (generalLedgerAccountDto.IsVatCodeLockedOption.IsSet)
                if (generalLedgerAccountDto.IsVatCodeLockedOption.Value != null)
                    writer.WriteBoolean("IsVatCodeLocked", generalLedgerAccountDto.IsVatCodeLockedOption.Value!.Value);
                else
                    writer.WriteNull("IsVatCodeLocked");

            if (generalLedgerAccountDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", generalLedgerAccountDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (generalLedgerAccountDto.NameOption.IsSet)
                if (generalLedgerAccountDto.NameOption.Value != null)
                    writer.WriteString("Name", generalLedgerAccountDto.Name);
                else
                    writer.WriteNull("Name");

            if (generalLedgerAccountDto.Unit1Option.IsSet)
                if (generalLedgerAccountDto.Unit1Option!.Value != null)
                {
                    var unit1RawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(generalLedgerAccountDto.Unit1Option.Value!.Value);
                    writer.WriteString("Unit1", unit1RawValue);
                }
                else
                    writer.WriteNull("Unit1");
            if (generalLedgerAccountDto.Unit2Option.IsSet)
                if (generalLedgerAccountDto.Unit2Option!.Value != null)
                {
                    var unit2RawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(generalLedgerAccountDto.Unit2Option.Value!.Value);
                    writer.WriteString("Unit2", unit2RawValue);
                }
                else
                    writer.WriteNull("Unit2");
            if (generalLedgerAccountDto.VatCodeOption.IsSet)
                if (generalLedgerAccountDto.VatCodeOption.Value != null)
                    writer.WriteString("VatCode", generalLedgerAccountDto.VatCode);
                else
                    writer.WriteNull("VatCode");

            if (generalLedgerAccountDto.VatCodeIdOption.IsSet)
                if (generalLedgerAccountDto.VatCodeIdOption.Value != null)
                    writer.WriteNumber("VatCodeId", generalLedgerAccountDto.VatCodeIdOption.Value!.Value);
                else
                    writer.WriteNull("VatCodeId");

            if (generalLedgerAccountDto.VatReturnSpecificationOption.IsSet)
                if (generalLedgerAccountDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(generalLedgerAccountDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
        }
    }
}
