// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Properties to create a new contact bank account
    /// </summary>
    public partial class ContactBankAccountPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactBankAccountPostDto" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">The bank account number</param>
        /// <param name="bankCode">The bank code. Only applicable and used for countries that does not support bicSwift.</param>
        /// <param name="bicSwift">The BIC/SWIFT code.</param>
        /// <param name="countryCode">The ISO 3166-1 alfa-2 country code. Default is NO.</param>
        /// <param name="isActive">A value indicating whether this bank account is active.</param>
        [JsonConstructor]
        public ContactBankAccountPostDto(string? bankAccountNumber = default, Option<string?> bankCode = default, Option<string?> bicSwift = default, Option<string?> countryCode = default, Option<bool?> isActive = default)
        {
            BankAccountNumber = bankAccountNumber;
            BankCodeOption = bankCode;
            BicSwiftOption = bicSwift;
            CountryCodeOption = countryCode;
            IsActiveOption = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The bank account number
        /// </summary>
        /// <value>The bank account number</value>
        /* <example>1234 56 78903</example> */
        [JsonPropertyName("BankAccountNumber")]
        public string? BankAccountNumber { get; set; }

        /// <summary>
        /// Used to track the state of BankCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BankCodeOption { get; private set; }

        /// <summary>
        /// The bank code. Only applicable and used for countries that does not support bicSwift.
        /// </summary>
        /// <value>The bank code. Only applicable and used for countries that does not support bicSwift.</value>
        /* <example>FW987654321</example> */
        [JsonPropertyName("BankCode")]
        public string? BankCode { get { return this.BankCodeOption; } set { this.BankCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of BicSwift
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BicSwiftOption { get; private set; }

        /// <summary>
        /// The BIC/SWIFT code.
        /// </summary>
        /// <value>The BIC/SWIFT code.</value>
        /* <example>DNBANOKK</example> */
        [JsonPropertyName("BicSwift")]
        public string? BicSwift { get { return this.BicSwiftOption; } set { this.BicSwiftOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code. Default is NO.
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code. Default is NO.</value>
        /* <example>NO</example> */
        [JsonPropertyName("CountryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// A value indicating whether this bank account is active.
        /// </summary>
        /// <value>A value indicating whether this bank account is active.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactBankAccountPostDto {\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BicSwift: ").Append(BicSwift).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContactBankAccountPostDto" />
    /// </summary>
    public class ContactBankAccountPostDtoJsonConverter : JsonConverter<ContactBankAccountPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContactBankAccountPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContactBankAccountPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> bankAccountNumber = default;
            Option<string?> bankCode = default;
            Option<string?> bicSwift = default;
            Option<string?> countryCode = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "BankAccountNumber":
                            bankAccountNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "BankCode":
                            bankCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "BicSwift":
                            bicSwift = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CountryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bankAccountNumber.IsSet)
                throw new ArgumentException("Property is required for class ContactBankAccountPostDto.", nameof(bankAccountNumber));

            return new ContactBankAccountPostDto(bankAccountNumber.Value!, bankCode, bicSwift, countryCode, isActive);
        }

        /// <summary>
        /// Serializes a <see cref="ContactBankAccountPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactBankAccountPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContactBankAccountPostDto contactBankAccountPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contactBankAccountPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContactBankAccountPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactBankAccountPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContactBankAccountPostDto contactBankAccountPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contactBankAccountPostDto.BankAccountNumber != null)
                writer.WriteString("BankAccountNumber", contactBankAccountPostDto.BankAccountNumber);
            else
                writer.WriteNull("BankAccountNumber");

            if (contactBankAccountPostDto.BankCodeOption.IsSet)
                if (contactBankAccountPostDto.BankCodeOption.Value != null)
                    writer.WriteString("BankCode", contactBankAccountPostDto.BankCode);
                else
                    writer.WriteNull("BankCode");

            if (contactBankAccountPostDto.BicSwiftOption.IsSet)
                if (contactBankAccountPostDto.BicSwiftOption.Value != null)
                    writer.WriteString("BicSwift", contactBankAccountPostDto.BicSwift);
                else
                    writer.WriteNull("BicSwift");

            if (contactBankAccountPostDto.CountryCodeOption.IsSet)
                if (contactBankAccountPostDto.CountryCodeOption.Value != null)
                    writer.WriteString("CountryCode", contactBankAccountPostDto.CountryCode);
                else
                    writer.WriteNull("CountryCode");

            if (contactBankAccountPostDto.IsActiveOption.IsSet)
                if (contactBankAccountPostDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", contactBankAccountPostDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");
        }
    }
}
