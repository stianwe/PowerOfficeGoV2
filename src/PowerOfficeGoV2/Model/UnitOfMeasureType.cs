// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing various unit of measures.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;BX&lt;/i&gt; - Box (Norwegian: Eske)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTR&lt;/i&gt; - Meter (m) (Norwegian: Meter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KMT&lt;/i&gt; - Kilometer (km) (Norwegian: Kilometer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KGM&lt;/i&gt; - Kilogram (kg) (Norwegian: Kilogram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;EA&lt;/i&gt; - Each (Norwegian: Stykke (stk))&lt;/li&gt;&lt;li&gt;&lt;i&gt;LTR&lt;/i&gt; - Liter (L) (Norwegian: Liter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HUR&lt;/i&gt; - Hour (Norwegian: Time)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DAY&lt;/i&gt; - Day (Norwegian: Dag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTK&lt;/i&gt; - Square meter (m^2) (Norwegian: Kvadratmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTQ&lt;/i&gt; - Cubic meter (m^3) (Norwegian: Kubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;TNE&lt;/i&gt; - Metric ton (t) (Norwegian: Metrisk tonn)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MON&lt;/i&gt; - Month (Norwegian: Måned)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ANN&lt;/i&gt; - Year (Norwegian: År)&lt;/li&gt;&lt;li&gt;&lt;i&gt;QAN&lt;/i&gt; - Quarter of a year (Norwegian: Kvartal)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NL&lt;/i&gt; - Load (Norwegian: Lass)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XRO&lt;/i&gt; - Roll (Norwegian: Rull)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBA&lt;/i&gt; - Barrel (Norwegian: Tønne)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPL&lt;/i&gt; - Pail (Norwegian: Spann)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPC&lt;/i&gt; - Parcel (Norwegian: Kolli)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PR&lt;/i&gt; - Pair (Norwegian: Par)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCI&lt;/i&gt; - Canister (Norwegian: Boks)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBG&lt;/i&gt; - Bag (Norwegian: Pose)&lt;/li&gt;&lt;li&gt;&lt;i&gt;SET&lt;/i&gt; - Set (Norwegian: Sett)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XTY&lt;/i&gt; - Tank (Norwegian: Tank)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XOF&lt;/i&gt; - Pallet (Norwegian: Pall)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FTK&lt;/i&gt; - Square foot (ft^2) (Norwegian: Kvadratfot)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KWH&lt;/i&gt; - Kilowatt hour (kWh) (Norwegian: Kilowattime)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MWH&lt;/i&gt; - Megawatt hour (mWh) (Norwegian: Megawattime)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LBR&lt;/i&gt; - Pound (lb) (Norwegian: Pund)&lt;/li&gt;&lt;li&gt;&lt;i&gt;CMT&lt;/i&gt; - Centimeter (cm) (Norwegian: Centimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DMT&lt;/i&gt; - Decimeter (dm) (Norwegian: Desimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LM&lt;/i&gt; - Linear meter (Norwegian: Lineær meter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPK&lt;/i&gt; - Package (Norwegian: Pakke (pk))&lt;/li&gt;&lt;li&gt;&lt;i&gt;GRM&lt;/i&gt; - Gram (g) (Norwegian: Gram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HGM&lt;/i&gt; - Hectogram (hg) (Norwegian: Hektogram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XFL&lt;/i&gt; - Flask (Norwegian: Flaske)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBE&lt;/i&gt; - Bundle (Norwegian: Bunt)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E54&lt;/i&gt; - Trip (Norwegian: Tur)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MMT&lt;/i&gt; - Millimeter (mm) (Norwegian: Millimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DAA&lt;/i&gt; - Decare (Norwegian: Dekar)&lt;/li&gt;&lt;li&gt;&lt;i&gt;H18&lt;/i&gt; - Hectare (Norwegian: Hektar)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MLT&lt;/i&gt; - Milliliter (mL) (Norwegian: Milliliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HLT&lt;/i&gt; - Hectoliter (hL) (Norwegian: Hektoliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DLT&lt;/i&gt; - Deciliter (dL) (Norwegian: Desiliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AK&lt;/i&gt; - Fathom (Norwegian: Favn)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCR&lt;/i&gt; - Crate (Norwegian: Kasse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E14&lt;/i&gt; - Kilocalorie (kcal) (Norwegian: Kilokalori)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MJ&lt;/i&gt; - Megajoule (MJ) (Norwegian: Megajoule)&lt;/li&gt;&lt;li&gt;&lt;i&gt;J57&lt;/i&gt; - Barrel (petroleum) (Norwegian: Fat)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XJG&lt;/i&gt; - Jug (Norwegian: Kanne)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCT&lt;/i&gt; - Carton (Norwegian: Kartong)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XSA&lt;/i&gt; - Sack (Norwegian: Sekk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XTU&lt;/i&gt; - Tube (Norwegian: Tube)&lt;/li&gt;&lt;li&gt;&lt;i&gt;WEE&lt;/i&gt; - Week (Norwegian: Uke)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCA&lt;/i&gt; - Can (Rectangular) (Norwegian: Boks (Rektangulær))&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCN&lt;/i&gt; - Container (Norwegian: Konteiner)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NAR&lt;/i&gt; - Number of articles (Norwegian: Antall artikler)&lt;/li&gt;&lt;li&gt;&lt;i&gt;M4&lt;/i&gt; - Monetary value (Norwegian: Pengeverdi)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XVQ&lt;/i&gt; - Bulk (Norwegian: Bulk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;P1&lt;/i&gt; - Percent (%) (Norwegian: Prosent)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MFU&lt;/i&gt; - Milk Forage Unit (Norwegian: Forenhet melk (FEm))&lt;/li&gt;&lt;li&gt;&lt;i&gt;KMK&lt;/i&gt; - Square kilometer (km^2) (Norwegian: Kvadratkilometer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LM3&lt;/i&gt; - Loose cubic meter (Norwegian: Løskubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FOT&lt;/i&gt; - Foot (ft) (Norwegian: Fot)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FM3&lt;/i&gt; - Solid cubic meter (Norwegian: Fastkubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E34&lt;/i&gt; - Gigabyte&lt;/li&gt;&lt;li&gt;&lt;i&gt;E35&lt;/i&gt; - Terabyte&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing various unit of measures.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;BX&lt;/i&gt; - Box (Norwegian: Eske)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTR&lt;/i&gt; - Meter (m) (Norwegian: Meter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KMT&lt;/i&gt; - Kilometer (km) (Norwegian: Kilometer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KGM&lt;/i&gt; - Kilogram (kg) (Norwegian: Kilogram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;EA&lt;/i&gt; - Each (Norwegian: Stykke (stk))&lt;/li&gt;&lt;li&gt;&lt;i&gt;LTR&lt;/i&gt; - Liter (L) (Norwegian: Liter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HUR&lt;/i&gt; - Hour (Norwegian: Time)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DAY&lt;/i&gt; - Day (Norwegian: Dag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTK&lt;/i&gt; - Square meter (m^2) (Norwegian: Kvadratmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MTQ&lt;/i&gt; - Cubic meter (m^3) (Norwegian: Kubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;TNE&lt;/i&gt; - Metric ton (t) (Norwegian: Metrisk tonn)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MON&lt;/i&gt; - Month (Norwegian: Måned)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ANN&lt;/i&gt; - Year (Norwegian: År)&lt;/li&gt;&lt;li&gt;&lt;i&gt;QAN&lt;/i&gt; - Quarter of a year (Norwegian: Kvartal)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NL&lt;/i&gt; - Load (Norwegian: Lass)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XRO&lt;/i&gt; - Roll (Norwegian: Rull)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBA&lt;/i&gt; - Barrel (Norwegian: Tønne)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPL&lt;/i&gt; - Pail (Norwegian: Spann)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPC&lt;/i&gt; - Parcel (Norwegian: Kolli)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PR&lt;/i&gt; - Pair (Norwegian: Par)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCI&lt;/i&gt; - Canister (Norwegian: Boks)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBG&lt;/i&gt; - Bag (Norwegian: Pose)&lt;/li&gt;&lt;li&gt;&lt;i&gt;SET&lt;/i&gt; - Set (Norwegian: Sett)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XTY&lt;/i&gt; - Tank (Norwegian: Tank)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XOF&lt;/i&gt; - Pallet (Norwegian: Pall)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FTK&lt;/i&gt; - Square foot (ft^2) (Norwegian: Kvadratfot)&lt;/li&gt;&lt;li&gt;&lt;i&gt;KWH&lt;/i&gt; - Kilowatt hour (kWh) (Norwegian: Kilowattime)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MWH&lt;/i&gt; - Megawatt hour (mWh) (Norwegian: Megawattime)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LBR&lt;/i&gt; - Pound (lb) (Norwegian: Pund)&lt;/li&gt;&lt;li&gt;&lt;i&gt;CMT&lt;/i&gt; - Centimeter (cm) (Norwegian: Centimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DMT&lt;/i&gt; - Decimeter (dm) (Norwegian: Desimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LM&lt;/i&gt; - Linear meter (Norwegian: Lineær meter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XPK&lt;/i&gt; - Package (Norwegian: Pakke (pk))&lt;/li&gt;&lt;li&gt;&lt;i&gt;GRM&lt;/i&gt; - Gram (g) (Norwegian: Gram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HGM&lt;/i&gt; - Hectogram (hg) (Norwegian: Hektogram)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XFL&lt;/i&gt; - Flask (Norwegian: Flaske)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XBE&lt;/i&gt; - Bundle (Norwegian: Bunt)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E54&lt;/i&gt; - Trip (Norwegian: Tur)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MMT&lt;/i&gt; - Millimeter (mm) (Norwegian: Millimeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DAA&lt;/i&gt; - Decare (Norwegian: Dekar)&lt;/li&gt;&lt;li&gt;&lt;i&gt;H18&lt;/i&gt; - Hectare (Norwegian: Hektar)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MLT&lt;/i&gt; - Milliliter (mL) (Norwegian: Milliliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;HLT&lt;/i&gt; - Hectoliter (hL) (Norwegian: Hektoliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;DLT&lt;/i&gt; - Deciliter (dL) (Norwegian: Desiliter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AK&lt;/i&gt; - Fathom (Norwegian: Favn)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCR&lt;/i&gt; - Crate (Norwegian: Kasse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E14&lt;/i&gt; - Kilocalorie (kcal) (Norwegian: Kilokalori)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MJ&lt;/i&gt; - Megajoule (MJ) (Norwegian: Megajoule)&lt;/li&gt;&lt;li&gt;&lt;i&gt;J57&lt;/i&gt; - Barrel (petroleum) (Norwegian: Fat)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XJG&lt;/i&gt; - Jug (Norwegian: Kanne)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCT&lt;/i&gt; - Carton (Norwegian: Kartong)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XSA&lt;/i&gt; - Sack (Norwegian: Sekk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XTU&lt;/i&gt; - Tube (Norwegian: Tube)&lt;/li&gt;&lt;li&gt;&lt;i&gt;WEE&lt;/i&gt; - Week (Norwegian: Uke)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCA&lt;/i&gt; - Can (Rectangular) (Norwegian: Boks (Rektangulær))&lt;/li&gt;&lt;li&gt;&lt;i&gt;XCN&lt;/i&gt; - Container (Norwegian: Konteiner)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NAR&lt;/i&gt; - Number of articles (Norwegian: Antall artikler)&lt;/li&gt;&lt;li&gt;&lt;i&gt;M4&lt;/i&gt; - Monetary value (Norwegian: Pengeverdi)&lt;/li&gt;&lt;li&gt;&lt;i&gt;XVQ&lt;/i&gt; - Bulk (Norwegian: Bulk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;P1&lt;/i&gt; - Percent (%) (Norwegian: Prosent)&lt;/li&gt;&lt;li&gt;&lt;i&gt;MFU&lt;/i&gt; - Milk Forage Unit (Norwegian: Forenhet melk (FEm))&lt;/li&gt;&lt;li&gt;&lt;i&gt;KMK&lt;/i&gt; - Square kilometer (km^2) (Norwegian: Kvadratkilometer)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LM3&lt;/i&gt; - Loose cubic meter (Norwegian: Løskubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FOT&lt;/i&gt; - Foot (ft) (Norwegian: Fot)&lt;/li&gt;&lt;li&gt;&lt;i&gt;FM3&lt;/i&gt; - Solid cubic meter (Norwegian: Fastkubikkmeter)&lt;/li&gt;&lt;li&gt;&lt;i&gt;E34&lt;/i&gt; - Gigabyte&lt;/li&gt;&lt;li&gt;&lt;i&gt;E35&lt;/i&gt; - Terabyte&lt;/li&gt;&lt;/ul&gt;</value>
    public enum UnitOfMeasureType
    {
        /// <summary>
        /// Enum BX for value: BX
        /// </summary>
        BX = 1,

        /// <summary>
        /// Enum MTR for value: MTR
        /// </summary>
        MTR = 2,

        /// <summary>
        /// Enum KMT for value: KMT
        /// </summary>
        KMT = 3,

        /// <summary>
        /// Enum KGM for value: KGM
        /// </summary>
        KGM = 4,

        /// <summary>
        /// Enum EA for value: EA
        /// </summary>
        EA = 5,

        /// <summary>
        /// Enum LTR for value: LTR
        /// </summary>
        LTR = 6,

        /// <summary>
        /// Enum HUR for value: HUR
        /// </summary>
        HUR = 7,

        /// <summary>
        /// Enum DAY for value: DAY
        /// </summary>
        DAY = 8,

        /// <summary>
        /// Enum MTK for value: MTK
        /// </summary>
        MTK = 9,

        /// <summary>
        /// Enum MTQ for value: MTQ
        /// </summary>
        MTQ = 10,

        /// <summary>
        /// Enum TNE for value: TNE
        /// </summary>
        TNE = 11,

        /// <summary>
        /// Enum MON for value: MON
        /// </summary>
        MON = 12,

        /// <summary>
        /// Enum ANN for value: ANN
        /// </summary>
        ANN = 13,

        /// <summary>
        /// Enum QAN for value: QAN
        /// </summary>
        QAN = 14,

        /// <summary>
        /// Enum NL for value: NL
        /// </summary>
        NL = 15,

        /// <summary>
        /// Enum XRO for value: XRO
        /// </summary>
        XRO = 16,

        /// <summary>
        /// Enum XBA for value: XBA
        /// </summary>
        XBA = 17,

        /// <summary>
        /// Enum XPL for value: XPL
        /// </summary>
        XPL = 18,

        /// <summary>
        /// Enum XPC for value: XPC
        /// </summary>
        XPC = 19,

        /// <summary>
        /// Enum PR for value: PR
        /// </summary>
        PR = 20,

        /// <summary>
        /// Enum XCI for value: XCI
        /// </summary>
        XCI = 21,

        /// <summary>
        /// Enum XBG for value: XBG
        /// </summary>
        XBG = 22,

        /// <summary>
        /// Enum SET for value: SET
        /// </summary>
        SET = 23,

        /// <summary>
        /// Enum XTY for value: XTY
        /// </summary>
        XTY = 24,

        /// <summary>
        /// Enum XOF for value: XOF
        /// </summary>
        XOF = 25,

        /// <summary>
        /// Enum FTK for value: FTK
        /// </summary>
        FTK = 26,

        /// <summary>
        /// Enum KWH for value: KWH
        /// </summary>
        KWH = 27,

        /// <summary>
        /// Enum MWH for value: MWH
        /// </summary>
        MWH = 28,

        /// <summary>
        /// Enum LBR for value: LBR
        /// </summary>
        LBR = 29,

        /// <summary>
        /// Enum CMT for value: CMT
        /// </summary>
        CMT = 30,

        /// <summary>
        /// Enum DMT for value: DMT
        /// </summary>
        DMT = 31,

        /// <summary>
        /// Enum LM for value: LM
        /// </summary>
        LM = 32,

        /// <summary>
        /// Enum XPK for value: XPK
        /// </summary>
        XPK = 33,

        /// <summary>
        /// Enum GRM for value: GRM
        /// </summary>
        GRM = 34,

        /// <summary>
        /// Enum HGM for value: HGM
        /// </summary>
        HGM = 35,

        /// <summary>
        /// Enum XFL for value: XFL
        /// </summary>
        XFL = 36,

        /// <summary>
        /// Enum XBE for value: XBE
        /// </summary>
        XBE = 37,

        /// <summary>
        /// Enum E54 for value: E54
        /// </summary>
        E54 = 38,

        /// <summary>
        /// Enum MMT for value: MMT
        /// </summary>
        MMT = 39,

        /// <summary>
        /// Enum DAA for value: DAA
        /// </summary>
        DAA = 40,

        /// <summary>
        /// Enum H18 for value: H18
        /// </summary>
        H18 = 41,

        /// <summary>
        /// Enum MLT for value: MLT
        /// </summary>
        MLT = 42,

        /// <summary>
        /// Enum HLT for value: HLT
        /// </summary>
        HLT = 43,

        /// <summary>
        /// Enum DLT for value: DLT
        /// </summary>
        DLT = 44,

        /// <summary>
        /// Enum AK for value: AK
        /// </summary>
        AK = 45,

        /// <summary>
        /// Enum XCR for value: XCR
        /// </summary>
        XCR = 46,

        /// <summary>
        /// Enum E14 for value: E14
        /// </summary>
        E14 = 47,

        /// <summary>
        /// Enum MJ for value: MJ
        /// </summary>
        MJ = 48,

        /// <summary>
        /// Enum J57 for value: J57
        /// </summary>
        J57 = 49,

        /// <summary>
        /// Enum XJG for value: XJG
        /// </summary>
        XJG = 50,

        /// <summary>
        /// Enum XCT for value: XCT
        /// </summary>
        XCT = 51,

        /// <summary>
        /// Enum XSA for value: XSA
        /// </summary>
        XSA = 52,

        /// <summary>
        /// Enum XTU for value: XTU
        /// </summary>
        XTU = 53,

        /// <summary>
        /// Enum WEE for value: WEE
        /// </summary>
        WEE = 54,

        /// <summary>
        /// Enum XCA for value: XCA
        /// </summary>
        XCA = 55,

        /// <summary>
        /// Enum XCN for value: XCN
        /// </summary>
        XCN = 56,

        /// <summary>
        /// Enum NAR for value: NAR
        /// </summary>
        NAR = 57,

        /// <summary>
        /// Enum M4 for value: M4
        /// </summary>
        M4 = 58,

        /// <summary>
        /// Enum XVQ for value: XVQ
        /// </summary>
        XVQ = 59,

        /// <summary>
        /// Enum P1 for value: P1
        /// </summary>
        P1 = 60,

        /// <summary>
        /// Enum MFU for value: MFU
        /// </summary>
        MFU = 61,

        /// <summary>
        /// Enum KMK for value: KMK
        /// </summary>
        KMK = 62,

        /// <summary>
        /// Enum LM3 for value: LM3
        /// </summary>
        LM3 = 63,

        /// <summary>
        /// Enum FOT for value: FOT
        /// </summary>
        FOT = 64,

        /// <summary>
        /// Enum FM3 for value: FM3
        /// </summary>
        FM3 = 65,

        /// <summary>
        /// Enum E34 for value: E34
        /// </summary>
        E34 = 66,

        /// <summary>
        /// Enum E35 for value: E35
        /// </summary>
        E35 = 67
    }

    /// <summary>
    /// Converts <see cref="UnitOfMeasureType"/> to and from the JSON value
    /// </summary>
    public static class UnitOfMeasureTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UnitOfMeasureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UnitOfMeasureType FromString(string value)
        {
            if (value.Equals("BX"))
                return UnitOfMeasureType.BX;

            if (value.Equals("MTR"))
                return UnitOfMeasureType.MTR;

            if (value.Equals("KMT"))
                return UnitOfMeasureType.KMT;

            if (value.Equals("KGM"))
                return UnitOfMeasureType.KGM;

            if (value.Equals("EA"))
                return UnitOfMeasureType.EA;

            if (value.Equals("LTR"))
                return UnitOfMeasureType.LTR;

            if (value.Equals("HUR"))
                return UnitOfMeasureType.HUR;

            if (value.Equals("DAY"))
                return UnitOfMeasureType.DAY;

            if (value.Equals("MTK"))
                return UnitOfMeasureType.MTK;

            if (value.Equals("MTQ"))
                return UnitOfMeasureType.MTQ;

            if (value.Equals("TNE"))
                return UnitOfMeasureType.TNE;

            if (value.Equals("MON"))
                return UnitOfMeasureType.MON;

            if (value.Equals("ANN"))
                return UnitOfMeasureType.ANN;

            if (value.Equals("QAN"))
                return UnitOfMeasureType.QAN;

            if (value.Equals("NL"))
                return UnitOfMeasureType.NL;

            if (value.Equals("XRO"))
                return UnitOfMeasureType.XRO;

            if (value.Equals("XBA"))
                return UnitOfMeasureType.XBA;

            if (value.Equals("XPL"))
                return UnitOfMeasureType.XPL;

            if (value.Equals("XPC"))
                return UnitOfMeasureType.XPC;

            if (value.Equals("PR"))
                return UnitOfMeasureType.PR;

            if (value.Equals("XCI"))
                return UnitOfMeasureType.XCI;

            if (value.Equals("XBG"))
                return UnitOfMeasureType.XBG;

            if (value.Equals("SET"))
                return UnitOfMeasureType.SET;

            if (value.Equals("XTY"))
                return UnitOfMeasureType.XTY;

            if (value.Equals("XOF"))
                return UnitOfMeasureType.XOF;

            if (value.Equals("FTK"))
                return UnitOfMeasureType.FTK;

            if (value.Equals("KWH"))
                return UnitOfMeasureType.KWH;

            if (value.Equals("MWH"))
                return UnitOfMeasureType.MWH;

            if (value.Equals("LBR"))
                return UnitOfMeasureType.LBR;

            if (value.Equals("CMT"))
                return UnitOfMeasureType.CMT;

            if (value.Equals("DMT"))
                return UnitOfMeasureType.DMT;

            if (value.Equals("LM"))
                return UnitOfMeasureType.LM;

            if (value.Equals("XPK"))
                return UnitOfMeasureType.XPK;

            if (value.Equals("GRM"))
                return UnitOfMeasureType.GRM;

            if (value.Equals("HGM"))
                return UnitOfMeasureType.HGM;

            if (value.Equals("XFL"))
                return UnitOfMeasureType.XFL;

            if (value.Equals("XBE"))
                return UnitOfMeasureType.XBE;

            if (value.Equals("E54"))
                return UnitOfMeasureType.E54;

            if (value.Equals("MMT"))
                return UnitOfMeasureType.MMT;

            if (value.Equals("DAA"))
                return UnitOfMeasureType.DAA;

            if (value.Equals("H18"))
                return UnitOfMeasureType.H18;

            if (value.Equals("MLT"))
                return UnitOfMeasureType.MLT;

            if (value.Equals("HLT"))
                return UnitOfMeasureType.HLT;

            if (value.Equals("DLT"))
                return UnitOfMeasureType.DLT;

            if (value.Equals("AK"))
                return UnitOfMeasureType.AK;

            if (value.Equals("XCR"))
                return UnitOfMeasureType.XCR;

            if (value.Equals("E14"))
                return UnitOfMeasureType.E14;

            if (value.Equals("MJ"))
                return UnitOfMeasureType.MJ;

            if (value.Equals("J57"))
                return UnitOfMeasureType.J57;

            if (value.Equals("XJG"))
                return UnitOfMeasureType.XJG;

            if (value.Equals("XCT"))
                return UnitOfMeasureType.XCT;

            if (value.Equals("XSA"))
                return UnitOfMeasureType.XSA;

            if (value.Equals("XTU"))
                return UnitOfMeasureType.XTU;

            if (value.Equals("WEE"))
                return UnitOfMeasureType.WEE;

            if (value.Equals("XCA"))
                return UnitOfMeasureType.XCA;

            if (value.Equals("XCN"))
                return UnitOfMeasureType.XCN;

            if (value.Equals("NAR"))
                return UnitOfMeasureType.NAR;

            if (value.Equals("M4"))
                return UnitOfMeasureType.M4;

            if (value.Equals("XVQ"))
                return UnitOfMeasureType.XVQ;

            if (value.Equals("P1"))
                return UnitOfMeasureType.P1;

            if (value.Equals("MFU"))
                return UnitOfMeasureType.MFU;

            if (value.Equals("KMK"))
                return UnitOfMeasureType.KMK;

            if (value.Equals("LM3"))
                return UnitOfMeasureType.LM3;

            if (value.Equals("FOT"))
                return UnitOfMeasureType.FOT;

            if (value.Equals("FM3"))
                return UnitOfMeasureType.FM3;

            if (value.Equals("E34"))
                return UnitOfMeasureType.E34;

            if (value.Equals("E35"))
                return UnitOfMeasureType.E35;

            throw new NotImplementedException($"Could not convert value to type UnitOfMeasureType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UnitOfMeasureType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UnitOfMeasureType? FromStringOrDefault(string value)
        {
            if (value.Equals("BX"))
                return UnitOfMeasureType.BX;

            if (value.Equals("MTR"))
                return UnitOfMeasureType.MTR;

            if (value.Equals("KMT"))
                return UnitOfMeasureType.KMT;

            if (value.Equals("KGM"))
                return UnitOfMeasureType.KGM;

            if (value.Equals("EA"))
                return UnitOfMeasureType.EA;

            if (value.Equals("LTR"))
                return UnitOfMeasureType.LTR;

            if (value.Equals("HUR"))
                return UnitOfMeasureType.HUR;

            if (value.Equals("DAY"))
                return UnitOfMeasureType.DAY;

            if (value.Equals("MTK"))
                return UnitOfMeasureType.MTK;

            if (value.Equals("MTQ"))
                return UnitOfMeasureType.MTQ;

            if (value.Equals("TNE"))
                return UnitOfMeasureType.TNE;

            if (value.Equals("MON"))
                return UnitOfMeasureType.MON;

            if (value.Equals("ANN"))
                return UnitOfMeasureType.ANN;

            if (value.Equals("QAN"))
                return UnitOfMeasureType.QAN;

            if (value.Equals("NL"))
                return UnitOfMeasureType.NL;

            if (value.Equals("XRO"))
                return UnitOfMeasureType.XRO;

            if (value.Equals("XBA"))
                return UnitOfMeasureType.XBA;

            if (value.Equals("XPL"))
                return UnitOfMeasureType.XPL;

            if (value.Equals("XPC"))
                return UnitOfMeasureType.XPC;

            if (value.Equals("PR"))
                return UnitOfMeasureType.PR;

            if (value.Equals("XCI"))
                return UnitOfMeasureType.XCI;

            if (value.Equals("XBG"))
                return UnitOfMeasureType.XBG;

            if (value.Equals("SET"))
                return UnitOfMeasureType.SET;

            if (value.Equals("XTY"))
                return UnitOfMeasureType.XTY;

            if (value.Equals("XOF"))
                return UnitOfMeasureType.XOF;

            if (value.Equals("FTK"))
                return UnitOfMeasureType.FTK;

            if (value.Equals("KWH"))
                return UnitOfMeasureType.KWH;

            if (value.Equals("MWH"))
                return UnitOfMeasureType.MWH;

            if (value.Equals("LBR"))
                return UnitOfMeasureType.LBR;

            if (value.Equals("CMT"))
                return UnitOfMeasureType.CMT;

            if (value.Equals("DMT"))
                return UnitOfMeasureType.DMT;

            if (value.Equals("LM"))
                return UnitOfMeasureType.LM;

            if (value.Equals("XPK"))
                return UnitOfMeasureType.XPK;

            if (value.Equals("GRM"))
                return UnitOfMeasureType.GRM;

            if (value.Equals("HGM"))
                return UnitOfMeasureType.HGM;

            if (value.Equals("XFL"))
                return UnitOfMeasureType.XFL;

            if (value.Equals("XBE"))
                return UnitOfMeasureType.XBE;

            if (value.Equals("E54"))
                return UnitOfMeasureType.E54;

            if (value.Equals("MMT"))
                return UnitOfMeasureType.MMT;

            if (value.Equals("DAA"))
                return UnitOfMeasureType.DAA;

            if (value.Equals("H18"))
                return UnitOfMeasureType.H18;

            if (value.Equals("MLT"))
                return UnitOfMeasureType.MLT;

            if (value.Equals("HLT"))
                return UnitOfMeasureType.HLT;

            if (value.Equals("DLT"))
                return UnitOfMeasureType.DLT;

            if (value.Equals("AK"))
                return UnitOfMeasureType.AK;

            if (value.Equals("XCR"))
                return UnitOfMeasureType.XCR;

            if (value.Equals("E14"))
                return UnitOfMeasureType.E14;

            if (value.Equals("MJ"))
                return UnitOfMeasureType.MJ;

            if (value.Equals("J57"))
                return UnitOfMeasureType.J57;

            if (value.Equals("XJG"))
                return UnitOfMeasureType.XJG;

            if (value.Equals("XCT"))
                return UnitOfMeasureType.XCT;

            if (value.Equals("XSA"))
                return UnitOfMeasureType.XSA;

            if (value.Equals("XTU"))
                return UnitOfMeasureType.XTU;

            if (value.Equals("WEE"))
                return UnitOfMeasureType.WEE;

            if (value.Equals("XCA"))
                return UnitOfMeasureType.XCA;

            if (value.Equals("XCN"))
                return UnitOfMeasureType.XCN;

            if (value.Equals("NAR"))
                return UnitOfMeasureType.NAR;

            if (value.Equals("M4"))
                return UnitOfMeasureType.M4;

            if (value.Equals("XVQ"))
                return UnitOfMeasureType.XVQ;

            if (value.Equals("P1"))
                return UnitOfMeasureType.P1;

            if (value.Equals("MFU"))
                return UnitOfMeasureType.MFU;

            if (value.Equals("KMK"))
                return UnitOfMeasureType.KMK;

            if (value.Equals("LM3"))
                return UnitOfMeasureType.LM3;

            if (value.Equals("FOT"))
                return UnitOfMeasureType.FOT;

            if (value.Equals("FM3"))
                return UnitOfMeasureType.FM3;

            if (value.Equals("E34"))
                return UnitOfMeasureType.E34;

            if (value.Equals("E35"))
                return UnitOfMeasureType.E35;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UnitOfMeasureType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UnitOfMeasureType value)
        {
            if (value == UnitOfMeasureType.BX)
                return "BX";

            if (value == UnitOfMeasureType.MTR)
                return "MTR";

            if (value == UnitOfMeasureType.KMT)
                return "KMT";

            if (value == UnitOfMeasureType.KGM)
                return "KGM";

            if (value == UnitOfMeasureType.EA)
                return "EA";

            if (value == UnitOfMeasureType.LTR)
                return "LTR";

            if (value == UnitOfMeasureType.HUR)
                return "HUR";

            if (value == UnitOfMeasureType.DAY)
                return "DAY";

            if (value == UnitOfMeasureType.MTK)
                return "MTK";

            if (value == UnitOfMeasureType.MTQ)
                return "MTQ";

            if (value == UnitOfMeasureType.TNE)
                return "TNE";

            if (value == UnitOfMeasureType.MON)
                return "MON";

            if (value == UnitOfMeasureType.ANN)
                return "ANN";

            if (value == UnitOfMeasureType.QAN)
                return "QAN";

            if (value == UnitOfMeasureType.NL)
                return "NL";

            if (value == UnitOfMeasureType.XRO)
                return "XRO";

            if (value == UnitOfMeasureType.XBA)
                return "XBA";

            if (value == UnitOfMeasureType.XPL)
                return "XPL";

            if (value == UnitOfMeasureType.XPC)
                return "XPC";

            if (value == UnitOfMeasureType.PR)
                return "PR";

            if (value == UnitOfMeasureType.XCI)
                return "XCI";

            if (value == UnitOfMeasureType.XBG)
                return "XBG";

            if (value == UnitOfMeasureType.SET)
                return "SET";

            if (value == UnitOfMeasureType.XTY)
                return "XTY";

            if (value == UnitOfMeasureType.XOF)
                return "XOF";

            if (value == UnitOfMeasureType.FTK)
                return "FTK";

            if (value == UnitOfMeasureType.KWH)
                return "KWH";

            if (value == UnitOfMeasureType.MWH)
                return "MWH";

            if (value == UnitOfMeasureType.LBR)
                return "LBR";

            if (value == UnitOfMeasureType.CMT)
                return "CMT";

            if (value == UnitOfMeasureType.DMT)
                return "DMT";

            if (value == UnitOfMeasureType.LM)
                return "LM";

            if (value == UnitOfMeasureType.XPK)
                return "XPK";

            if (value == UnitOfMeasureType.GRM)
                return "GRM";

            if (value == UnitOfMeasureType.HGM)
                return "HGM";

            if (value == UnitOfMeasureType.XFL)
                return "XFL";

            if (value == UnitOfMeasureType.XBE)
                return "XBE";

            if (value == UnitOfMeasureType.E54)
                return "E54";

            if (value == UnitOfMeasureType.MMT)
                return "MMT";

            if (value == UnitOfMeasureType.DAA)
                return "DAA";

            if (value == UnitOfMeasureType.H18)
                return "H18";

            if (value == UnitOfMeasureType.MLT)
                return "MLT";

            if (value == UnitOfMeasureType.HLT)
                return "HLT";

            if (value == UnitOfMeasureType.DLT)
                return "DLT";

            if (value == UnitOfMeasureType.AK)
                return "AK";

            if (value == UnitOfMeasureType.XCR)
                return "XCR";

            if (value == UnitOfMeasureType.E14)
                return "E14";

            if (value == UnitOfMeasureType.MJ)
                return "MJ";

            if (value == UnitOfMeasureType.J57)
                return "J57";

            if (value == UnitOfMeasureType.XJG)
                return "XJG";

            if (value == UnitOfMeasureType.XCT)
                return "XCT";

            if (value == UnitOfMeasureType.XSA)
                return "XSA";

            if (value == UnitOfMeasureType.XTU)
                return "XTU";

            if (value == UnitOfMeasureType.WEE)
                return "WEE";

            if (value == UnitOfMeasureType.XCA)
                return "XCA";

            if (value == UnitOfMeasureType.XCN)
                return "XCN";

            if (value == UnitOfMeasureType.NAR)
                return "NAR";

            if (value == UnitOfMeasureType.M4)
                return "M4";

            if (value == UnitOfMeasureType.XVQ)
                return "XVQ";

            if (value == UnitOfMeasureType.P1)
                return "P1";

            if (value == UnitOfMeasureType.MFU)
                return "MFU";

            if (value == UnitOfMeasureType.KMK)
                return "KMK";

            if (value == UnitOfMeasureType.LM3)
                return "LM3";

            if (value == UnitOfMeasureType.FOT)
                return "FOT";

            if (value == UnitOfMeasureType.FM3)
                return "FM3";

            if (value == UnitOfMeasureType.E34)
                return "E34";

            if (value == UnitOfMeasureType.E35)
                return "E35";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UnitOfMeasureType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UnitOfMeasureTypeJsonConverter : JsonConverter<UnitOfMeasureType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UnitOfMeasureType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UnitOfMeasureType? result = rawValue == null
                ? null
                : UnitOfMeasureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UnitOfMeasureType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unitOfMeasureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UnitOfMeasureType unitOfMeasureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(unitOfMeasureType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UnitOfMeasureType"/>
    /// </summary>
    public class UnitOfMeasureTypeNullableJsonConverter : JsonConverter<UnitOfMeasureType?>
    {
        /// <summary>
        /// Returns a UnitOfMeasureType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UnitOfMeasureType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UnitOfMeasureType? result = rawValue == null
                ? null
                : UnitOfMeasureTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unitOfMeasureType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UnitOfMeasureType? unitOfMeasureType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(unitOfMeasureType?.ToString() ?? "null");
        }
    }
}
