// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Contact person data transfer object.
    /// </summary>
    public partial class ContactPersonDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPersonDto" /> class.
        /// </summary>
        /// <param name="contactId">The identifier of the contact (customer or supplier) this contact person is assigned to.</param>
        /// <param name="createdDateTimeOffset">The timestamp of the created date of the contact person.UTC time.</param>
        /// <param name="emailAddress">The e-mail address registered for the contact person.  This field is validated for typos in POST/PATCH calls.</param>
        /// <param name="externalCode">The external code. This field is not available in the GUI,  but can be used by the integrating party to reference the contact  person in the external system. The field must be unique (for each contact person).</param>
        /// <param name="firstName">The first name of the contact person.</param>
        /// <param name="id">The identifier of the contact person. This identifier  is unique and assigned by PowerOffice Go when a new entity is saved,  and should be provided when an entity should be edited or deleted (PATCH or DELETE).</param>
        /// <param name="isActive">A value indicating whether this instance is active. Inactive contact persons disable the usage of that in the GUI.</param>
        /// <param name="isDefault">A bool indicating whether this contact person is the default contact person.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the contact person. UTC time.</param>
        /// <param name="lastName">The last name of the contact person.</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="phoneNumber">The phone number of the contact person.</param>
        /// <param name="title">The title of the contact person. This might for instance be the job title of the person.</param>
        [JsonConstructor]
        public ContactPersonDto(Option<long?> contactId = default, Option<DateTime?> createdDateTimeOffset = default, Option<string?> emailAddress = default, Option<string?> externalCode = default, Option<string?> firstName = default, Option<long?> id = default, Option<bool?> isActive = default, Option<bool?> isDefault = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> lastName = default, Option<AddressDto?> mailAddress = default, Option<string?> phoneNumber = default, Option<string?> title = default)
        {
            ContactIdOption = contactId;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            EmailAddressOption = emailAddress;
            ExternalCodeOption = externalCode;
            FirstNameOption = firstName;
            IdOption = id;
            IsActiveOption = isActive;
            IsDefaultOption = isDefault;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LastNameOption = lastName;
            MailAddressOption = mailAddress;
            PhoneNumberOption = phoneNumber;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContactIdOption { get; }

        /// <summary>
        /// The identifier of the contact (customer or supplier) this contact person is assigned to.
        /// </summary>
        /// <value>The identifier of the contact (customer or supplier) this contact person is assigned to.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ContactId")]
        public long? ContactId { get { return this.ContactIdOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the created date of the contact person.UTC time.
        /// </summary>
        /// <value>The timestamp of the created date of the contact person.UTC time.</value>
        /* <example>2023-10-19T11:05:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// The e-mail address registered for the contact person.  This field is validated for typos in POST/PATCH calls.
        /// </summary>
        /// <value>The e-mail address registered for the contact person.  This field is validated for typos in POST/PATCH calls.</value>
        /* <example>api@example.com</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalCodeOption { get; private set; }

        /// <summary>
        /// The external code. This field is not available in the GUI,  but can be used by the integrating party to reference the contact  person in the external system. The field must be unique (for each contact person).
        /// </summary>
        /// <value>The external code. This field is not available in the GUI,  but can be used by the integrating party to reference the contact  person in the external system. The field must be unique (for each contact person).</value>
        /* <example>123xyz</example> */
        [JsonPropertyName("ExternalCode")]
        public string? ExternalCode { get { return this.ExternalCodeOption; } set { this.ExternalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// The first name of the contact person.
        /// </summary>
        /// <value>The first name of the contact person.</value>
        /* <example>Espen</example> */
        [JsonPropertyName("FirstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the contact person. This identifier  is unique and assigned by PowerOffice Go when a new entity is saved,  and should be provided when an entity should be edited or deleted (PATCH or DELETE).
        /// </summary>
        /// <value>The identifier of the contact person. This identifier  is unique and assigned by PowerOffice Go when a new entity is saved,  and should be provided when an entity should be edited or deleted (PATCH or DELETE).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// A value indicating whether this instance is active. Inactive contact persons disable the usage of that in the GUI.
        /// </summary>
        /// <value>A value indicating whether this instance is active. Inactive contact persons disable the usage of that in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// A bool indicating whether this contact person is the default contact person.
        /// </summary>
        /// <value>A bool indicating whether this contact person is the default contact person.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsDefault")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the contact person. UTC time.
        /// </summary>
        /// <value>The timestamp of the last change of the contact person. UTC time.</value>
        /* <example>2023-10-19T11:05:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// The last name of the contact person.
        /// </summary>
        /// <value>The last name of the contact person.</value>
        /* <example>Askeladd</example> */
        [JsonPropertyName("LastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AddressDto?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public AddressDto? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// The phone number of the contact person.
        /// </summary>
        /// <value>The phone number of the contact person.</value>
        /* <example>+4712345678</example> */
        [JsonPropertyName("PhoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// The title of the contact person. This might for instance be the job title of the person.
        /// </summary>
        /// <value>The title of the contact person. This might for instance be the job title of the person.</value>
        /* <example>CEO</example> */
        [JsonPropertyName("Title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactPersonDto {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ExternalCode: ").Append(ExternalCode).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ExternalCode (string) maxLength
            if (this.ExternalCode != null && this.ExternalCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ExternalCode, length must be less than 50.", new [] { "ExternalCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContactPersonDto" />
    /// </summary>
    public class ContactPersonDtoJsonConverter : JsonConverter<ContactPersonDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ContactPersonDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContactPersonDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> contactId = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<string?> emailAddress = default;
            Option<string?> externalCode = default;
            Option<string?> firstName = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<bool?> isDefault = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> lastName = default;
            Option<AddressDto?> mailAddress = default;
            Option<string?> phoneNumber = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalCode":
                            externalCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "FirstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<AddressDto?>(JsonSerializer.Deserialize<AddressDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "PhoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactId.IsSet && contactId.Value == null)
                throw new ArgumentNullException(nameof(contactId), "Property is not nullable for class ContactPersonDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class ContactPersonDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContactPersonDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class ContactPersonDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class ContactPersonDto.");

            return new ContactPersonDto(contactId, createdDateTimeOffset, emailAddress, externalCode, firstName, id, isActive, isDefault, lastChangedDateTimeOffset, lastName, mailAddress, phoneNumber, title);
        }

        /// <summary>
        /// Serializes a <see cref="ContactPersonDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactPersonDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContactPersonDto contactPersonDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contactPersonDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContactPersonDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactPersonDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContactPersonDto contactPersonDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contactPersonDto.MailAddressOption.IsSet && contactPersonDto.MailAddress == null)
                throw new ArgumentNullException(nameof(contactPersonDto.MailAddress), "Property is required for class ContactPersonDto.");

            if (contactPersonDto.ContactIdOption.IsSet)
                writer.WriteNumber("ContactId", contactPersonDto.ContactIdOption.Value!.Value);

            if (contactPersonDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", contactPersonDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (contactPersonDto.EmailAddressOption.IsSet)
                if (contactPersonDto.EmailAddressOption.Value != null)
                    writer.WriteString("EmailAddress", contactPersonDto.EmailAddress);
                else
                    writer.WriteNull("EmailAddress");

            if (contactPersonDto.ExternalCodeOption.IsSet)
                if (contactPersonDto.ExternalCodeOption.Value != null)
                    writer.WriteString("ExternalCode", contactPersonDto.ExternalCode);
                else
                    writer.WriteNull("ExternalCode");

            if (contactPersonDto.FirstNameOption.IsSet)
                if (contactPersonDto.FirstNameOption.Value != null)
                    writer.WriteString("FirstName", contactPersonDto.FirstName);
                else
                    writer.WriteNull("FirstName");

            if (contactPersonDto.IdOption.IsSet)
                writer.WriteNumber("Id", contactPersonDto.IdOption.Value!.Value);

            if (contactPersonDto.IsActiveOption.IsSet)
                if (contactPersonDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", contactPersonDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (contactPersonDto.IsDefaultOption.IsSet)
                if (contactPersonDto.IsDefaultOption.Value != null)
                    writer.WriteBoolean("IsDefault", contactPersonDto.IsDefaultOption.Value!.Value);
                else
                    writer.WriteNull("IsDefault");

            if (contactPersonDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", contactPersonDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (contactPersonDto.LastNameOption.IsSet)
                if (contactPersonDto.LastNameOption.Value != null)
                    writer.WriteString("LastName", contactPersonDto.LastName);
                else
                    writer.WriteNull("LastName");

            if (contactPersonDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, contactPersonDto.MailAddress, jsonSerializerOptions);
            }
            if (contactPersonDto.PhoneNumberOption.IsSet)
                if (contactPersonDto.PhoneNumberOption.Value != null)
                    writer.WriteString("PhoneNumber", contactPersonDto.PhoneNumber);
                else
                    writer.WriteNull("PhoneNumber");

            if (contactPersonDto.TitleOption.IsSet)
                if (contactPersonDto.TitleOption.Value != null)
                    writer.WriteString("Title", contactPersonDto.Title);
                else
                    writer.WriteNull("Title");
        }
    }
}
