// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing rounding precision types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OneUnit&lt;/i&gt; - Posted amount is rounded to whole units (i.e. rounded to amount 1.0).&lt;/li&gt;&lt;li&gt;&lt;i&gt;HalfUnit&lt;/i&gt; - Posted amount is rounded to half units (i.e. rounded to amount 0.5).&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing rounding precision types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OneUnit&lt;/i&gt; - Posted amount is rounded to whole units (i.e. rounded to amount 1.0).&lt;/li&gt;&lt;li&gt;&lt;i&gt;HalfUnit&lt;/i&gt; - Posted amount is rounded to half units (i.e. rounded to amount 0.5).&lt;/li&gt;&lt;/ul&gt;</value>
    public enum RoundingPrecisionType
    {
        /// <summary>
        /// Enum OneUnit for value: OneUnit
        /// </summary>
        OneUnit = 1,

        /// <summary>
        /// Enum HalfUnit for value: HalfUnit
        /// </summary>
        HalfUnit = 2
    }

    /// <summary>
    /// Converts <see cref="RoundingPrecisionType"/> to and from the JSON value
    /// </summary>
    public static class RoundingPrecisionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RoundingPrecisionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RoundingPrecisionType FromString(string value)
        {
            if (value.Equals("OneUnit"))
                return RoundingPrecisionType.OneUnit;

            if (value.Equals("HalfUnit"))
                return RoundingPrecisionType.HalfUnit;

            throw new NotImplementedException($"Could not convert value to type RoundingPrecisionType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RoundingPrecisionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RoundingPrecisionType? FromStringOrDefault(string value)
        {
            if (value.Equals("OneUnit"))
                return RoundingPrecisionType.OneUnit;

            if (value.Equals("HalfUnit"))
                return RoundingPrecisionType.HalfUnit;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RoundingPrecisionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RoundingPrecisionType value)
        {
            if (value == RoundingPrecisionType.OneUnit)
                return "OneUnit";

            if (value == RoundingPrecisionType.HalfUnit)
                return "HalfUnit";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RoundingPrecisionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RoundingPrecisionTypeJsonConverter : JsonConverter<RoundingPrecisionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RoundingPrecisionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RoundingPrecisionType? result = rawValue == null
                ? null
                : RoundingPrecisionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RoundingPrecisionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="roundingPrecisionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RoundingPrecisionType roundingPrecisionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(roundingPrecisionType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RoundingPrecisionType"/>
    /// </summary>
    public class RoundingPrecisionTypeNullableJsonConverter : JsonConverter<RoundingPrecisionType?>
    {
        /// <summary>
        /// Returns a RoundingPrecisionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RoundingPrecisionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RoundingPrecisionType? result = rawValue == null
                ? null
                : RoundingPrecisionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="roundingPrecisionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RoundingPrecisionType? roundingPrecisionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(roundingPrecisionType?.ToString() ?? "null");
        }
    }
}
