// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// An enum that represents the state of a voucher.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;IsDraft&lt;/i&gt; - The voucher is in a draft state, and can be edited, deleted or posted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsDeleted&lt;/i&gt; - The voucher is deleted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsPosted&lt;/i&gt; - The voucher is posted and cannot be edited or deleted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsProcessed&lt;/i&gt; - The voucher is in the process of being processed.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>An enum that represents the state of a voucher.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;IsDraft&lt;/i&gt; - The voucher is in a draft state, and can be edited, deleted or posted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsDeleted&lt;/i&gt; - The voucher is deleted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsPosted&lt;/i&gt; - The voucher is posted and cannot be edited or deleted.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IsProcessed&lt;/i&gt; - The voucher is in the process of being processed.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum VoucherState
    {
        /// <summary>
        /// Enum IsDraft for value: IsDraft
        /// </summary>
        IsDraft = 1,

        /// <summary>
        /// Enum IsDeleted for value: IsDeleted
        /// </summary>
        IsDeleted = 2,

        /// <summary>
        /// Enum IsPosted for value: IsPosted
        /// </summary>
        IsPosted = 3,

        /// <summary>
        /// Enum IsProcessed for value: IsProcessed
        /// </summary>
        IsProcessed = 4
    }

    /// <summary>
    /// Converts <see cref="VoucherState"/> to and from the JSON value
    /// </summary>
    public static class VoucherStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VoucherState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherState FromString(string value)
        {
            if (value.Equals("IsDraft"))
                return VoucherState.IsDraft;

            if (value.Equals("IsDeleted"))
                return VoucherState.IsDeleted;

            if (value.Equals("IsPosted"))
                return VoucherState.IsPosted;

            if (value.Equals("IsProcessed"))
                return VoucherState.IsProcessed;

            throw new NotImplementedException($"Could not convert value to type VoucherState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VoucherState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VoucherState? FromStringOrDefault(string value)
        {
            if (value.Equals("IsDraft"))
                return VoucherState.IsDraft;

            if (value.Equals("IsDeleted"))
                return VoucherState.IsDeleted;

            if (value.Equals("IsPosted"))
                return VoucherState.IsPosted;

            if (value.Equals("IsProcessed"))
                return VoucherState.IsProcessed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VoucherState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VoucherState value)
        {
            if (value == VoucherState.IsDraft)
                return "IsDraft";

            if (value == VoucherState.IsDeleted)
                return "IsDeleted";

            if (value == VoucherState.IsPosted)
                return "IsPosted";

            if (value == VoucherState.IsProcessed)
                return "IsProcessed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VoucherStateJsonConverter : JsonConverter<VoucherState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherState? result = rawValue == null
                ? null
                : VoucherStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VoucherState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherState voucherState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherState"/>
    /// </summary>
    public class VoucherStateNullableJsonConverter : JsonConverter<VoucherState?>
    {
        /// <summary>
        /// Returns a VoucherState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VoucherState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VoucherState? result = rawValue == null
                ? null
                : VoucherStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VoucherState? voucherState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(voucherState?.ToString() ?? "null");
        }
    }
}
