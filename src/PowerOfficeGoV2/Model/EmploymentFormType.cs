// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The form of employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Permanent&lt;/i&gt; - Permanent employment.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Temporary&lt;/i&gt; - Temporary employment.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PermanentEmploymentAndHiredOut&lt;/i&gt; - Permanent employment and hired out.                 New value from 2025, will be reported as Permanent before 2025.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryEmploymentAndHiredOut&lt;/i&gt; - Temporary employment and hired out                 New value from 2025, will be reported as Temporary before 2025.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryEmploymentAsOnCallCoverstaff&lt;/i&gt; - Temporary employment as on-call coverstaff.                 New value from 2025, will be reported as Temporary before 2025.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The form of employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Permanent&lt;/i&gt; - Permanent employment.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Temporary&lt;/i&gt; - Temporary employment.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PermanentEmploymentAndHiredOut&lt;/i&gt; - Permanent employment and hired out.                 New value from 2025, will be reported as Permanent before 2025.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryEmploymentAndHiredOut&lt;/i&gt; - Temporary employment and hired out                 New value from 2025, will be reported as Temporary before 2025.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TemporaryEmploymentAsOnCallCoverstaff&lt;/i&gt; - Temporary employment as on-call coverstaff.                 New value from 2025, will be reported as Temporary before 2025.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum EmploymentFormType
    {
        /// <summary>
        /// Enum Permanent for value: Permanent
        /// </summary>
        Permanent = 1,

        /// <summary>
        /// Enum Temporary for value: Temporary
        /// </summary>
        Temporary = 2,

        /// <summary>
        /// Enum PermanentEmploymentAndHiredOut for value: PermanentEmploymentAndHiredOut
        /// </summary>
        PermanentEmploymentAndHiredOut = 3,

        /// <summary>
        /// Enum TemporaryEmploymentAndHiredOut for value: TemporaryEmploymentAndHiredOut
        /// </summary>
        TemporaryEmploymentAndHiredOut = 4,

        /// <summary>
        /// Enum TemporaryEmploymentAsOnCallCoverstaff for value: TemporaryEmploymentAsOnCallCoverstaff
        /// </summary>
        TemporaryEmploymentAsOnCallCoverstaff = 5
    }

    /// <summary>
    /// Converts <see cref="EmploymentFormType"/> to and from the JSON value
    /// </summary>
    public static class EmploymentFormTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmploymentFormType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentFormType FromString(string value)
        {
            if (value.Equals("Permanent"))
                return EmploymentFormType.Permanent;

            if (value.Equals("Temporary"))
                return EmploymentFormType.Temporary;

            if (value.Equals("PermanentEmploymentAndHiredOut"))
                return EmploymentFormType.PermanentEmploymentAndHiredOut;

            if (value.Equals("TemporaryEmploymentAndHiredOut"))
                return EmploymentFormType.TemporaryEmploymentAndHiredOut;

            if (value.Equals("TemporaryEmploymentAsOnCallCoverstaff"))
                return EmploymentFormType.TemporaryEmploymentAsOnCallCoverstaff;

            throw new NotImplementedException($"Could not convert value to type EmploymentFormType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmploymentFormType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentFormType? FromStringOrDefault(string value)
        {
            if (value.Equals("Permanent"))
                return EmploymentFormType.Permanent;

            if (value.Equals("Temporary"))
                return EmploymentFormType.Temporary;

            if (value.Equals("PermanentEmploymentAndHiredOut"))
                return EmploymentFormType.PermanentEmploymentAndHiredOut;

            if (value.Equals("TemporaryEmploymentAndHiredOut"))
                return EmploymentFormType.TemporaryEmploymentAndHiredOut;

            if (value.Equals("TemporaryEmploymentAsOnCallCoverstaff"))
                return EmploymentFormType.TemporaryEmploymentAsOnCallCoverstaff;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmploymentFormType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmploymentFormType value)
        {
            if (value == EmploymentFormType.Permanent)
                return "Permanent";

            if (value == EmploymentFormType.Temporary)
                return "Temporary";

            if (value == EmploymentFormType.PermanentEmploymentAndHiredOut)
                return "PermanentEmploymentAndHiredOut";

            if (value == EmploymentFormType.TemporaryEmploymentAndHiredOut)
                return "TemporaryEmploymentAndHiredOut";

            if (value == EmploymentFormType.TemporaryEmploymentAsOnCallCoverstaff)
                return "TemporaryEmploymentAsOnCallCoverstaff";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentFormType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmploymentFormTypeJsonConverter : JsonConverter<EmploymentFormType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentFormType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentFormType? result = rawValue == null
                ? null
                : EmploymentFormTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmploymentFormType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentFormType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentFormType employmentFormType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentFormType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentFormType"/>
    /// </summary>
    public class EmploymentFormTypeNullableJsonConverter : JsonConverter<EmploymentFormType?>
    {
        /// <summary>
        /// Returns a EmploymentFormType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentFormType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentFormType? result = rawValue == null
                ? null
                : EmploymentFormTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentFormType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentFormType? employmentFormType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentFormType?.ToString() ?? "null");
        }
    }
}
