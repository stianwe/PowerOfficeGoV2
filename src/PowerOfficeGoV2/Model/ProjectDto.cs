// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The project DTO contains all properties relevant to a project-object in Go
    /// </summary>
    public partial class ProjectDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectDto" /> class.
        /// </summary>
        /// <param name="allowAllActivities">Value indicating whether it&#39;s allowed to use all the available Activity when adding TimeTrackingEntry on the project.  Default is true.  If this is set to false, the activities allowed on the project should be specified through the ProjectActivities method.  If the project is a sub-project (parentProjectCode has a value), allow all activities means that this sub-project is allowed to use all the activities specified on the parent project.</param>
        /// <param name="allowAllEmployees">Value indicating whether all employees can add time-tracking entries with this project.  Default is true.  If this is set to false, the team members working on the project should be specified through the ProjectTeamMembers method.  If the project is a sub-project (parentProjectCode has a value), allow all employees means that this sub-project is allowed to use all the team members specified on the parent project.</param>
        /// <param name="attachExpenseVouchersWhenBilling">Value indicating whether the original documents for expense vouchers should bet added as attachments when billing this project.  Default is false.</param>
        /// <param name="billableRate">The billable hourly rate for time-transactions registered with billable activities for this project.  Must be a positive number, and this rate can only be set and used if the projects billing method is Time or TimeAndExpense, and the billableRateSpecification is set to Project.  Also note that a hierarchy exist in Go for time-tracking price settings of billable rates.</param>
        /// <param name="billableRateSpecification">billableRateSpecification</param>
        /// <param name="brandingThemeCode">The code of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.</param>
        /// <param name="brandingThemeId">The id of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.</param>
        /// <param name="budgetedBillableRate">The budgeted average billable rate of time-tracking entries for the project, for the standard simplified project budget.</param>
        /// <param name="budgetedCostOfGoods">The budgeted cost of goods on this project, for the standard simplified project budget.</param>
        /// <param name="budgetedHours">The budgeted amount of work hours for the project, for the standard simplified project budget.</param>
        /// <param name="budgetedOtherOperatingExpenses">The budgeted other operating expenses for this project, for the standard simplified project budget.</param>
        /// <param name="budgetedPayrollExpenses">The budgeted cost of payroll expenses for this project, for the standard simplified project budget.</param>
        /// <param name="budgetedRevenueHours">The budgeted revenue form billable hour, for the standard simplified project budget and the time-tracking section of this.  This field is default calculated in the GUI as budgetedHours x budgetedBillableRate, and returned as null if not set directly or overridden.</param>
        /// <param name="budgetedTotalRevenue">The budgeted total revenue for the project, for the standard simplified project budget.  If not set directly, this field will inherit the value/calculated value of budgetedRevenueHours, and if so return null.</param>
        /// <param name="code">The code of the project.  When creating a sub-project in POST operations, the parentProjectCode property must be set as well and equal to the main project code that the sub-project will be a part of.  The response from the POST will return the notation code of main project.code of sub-project as the code of the created sub-project.</param>
        /// <param name="contactPersonId">The id of the customer contact person for this project.  Can only be set if customerNo is set, and the contact person entity must exist and be related to the customer set on the project.</param>
        /// <param name="contractNo">The contract number for this project.</param>
        /// <param name="createdDateTimeOffset">The timestamp the project entity was created.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid).  If the project was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="customerId">The id of the customer this project is related to.</param>
        /// <param name="customerNo">The number of the customer this project is related to.</param>
        /// <param name="deliveryTerm">The delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.</param>
        /// <param name="deliveryTermId">The id of the delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.</param>
        /// <param name="denyTimeTracking">Value indicating if registration of new time tracking entries should be denied for the project.  Default is false.</param>
        /// <param name="departmentCode">The code of the department this project is associated with.</param>
        /// <param name="departmentId">The id of the department this project is associated with.</param>
        /// <param name="endDate">The end date of the project.  Only date is used, time is ignored.</param>
        /// <param name="expenseMarkupDescription">The description added to the invoice line when markup of expenses is added.  Relevant only if expenseMarkupEnabled is true.</param>
        /// <param name="expenseMarkupEnabled">Value indicating whether markup of expenses is used when billing the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.</param>
        /// <param name="expenseMarkupFactor">The overridden markup factor used when billing expenses for this project. This value is usually set between 0 and 100.  If using a 50% markup of expenses, this value should be 50. Can only be set if expenseMarkupEnabled is set true.  If not set (null) and expenseMarkupEnabled is true, the default markup value in the time-tracking settings in Go will be used.  Cannot be set negative.</param>
        /// <param name="externalNumber">The external number of the project.  This field can be used to reference the project number in the external system, if the project codes are not kept in 1:1 sync between Go and the external system.  Note that this field is not available in the GUI.</param>
        /// <param name="fixedPrice">The fixed price set on the project.  Relevant only if the billingMethod is fixed price.</param>
        /// <param name="hourlyRateMarkupDescription">The description added to the invoice when markup of hourly rate is added.  Relevant only if useHourlyMarkup is true.</param>
        /// <param name="hourlyRateMarkupEnabled">Value indicating whether hourly rate markup is used on the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.</param>
        /// <param name="hourlyRateMarkupFactor">The overridden markup factor used when billing hours on this project.  This value is usually set between 0 and 1.  If using a 50% increase to hourly rate by markup this value should be 0.5.  Can only be set if useHourlyMarkup is set true.  If not set (null) and useHourlyMarkup is true, the default markup value in Go will be used.</param>
        /// <param name="id">The identifier of the project.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).</param>
        /// <param name="isActive">Value indicating whether this instance is active.  Inactive projects disable the usage of that projects in the GUI.</param>
        /// <param name="isBillable">Value indicating whether the project is billable.</param>
        /// <param name="isInternal">Value indicating whether the project is internal.  Internal projects are usually not associated with a paying customer, and only internal time-tracking activities can be used</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the project.</param>
        /// <param name="locationCode">The code of the location dimension this project is associated with.</param>
        /// <param name="locationId">The id of the location dimension this project is associated with.</param>
        /// <param name="name">The name of the project.</param>
        /// <param name="parentProjectCode">The code of the parent project.  Mandatory for sub projects.</param>
        /// <param name="parentProjectId">The id of the parent project.  Mandatory for sub projects.</param>
        /// <param name="paymentTermId">The id of the payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.</param>
        /// <param name="paymentTerms">The payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.</param>
        /// <param name="progress">Progress in percentage. If set, value must be between 0 and 100.</param>
        /// <param name="projectBillingMethod">projectBillingMethod</param>
        /// <param name="projectManagerEmployeeId">The employee id of the manager of the project.</param>
        /// <param name="projectManagerEmployeeNo">The (employee) code of the project manager.</param>
        /// <param name="projectStatus">projectStatus</param>
        /// <param name="purchaseOrderNo">The purchase order number for this project.  If set, this purchase order number will also default appear on invoices when billing this project.</param>
        /// <param name="startDate">The start date of the project.</param>
        [JsonConstructor]
        public ProjectDto(Option<bool?> allowAllActivities = default, Option<bool?> allowAllEmployees = default, Option<bool?> attachExpenseVouchersWhenBilling = default, Option<double?> billableRate = default, Option<BillableRateSpecification?> billableRateSpecification = default, Option<string?> brandingThemeCode = default, Option<long?> brandingThemeId = default, Option<double?> budgetedBillableRate = default, Option<double?> budgetedCostOfGoods = default, Option<double?> budgetedHours = default, Option<double?> budgetedOtherOperatingExpenses = default, Option<double?> budgetedPayrollExpenses = default, Option<double?> budgetedRevenueHours = default, Option<double?> budgetedTotalRevenue = default, Option<string?> code = default, Option<long?> contactPersonId = default, Option<string?> contractNo = default, Option<DateTime?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<long?> customerId = default, Option<long?> customerNo = default, Option<string?> deliveryTerm = default, Option<long?> deliveryTermId = default, Option<bool?> denyTimeTracking = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<DateOnly?> endDate = default, Option<string?> expenseMarkupDescription = default, Option<bool?> expenseMarkupEnabled = default, Option<double?> expenseMarkupFactor = default, Option<long?> externalNumber = default, Option<double?> fixedPrice = default, Option<string?> hourlyRateMarkupDescription = default, Option<bool?> hourlyRateMarkupEnabled = default, Option<double?> hourlyRateMarkupFactor = default, Option<long?> id = default, Option<bool?> isActive = default, Option<bool?> isBillable = default, Option<bool?> isInternal = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<string?> name = default, Option<string?> parentProjectCode = default, Option<long?> parentProjectId = default, Option<long?> paymentTermId = default, Option<int?> paymentTerms = default, Option<int?> progress = default, Option<ProjectBillingMethod?> projectBillingMethod = default, Option<long?> projectManagerEmployeeId = default, Option<long?> projectManagerEmployeeNo = default, Option<ProjectStatusType?> projectStatus = default, Option<string?> purchaseOrderNo = default, Option<DateOnly?> startDate = default)
        {
            AllowAllActivitiesOption = allowAllActivities;
            AllowAllEmployeesOption = allowAllEmployees;
            AttachExpenseVouchersWhenBillingOption = attachExpenseVouchersWhenBilling;
            BillableRateOption = billableRate;
            BillableRateSpecificationOption = billableRateSpecification;
            BrandingThemeCodeOption = brandingThemeCode;
            BrandingThemeIdOption = brandingThemeId;
            BudgetedBillableRateOption = budgetedBillableRate;
            BudgetedCostOfGoodsOption = budgetedCostOfGoods;
            BudgetedHoursOption = budgetedHours;
            BudgetedOtherOperatingExpensesOption = budgetedOtherOperatingExpenses;
            BudgetedPayrollExpensesOption = budgetedPayrollExpenses;
            BudgetedRevenueHoursOption = budgetedRevenueHours;
            BudgetedTotalRevenueOption = budgetedTotalRevenue;
            CodeOption = code;
            ContactPersonIdOption = contactPersonId;
            ContractNoOption = contractNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            CustomerIdOption = customerId;
            CustomerNoOption = customerNo;
            DeliveryTermOption = deliveryTerm;
            DeliveryTermIdOption = deliveryTermId;
            DenyTimeTrackingOption = denyTimeTracking;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            EndDateOption = endDate;
            ExpenseMarkupDescriptionOption = expenseMarkupDescription;
            ExpenseMarkupEnabledOption = expenseMarkupEnabled;
            ExpenseMarkupFactorOption = expenseMarkupFactor;
            ExternalNumberOption = externalNumber;
            FixedPriceOption = fixedPrice;
            HourlyRateMarkupDescriptionOption = hourlyRateMarkupDescription;
            HourlyRateMarkupEnabledOption = hourlyRateMarkupEnabled;
            HourlyRateMarkupFactorOption = hourlyRateMarkupFactor;
            IdOption = id;
            IsActiveOption = isActive;
            IsBillableOption = isBillable;
            IsInternalOption = isInternal;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            NameOption = name;
            ParentProjectCodeOption = parentProjectCode;
            ParentProjectIdOption = parentProjectId;
            PaymentTermIdOption = paymentTermId;
            PaymentTermsOption = paymentTerms;
            ProgressOption = progress;
            ProjectBillingMethodOption = projectBillingMethod;
            ProjectManagerEmployeeIdOption = projectManagerEmployeeId;
            ProjectManagerEmployeeNoOption = projectManagerEmployeeNo;
            ProjectStatusOption = projectStatus;
            PurchaseOrderNoOption = purchaseOrderNo;
            StartDateOption = startDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BillableRateSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BillableRateSpecification?> BillableRateSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets BillableRateSpecification
        /// </summary>
        [JsonPropertyName("BillableRateSpecification")]
        public BillableRateSpecification? BillableRateSpecification { get { return this.BillableRateSpecificationOption; } set { this.BillableRateSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectBillingMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProjectBillingMethod?> ProjectBillingMethodOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectBillingMethod
        /// </summary>
        [JsonPropertyName("ProjectBillingMethod")]
        public ProjectBillingMethod? ProjectBillingMethod { get { return this.ProjectBillingMethodOption; } set { this.ProjectBillingMethodOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProjectStatusType?> ProjectStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectStatus
        /// </summary>
        [JsonPropertyName("ProjectStatus")]
        public ProjectStatusType? ProjectStatus { get { return this.ProjectStatusOption; } set { this.ProjectStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowAllActivities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowAllActivitiesOption { get; private set; }

        /// <summary>
        /// Value indicating whether it&#39;s allowed to use all the available Activity when adding TimeTrackingEntry on the project.  Default is true.  If this is set to false, the activities allowed on the project should be specified through the ProjectActivities method.  If the project is a sub-project (parentProjectCode has a value), allow all activities means that this sub-project is allowed to use all the activities specified on the parent project.
        /// </summary>
        /// <value>Value indicating whether it&#39;s allowed to use all the available Activity when adding TimeTrackingEntry on the project.  Default is true.  If this is set to false, the activities allowed on the project should be specified through the ProjectActivities method.  If the project is a sub-project (parentProjectCode has a value), allow all activities means that this sub-project is allowed to use all the activities specified on the parent project.</value>
        /* <example>true</example> */
        [JsonPropertyName("AllowAllActivities")]
        public bool? AllowAllActivities { get { return this.AllowAllActivitiesOption; } set { this.AllowAllActivitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowAllEmployees
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowAllEmployeesOption { get; private set; }

        /// <summary>
        /// Value indicating whether all employees can add time-tracking entries with this project.  Default is true.  If this is set to false, the team members working on the project should be specified through the ProjectTeamMembers method.  If the project is a sub-project (parentProjectCode has a value), allow all employees means that this sub-project is allowed to use all the team members specified on the parent project.
        /// </summary>
        /// <value>Value indicating whether all employees can add time-tracking entries with this project.  Default is true.  If this is set to false, the team members working on the project should be specified through the ProjectTeamMembers method.  If the project is a sub-project (parentProjectCode has a value), allow all employees means that this sub-project is allowed to use all the team members specified on the parent project.</value>
        /* <example>true</example> */
        [JsonPropertyName("AllowAllEmployees")]
        public bool? AllowAllEmployees { get { return this.AllowAllEmployeesOption; } set { this.AllowAllEmployeesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttachExpenseVouchersWhenBilling
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AttachExpenseVouchersWhenBillingOption { get; private set; }

        /// <summary>
        /// Value indicating whether the original documents for expense vouchers should bet added as attachments when billing this project.  Default is false.
        /// </summary>
        /// <value>Value indicating whether the original documents for expense vouchers should bet added as attachments when billing this project.  Default is false.</value>
        /* <example>true</example> */
        [JsonPropertyName("AttachExpenseVouchersWhenBilling")]
        public bool? AttachExpenseVouchersWhenBilling { get { return this.AttachExpenseVouchersWhenBillingOption; } set { this.AttachExpenseVouchersWhenBillingOption = new(value); } }

        /// <summary>
        /// Used to track the state of BillableRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BillableRateOption { get; private set; }

        /// <summary>
        /// The billable hourly rate for time-transactions registered with billable activities for this project.  Must be a positive number, and this rate can only be set and used if the projects billing method is Time or TimeAndExpense, and the billableRateSpecification is set to Project.  Also note that a hierarchy exist in Go for time-tracking price settings of billable rates.
        /// </summary>
        /// <value>The billable hourly rate for time-transactions registered with billable activities for this project.  Must be a positive number, and this rate can only be set and used if the projects billing method is Time or TimeAndExpense, and the billableRateSpecification is set to Project.  Also note that a hierarchy exist in Go for time-tracking price settings of billable rates.</value>
        /* <example>350.67</example> */
        [JsonPropertyName("BillableRate")]
        public double? BillableRate { get { return this.BillableRateOption; } set { this.BillableRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrandingThemeCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrandingThemeCodeOption { get; }

        /// <summary>
        /// The code of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.
        /// </summary>
        /// <value>The code of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.</value>
        /* <example>1</example> */
        [JsonPropertyName("BrandingThemeCode")]
        public string? BrandingThemeCode { get { return this.BrandingThemeCodeOption; } }

        /// <summary>
        /// Used to track the state of BrandingThemeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BrandingThemeIdOption { get; private set; }

        /// <summary>
        /// The id of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.
        /// </summary>
        /// <value>The id of the branding theme default used when billing this project.  If null, the standard branding theme (on the client) is applied.</value>
        /* <example>123456</example> */
        [JsonPropertyName("BrandingThemeId")]
        public long? BrandingThemeId { get { return this.BrandingThemeIdOption; } set { this.BrandingThemeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedBillableRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedBillableRateOption { get; private set; }

        /// <summary>
        /// The budgeted average billable rate of time-tracking entries for the project, for the standard simplified project budget.
        /// </summary>
        /// <value>The budgeted average billable rate of time-tracking entries for the project, for the standard simplified project budget.</value>
        /* <example>200.97</example> */
        [JsonPropertyName("BudgetedBillableRate")]
        public double? BudgetedBillableRate { get { return this.BudgetedBillableRateOption; } set { this.BudgetedBillableRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedCostOfGoods
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedCostOfGoodsOption { get; private set; }

        /// <summary>
        /// The budgeted cost of goods on this project, for the standard simplified project budget.
        /// </summary>
        /// <value>The budgeted cost of goods on this project, for the standard simplified project budget.</value>
        /* <example>200.97</example> */
        [JsonPropertyName("BudgetedCostOfGoods")]
        public double? BudgetedCostOfGoods { get { return this.BudgetedCostOfGoodsOption; } set { this.BudgetedCostOfGoodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedHoursOption { get; private set; }

        /// <summary>
        /// The budgeted amount of work hours for the project, for the standard simplified project budget.
        /// </summary>
        /// <value>The budgeted amount of work hours for the project, for the standard simplified project budget.</value>
        /* <example>150.97</example> */
        [JsonPropertyName("BudgetedHours")]
        public double? BudgetedHours { get { return this.BudgetedHoursOption; } set { this.BudgetedHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedOtherOperatingExpenses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedOtherOperatingExpensesOption { get; private set; }

        /// <summary>
        /// The budgeted other operating expenses for this project, for the standard simplified project budget.
        /// </summary>
        /// <value>The budgeted other operating expenses for this project, for the standard simplified project budget.</value>
        /* <example>2500.97</example> */
        [JsonPropertyName("BudgetedOtherOperatingExpenses")]
        public double? BudgetedOtherOperatingExpenses { get { return this.BudgetedOtherOperatingExpensesOption; } set { this.BudgetedOtherOperatingExpensesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedPayrollExpenses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedPayrollExpensesOption { get; private set; }

        /// <summary>
        /// The budgeted cost of payroll expenses for this project, for the standard simplified project budget.
        /// </summary>
        /// <value>The budgeted cost of payroll expenses for this project, for the standard simplified project budget.</value>
        /* <example>500.97</example> */
        [JsonPropertyName("BudgetedPayrollExpenses")]
        public double? BudgetedPayrollExpenses { get { return this.BudgetedPayrollExpensesOption; } set { this.BudgetedPayrollExpensesOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedRevenueHours
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedRevenueHoursOption { get; private set; }

        /// <summary>
        /// The budgeted revenue form billable hour, for the standard simplified project budget and the time-tracking section of this.  This field is default calculated in the GUI as budgetedHours x budgetedBillableRate, and returned as null if not set directly or overridden.
        /// </summary>
        /// <value>The budgeted revenue form billable hour, for the standard simplified project budget and the time-tracking section of this.  This field is default calculated in the GUI as budgetedHours x budgetedBillableRate, and returned as null if not set directly or overridden.</value>
        /* <example>300.97</example> */
        [JsonPropertyName("BudgetedRevenueHours")]
        public double? BudgetedRevenueHours { get { return this.BudgetedRevenueHoursOption; } set { this.BudgetedRevenueHoursOption = new(value); } }

        /// <summary>
        /// Used to track the state of BudgetedTotalRevenue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BudgetedTotalRevenueOption { get; private set; }

        /// <summary>
        /// The budgeted total revenue for the project, for the standard simplified project budget.  If not set directly, this field will inherit the value/calculated value of budgetedRevenueHours, and if so return null.
        /// </summary>
        /// <value>The budgeted total revenue for the project, for the standard simplified project budget.  If not set directly, this field will inherit the value/calculated value of budgetedRevenueHours, and if so return null.</value>
        /* <example>1500.97</example> */
        [JsonPropertyName("BudgetedTotalRevenue")]
        public double? BudgetedTotalRevenue { get { return this.BudgetedTotalRevenueOption; } set { this.BudgetedTotalRevenueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the project.  When creating a sub-project in POST operations, the parentProjectCode property must be set as well and equal to the main project code that the sub-project will be a part of.  The response from the POST will return the notation code of main project.code of sub-project as the code of the created sub-project.
        /// </summary>
        /// <value>The code of the project.  When creating a sub-project in POST operations, the parentProjectCode property must be set as well and equal to the main project code that the sub-project will be a part of.  The response from the POST will return the notation code of main project.code of sub-project as the code of the created sub-project.</value>
        /* <example>10</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactPersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContactPersonIdOption { get; private set; }

        /// <summary>
        /// The id of the customer contact person for this project.  Can only be set if customerNo is set, and the contact person entity must exist and be related to the customer set on the project.
        /// </summary>
        /// <value>The id of the customer contact person for this project.  Can only be set if customerNo is set, and the contact person entity must exist and be related to the customer set on the project.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ContactPersonId")]
        public long? ContactPersonId { get { return this.ContactPersonIdOption; } set { this.ContactPersonIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractNoOption { get; private set; }

        /// <summary>
        /// The contract number for this project.
        /// </summary>
        /// <value>The contract number for this project.</value>
        /* <example>123-244A</example> */
        [JsonPropertyName("ContractNo")]
        public string? ContractNo { get { return this.ContractNoOption; } set { this.ContractNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the project entity was created.
        /// </summary>
        /// <value>The timestamp the project entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid).  If the project was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid).  If the project was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of CustomerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerIdOption { get; private set; }

        /// <summary>
        /// The id of the customer this project is related to.
        /// </summary>
        /// <value>The id of the customer this project is related to.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerId")]
        public long? CustomerId { get { return this.CustomerIdOption; } set { this.CustomerIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerNoOption { get; }

        /// <summary>
        /// The number of the customer this project is related to.
        /// </summary>
        /// <value>The number of the customer this project is related to.</value>
        /* <example>10251</example> */
        [JsonPropertyName("CustomerNo")]
        public long? CustomerNo { get { return this.CustomerNoOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryTermOption { get; }

        /// <summary>
        /// The delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.
        /// </summary>
        /// <value>The delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.</value>
        /* <example>DAP</example> */
        [JsonPropertyName("DeliveryTerm")]
        public string? DeliveryTerm { get { return this.DeliveryTermOption; } }

        /// <summary>
        /// Used to track the state of DeliveryTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeliveryTermIdOption { get; private set; }

        /// <summary>
        /// The id of the delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.
        /// </summary>
        /// <value>The id of the delivery term of the project.  The delivery term set will be the default value when an invoice draft is created in Go with this project (and the projects customer).  If null, the default delivery term set on the client is used.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DeliveryTermId")]
        public long? DeliveryTermId { get { return this.DeliveryTermIdOption; } set { this.DeliveryTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DenyTimeTracking
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DenyTimeTrackingOption { get; private set; }

        /// <summary>
        /// Value indicating if registration of new time tracking entries should be denied for the project.  Default is false.
        /// </summary>
        /// <value>Value indicating if registration of new time tracking entries should be denied for the project.  Default is false.</value>
        /* <example>true</example> */
        [JsonPropertyName("DenyTimeTracking")]
        public bool? DenyTimeTracking { get { return this.DenyTimeTrackingOption; } set { this.DenyTimeTrackingOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department this project is associated with.
        /// </summary>
        /// <value>The code of the department this project is associated with.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department this project is associated with.
        /// </summary>
        /// <value>The id of the department this project is associated with.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date of the project.  Only date is used, time is ignored.
        /// </summary>
        /// <value>The end date of the project.  Only date is used, time is ignored.</value>
        /* <example>Fri Jan 06 01:00:00 CET 2023</example> */
        [JsonPropertyName("EndDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpenseMarkupDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpenseMarkupDescriptionOption { get; private set; }

        /// <summary>
        /// The description added to the invoice line when markup of expenses is added.  Relevant only if expenseMarkupEnabled is true.
        /// </summary>
        /// <value>The description added to the invoice line when markup of expenses is added.  Relevant only if expenseMarkupEnabled is true.</value>
        /* <example>Markup abc</example> */
        [JsonPropertyName("ExpenseMarkupDescription")]
        public string? ExpenseMarkupDescription { get { return this.ExpenseMarkupDescriptionOption; } set { this.ExpenseMarkupDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpenseMarkupEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExpenseMarkupEnabledOption { get; private set; }

        /// <summary>
        /// Value indicating whether markup of expenses is used when billing the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.
        /// </summary>
        /// <value>Value indicating whether markup of expenses is used when billing the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.</value>
        /* <example>false</example> */
        [JsonPropertyName("ExpenseMarkupEnabled")]
        public bool? ExpenseMarkupEnabled { get { return this.ExpenseMarkupEnabledOption; } set { this.ExpenseMarkupEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpenseMarkupFactor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ExpenseMarkupFactorOption { get; private set; }

        /// <summary>
        /// The overridden markup factor used when billing expenses for this project. This value is usually set between 0 and 100.  If using a 50% markup of expenses, this value should be 50. Can only be set if expenseMarkupEnabled is set true.  If not set (null) and expenseMarkupEnabled is true, the default markup value in the time-tracking settings in Go will be used.  Cannot be set negative.
        /// </summary>
        /// <value>The overridden markup factor used when billing expenses for this project. This value is usually set between 0 and 100.  If using a 50% markup of expenses, this value should be 50. Can only be set if expenseMarkupEnabled is set true.  If not set (null) and expenseMarkupEnabled is true, the default markup value in the time-tracking settings in Go will be used.  Cannot be set negative.</value>
        /* <example>25.98</example> */
        [JsonPropertyName("ExpenseMarkupFactor")]
        public double? ExpenseMarkupFactor { get { return this.ExpenseMarkupFactorOption; } set { this.ExpenseMarkupFactorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExternalNumberOption { get; private set; }

        /// <summary>
        /// The external number of the project.  This field can be used to reference the project number in the external system, if the project codes are not kept in 1:1 sync between Go and the external system.  Note that this field is not available in the GUI.
        /// </summary>
        /// <value>The external number of the project.  This field can be used to reference the project number in the external system, if the project codes are not kept in 1:1 sync between Go and the external system.  Note that this field is not available in the GUI.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ExternalNumber")]
        public long? ExternalNumber { get { return this.ExternalNumberOption; } set { this.ExternalNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FixedPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FixedPriceOption { get; private set; }

        /// <summary>
        /// The fixed price set on the project.  Relevant only if the billingMethod is fixed price.
        /// </summary>
        /// <value>The fixed price set on the project.  Relevant only if the billingMethod is fixed price.</value>
        /* <example>15.42</example> */
        [JsonPropertyName("FixedPrice")]
        public double? FixedPrice { get { return this.FixedPriceOption; } set { this.FixedPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of HourlyRateMarkupDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HourlyRateMarkupDescriptionOption { get; private set; }

        /// <summary>
        /// The description added to the invoice when markup of hourly rate is added.  Relevant only if useHourlyMarkup is true.
        /// </summary>
        /// <value>The description added to the invoice when markup of hourly rate is added.  Relevant only if useHourlyMarkup is true.</value>
        /* <example>Markup abc</example> */
        [JsonPropertyName("HourlyRateMarkupDescription")]
        public string? HourlyRateMarkupDescription { get { return this.HourlyRateMarkupDescriptionOption; } set { this.HourlyRateMarkupDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of HourlyRateMarkupEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HourlyRateMarkupEnabledOption { get; private set; }

        /// <summary>
        /// Value indicating whether hourly rate markup is used on the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.
        /// </summary>
        /// <value>Value indicating whether hourly rate markup is used on the project.  The default value will depend on the time-tracking settings on the client, as the value will inherit from the general time-tracking settings if not overridden.</value>
        /* <example>true</example> */
        [JsonPropertyName("HourlyRateMarkupEnabled")]
        public bool? HourlyRateMarkupEnabled { get { return this.HourlyRateMarkupEnabledOption; } set { this.HourlyRateMarkupEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of HourlyRateMarkupFactor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HourlyRateMarkupFactorOption { get; private set; }

        /// <summary>
        /// The overridden markup factor used when billing hours on this project.  This value is usually set between 0 and 1.  If using a 50% increase to hourly rate by markup this value should be 0.5.  Can only be set if useHourlyMarkup is set true.  If not set (null) and useHourlyMarkup is true, the default markup value in Go will be used.
        /// </summary>
        /// <value>The overridden markup factor used when billing hours on this project.  This value is usually set between 0 and 1.  If using a 50% increase to hourly rate by markup this value should be 0.5.  Can only be set if useHourlyMarkup is set true.  If not set (null) and useHourlyMarkup is true, the default markup value in Go will be used.</value>
        /* <example>53.21</example> */
        [JsonPropertyName("HourlyRateMarkupFactor")]
        public double? HourlyRateMarkupFactor { get { return this.HourlyRateMarkupFactorOption; } set { this.HourlyRateMarkupFactorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the project.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).
        /// </summary>
        /// <value>The identifier of the project.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited or deleted (PATCH or DELETE).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Value indicating whether this instance is active.  Inactive projects disable the usage of that projects in the GUI.
        /// </summary>
        /// <value>Value indicating whether this instance is active.  Inactive projects disable the usage of that projects in the GUI.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsBillable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBillableOption { get; private set; }

        /// <summary>
        /// Value indicating whether the project is billable.
        /// </summary>
        /// <value>Value indicating whether the project is billable.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsBillable")]
        public bool? IsBillable { get { return this.IsBillableOption; } set { this.IsBillableOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsInternal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsInternalOption { get; private set; }

        /// <summary>
        /// Value indicating whether the project is internal.  Internal projects are usually not associated with a paying customer, and only internal time-tracking activities can be used
        /// </summary>
        /// <value>Value indicating whether the project is internal.  Internal projects are usually not associated with a paying customer, and only internal time-tracking activities can be used</value>
        /* <example>true</example> */
        [JsonPropertyName("IsInternal")]
        public bool? IsInternal { get { return this.IsInternalOption; } set { this.IsInternalOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the project.
        /// </summary>
        /// <value>The timestamp of the last change of the project.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension this project is associated with.
        /// </summary>
        /// <value>The code of the location dimension this project is associated with.</value>
        /* <example>1</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension this project is associated with.
        /// </summary>
        /// <value>The id of the location dimension this project is associated with.</value>
        /* <example>123456</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        /* <example>Project A</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentProjectCodeOption { get; }

        /// <summary>
        /// The code of the parent project.  Mandatory for sub projects.
        /// </summary>
        /// <value>The code of the parent project.  Mandatory for sub projects.</value>
        /* <example>1</example> */
        [JsonPropertyName("ParentProjectCode")]
        public string? ParentProjectCode { get { return this.ParentProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ParentProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ParentProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the parent project.  Mandatory for sub projects.
        /// </summary>
        /// <value>The id of the parent project.  Mandatory for sub projects.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ParentProjectId")]
        public long? ParentProjectId { get { return this.ParentProjectIdOption; } set { this.ParentProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PaymentTermIdOption { get; private set; }

        /// <summary>
        /// The id of the payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.
        /// </summary>
        /// <value>The id of the payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.</value>
        /* <example>123456</example> */
        [JsonPropertyName("PaymentTermId")]
        public long? PaymentTermId { get { return this.PaymentTermIdOption; } set { this.PaymentTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentTerms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PaymentTermsOption { get; }

        /// <summary>
        /// The payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.
        /// </summary>
        /// <value>The payment term of the project.  This is the default number of days after an invoice is sent until it is due.  The payment term set will be the default value when an invoice draft is created in Go with this project (if customer is set an the project is billable).  If null, the default payment term set on the customer or on the client will be used.</value>
        /* <example>14</example> */
        [JsonPropertyName("PaymentTerms")]
        public int? PaymentTerms { get { return this.PaymentTermsOption; } }

        /// <summary>
        /// Used to track the state of Progress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProgressOption { get; private set; }

        /// <summary>
        /// Progress in percentage. If set, value must be between 0 and 100.
        /// </summary>
        /// <value>Progress in percentage. If set, value must be between 0 and 100.</value>
        /* <example>12</example> */
        [JsonPropertyName("Progress")]
        public int? Progress { get { return this.ProgressOption; } set { this.ProgressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectManagerEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectManagerEmployeeIdOption { get; private set; }

        /// <summary>
        /// The employee id of the manager of the project.
        /// </summary>
        /// <value>The employee id of the manager of the project.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectManagerEmployeeId")]
        public long? ProjectManagerEmployeeId { get { return this.ProjectManagerEmployeeIdOption; } set { this.ProjectManagerEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectManagerEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectManagerEmployeeNoOption { get; }

        /// <summary>
        /// The (employee) code of the project manager.
        /// </summary>
        /// <value>The (employee) code of the project manager.</value>
        /* <example>2</example> */
        [JsonPropertyName("ProjectManagerEmployeeNo")]
        public long? ProjectManagerEmployeeNo { get { return this.ProjectManagerEmployeeNoOption; } }

        /// <summary>
        /// Used to track the state of PurchaseOrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurchaseOrderNoOption { get; private set; }

        /// <summary>
        /// The purchase order number for this project.  If set, this purchase order number will also default appear on invoices when billing this project.
        /// </summary>
        /// <value>The purchase order number for this project.  If set, this purchase order number will also default appear on invoices when billing this project.</value>
        /* <example>1337</example> */
        [JsonPropertyName("PurchaseOrderNo")]
        public string? PurchaseOrderNo { get { return this.PurchaseOrderNoOption; } set { this.PurchaseOrderNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StartDateOption { get; private set; }

        /// <summary>
        /// The start date of the project.
        /// </summary>
        /// <value>The start date of the project.</value>
        /* <example>Wed Oct 26 02:00:00 CEST 2022</example> */
        [JsonPropertyName("StartDate")]
        public DateOnly? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectDto {\n");
            sb.Append("  AllowAllActivities: ").Append(AllowAllActivities).Append("\n");
            sb.Append("  AllowAllEmployees: ").Append(AllowAllEmployees).Append("\n");
            sb.Append("  AttachExpenseVouchersWhenBilling: ").Append(AttachExpenseVouchersWhenBilling).Append("\n");
            sb.Append("  BillableRate: ").Append(BillableRate).Append("\n");
            sb.Append("  BillableRateSpecification: ").Append(BillableRateSpecification).Append("\n");
            sb.Append("  BrandingThemeCode: ").Append(BrandingThemeCode).Append("\n");
            sb.Append("  BrandingThemeId: ").Append(BrandingThemeId).Append("\n");
            sb.Append("  BudgetedBillableRate: ").Append(BudgetedBillableRate).Append("\n");
            sb.Append("  BudgetedCostOfGoods: ").Append(BudgetedCostOfGoods).Append("\n");
            sb.Append("  BudgetedHours: ").Append(BudgetedHours).Append("\n");
            sb.Append("  BudgetedOtherOperatingExpenses: ").Append(BudgetedOtherOperatingExpenses).Append("\n");
            sb.Append("  BudgetedPayrollExpenses: ").Append(BudgetedPayrollExpenses).Append("\n");
            sb.Append("  BudgetedRevenueHours: ").Append(BudgetedRevenueHours).Append("\n");
            sb.Append("  BudgetedTotalRevenue: ").Append(BudgetedTotalRevenue).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ContactPersonId: ").Append(ContactPersonId).Append("\n");
            sb.Append("  ContractNo: ").Append(ContractNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  CustomerNo: ").Append(CustomerNo).Append("\n");
            sb.Append("  DeliveryTerm: ").Append(DeliveryTerm).Append("\n");
            sb.Append("  DeliveryTermId: ").Append(DeliveryTermId).Append("\n");
            sb.Append("  DenyTimeTracking: ").Append(DenyTimeTracking).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExpenseMarkupDescription: ").Append(ExpenseMarkupDescription).Append("\n");
            sb.Append("  ExpenseMarkupEnabled: ").Append(ExpenseMarkupEnabled).Append("\n");
            sb.Append("  ExpenseMarkupFactor: ").Append(ExpenseMarkupFactor).Append("\n");
            sb.Append("  ExternalNumber: ").Append(ExternalNumber).Append("\n");
            sb.Append("  FixedPrice: ").Append(FixedPrice).Append("\n");
            sb.Append("  HourlyRateMarkupDescription: ").Append(HourlyRateMarkupDescription).Append("\n");
            sb.Append("  HourlyRateMarkupEnabled: ").Append(HourlyRateMarkupEnabled).Append("\n");
            sb.Append("  HourlyRateMarkupFactor: ").Append(HourlyRateMarkupFactor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBillable: ").Append(IsBillable).Append("\n");
            sb.Append("  IsInternal: ").Append(IsInternal).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentProjectCode: ").Append(ParentProjectCode).Append("\n");
            sb.Append("  ParentProjectId: ").Append(ParentProjectId).Append("\n");
            sb.Append("  PaymentTermId: ").Append(PaymentTermId).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  ProjectBillingMethod: ").Append(ProjectBillingMethod).Append("\n");
            sb.Append("  ProjectManagerEmployeeId: ").Append(ProjectManagerEmployeeId).Append("\n");
            sb.Append("  ProjectManagerEmployeeNo: ").Append(ProjectManagerEmployeeNo).Append("\n");
            sb.Append("  ProjectStatus: ").Append(ProjectStatus).Append("\n");
            sb.Append("  PurchaseOrderNo: ").Append(PurchaseOrderNo).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Progress (int) maximum
            if (this.ProgressOption.IsSet && this.ProgressOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for Progress, must be a value less than or equal to 100.", new [] { "Progress" });
            }

            // Progress (int) minimum
            if (this.ProgressOption.IsSet && this.ProgressOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for Progress, must be a value greater than or equal to 0.", new [] { "Progress" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectDto" />
    /// </summary>
    public class ProjectDtoJsonConverter : JsonConverter<ProjectDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ProjectDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProjectDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> allowAllActivities = default;
            Option<bool?> allowAllEmployees = default;
            Option<bool?> attachExpenseVouchersWhenBilling = default;
            Option<double?> billableRate = default;
            Option<BillableRateSpecification?> billableRateSpecification = default;
            Option<string?> brandingThemeCode = default;
            Option<long?> brandingThemeId = default;
            Option<double?> budgetedBillableRate = default;
            Option<double?> budgetedCostOfGoods = default;
            Option<double?> budgetedHours = default;
            Option<double?> budgetedOtherOperatingExpenses = default;
            Option<double?> budgetedPayrollExpenses = default;
            Option<double?> budgetedRevenueHours = default;
            Option<double?> budgetedTotalRevenue = default;
            Option<string?> code = default;
            Option<long?> contactPersonId = default;
            Option<string?> contractNo = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<long?> customerId = default;
            Option<long?> customerNo = default;
            Option<string?> deliveryTerm = default;
            Option<long?> deliveryTermId = default;
            Option<bool?> denyTimeTracking = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<DateOnly?> endDate = default;
            Option<string?> expenseMarkupDescription = default;
            Option<bool?> expenseMarkupEnabled = default;
            Option<double?> expenseMarkupFactor = default;
            Option<long?> externalNumber = default;
            Option<double?> fixedPrice = default;
            Option<string?> hourlyRateMarkupDescription = default;
            Option<bool?> hourlyRateMarkupEnabled = default;
            Option<double?> hourlyRateMarkupFactor = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<bool?> isBillable = default;
            Option<bool?> isInternal = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<string?> name = default;
            Option<string?> parentProjectCode = default;
            Option<long?> parentProjectId = default;
            Option<long?> paymentTermId = default;
            Option<int?> paymentTerms = default;
            Option<int?> progress = default;
            Option<ProjectBillingMethod?> projectBillingMethod = default;
            Option<long?> projectManagerEmployeeId = default;
            Option<long?> projectManagerEmployeeNo = default;
            Option<ProjectStatusType?> projectStatus = default;
            Option<string?> purchaseOrderNo = default;
            Option<DateOnly?> startDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AllowAllActivities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowAllActivities = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AllowAllEmployees":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowAllEmployees = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AttachExpenseVouchersWhenBilling":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachExpenseVouchersWhenBilling = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "BillableRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                billableRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BillableRateSpecification":
                            string? billableRateSpecificationRawValue = utf8JsonReader.GetString();
                            if (billableRateSpecificationRawValue != null)
                                billableRateSpecification = new Option<BillableRateSpecification?>(BillableRateSpecificationValueConverter.FromStringOrDefault(billableRateSpecificationRawValue));
                            break;
                        case "BrandingThemeCode":
                            brandingThemeCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "BrandingThemeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                brandingThemeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "BudgetedBillableRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedBillableRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedCostOfGoods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedCostOfGoods = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedHours = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedOtherOperatingExpenses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedOtherOperatingExpenses = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedPayrollExpenses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedPayrollExpenses = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedRevenueHours":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedRevenueHours = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BudgetedTotalRevenue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                budgetedTotalRevenue = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ContactPersonId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactPersonId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ContractNo":
                            contractNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CustomerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DeliveryTerm":
                            deliveryTerm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DenyTimeTracking":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                denyTimeTracking = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExpenseMarkupDescription":
                            expenseMarkupDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExpenseMarkupEnabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expenseMarkupEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ExpenseMarkupFactor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expenseMarkupFactor = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ExternalNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                externalNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FixedPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fixedPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "HourlyRateMarkupDescription":
                            hourlyRateMarkupDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "HourlyRateMarkupEnabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hourlyRateMarkupEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "HourlyRateMarkupFactor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hourlyRateMarkupFactor = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsBillable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isBillable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsInternal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isInternal = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ParentProjectCode":
                            parentProjectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ParentProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parentProjectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PaymentTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PaymentTerms":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentTerms = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "Progress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                progress = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProjectBillingMethod":
                            string? projectBillingMethodRawValue = utf8JsonReader.GetString();
                            if (projectBillingMethodRawValue != null)
                                projectBillingMethod = new Option<ProjectBillingMethod?>(ProjectBillingMethodValueConverter.FromStringOrDefault(projectBillingMethodRawValue));
                            break;
                        case "ProjectManagerEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectManagerEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectManagerEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectManagerEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectStatus":
                            string? projectStatusRawValue = utf8JsonReader.GetString();
                            if (projectStatusRawValue != null)
                                projectStatus = new Option<ProjectStatusType?>(ProjectStatusTypeValueConverter.FromStringOrDefault(projectStatusRawValue));
                            break;
                        case "PurchaseOrderNo":
                            purchaseOrderNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class ProjectDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ProjectDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class ProjectDto.");

            return new ProjectDto(allowAllActivities, allowAllEmployees, attachExpenseVouchersWhenBilling, billableRate, billableRateSpecification, brandingThemeCode, brandingThemeId, budgetedBillableRate, budgetedCostOfGoods, budgetedHours, budgetedOtherOperatingExpenses, budgetedPayrollExpenses, budgetedRevenueHours, budgetedTotalRevenue, code, contactPersonId, contractNo, createdDateTimeOffset, createdFromImportJournalId, customerId, customerNo, deliveryTerm, deliveryTermId, denyTimeTracking, departmentCode, departmentId, endDate, expenseMarkupDescription, expenseMarkupEnabled, expenseMarkupFactor, externalNumber, fixedPrice, hourlyRateMarkupDescription, hourlyRateMarkupEnabled, hourlyRateMarkupFactor, id, isActive, isBillable, isInternal, lastChangedDateTimeOffset, locationCode, locationId, name, parentProjectCode, parentProjectId, paymentTermId, paymentTerms, progress, projectBillingMethod, projectManagerEmployeeId, projectManagerEmployeeNo, projectStatus, purchaseOrderNo, startDate);
        }

        /// <summary>
        /// Serializes a <see cref="ProjectDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProjectDto projectDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, projectDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProjectDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProjectDto projectDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (projectDto.AllowAllActivitiesOption.IsSet)
                if (projectDto.AllowAllActivitiesOption.Value != null)
                    writer.WriteBoolean("AllowAllActivities", projectDto.AllowAllActivitiesOption.Value!.Value);
                else
                    writer.WriteNull("AllowAllActivities");

            if (projectDto.AllowAllEmployeesOption.IsSet)
                if (projectDto.AllowAllEmployeesOption.Value != null)
                    writer.WriteBoolean("AllowAllEmployees", projectDto.AllowAllEmployeesOption.Value!.Value);
                else
                    writer.WriteNull("AllowAllEmployees");

            if (projectDto.AttachExpenseVouchersWhenBillingOption.IsSet)
                if (projectDto.AttachExpenseVouchersWhenBillingOption.Value != null)
                    writer.WriteBoolean("AttachExpenseVouchersWhenBilling", projectDto.AttachExpenseVouchersWhenBillingOption.Value!.Value);
                else
                    writer.WriteNull("AttachExpenseVouchersWhenBilling");

            if (projectDto.BillableRateOption.IsSet)
                if (projectDto.BillableRateOption.Value != null)
                    writer.WriteNumber("BillableRate", projectDto.BillableRateOption.Value!.Value);
                else
                    writer.WriteNull("BillableRate");

            if (projectDto.BillableRateSpecificationOption.IsSet)
                if (projectDto.BillableRateSpecificationOption!.Value != null)
                {
                    var billableRateSpecificationRawValue = BillableRateSpecificationValueConverter.ToJsonValue(projectDto.BillableRateSpecificationOption.Value!.Value);
                    writer.WriteString("BillableRateSpecification", billableRateSpecificationRawValue);
                }
                else
                    writer.WriteNull("BillableRateSpecification");
            if (projectDto.BrandingThemeCodeOption.IsSet)
                if (projectDto.BrandingThemeCodeOption.Value != null)
                    writer.WriteString("BrandingThemeCode", projectDto.BrandingThemeCode);
                else
                    writer.WriteNull("BrandingThemeCode");

            if (projectDto.BrandingThemeIdOption.IsSet)
                if (projectDto.BrandingThemeIdOption.Value != null)
                    writer.WriteNumber("BrandingThemeId", projectDto.BrandingThemeIdOption.Value!.Value);
                else
                    writer.WriteNull("BrandingThemeId");

            if (projectDto.BudgetedBillableRateOption.IsSet)
                if (projectDto.BudgetedBillableRateOption.Value != null)
                    writer.WriteNumber("BudgetedBillableRate", projectDto.BudgetedBillableRateOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedBillableRate");

            if (projectDto.BudgetedCostOfGoodsOption.IsSet)
                if (projectDto.BudgetedCostOfGoodsOption.Value != null)
                    writer.WriteNumber("BudgetedCostOfGoods", projectDto.BudgetedCostOfGoodsOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedCostOfGoods");

            if (projectDto.BudgetedHoursOption.IsSet)
                if (projectDto.BudgetedHoursOption.Value != null)
                    writer.WriteNumber("BudgetedHours", projectDto.BudgetedHoursOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedHours");

            if (projectDto.BudgetedOtherOperatingExpensesOption.IsSet)
                if (projectDto.BudgetedOtherOperatingExpensesOption.Value != null)
                    writer.WriteNumber("BudgetedOtherOperatingExpenses", projectDto.BudgetedOtherOperatingExpensesOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedOtherOperatingExpenses");

            if (projectDto.BudgetedPayrollExpensesOption.IsSet)
                if (projectDto.BudgetedPayrollExpensesOption.Value != null)
                    writer.WriteNumber("BudgetedPayrollExpenses", projectDto.BudgetedPayrollExpensesOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedPayrollExpenses");

            if (projectDto.BudgetedRevenueHoursOption.IsSet)
                if (projectDto.BudgetedRevenueHoursOption.Value != null)
                    writer.WriteNumber("BudgetedRevenueHours", projectDto.BudgetedRevenueHoursOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedRevenueHours");

            if (projectDto.BudgetedTotalRevenueOption.IsSet)
                if (projectDto.BudgetedTotalRevenueOption.Value != null)
                    writer.WriteNumber("BudgetedTotalRevenue", projectDto.BudgetedTotalRevenueOption.Value!.Value);
                else
                    writer.WriteNull("BudgetedTotalRevenue");

            if (projectDto.CodeOption.IsSet)
                if (projectDto.CodeOption.Value != null)
                    writer.WriteString("Code", projectDto.Code);
                else
                    writer.WriteNull("Code");

            if (projectDto.ContactPersonIdOption.IsSet)
                if (projectDto.ContactPersonIdOption.Value != null)
                    writer.WriteNumber("ContactPersonId", projectDto.ContactPersonIdOption.Value!.Value);
                else
                    writer.WriteNull("ContactPersonId");

            if (projectDto.ContractNoOption.IsSet)
                if (projectDto.ContractNoOption.Value != null)
                    writer.WriteString("ContractNo", projectDto.ContractNo);
                else
                    writer.WriteNull("ContractNo");

            if (projectDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", projectDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (projectDto.CreatedFromImportJournalIdOption.IsSet)
                if (projectDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", projectDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (projectDto.CustomerIdOption.IsSet)
                if (projectDto.CustomerIdOption.Value != null)
                    writer.WriteNumber("CustomerId", projectDto.CustomerIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerId");

            if (projectDto.CustomerNoOption.IsSet)
                if (projectDto.CustomerNoOption.Value != null)
                    writer.WriteNumber("CustomerNo", projectDto.CustomerNoOption.Value!.Value);
                else
                    writer.WriteNull("CustomerNo");

            if (projectDto.DeliveryTermOption.IsSet)
                if (projectDto.DeliveryTermOption.Value != null)
                    writer.WriteString("DeliveryTerm", projectDto.DeliveryTerm);
                else
                    writer.WriteNull("DeliveryTerm");

            if (projectDto.DeliveryTermIdOption.IsSet)
                if (projectDto.DeliveryTermIdOption.Value != null)
                    writer.WriteNumber("DeliveryTermId", projectDto.DeliveryTermIdOption.Value!.Value);
                else
                    writer.WriteNull("DeliveryTermId");

            if (projectDto.DenyTimeTrackingOption.IsSet)
                if (projectDto.DenyTimeTrackingOption.Value != null)
                    writer.WriteBoolean("DenyTimeTracking", projectDto.DenyTimeTrackingOption.Value!.Value);
                else
                    writer.WriteNull("DenyTimeTracking");

            if (projectDto.DepartmentCodeOption.IsSet)
                if (projectDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", projectDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (projectDto.DepartmentIdOption.IsSet)
                if (projectDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", projectDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (projectDto.EndDateOption.IsSet)
                if (projectDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", projectDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (projectDto.ExpenseMarkupDescriptionOption.IsSet)
                if (projectDto.ExpenseMarkupDescriptionOption.Value != null)
                    writer.WriteString("ExpenseMarkupDescription", projectDto.ExpenseMarkupDescription);
                else
                    writer.WriteNull("ExpenseMarkupDescription");

            if (projectDto.ExpenseMarkupEnabledOption.IsSet)
                if (projectDto.ExpenseMarkupEnabledOption.Value != null)
                    writer.WriteBoolean("ExpenseMarkupEnabled", projectDto.ExpenseMarkupEnabledOption.Value!.Value);
                else
                    writer.WriteNull("ExpenseMarkupEnabled");

            if (projectDto.ExpenseMarkupFactorOption.IsSet)
                if (projectDto.ExpenseMarkupFactorOption.Value != null)
                    writer.WriteNumber("ExpenseMarkupFactor", projectDto.ExpenseMarkupFactorOption.Value!.Value);
                else
                    writer.WriteNull("ExpenseMarkupFactor");

            if (projectDto.ExternalNumberOption.IsSet)
                if (projectDto.ExternalNumberOption.Value != null)
                    writer.WriteNumber("ExternalNumber", projectDto.ExternalNumberOption.Value!.Value);
                else
                    writer.WriteNull("ExternalNumber");

            if (projectDto.FixedPriceOption.IsSet)
                if (projectDto.FixedPriceOption.Value != null)
                    writer.WriteNumber("FixedPrice", projectDto.FixedPriceOption.Value!.Value);
                else
                    writer.WriteNull("FixedPrice");

            if (projectDto.HourlyRateMarkupDescriptionOption.IsSet)
                if (projectDto.HourlyRateMarkupDescriptionOption.Value != null)
                    writer.WriteString("HourlyRateMarkupDescription", projectDto.HourlyRateMarkupDescription);
                else
                    writer.WriteNull("HourlyRateMarkupDescription");

            if (projectDto.HourlyRateMarkupEnabledOption.IsSet)
                if (projectDto.HourlyRateMarkupEnabledOption.Value != null)
                    writer.WriteBoolean("HourlyRateMarkupEnabled", projectDto.HourlyRateMarkupEnabledOption.Value!.Value);
                else
                    writer.WriteNull("HourlyRateMarkupEnabled");

            if (projectDto.HourlyRateMarkupFactorOption.IsSet)
                if (projectDto.HourlyRateMarkupFactorOption.Value != null)
                    writer.WriteNumber("HourlyRateMarkupFactor", projectDto.HourlyRateMarkupFactorOption.Value!.Value);
                else
                    writer.WriteNull("HourlyRateMarkupFactor");

            if (projectDto.IdOption.IsSet)
                writer.WriteNumber("Id", projectDto.IdOption.Value!.Value);

            if (projectDto.IsActiveOption.IsSet)
                if (projectDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", projectDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (projectDto.IsBillableOption.IsSet)
                if (projectDto.IsBillableOption.Value != null)
                    writer.WriteBoolean("IsBillable", projectDto.IsBillableOption.Value!.Value);
                else
                    writer.WriteNull("IsBillable");

            if (projectDto.IsInternalOption.IsSet)
                if (projectDto.IsInternalOption.Value != null)
                    writer.WriteBoolean("IsInternal", projectDto.IsInternalOption.Value!.Value);
                else
                    writer.WriteNull("IsInternal");

            if (projectDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", projectDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (projectDto.LocationCodeOption.IsSet)
                if (projectDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", projectDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (projectDto.LocationIdOption.IsSet)
                if (projectDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", projectDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (projectDto.NameOption.IsSet)
                if (projectDto.NameOption.Value != null)
                    writer.WriteString("Name", projectDto.Name);
                else
                    writer.WriteNull("Name");

            if (projectDto.ParentProjectCodeOption.IsSet)
                if (projectDto.ParentProjectCodeOption.Value != null)
                    writer.WriteString("ParentProjectCode", projectDto.ParentProjectCode);
                else
                    writer.WriteNull("ParentProjectCode");

            if (projectDto.ParentProjectIdOption.IsSet)
                if (projectDto.ParentProjectIdOption.Value != null)
                    writer.WriteNumber("ParentProjectId", projectDto.ParentProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ParentProjectId");

            if (projectDto.PaymentTermIdOption.IsSet)
                if (projectDto.PaymentTermIdOption.Value != null)
                    writer.WriteNumber("PaymentTermId", projectDto.PaymentTermIdOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTermId");

            if (projectDto.PaymentTermsOption.IsSet)
                if (projectDto.PaymentTermsOption.Value != null)
                    writer.WriteNumber("PaymentTerms", projectDto.PaymentTermsOption.Value!.Value);
                else
                    writer.WriteNull("PaymentTerms");

            if (projectDto.ProgressOption.IsSet)
                if (projectDto.ProgressOption.Value != null)
                    writer.WriteNumber("Progress", projectDto.ProgressOption.Value!.Value);
                else
                    writer.WriteNull("Progress");

            if (projectDto.ProjectBillingMethodOption.IsSet)
                if (projectDto.ProjectBillingMethodOption!.Value != null)
                {
                    var projectBillingMethodRawValue = ProjectBillingMethodValueConverter.ToJsonValue(projectDto.ProjectBillingMethodOption.Value!.Value);
                    writer.WriteString("ProjectBillingMethod", projectBillingMethodRawValue);
                }
                else
                    writer.WriteNull("ProjectBillingMethod");
            if (projectDto.ProjectManagerEmployeeIdOption.IsSet)
                if (projectDto.ProjectManagerEmployeeIdOption.Value != null)
                    writer.WriteNumber("ProjectManagerEmployeeId", projectDto.ProjectManagerEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectManagerEmployeeId");

            if (projectDto.ProjectManagerEmployeeNoOption.IsSet)
                if (projectDto.ProjectManagerEmployeeNoOption.Value != null)
                    writer.WriteNumber("ProjectManagerEmployeeNo", projectDto.ProjectManagerEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("ProjectManagerEmployeeNo");

            if (projectDto.ProjectStatusOption.IsSet)
                if (projectDto.ProjectStatusOption!.Value != null)
                {
                    var projectStatusRawValue = ProjectStatusTypeValueConverter.ToJsonValue(projectDto.ProjectStatusOption.Value!.Value);
                    writer.WriteString("ProjectStatus", projectStatusRawValue);
                }
                else
                    writer.WriteNull("ProjectStatus");
            if (projectDto.PurchaseOrderNoOption.IsSet)
                if (projectDto.PurchaseOrderNoOption.Value != null)
                    writer.WriteString("PurchaseOrderNo", projectDto.PurchaseOrderNo);
                else
                    writer.WriteNull("PurchaseOrderNo");

            if (projectDto.StartDateOption.IsSet)
                if (projectDto.StartDateOption.Value != null)
                    writer.WriteString("StartDate", projectDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
                else
                    writer.WriteNull("StartDate");
        }
    }
}
