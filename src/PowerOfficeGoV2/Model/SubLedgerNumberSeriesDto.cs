// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The subledger number series DTO contains all properties relevant to subledger number series.
    /// </summary>
    public partial class SubLedgerNumberSeriesDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubLedgerNumberSeriesDto" /> class.
        /// </summary>
        /// <param name="fromInclusive">The minimum number the subledger accounts in this series can have</param>
        /// <param name="generalLedgerAccountId">The underlying general ledger account ID of the subledger series.</param>
        /// <param name="generalLedgerAccountNo">The underlying general ledger account code of this subledger series.  Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account.  More information of accounts can be retrieved using the GeneralLedgerAccount service.</param>
        /// <param name="id">The unique identifier of the subledger number series.</param>
        /// <param name="isClientTrust">The value indicating whether this number series is used by accounts that contain client trust funds.  Client trust accounts are accounts where realtors or lawyers, for instance, handles their clients&#39; money.  Can be true if the client have the FinancialSettings.UseTrustAccountManagement set true.</param>
        /// <param name="isDefault">The value indicating whether this instance is the default number series for that subledger numberSeriesType.</param>
        /// <param name="name">The name of the subledger number series.</param>
        /// <param name="subLedgerNumberSeriesType">subLedgerNumberSeriesType</param>
        /// <param name="toInclusive">The maximum number the subledger accounts in this series can have.</param>
        [JsonConstructor]
        public SubLedgerNumberSeriesDto(Option<long?> fromInclusive = default, Option<long?> generalLedgerAccountId = default, Option<long?> generalLedgerAccountNo = default, Option<Guid?> id = default, Option<bool?> isClientTrust = default, Option<bool?> isDefault = default, Option<string?> name = default, Option<SubLedgerNumberSeriesType?> subLedgerNumberSeriesType = default, Option<long?> toInclusive = default)
        {
            FromInclusiveOption = fromInclusive;
            GeneralLedgerAccountIdOption = generalLedgerAccountId;
            GeneralLedgerAccountNoOption = generalLedgerAccountNo;
            IdOption = id;
            IsClientTrustOption = isClientTrust;
            IsDefaultOption = isDefault;
            NameOption = name;
            SubLedgerNumberSeriesTypeOption = subLedgerNumberSeriesType;
            ToInclusiveOption = toInclusive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SubLedgerNumberSeriesType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubLedgerNumberSeriesType?> SubLedgerNumberSeriesTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubLedgerNumberSeriesType
        /// </summary>
        [JsonPropertyName("SubLedgerNumberSeriesType")]
        public SubLedgerNumberSeriesType? SubLedgerNumberSeriesType { get { return this.SubLedgerNumberSeriesTypeOption; } set { this.SubLedgerNumberSeriesTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromInclusive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FromInclusiveOption { get; }

        /// <summary>
        /// The minimum number the subledger accounts in this series can have
        /// </summary>
        /// <value>The minimum number the subledger accounts in this series can have</value>
        /* <example>10000</example> */
        [JsonPropertyName("FromInclusive")]
        public long? FromInclusive { get { return this.FromInclusiveOption; } }

        /// <summary>
        /// Used to track the state of GeneralLedgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GeneralLedgerAccountIdOption { get; }

        /// <summary>
        /// The underlying general ledger account ID of the subledger series.
        /// </summary>
        /// <value>The underlying general ledger account ID of the subledger series.</value>
        [JsonPropertyName("GeneralLedgerAccountId")]
        public long? GeneralLedgerAccountId { get { return this.GeneralLedgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of GeneralLedgerAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GeneralLedgerAccountNoOption { get; }

        /// <summary>
        /// The underlying general ledger account code of this subledger series.  Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account.  More information of accounts can be retrieved using the GeneralLedgerAccount service.
        /// </summary>
        /// <value>The underlying general ledger account code of this subledger series.  Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account.  More information of accounts can be retrieved using the GeneralLedgerAccount service.</value>
        /* <example>1500</example> */
        [JsonPropertyName("GeneralLedgerAccountNo")]
        public long? GeneralLedgerAccountNo { get { return this.GeneralLedgerAccountNoOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The unique identifier of the subledger number series.
        /// </summary>
        /// <value>The unique identifier of the subledger number series.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsClientTrust
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsClientTrustOption { get; }

        /// <summary>
        /// The value indicating whether this number series is used by accounts that contain client trust funds.  Client trust accounts are accounts where realtors or lawyers, for instance, handles their clients&#39; money.  Can be true if the client have the FinancialSettings.UseTrustAccountManagement set true.
        /// </summary>
        /// <value>The value indicating whether this number series is used by accounts that contain client trust funds.  Client trust accounts are accounts where realtors or lawyers, for instance, handles their clients&#39; money.  Can be true if the client have the FinancialSettings.UseTrustAccountManagement set true.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsClientTrust")]
        public bool? IsClientTrust { get { return this.IsClientTrustOption; } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; }

        /// <summary>
        /// The value indicating whether this instance is the default number series for that subledger numberSeriesType.
        /// </summary>
        /// <value>The value indicating whether this instance is the default number series for that subledger numberSeriesType.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsDefault")]
        public bool? IsDefault { get { return this.IsDefaultOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; }

        /// <summary>
        /// The name of the subledger number series.
        /// </summary>
        /// <value>The name of the subledger number series.</value>
        /* <example>Kunder</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } }

        /// <summary>
        /// Used to track the state of ToInclusive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ToInclusiveOption { get; }

        /// <summary>
        /// The maximum number the subledger accounts in this series can have.
        /// </summary>
        /// <value>The maximum number the subledger accounts in this series can have.</value>
        /* <example>19999</example> */
        [JsonPropertyName("ToInclusive")]
        public long? ToInclusive { get { return this.ToInclusiveOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubLedgerNumberSeriesDto {\n");
            sb.Append("  FromInclusive: ").Append(FromInclusive).Append("\n");
            sb.Append("  GeneralLedgerAccountId: ").Append(GeneralLedgerAccountId).Append("\n");
            sb.Append("  GeneralLedgerAccountNo: ").Append(GeneralLedgerAccountNo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsClientTrust: ").Append(IsClientTrust).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubLedgerNumberSeriesType: ").Append(SubLedgerNumberSeriesType).Append("\n");
            sb.Append("  ToInclusive: ").Append(ToInclusive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubLedgerNumberSeriesDto" />
    /// </summary>
    public class SubLedgerNumberSeriesDtoJsonConverter : JsonConverter<SubLedgerNumberSeriesDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubLedgerNumberSeriesDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubLedgerNumberSeriesDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> fromInclusive = default;
            Option<long?> generalLedgerAccountId = default;
            Option<long?> generalLedgerAccountNo = default;
            Option<Guid?> id = default;
            Option<bool?> isClientTrust = default;
            Option<bool?> isDefault = default;
            Option<string?> name = default;
            Option<SubLedgerNumberSeriesType?> subLedgerNumberSeriesType = default;
            Option<long?> toInclusive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FromInclusive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromInclusive = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "GeneralLedgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                generalLedgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "GeneralLedgerAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                generalLedgerAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "IsClientTrust":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isClientTrust = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SubLedgerNumberSeriesType":
                            string? subLedgerNumberSeriesTypeRawValue = utf8JsonReader.GetString();
                            if (subLedgerNumberSeriesTypeRawValue != null)
                                subLedgerNumberSeriesType = new Option<SubLedgerNumberSeriesType?>(SubLedgerNumberSeriesTypeValueConverter.FromStringOrDefault(subLedgerNumberSeriesTypeRawValue));
                            break;
                        case "ToInclusive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toInclusive = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (fromInclusive.IsSet && fromInclusive.Value == null)
                throw new ArgumentNullException(nameof(fromInclusive), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (generalLedgerAccountId.IsSet && generalLedgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(generalLedgerAccountId), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (generalLedgerAccountNo.IsSet && generalLedgerAccountNo.Value == null)
                throw new ArgumentNullException(nameof(generalLedgerAccountNo), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (isClientTrust.IsSet && isClientTrust.Value == null)
                throw new ArgumentNullException(nameof(isClientTrust), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            if (toInclusive.IsSet && toInclusive.Value == null)
                throw new ArgumentNullException(nameof(toInclusive), "Property is not nullable for class SubLedgerNumberSeriesDto.");

            return new SubLedgerNumberSeriesDto(fromInclusive, generalLedgerAccountId, generalLedgerAccountNo, id, isClientTrust, isDefault, name, subLedgerNumberSeriesType, toInclusive);
        }

        /// <summary>
        /// Serializes a <see cref="SubLedgerNumberSeriesDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subLedgerNumberSeriesDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubLedgerNumberSeriesDto subLedgerNumberSeriesDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subLedgerNumberSeriesDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubLedgerNumberSeriesDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subLedgerNumberSeriesDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubLedgerNumberSeriesDto subLedgerNumberSeriesDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subLedgerNumberSeriesDto.FromInclusiveOption.IsSet)
                writer.WriteNumber("FromInclusive", subLedgerNumberSeriesDto.FromInclusiveOption.Value!.Value);

            if (subLedgerNumberSeriesDto.GeneralLedgerAccountIdOption.IsSet)
                writer.WriteNumber("GeneralLedgerAccountId", subLedgerNumberSeriesDto.GeneralLedgerAccountIdOption.Value!.Value);

            if (subLedgerNumberSeriesDto.GeneralLedgerAccountNoOption.IsSet)
                writer.WriteNumber("GeneralLedgerAccountNo", subLedgerNumberSeriesDto.GeneralLedgerAccountNoOption.Value!.Value);

            if (subLedgerNumberSeriesDto.IdOption.IsSet)
                writer.WriteString("Id", subLedgerNumberSeriesDto.IdOption.Value!.Value);

            if (subLedgerNumberSeriesDto.IsClientTrustOption.IsSet)
                writer.WriteBoolean("IsClientTrust", subLedgerNumberSeriesDto.IsClientTrustOption.Value!.Value);

            if (subLedgerNumberSeriesDto.IsDefaultOption.IsSet)
                writer.WriteBoolean("IsDefault", subLedgerNumberSeriesDto.IsDefaultOption.Value!.Value);

            if (subLedgerNumberSeriesDto.NameOption.IsSet)
                if (subLedgerNumberSeriesDto.NameOption.Value != null)
                    writer.WriteString("Name", subLedgerNumberSeriesDto.Name);
                else
                    writer.WriteNull("Name");

            if (subLedgerNumberSeriesDto.SubLedgerNumberSeriesTypeOption.IsSet)
                if (subLedgerNumberSeriesDto.SubLedgerNumberSeriesTypeOption!.Value != null)
                {
                    var subLedgerNumberSeriesTypeRawValue = SubLedgerNumberSeriesTypeValueConverter.ToJsonValue(subLedgerNumberSeriesDto.SubLedgerNumberSeriesTypeOption.Value!.Value);
                    writer.WriteString("SubLedgerNumberSeriesType", subLedgerNumberSeriesTypeRawValue);
                }
                else
                    writer.WriteNull("SubLedgerNumberSeriesType");
            if (subLedgerNumberSeriesDto.ToInclusiveOption.IsSet)
                writer.WriteNumber("ToInclusive", subLedgerNumberSeriesDto.ToInclusiveOption.Value!.Value);
        }
    }
}
