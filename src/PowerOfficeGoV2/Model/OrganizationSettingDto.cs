// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Properties related to Organization Settings in PowerOffice Go.
    /// </summary>
    public partial class OrganizationSettingDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationSettingDto" /> class.
        /// </summary>
        /// <param name="defaultAgricultureDepartment">defaultAgricultureDepartment</param>
        /// <param name="deliveryAddress">deliveryAddress</param>
        /// <param name="emailAddress">The e-mail address registered for the client.</param>
        /// <param name="id">The unique id the client have in PowerOffice Go.</param>
        /// <param name="invoiceInboxEhf">Indicates whether the client is registered in ELMA and can receive incoming invoices by EHF.</param>
        /// <param name="invoiceInboxEmail">Indicates whether the client have an e-mail set for receiving invoices by e-mail directly to the client.</param>
        /// <param name="invoiceInboxEmailAddress">The voucher e-mail of the client, if set.  Used only if invoiceInboxEmail is true.  This e-mail can be used to send vouchers (supplier invoices etc) to the client.  Often used by suppliers, if they are unable to send EHF invoices to this client.  For a client in production the address will always be in the form @faktura.poweroffice.net.</param>
        /// <param name="isAgricultureClient">Indicates whether this client is an agriculture client and therefore uses NIBIO&#39;s agricultural chart of accounts requiring agricultural department on it&#39;s accounts.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change. Last changed will update when the settings are created, or whenever the settings are changed.</param>
        /// <param name="legalName">The legal name of the client. The legal name is the formal name, and might differ from the marketing name.</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="mailAddressIsDeliveryAddress">A property indicating whether the client have set the delivery address equal to the mail address. If so, the content of the property deliveryAddress can be ignored.</param>
        /// <param name="name">The name of the client.</param>
        /// <param name="organizationNumber">The organization number of the client.</param>
        /// <param name="phoneNumber">The phone number registered on the client.</param>
        /// <param name="websiteUrl">The website url registered on the client.</param>
        [JsonConstructor]
        public OrganizationSettingDto(Option<AgricultureDepartment?> defaultAgricultureDepartment = default, Option<Address?> deliveryAddress = default, Option<string?> emailAddress = default, Option<Guid?> id = default, Option<bool?> invoiceInboxEhf = default, Option<bool?> invoiceInboxEmail = default, Option<string?> invoiceInboxEmailAddress = default, Option<bool?> isAgricultureClient = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> legalName = default, Option<Address?> mailAddress = default, Option<bool?> mailAddressIsDeliveryAddress = default, Option<string?> name = default, Option<string?> organizationNumber = default, Option<string?> phoneNumber = default, Option<string?> websiteUrl = default)
        {
            DefaultAgricultureDepartmentOption = defaultAgricultureDepartment;
            DeliveryAddressOption = deliveryAddress;
            EmailAddressOption = emailAddress;
            IdOption = id;
            InvoiceInboxEhfOption = invoiceInboxEhf;
            InvoiceInboxEmailOption = invoiceInboxEmail;
            InvoiceInboxEmailAddressOption = invoiceInboxEmailAddress;
            IsAgricultureClientOption = isAgricultureClient;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LegalNameOption = legalName;
            MailAddressOption = mailAddress;
            MailAddressIsDeliveryAddressOption = mailAddressIsDeliveryAddress;
            NameOption = name;
            OrganizationNumberOption = organizationNumber;
            PhoneNumberOption = phoneNumber;
            WebsiteUrlOption = websiteUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DefaultAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> DefaultAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultAgricultureDepartment
        /// </summary>
        [JsonPropertyName("DefaultAgricultureDepartment")]
        public AgricultureDepartment? DefaultAgricultureDepartment { get { return this.DefaultAgricultureDepartmentOption; } set { this.DefaultAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address?> DeliveryAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryAddress
        /// </summary>
        [JsonPropertyName("DeliveryAddress")]
        public Address? DeliveryAddress { get { return this.DeliveryAddressOption; } set { this.DeliveryAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; }

        /// <summary>
        /// The e-mail address registered for the client.
        /// </summary>
        /// <value>The e-mail address registered for the client.</value>
        /* <example>mail@example.com</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get { return this.EmailAddressOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The unique id the client have in PowerOffice Go.
        /// </summary>
        /// <value>The unique id the client have in PowerOffice Go.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceInboxEhf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InvoiceInboxEhfOption { get; }

        /// <summary>
        /// Indicates whether the client is registered in ELMA and can receive incoming invoices by EHF.
        /// </summary>
        /// <value>Indicates whether the client is registered in ELMA and can receive incoming invoices by EHF.</value>
        /* <example>true</example> */
        [JsonPropertyName("InvoiceInboxEhf")]
        public bool? InvoiceInboxEhf { get { return this.InvoiceInboxEhfOption; } }

        /// <summary>
        /// Used to track the state of InvoiceInboxEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InvoiceInboxEmailOption { get; }

        /// <summary>
        /// Indicates whether the client have an e-mail set for receiving invoices by e-mail directly to the client.
        /// </summary>
        /// <value>Indicates whether the client have an e-mail set for receiving invoices by e-mail directly to the client.</value>
        /* <example>true</example> */
        [JsonPropertyName("InvoiceInboxEmail")]
        public bool? InvoiceInboxEmail { get { return this.InvoiceInboxEmailOption; } }

        /// <summary>
        /// Used to track the state of InvoiceInboxEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceInboxEmailAddressOption { get; }

        /// <summary>
        /// The voucher e-mail of the client, if set.  Used only if invoiceInboxEmail is true.  This e-mail can be used to send vouchers (supplier invoices etc) to the client.  Often used by suppliers, if they are unable to send EHF invoices to this client.  For a client in production the address will always be in the form @faktura.poweroffice.net.
        /// </summary>
        /// <value>The voucher e-mail of the client, if set.  Used only if invoiceInboxEmail is true.  This e-mail can be used to send vouchers (supplier invoices etc) to the client.  Often used by suppliers, if they are unable to send EHF invoices to this client.  For a client in production the address will always be in the form @faktura.poweroffice.net.</value>
        /* <example>abc-as@faktura.poweroffice.net</example> */
        [JsonPropertyName("InvoiceInboxEmailAddress")]
        public string? InvoiceInboxEmailAddress { get { return this.InvoiceInboxEmailAddressOption; } }

        /// <summary>
        /// Used to track the state of IsAgricultureClient
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAgricultureClientOption { get; }

        /// <summary>
        /// Indicates whether this client is an agriculture client and therefore uses NIBIO&#39;s agricultural chart of accounts requiring agricultural department on it&#39;s accounts.
        /// </summary>
        /// <value>Indicates whether this client is an agriculture client and therefore uses NIBIO&#39;s agricultural chart of accounts requiring agricultural department on it&#39;s accounts.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsAgricultureClient")]
        public bool? IsAgricultureClient { get { return this.IsAgricultureClientOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change. Last changed will update when the settings are created, or whenever the settings are changed.
        /// </summary>
        /// <value>The timestamp of the last change. Last changed will update when the settings are created, or whenever the settings are changed.</value>
        /* <example>2022-07-11T11:32:59.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LegalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LegalNameOption { get; }

        /// <summary>
        /// The legal name of the client. The legal name is the formal name, and might differ from the marketing name.
        /// </summary>
        /// <value>The legal name of the client. The legal name is the formal name, and might differ from the marketing name.</value>
        /* <example>PowerOffice AS</example> */
        [JsonPropertyName("LegalName")]
        public string? LegalName { get { return this.LegalNameOption; } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Address?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public Address? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailAddressIsDeliveryAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MailAddressIsDeliveryAddressOption { get; }

        /// <summary>
        /// A property indicating whether the client have set the delivery address equal to the mail address. If so, the content of the property deliveryAddress can be ignored.
        /// </summary>
        /// <value>A property indicating whether the client have set the delivery address equal to the mail address. If so, the content of the property deliveryAddress can be ignored.</value>
        /* <example>false</example> */
        [JsonPropertyName("MailAddressIsDeliveryAddress")]
        public bool? MailAddressIsDeliveryAddress { get { return this.MailAddressIsDeliveryAddressOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; }

        /// <summary>
        /// The name of the client.
        /// </summary>
        /// <value>The name of the client.</value>
        /* <example>PowerOffice</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } }

        /// <summary>
        /// Used to track the state of OrganizationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationNumberOption { get; }

        /// <summary>
        /// The organization number of the client.
        /// </summary>
        /// <value>The organization number of the client.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("OrganizationNumber")]
        public string? OrganizationNumber { get { return this.OrganizationNumberOption; } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; }

        /// <summary>
        /// The phone number registered on the client.
        /// </summary>
        /// <value>The phone number registered on the client.</value>
        /* <example>81549300</example> */
        [JsonPropertyName("PhoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } }

        /// <summary>
        /// Used to track the state of WebsiteUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteUrlOption { get; }

        /// <summary>
        /// The website url registered on the client.
        /// </summary>
        /// <value>The website url registered on the client.</value>
        /* <example>www.example.com</example> */
        [JsonPropertyName("WebsiteUrl")]
        public string? WebsiteUrl { get { return this.WebsiteUrlOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrganizationSettingDto {\n");
            sb.Append("  DefaultAgricultureDepartment: ").Append(DefaultAgricultureDepartment).Append("\n");
            sb.Append("  DeliveryAddress: ").Append(DeliveryAddress).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceInboxEhf: ").Append(InvoiceInboxEhf).Append("\n");
            sb.Append("  InvoiceInboxEmail: ").Append(InvoiceInboxEmail).Append("\n");
            sb.Append("  InvoiceInboxEmailAddress: ").Append(InvoiceInboxEmailAddress).Append("\n");
            sb.Append("  IsAgricultureClient: ").Append(IsAgricultureClient).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  MailAddressIsDeliveryAddress: ").Append(MailAddressIsDeliveryAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrganizationNumber: ").Append(OrganizationNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrganizationSettingDto" />
    /// </summary>
    public class OrganizationSettingDtoJsonConverter : JsonConverter<OrganizationSettingDto>
    {
        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OrganizationSettingDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrganizationSettingDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AgricultureDepartment?> defaultAgricultureDepartment = default;
            Option<Address?> deliveryAddress = default;
            Option<string?> emailAddress = default;
            Option<Guid?> id = default;
            Option<bool?> invoiceInboxEhf = default;
            Option<bool?> invoiceInboxEmail = default;
            Option<string?> invoiceInboxEmailAddress = default;
            Option<bool?> isAgricultureClient = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> legalName = default;
            Option<Address?> mailAddress = default;
            Option<bool?> mailAddressIsDeliveryAddress = default;
            Option<string?> name = default;
            Option<string?> organizationNumber = default;
            Option<string?> phoneNumber = default;
            Option<string?> websiteUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "DefaultAgricultureDepartment":
                            string? defaultAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (defaultAgricultureDepartmentRawValue != null)
                                defaultAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(defaultAgricultureDepartmentRawValue));
                            break;
                        case "DeliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryAddress = new Option<Address?>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "InvoiceInboxEhf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceInboxEhf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "InvoiceInboxEmail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invoiceInboxEmail = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "InvoiceInboxEmailAddress":
                            invoiceInboxEmailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsAgricultureClient":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isAgricultureClient = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LegalName":
                            legalName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<Address?>(JsonSerializer.Deserialize<Address>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "MailAddressIsDeliveryAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddressIsDeliveryAddress = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OrganizationNumber":
                            organizationNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PhoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "WebsiteUrl":
                            websiteUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (deliveryAddress.IsSet && deliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(deliveryAddress), "Property is not nullable for class OrganizationSettingDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrganizationSettingDto.");

            if (invoiceInboxEhf.IsSet && invoiceInboxEhf.Value == null)
                throw new ArgumentNullException(nameof(invoiceInboxEhf), "Property is not nullable for class OrganizationSettingDto.");

            if (invoiceInboxEmail.IsSet && invoiceInboxEmail.Value == null)
                throw new ArgumentNullException(nameof(invoiceInboxEmail), "Property is not nullable for class OrganizationSettingDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class OrganizationSettingDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class OrganizationSettingDto.");

            if (mailAddressIsDeliveryAddress.IsSet && mailAddressIsDeliveryAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddressIsDeliveryAddress), "Property is not nullable for class OrganizationSettingDto.");

            return new OrganizationSettingDto(defaultAgricultureDepartment, deliveryAddress, emailAddress, id, invoiceInboxEhf, invoiceInboxEmail, invoiceInboxEmailAddress, isAgricultureClient, lastChangedDateTimeOffset, legalName, mailAddress, mailAddressIsDeliveryAddress, name, organizationNumber, phoneNumber, websiteUrl);
        }

        /// <summary>
        /// Serializes a <see cref="OrganizationSettingDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationSettingDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrganizationSettingDto organizationSettingDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, organizationSettingDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrganizationSettingDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="organizationSettingDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrganizationSettingDto organizationSettingDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (organizationSettingDto.DeliveryAddressOption.IsSet && organizationSettingDto.DeliveryAddress == null)
                throw new ArgumentNullException(nameof(organizationSettingDto.DeliveryAddress), "Property is required for class OrganizationSettingDto.");

            if (organizationSettingDto.MailAddressOption.IsSet && organizationSettingDto.MailAddress == null)
                throw new ArgumentNullException(nameof(organizationSettingDto.MailAddress), "Property is required for class OrganizationSettingDto.");

            if (organizationSettingDto.DefaultAgricultureDepartmentOption.IsSet)
                if (organizationSettingDto.DefaultAgricultureDepartmentOption!.Value != null)
                {
                    var defaultAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(organizationSettingDto.DefaultAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("DefaultAgricultureDepartment", defaultAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("DefaultAgricultureDepartment");
            if (organizationSettingDto.DeliveryAddressOption.IsSet)
            {
                writer.WritePropertyName("DeliveryAddress");
                JsonSerializer.Serialize(writer, organizationSettingDto.DeliveryAddress, jsonSerializerOptions);
            }
            if (organizationSettingDto.EmailAddressOption.IsSet)
                if (organizationSettingDto.EmailAddressOption.Value != null)
                    writer.WriteString("EmailAddress", organizationSettingDto.EmailAddress);
                else
                    writer.WriteNull("EmailAddress");

            if (organizationSettingDto.IdOption.IsSet)
                writer.WriteString("Id", organizationSettingDto.IdOption.Value!.Value);

            if (organizationSettingDto.InvoiceInboxEhfOption.IsSet)
                writer.WriteBoolean("InvoiceInboxEhf", organizationSettingDto.InvoiceInboxEhfOption.Value!.Value);

            if (organizationSettingDto.InvoiceInboxEmailOption.IsSet)
                writer.WriteBoolean("InvoiceInboxEmail", organizationSettingDto.InvoiceInboxEmailOption.Value!.Value);

            if (organizationSettingDto.InvoiceInboxEmailAddressOption.IsSet)
                if (organizationSettingDto.InvoiceInboxEmailAddressOption.Value != null)
                    writer.WriteString("InvoiceInboxEmailAddress", organizationSettingDto.InvoiceInboxEmailAddress);
                else
                    writer.WriteNull("InvoiceInboxEmailAddress");

            if (organizationSettingDto.IsAgricultureClientOption.IsSet)
                if (organizationSettingDto.IsAgricultureClientOption.Value != null)
                    writer.WriteBoolean("IsAgricultureClient", organizationSettingDto.IsAgricultureClientOption.Value!.Value);
                else
                    writer.WriteNull("IsAgricultureClient");

            if (organizationSettingDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", organizationSettingDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (organizationSettingDto.LegalNameOption.IsSet)
                if (organizationSettingDto.LegalNameOption.Value != null)
                    writer.WriteString("LegalName", organizationSettingDto.LegalName);
                else
                    writer.WriteNull("LegalName");

            if (organizationSettingDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, organizationSettingDto.MailAddress, jsonSerializerOptions);
            }
            if (organizationSettingDto.MailAddressIsDeliveryAddressOption.IsSet)
                writer.WriteBoolean("MailAddressIsDeliveryAddress", organizationSettingDto.MailAddressIsDeliveryAddressOption.Value!.Value);

            if (organizationSettingDto.NameOption.IsSet)
                if (organizationSettingDto.NameOption.Value != null)
                    writer.WriteString("Name", organizationSettingDto.Name);
                else
                    writer.WriteNull("Name");

            if (organizationSettingDto.OrganizationNumberOption.IsSet)
                if (organizationSettingDto.OrganizationNumberOption.Value != null)
                    writer.WriteString("OrganizationNumber", organizationSettingDto.OrganizationNumber);
                else
                    writer.WriteNull("OrganizationNumber");

            if (organizationSettingDto.PhoneNumberOption.IsSet)
                if (organizationSettingDto.PhoneNumberOption.Value != null)
                    writer.WriteString("PhoneNumber", organizationSettingDto.PhoneNumber);
                else
                    writer.WriteNull("PhoneNumber");

            if (organizationSettingDto.WebsiteUrlOption.IsSet)
                if (organizationSettingDto.WebsiteUrlOption.Value != null)
                    writer.WriteString("WebsiteUrl", organizationSettingDto.WebsiteUrl);
                else
                    writer.WriteNull("WebsiteUrl");
        }
    }
}
