// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// CurrencyRateDto
    /// </summary>
    public partial class CurrencyRateDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateDto" /> class.
        /// </summary>
        /// <param name="currencyCode">The currency code.</param>
        /// <param name="exchangeBase">The base amount used for calculating the exchange rate. Typically, this is a fixed amount like 1 or 100 units of the base currency.</param>
        /// <param name="exchangeRate">The currency exchange rate</param>
        /// <param name="rateDate">The date of the currency rate</param>
        /// <param name="reverseExchangeRate">The reverse exchange rate</param>
        [JsonConstructor]
        internal CurrencyRateDto(Option<string?> currencyCode = default, Option<int?> exchangeBase = default, Option<double?> exchangeRate = default, Option<DateOnly?> rateDate = default, Option<double?> reverseExchangeRate = default)
        {
            CurrencyCodeOption = currencyCode;
            ExchangeBaseOption = exchangeBase;
            ExchangeRateOption = exchangeRate;
            RateDateOption = rateDate;
            ReverseExchangeRateOption = reverseExchangeRate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The currency code.
        /// </summary>
        /// <value>The currency code.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of ExchangeBase
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExchangeBaseOption { get; }

        /// <summary>
        /// The base amount used for calculating the exchange rate. Typically, this is a fixed amount like 1 or 100 units of the base currency.
        /// </summary>
        /// <value>The base amount used for calculating the exchange rate. Typically, this is a fixed amount like 1 or 100 units of the base currency.</value>
        [JsonPropertyName("ExchangeBase")]
        public int? ExchangeBase { get { return this.ExchangeBaseOption; } }

        /// <summary>
        /// Used to track the state of ExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ExchangeRateOption { get; }

        /// <summary>
        /// The currency exchange rate
        /// </summary>
        /// <value>The currency exchange rate</value>
        /* <example>10.78</example> */
        [JsonPropertyName("ExchangeRate")]
        public double? ExchangeRate { get { return this.ExchangeRateOption; } }

        /// <summary>
        /// Used to track the state of RateDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> RateDateOption { get; }

        /// <summary>
        /// The date of the currency rate
        /// </summary>
        /// <value>The date of the currency rate</value>
        /* <example>Thu Oct 17 02:00:00 CEST 2024</example> */
        [JsonPropertyName("RateDate")]
        public DateOnly? RateDate { get { return this.RateDateOption; } }

        /// <summary>
        /// Used to track the state of ReverseExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ReverseExchangeRateOption { get; }

        /// <summary>
        /// The reverse exchange rate
        /// </summary>
        /// <value>The reverse exchange rate</value>
        /* <example>0.842</example> */
        [JsonPropertyName("ReverseExchangeRate")]
        public double? ReverseExchangeRate { get { return this.ReverseExchangeRateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyRateDto {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ExchangeBase: ").Append(ExchangeBase).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  RateDate: ").Append(RateDate).Append("\n");
            sb.Append("  ReverseExchangeRate: ").Append(ReverseExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyRateDto" />
    /// </summary>
    public class CurrencyRateDtoJsonConverter : JsonConverter<CurrencyRateDto>
    {
        /// <summary>
        /// The format to use to serialize RateDate
        /// </summary>
        public static string RateDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CurrencyRateDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CurrencyRateDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> currencyCode = default;
            Option<int?> exchangeBase = default;
            Option<double?> exchangeRate = default;
            Option<DateOnly?> rateDate = default;
            Option<double?> reverseExchangeRate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExchangeBase":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                exchangeBase = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                exchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "RateDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rateDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ReverseExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reverseExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (exchangeBase.IsSet && exchangeBase.Value == null)
                throw new ArgumentNullException(nameof(exchangeBase), "Property is not nullable for class CurrencyRateDto.");

            if (exchangeRate.IsSet && exchangeRate.Value == null)
                throw new ArgumentNullException(nameof(exchangeRate), "Property is not nullable for class CurrencyRateDto.");

            if (rateDate.IsSet && rateDate.Value == null)
                throw new ArgumentNullException(nameof(rateDate), "Property is not nullable for class CurrencyRateDto.");

            if (reverseExchangeRate.IsSet && reverseExchangeRate.Value == null)
                throw new ArgumentNullException(nameof(reverseExchangeRate), "Property is not nullable for class CurrencyRateDto.");

            return new CurrencyRateDto(currencyCode, exchangeBase, exchangeRate, rateDate, reverseExchangeRate);
        }

        /// <summary>
        /// Serializes a <see cref="CurrencyRateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyRateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CurrencyRateDto currencyRateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, currencyRateDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CurrencyRateDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyRateDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CurrencyRateDto currencyRateDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (currencyRateDto.CurrencyCodeOption.IsSet)
                if (currencyRateDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", currencyRateDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (currencyRateDto.ExchangeBaseOption.IsSet)
                writer.WriteNumber("ExchangeBase", currencyRateDto.ExchangeBaseOption.Value!.Value);

            if (currencyRateDto.ExchangeRateOption.IsSet)
                writer.WriteNumber("ExchangeRate", currencyRateDto.ExchangeRateOption.Value!.Value);

            if (currencyRateDto.RateDateOption.IsSet)
                writer.WriteString("RateDate", currencyRateDto.RateDateOption.Value!.Value.ToString(RateDateFormat));

            if (currencyRateDto.ReverseExchangeRateOption.IsSet)
                writer.WriteNumber("ReverseExchangeRate", currencyRateDto.ReverseExchangeRateOption.Value!.Value);
        }
    }
}
