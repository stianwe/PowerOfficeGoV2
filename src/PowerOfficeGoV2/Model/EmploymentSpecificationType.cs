// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The specification type of the employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - No specification.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CrossBorderCommuter&lt;/i&gt; - Cross border commuter by the definition of the nordic tax agreement (NSA).                 If set, only Finland (FI) or Sweden (SE) are applicable choices for the field TaxCountry.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The specification type of the employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - No specification.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CrossBorderCommuter&lt;/i&gt; - Cross border commuter by the definition of the nordic tax agreement (NSA).                 If set, only Finland (FI) or Sweden (SE) are applicable choices for the field TaxCountry.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum EmploymentSpecificationType
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum CrossBorderCommuter for value: CrossBorderCommuter
        /// </summary>
        CrossBorderCommuter = 2
    }

    /// <summary>
    /// Converts <see cref="EmploymentSpecificationType"/> to and from the JSON value
    /// </summary>
    public static class EmploymentSpecificationTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmploymentSpecificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentSpecificationType FromString(string value)
        {
            if (value.Equals("None"))
                return EmploymentSpecificationType.None;

            if (value.Equals("CrossBorderCommuter"))
                return EmploymentSpecificationType.CrossBorderCommuter;

            throw new NotImplementedException($"Could not convert value to type EmploymentSpecificationType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmploymentSpecificationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentSpecificationType? FromStringOrDefault(string value)
        {
            if (value.Equals("None"))
                return EmploymentSpecificationType.None;

            if (value.Equals("CrossBorderCommuter"))
                return EmploymentSpecificationType.CrossBorderCommuter;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmploymentSpecificationType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmploymentSpecificationType value)
        {
            if (value == EmploymentSpecificationType.None)
                return "None";

            if (value == EmploymentSpecificationType.CrossBorderCommuter)
                return "CrossBorderCommuter";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentSpecificationType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmploymentSpecificationTypeJsonConverter : JsonConverter<EmploymentSpecificationType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentSpecificationType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentSpecificationType? result = rawValue == null
                ? null
                : EmploymentSpecificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmploymentSpecificationType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentSpecificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentSpecificationType employmentSpecificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentSpecificationType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentSpecificationType"/>
    /// </summary>
    public class EmploymentSpecificationTypeNullableJsonConverter : JsonConverter<EmploymentSpecificationType?>
    {
        /// <summary>
        /// Returns a EmploymentSpecificationType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentSpecificationType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentSpecificationType? result = rawValue == null
                ? null
                : EmploymentSpecificationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentSpecificationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentSpecificationType? employmentSpecificationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentSpecificationType?.ToString() ?? "null");
        }
    }
}
