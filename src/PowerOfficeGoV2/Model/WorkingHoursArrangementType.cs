// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The arrangement of working hours.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;NonShift&lt;/i&gt; - Non-shift.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SemiContinuousShift&lt;/i&gt; - Semi-continuous shift work and rota work - 35.5 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ContinuousShift&lt;/i&gt; - Continuous shift work and other schemes at 33.6 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ShiftWork&lt;/i&gt; - Shift work - 36.5 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Offshore&lt;/i&gt; - Offshore work - 33.6 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherShifts&lt;/i&gt; - Other shift arrangements.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The arrangement of working hours.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;NonShift&lt;/i&gt; - Non-shift.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SemiContinuousShift&lt;/i&gt; - Semi-continuous shift work and rota work - 35.5 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ContinuousShift&lt;/i&gt; - Continuous shift work and other schemes at 33.6 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ShiftWork&lt;/i&gt; - Shift work - 36.5 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Offshore&lt;/i&gt; - Offshore work - 33.6 hours per week.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherShifts&lt;/i&gt; - Other shift arrangements.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum WorkingHoursArrangementType
    {
        /// <summary>
        /// Enum NonShift for value: NonShift
        /// </summary>
        NonShift = 1,

        /// <summary>
        /// Enum SemiContinuousShift for value: SemiContinuousShift
        /// </summary>
        SemiContinuousShift = 2,

        /// <summary>
        /// Enum ContinuousShift for value: ContinuousShift
        /// </summary>
        ContinuousShift = 3,

        /// <summary>
        /// Enum ShiftWork for value: ShiftWork
        /// </summary>
        ShiftWork = 4,

        /// <summary>
        /// Enum Offshore for value: Offshore
        /// </summary>
        Offshore = 5,

        /// <summary>
        /// Enum OtherShifts for value: OtherShifts
        /// </summary>
        OtherShifts = 6
    }

    /// <summary>
    /// Converts <see cref="WorkingHoursArrangementType"/> to and from the JSON value
    /// </summary>
    public static class WorkingHoursArrangementTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="WorkingHoursArrangementType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WorkingHoursArrangementType FromString(string value)
        {
            if (value.Equals("NonShift"))
                return WorkingHoursArrangementType.NonShift;

            if (value.Equals("SemiContinuousShift"))
                return WorkingHoursArrangementType.SemiContinuousShift;

            if (value.Equals("ContinuousShift"))
                return WorkingHoursArrangementType.ContinuousShift;

            if (value.Equals("ShiftWork"))
                return WorkingHoursArrangementType.ShiftWork;

            if (value.Equals("Offshore"))
                return WorkingHoursArrangementType.Offshore;

            if (value.Equals("OtherShifts"))
                return WorkingHoursArrangementType.OtherShifts;

            throw new NotImplementedException($"Could not convert value to type WorkingHoursArrangementType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="WorkingHoursArrangementType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WorkingHoursArrangementType? FromStringOrDefault(string value)
        {
            if (value.Equals("NonShift"))
                return WorkingHoursArrangementType.NonShift;

            if (value.Equals("SemiContinuousShift"))
                return WorkingHoursArrangementType.SemiContinuousShift;

            if (value.Equals("ContinuousShift"))
                return WorkingHoursArrangementType.ContinuousShift;

            if (value.Equals("ShiftWork"))
                return WorkingHoursArrangementType.ShiftWork;

            if (value.Equals("Offshore"))
                return WorkingHoursArrangementType.Offshore;

            if (value.Equals("OtherShifts"))
                return WorkingHoursArrangementType.OtherShifts;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WorkingHoursArrangementType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(WorkingHoursArrangementType value)
        {
            if (value == WorkingHoursArrangementType.NonShift)
                return "NonShift";

            if (value == WorkingHoursArrangementType.SemiContinuousShift)
                return "SemiContinuousShift";

            if (value == WorkingHoursArrangementType.ContinuousShift)
                return "ContinuousShift";

            if (value == WorkingHoursArrangementType.ShiftWork)
                return "ShiftWork";

            if (value == WorkingHoursArrangementType.Offshore)
                return "Offshore";

            if (value == WorkingHoursArrangementType.OtherShifts)
                return "OtherShifts";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkingHoursArrangementType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class WorkingHoursArrangementTypeJsonConverter : JsonConverter<WorkingHoursArrangementType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WorkingHoursArrangementType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WorkingHoursArrangementType? result = rawValue == null
                ? null
                : WorkingHoursArrangementTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WorkingHoursArrangementType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workingHoursArrangementType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WorkingHoursArrangementType workingHoursArrangementType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(workingHoursArrangementType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkingHoursArrangementType"/>
    /// </summary>
    public class WorkingHoursArrangementTypeNullableJsonConverter : JsonConverter<WorkingHoursArrangementType?>
    {
        /// <summary>
        /// Returns a WorkingHoursArrangementType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WorkingHoursArrangementType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WorkingHoursArrangementType? result = rawValue == null
                ? null
                : WorkingHoursArrangementTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workingHoursArrangementType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WorkingHoursArrangementType? workingHoursArrangementType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(workingHoursArrangementType?.ToString() ?? "null");
        }
    }
}
