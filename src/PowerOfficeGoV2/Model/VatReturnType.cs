// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The type of VAT returns the client should deliver for it&#39;s principal activity.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralIndustry&lt;/i&gt; - General Industry (Norwegian: Alminnelig næring)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PrimaryIndustry&lt;/i&gt; - Primary Industry (Norwegian: Primærnmæring)&lt;/li&gt;&lt;li&gt;&lt;i&gt;VatCompensation&lt;/i&gt; - Vat Compensation (Norwegian: Merverdiavgiftskompensasjon)ø&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReverseVatLiability&lt;/i&gt; - Reverse VAT Liability (Norwegian: Omvendt avgiftsplikt)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NoReporting&lt;/i&gt; - No reporting (Norwegian: Ingen rapportering)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The type of VAT returns the client should deliver for it&#39;s principal activity.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralIndustry&lt;/i&gt; - General Industry (Norwegian: Alminnelig næring)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PrimaryIndustry&lt;/i&gt; - Primary Industry (Norwegian: Primærnmæring)&lt;/li&gt;&lt;li&gt;&lt;i&gt;VatCompensation&lt;/i&gt; - Vat Compensation (Norwegian: Merverdiavgiftskompensasjon)ø&lt;/li&gt;&lt;li&gt;&lt;i&gt;ReverseVatLiability&lt;/i&gt; - Reverse VAT Liability (Norwegian: Omvendt avgiftsplikt)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NoReporting&lt;/i&gt; - No reporting (Norwegian: Ingen rapportering)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum VatReturnType
    {
        /// <summary>
        /// Enum GeneralIndustry for value: GeneralIndustry
        /// </summary>
        GeneralIndustry = 1,

        /// <summary>
        /// Enum PrimaryIndustry for value: PrimaryIndustry
        /// </summary>
        PrimaryIndustry = 2,

        /// <summary>
        /// Enum VatCompensation for value: VatCompensation
        /// </summary>
        VatCompensation = 3,

        /// <summary>
        /// Enum ReverseVatLiability for value: ReverseVatLiability
        /// </summary>
        ReverseVatLiability = 4,

        /// <summary>
        /// Enum NoReporting for value: NoReporting
        /// </summary>
        NoReporting = 5
    }

    /// <summary>
    /// Converts <see cref="VatReturnType"/> to and from the JSON value
    /// </summary>
    public static class VatReturnTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VatReturnType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatReturnType FromString(string value)
        {
            if (value.Equals("GeneralIndustry"))
                return VatReturnType.GeneralIndustry;

            if (value.Equals("PrimaryIndustry"))
                return VatReturnType.PrimaryIndustry;

            if (value.Equals("VatCompensation"))
                return VatReturnType.VatCompensation;

            if (value.Equals("ReverseVatLiability"))
                return VatReturnType.ReverseVatLiability;

            if (value.Equals("NoReporting"))
                return VatReturnType.NoReporting;

            throw new NotImplementedException($"Could not convert value to type VatReturnType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VatReturnType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatReturnType? FromStringOrDefault(string value)
        {
            if (value.Equals("GeneralIndustry"))
                return VatReturnType.GeneralIndustry;

            if (value.Equals("PrimaryIndustry"))
                return VatReturnType.PrimaryIndustry;

            if (value.Equals("VatCompensation"))
                return VatReturnType.VatCompensation;

            if (value.Equals("ReverseVatLiability"))
                return VatReturnType.ReverseVatLiability;

            if (value.Equals("NoReporting"))
                return VatReturnType.NoReporting;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VatReturnType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VatReturnType value)
        {
            if (value == VatReturnType.GeneralIndustry)
                return "GeneralIndustry";

            if (value == VatReturnType.PrimaryIndustry)
                return "PrimaryIndustry";

            if (value == VatReturnType.VatCompensation)
                return "VatCompensation";

            if (value == VatReturnType.ReverseVatLiability)
                return "ReverseVatLiability";

            if (value == VatReturnType.NoReporting)
                return "NoReporting";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatReturnType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VatReturnTypeJsonConverter : JsonConverter<VatReturnType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatReturnType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatReturnType? result = rawValue == null
                ? null
                : VatReturnTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VatReturnType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatReturnType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatReturnType vatReturnType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(vatReturnType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatReturnType"/>
    /// </summary>
    public class VatReturnTypeNullableJsonConverter : JsonConverter<VatReturnType?>
    {
        /// <summary>
        /// Returns a VatReturnType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatReturnType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatReturnType? result = rawValue == null
                ? null
                : VatReturnTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatReturnType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatReturnType? vatReturnType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(vatReturnType?.ToString() ?? "null");
        }
    }
}
