// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employment Light DTO contains properties relevant to an employment relationship object in Go.  It is a lightweight (slimmed down) version of the Employment DTO, and therefore contains fewer properties.
    /// </summary>
    public partial class EmploymentLightDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentLightDto" /> class.
        /// </summary>
        /// <param name="createdDateTimeOffset">The timestamp when the employment entity was created.</param>
        /// <param name="employeeId">The identifier of the employee the employment belongs to.</param>
        /// <param name="employmentForm">employmentForm</param>
        /// <param name="endDate">The end date of the employment.</param>
        /// <param name="enterpriseId">The identifier of the enterprise for the employment.</param>
        /// <param name="id">The id of the employment (employment relationship).</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp when the employment entity was last changed.</param>
        /// <param name="startDate">The start date of the employment.</param>
        [JsonConstructor]
        public EmploymentLightDto(Option<DateTime?> createdDateTimeOffset = default, Option<long?> employeeId = default, Option<EmploymentFormType?> employmentForm = default, Option<DateOnly?> endDate = default, Option<long?> enterpriseId = default, Option<long?> id = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<DateOnly?> startDate = default)
        {
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            EmployeeIdOption = employeeId;
            EmploymentFormOption = employmentForm;
            EndDateOption = endDate;
            EnterpriseIdOption = enterpriseId;
            IdOption = id;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            StartDateOption = startDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmploymentForm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmploymentFormType?> EmploymentFormOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentForm
        /// </summary>
        [JsonPropertyName("EmploymentForm")]
        public EmploymentFormType? EmploymentForm { get { return this.EmploymentFormOption; } set { this.EmploymentFormOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the employment entity was created.
        /// </summary>
        /// <value>The timestamp when the employment entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of EmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployeeIdOption { get; }

        /// <summary>
        /// The identifier of the employee the employment belongs to.
        /// </summary>
        /// <value>The identifier of the employee the employment belongs to.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployeeId")]
        public long? EmployeeId { get { return this.EmployeeIdOption; } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> EndDateOption { get; }

        /// <summary>
        /// The end date of the employment.
        /// </summary>
        /// <value>The end date of the employment.</value>
        /* <example>Sun Jul 31 02:00:00 CEST 2022</example> */
        [JsonPropertyName("EndDate")]
        public DateOnly? EndDate { get { return this.EndDateOption; } }

        /// <summary>
        /// Used to track the state of EnterpriseId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EnterpriseIdOption { get; }

        /// <summary>
        /// The identifier of the enterprise for the employment.
        /// </summary>
        /// <value>The identifier of the enterprise for the employment.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EnterpriseId")]
        public long? EnterpriseId { get { return this.EnterpriseIdOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The id of the employment (employment relationship).
        /// </summary>
        /// <value>The id of the employment (employment relationship).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the employment entity was last changed.
        /// </summary>
        /// <value>The timestamp when the employment entity was last changed.</value>
        /* <example>2021-09-30T09:33:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> StartDateOption { get; }

        /// <summary>
        /// The start date of the employment.
        /// </summary>
        /// <value>The start date of the employment.</value>
        /* <example>Fri Jan 01 01:00:00 CET 2021</example> */
        [JsonPropertyName("StartDate")]
        public DateOnly? StartDate { get { return this.StartDateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentLightDto {\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EmploymentForm: ").Append(EmploymentForm).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EnterpriseId: ").Append(EnterpriseId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentLightDto" />
    /// </summary>
    public class EmploymentLightDtoJsonConverter : JsonConverter<EmploymentLightDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentLightDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentLightDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdDateTimeOffset = default;
            Option<long?> employeeId = default;
            Option<EmploymentFormType?> employmentForm = default;
            Option<DateOnly?> endDate = default;
            Option<long?> enterpriseId = default;
            Option<long?> id = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<DateOnly?> startDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmploymentForm":
                            string? employmentFormRawValue = utf8JsonReader.GetString();
                            if (employmentFormRawValue != null)
                                employmentForm = new Option<EmploymentFormType?>(EmploymentFormTypeValueConverter.FromStringOrDefault(employmentFormRawValue));
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EnterpriseId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enterpriseId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class EmploymentLightDto.");

            if (employeeId.IsSet && employeeId.Value == null)
                throw new ArgumentNullException(nameof(employeeId), "Property is not nullable for class EmploymentLightDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmploymentLightDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class EmploymentLightDto.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class EmploymentLightDto.");

            return new EmploymentLightDto(createdDateTimeOffset, employeeId, employmentForm, endDate, enterpriseId, id, lastChangedDateTimeOffset, startDate);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentLightDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentLightDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentLightDto employmentLightDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employmentLightDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentLightDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentLightDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmploymentLightDto employmentLightDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentLightDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", employmentLightDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (employmentLightDto.EmployeeIdOption.IsSet)
                writer.WriteNumber("EmployeeId", employmentLightDto.EmployeeIdOption.Value!.Value);

            if (employmentLightDto.EmploymentFormOption.IsSet)
                if (employmentLightDto.EmploymentFormOption!.Value != null)
                {
                    var employmentFormRawValue = EmploymentFormTypeValueConverter.ToJsonValue(employmentLightDto.EmploymentFormOption.Value!.Value);
                    writer.WriteString("EmploymentForm", employmentFormRawValue);
                }
                else
                    writer.WriteNull("EmploymentForm");
            if (employmentLightDto.EndDateOption.IsSet)
                if (employmentLightDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", employmentLightDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (employmentLightDto.EnterpriseIdOption.IsSet)
                if (employmentLightDto.EnterpriseIdOption.Value != null)
                    writer.WriteNumber("EnterpriseId", employmentLightDto.EnterpriseIdOption.Value!.Value);
                else
                    writer.WriteNull("EnterpriseId");

            if (employmentLightDto.IdOption.IsSet)
                writer.WriteNumber("Id", employmentLightDto.IdOption.Value!.Value);

            if (employmentLightDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", employmentLightDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (employmentLightDto.StartDateOption.IsSet)
                writer.WriteString("StartDate", employmentLightDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
        }
    }
}
