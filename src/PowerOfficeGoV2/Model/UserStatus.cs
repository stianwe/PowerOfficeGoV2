// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining the status of an user.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The user have access to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Inactive&lt;/i&gt; - the user exist on the client but do not have access as the user have been deactivated.&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvitePending&lt;/i&gt; - Invite pending, the user have been invited to the client but is not yet active.                 This state can only be set by the system as a result of an invitation.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining the status of an user.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - The user have access to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Inactive&lt;/i&gt; - the user exist on the client but do not have access as the user have been deactivated.&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvitePending&lt;/i&gt; - Invite pending, the user have been invited to the client but is not yet active.                 This state can only be set by the system as a result of an invitation.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum UserStatus
    {
        /// <summary>
        /// Enum Active for value: Active
        /// </summary>
        Active = 1,

        /// <summary>
        /// Enum Inactive for value: Inactive
        /// </summary>
        Inactive = 2,

        /// <summary>
        /// Enum InvitePending for value: InvitePending
        /// </summary>
        InvitePending = 3
    }

    /// <summary>
    /// Converts <see cref="UserStatus"/> to and from the JSON value
    /// </summary>
    public static class UserStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserStatus FromString(string value)
        {
            if (value.Equals("Active"))
                return UserStatus.Active;

            if (value.Equals("Inactive"))
                return UserStatus.Inactive;

            if (value.Equals("InvitePending"))
                return UserStatus.InvitePending;

            throw new NotImplementedException($"Could not convert value to type UserStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("Active"))
                return UserStatus.Active;

            if (value.Equals("Inactive"))
                return UserStatus.Inactive;

            if (value.Equals("InvitePending"))
                return UserStatus.InvitePending;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserStatus value)
        {
            if (value == UserStatus.Active)
                return "Active";

            if (value == UserStatus.Inactive)
                return "Inactive";

            if (value == UserStatus.InvitePending)
                return "InvitePending";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserStatusJsonConverter : JsonConverter<UserStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserStatus? result = rawValue == null
                ? null
                : UserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserStatus userStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserStatus"/>
    /// </summary>
    public class UserStatusNullableJsonConverter : JsonConverter<UserStatus?>
    {
        /// <summary>
        /// Returns a UserStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserStatus? result = rawValue == null
                ? null
                : UserStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserStatus? userStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userStatus?.ToString() ?? "null");
        }
    }
}
