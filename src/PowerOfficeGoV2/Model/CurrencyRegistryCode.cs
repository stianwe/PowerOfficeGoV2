// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Currency registry code describing the intention of the payment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchaseOfGoods&lt;/i&gt; - Purchase of goods&lt;/li&gt;&lt;li&gt;&lt;i&gt;LeaseOfServices&lt;/i&gt; - Lease of services&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherPurchaseOrSaleOfServices&lt;/i&gt; - Other purchase or sale of services&lt;/li&gt;&lt;li&gt;&lt;i&gt;Interests&lt;/i&gt; - Interests&lt;/li&gt;&lt;li&gt;&lt;i&gt;Dividends&lt;/i&gt; - Dividends&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherReturnOnCapital&lt;/i&gt; - Other return on capital&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchaseOrSaleOfProperty&lt;/i&gt; - Purchase or sale of property&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvestmentInSharesAndMore&lt;/i&gt; - Investment in shares and more&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvestmentInOtherCapital&lt;/i&gt; - Investment in other capital&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInSharesAndMutualFundsShares&lt;/i&gt; - Portfolio investment in shares and mutual funds shares&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInBondsAndNotes&lt;/i&gt; - Portfolio investment in bonds and notes&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInDerivatives&lt;/i&gt; - Portfolio investment in derivatives&lt;/li&gt;&lt;li&gt;&lt;i&gt;LifeInsurancePension&lt;/i&gt; - Life insurance pension&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherFinancialInvestments&lt;/i&gt; - Other financial investments&lt;/li&gt;&lt;li&gt;&lt;i&gt;Salaries&lt;/i&gt; - Salaries&lt;/li&gt;&lt;li&gt;&lt;i&gt;InheritanceGiftsAndMore&lt;/i&gt; - Inheritance gifts and more&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Currency registry code describing the intention of the payment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchaseOfGoods&lt;/i&gt; - Purchase of goods&lt;/li&gt;&lt;li&gt;&lt;i&gt;LeaseOfServices&lt;/i&gt; - Lease of services&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherPurchaseOrSaleOfServices&lt;/i&gt; - Other purchase or sale of services&lt;/li&gt;&lt;li&gt;&lt;i&gt;Interests&lt;/i&gt; - Interests&lt;/li&gt;&lt;li&gt;&lt;i&gt;Dividends&lt;/i&gt; - Dividends&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherReturnOnCapital&lt;/i&gt; - Other return on capital&lt;/li&gt;&lt;li&gt;&lt;i&gt;PurchaseOrSaleOfProperty&lt;/i&gt; - Purchase or sale of property&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvestmentInSharesAndMore&lt;/i&gt; - Investment in shares and more&lt;/li&gt;&lt;li&gt;&lt;i&gt;InvestmentInOtherCapital&lt;/i&gt; - Investment in other capital&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInSharesAndMutualFundsShares&lt;/i&gt; - Portfolio investment in shares and mutual funds shares&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInBondsAndNotes&lt;/i&gt; - Portfolio investment in bonds and notes&lt;/li&gt;&lt;li&gt;&lt;i&gt;PortfolioInvestmentInDerivatives&lt;/i&gt; - Portfolio investment in derivatives&lt;/li&gt;&lt;li&gt;&lt;i&gt;LifeInsurancePension&lt;/i&gt; - Life insurance pension&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherFinancialInvestments&lt;/i&gt; - Other financial investments&lt;/li&gt;&lt;li&gt;&lt;i&gt;Salaries&lt;/i&gt; - Salaries&lt;/li&gt;&lt;li&gt;&lt;i&gt;InheritanceGiftsAndMore&lt;/i&gt; - Inheritance gifts and more&lt;/li&gt;&lt;/ul&gt;</value>
    public enum CurrencyRegistryCode
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum PurchaseOfGoods for value: PurchaseOfGoods
        /// </summary>
        PurchaseOfGoods = 2,

        /// <summary>
        /// Enum LeaseOfServices for value: LeaseOfServices
        /// </summary>
        LeaseOfServices = 3,

        /// <summary>
        /// Enum OtherPurchaseOrSaleOfServices for value: OtherPurchaseOrSaleOfServices
        /// </summary>
        OtherPurchaseOrSaleOfServices = 4,

        /// <summary>
        /// Enum Interests for value: Interests
        /// </summary>
        Interests = 5,

        /// <summary>
        /// Enum Dividends for value: Dividends
        /// </summary>
        Dividends = 6,

        /// <summary>
        /// Enum OtherReturnOnCapital for value: OtherReturnOnCapital
        /// </summary>
        OtherReturnOnCapital = 7,

        /// <summary>
        /// Enum PurchaseOrSaleOfProperty for value: PurchaseOrSaleOfProperty
        /// </summary>
        PurchaseOrSaleOfProperty = 8,

        /// <summary>
        /// Enum InvestmentInSharesAndMore for value: InvestmentInSharesAndMore
        /// </summary>
        InvestmentInSharesAndMore = 9,

        /// <summary>
        /// Enum InvestmentInOtherCapital for value: InvestmentInOtherCapital
        /// </summary>
        InvestmentInOtherCapital = 10,

        /// <summary>
        /// Enum PortfolioInvestmentInSharesAndMutualFundsShares for value: PortfolioInvestmentInSharesAndMutualFundsShares
        /// </summary>
        PortfolioInvestmentInSharesAndMutualFundsShares = 11,

        /// <summary>
        /// Enum PortfolioInvestmentInBondsAndNotes for value: PortfolioInvestmentInBondsAndNotes
        /// </summary>
        PortfolioInvestmentInBondsAndNotes = 12,

        /// <summary>
        /// Enum PortfolioInvestmentInDerivatives for value: PortfolioInvestmentInDerivatives
        /// </summary>
        PortfolioInvestmentInDerivatives = 13,

        /// <summary>
        /// Enum LifeInsurancePension for value: LifeInsurancePension
        /// </summary>
        LifeInsurancePension = 14,

        /// <summary>
        /// Enum OtherFinancialInvestments for value: OtherFinancialInvestments
        /// </summary>
        OtherFinancialInvestments = 15,

        /// <summary>
        /// Enum Salaries for value: Salaries
        /// </summary>
        Salaries = 16,

        /// <summary>
        /// Enum InheritanceGiftsAndMore for value: InheritanceGiftsAndMore
        /// </summary>
        InheritanceGiftsAndMore = 17
    }

    /// <summary>
    /// Converts <see cref="CurrencyRegistryCode"/> to and from the JSON value
    /// </summary>
    public static class CurrencyRegistryCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CurrencyRegistryCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrencyRegistryCode FromString(string value)
        {
            if (value.Equals("None"))
                return CurrencyRegistryCode.None;

            if (value.Equals("PurchaseOfGoods"))
                return CurrencyRegistryCode.PurchaseOfGoods;

            if (value.Equals("LeaseOfServices"))
                return CurrencyRegistryCode.LeaseOfServices;

            if (value.Equals("OtherPurchaseOrSaleOfServices"))
                return CurrencyRegistryCode.OtherPurchaseOrSaleOfServices;

            if (value.Equals("Interests"))
                return CurrencyRegistryCode.Interests;

            if (value.Equals("Dividends"))
                return CurrencyRegistryCode.Dividends;

            if (value.Equals("OtherReturnOnCapital"))
                return CurrencyRegistryCode.OtherReturnOnCapital;

            if (value.Equals("PurchaseOrSaleOfProperty"))
                return CurrencyRegistryCode.PurchaseOrSaleOfProperty;

            if (value.Equals("InvestmentInSharesAndMore"))
                return CurrencyRegistryCode.InvestmentInSharesAndMore;

            if (value.Equals("InvestmentInOtherCapital"))
                return CurrencyRegistryCode.InvestmentInOtherCapital;

            if (value.Equals("PortfolioInvestmentInSharesAndMutualFundsShares"))
                return CurrencyRegistryCode.PortfolioInvestmentInSharesAndMutualFundsShares;

            if (value.Equals("PortfolioInvestmentInBondsAndNotes"))
                return CurrencyRegistryCode.PortfolioInvestmentInBondsAndNotes;

            if (value.Equals("PortfolioInvestmentInDerivatives"))
                return CurrencyRegistryCode.PortfolioInvestmentInDerivatives;

            if (value.Equals("LifeInsurancePension"))
                return CurrencyRegistryCode.LifeInsurancePension;

            if (value.Equals("OtherFinancialInvestments"))
                return CurrencyRegistryCode.OtherFinancialInvestments;

            if (value.Equals("Salaries"))
                return CurrencyRegistryCode.Salaries;

            if (value.Equals("InheritanceGiftsAndMore"))
                return CurrencyRegistryCode.InheritanceGiftsAndMore;

            throw new NotImplementedException($"Could not convert value to type CurrencyRegistryCode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CurrencyRegistryCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrencyRegistryCode? FromStringOrDefault(string value)
        {
            if (value.Equals("None"))
                return CurrencyRegistryCode.None;

            if (value.Equals("PurchaseOfGoods"))
                return CurrencyRegistryCode.PurchaseOfGoods;

            if (value.Equals("LeaseOfServices"))
                return CurrencyRegistryCode.LeaseOfServices;

            if (value.Equals("OtherPurchaseOrSaleOfServices"))
                return CurrencyRegistryCode.OtherPurchaseOrSaleOfServices;

            if (value.Equals("Interests"))
                return CurrencyRegistryCode.Interests;

            if (value.Equals("Dividends"))
                return CurrencyRegistryCode.Dividends;

            if (value.Equals("OtherReturnOnCapital"))
                return CurrencyRegistryCode.OtherReturnOnCapital;

            if (value.Equals("PurchaseOrSaleOfProperty"))
                return CurrencyRegistryCode.PurchaseOrSaleOfProperty;

            if (value.Equals("InvestmentInSharesAndMore"))
                return CurrencyRegistryCode.InvestmentInSharesAndMore;

            if (value.Equals("InvestmentInOtherCapital"))
                return CurrencyRegistryCode.InvestmentInOtherCapital;

            if (value.Equals("PortfolioInvestmentInSharesAndMutualFundsShares"))
                return CurrencyRegistryCode.PortfolioInvestmentInSharesAndMutualFundsShares;

            if (value.Equals("PortfolioInvestmentInBondsAndNotes"))
                return CurrencyRegistryCode.PortfolioInvestmentInBondsAndNotes;

            if (value.Equals("PortfolioInvestmentInDerivatives"))
                return CurrencyRegistryCode.PortfolioInvestmentInDerivatives;

            if (value.Equals("LifeInsurancePension"))
                return CurrencyRegistryCode.LifeInsurancePension;

            if (value.Equals("OtherFinancialInvestments"))
                return CurrencyRegistryCode.OtherFinancialInvestments;

            if (value.Equals("Salaries"))
                return CurrencyRegistryCode.Salaries;

            if (value.Equals("InheritanceGiftsAndMore"))
                return CurrencyRegistryCode.InheritanceGiftsAndMore;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrencyRegistryCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CurrencyRegistryCode value)
        {
            if (value == CurrencyRegistryCode.None)
                return "None";

            if (value == CurrencyRegistryCode.PurchaseOfGoods)
                return "PurchaseOfGoods";

            if (value == CurrencyRegistryCode.LeaseOfServices)
                return "LeaseOfServices";

            if (value == CurrencyRegistryCode.OtherPurchaseOrSaleOfServices)
                return "OtherPurchaseOrSaleOfServices";

            if (value == CurrencyRegistryCode.Interests)
                return "Interests";

            if (value == CurrencyRegistryCode.Dividends)
                return "Dividends";

            if (value == CurrencyRegistryCode.OtherReturnOnCapital)
                return "OtherReturnOnCapital";

            if (value == CurrencyRegistryCode.PurchaseOrSaleOfProperty)
                return "PurchaseOrSaleOfProperty";

            if (value == CurrencyRegistryCode.InvestmentInSharesAndMore)
                return "InvestmentInSharesAndMore";

            if (value == CurrencyRegistryCode.InvestmentInOtherCapital)
                return "InvestmentInOtherCapital";

            if (value == CurrencyRegistryCode.PortfolioInvestmentInSharesAndMutualFundsShares)
                return "PortfolioInvestmentInSharesAndMutualFundsShares";

            if (value == CurrencyRegistryCode.PortfolioInvestmentInBondsAndNotes)
                return "PortfolioInvestmentInBondsAndNotes";

            if (value == CurrencyRegistryCode.PortfolioInvestmentInDerivatives)
                return "PortfolioInvestmentInDerivatives";

            if (value == CurrencyRegistryCode.LifeInsurancePension)
                return "LifeInsurancePension";

            if (value == CurrencyRegistryCode.OtherFinancialInvestments)
                return "OtherFinancialInvestments";

            if (value == CurrencyRegistryCode.Salaries)
                return "Salaries";

            if (value == CurrencyRegistryCode.InheritanceGiftsAndMore)
                return "InheritanceGiftsAndMore";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyRegistryCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CurrencyRegistryCodeJsonConverter : JsonConverter<CurrencyRegistryCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CurrencyRegistryCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CurrencyRegistryCode? result = rawValue == null
                ? null
                : CurrencyRegistryCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CurrencyRegistryCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyRegistryCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CurrencyRegistryCode currencyRegistryCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(currencyRegistryCode.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CurrencyRegistryCode"/>
    /// </summary>
    public class CurrencyRegistryCodeNullableJsonConverter : JsonConverter<CurrencyRegistryCode?>
    {
        /// <summary>
        /// Returns a CurrencyRegistryCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CurrencyRegistryCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CurrencyRegistryCode? result = rawValue == null
                ? null
                : CurrencyRegistryCodeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="currencyRegistryCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CurrencyRegistryCode? currencyRegistryCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(currencyRegistryCode?.ToString() ?? "null");
        }
    }
}
