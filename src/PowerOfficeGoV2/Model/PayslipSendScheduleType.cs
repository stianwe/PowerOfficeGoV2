// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The payslip send schedule type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OnApproval&lt;/i&gt; - The payslip is sent on approval.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OnPaymentDate&lt;/i&gt; - The payslip is sent on the payment date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OneDayBeforePayment&lt;/i&gt; - The payslip is sent one day before the payment date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TwoDaysBeforePayment&lt;/i&gt; - The payslip is sent two days before the payment date.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The payslip send schedule type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OnApproval&lt;/i&gt; - The payslip is sent on approval.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OnPaymentDate&lt;/i&gt; - The payslip is sent on the payment date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OneDayBeforePayment&lt;/i&gt; - The payslip is sent one day before the payment date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TwoDaysBeforePayment&lt;/i&gt; - The payslip is sent two days before the payment date.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum PayslipSendScheduleType
    {
        /// <summary>
        /// Enum OnApproval for value: OnApproval
        /// </summary>
        OnApproval = 1,

        /// <summary>
        /// Enum OnPaymentDate for value: OnPaymentDate
        /// </summary>
        OnPaymentDate = 2,

        /// <summary>
        /// Enum OneDayBeforePayment for value: OneDayBeforePayment
        /// </summary>
        OneDayBeforePayment = 3,

        /// <summary>
        /// Enum TwoDaysBeforePayment for value: TwoDaysBeforePayment
        /// </summary>
        TwoDaysBeforePayment = 4
    }

    /// <summary>
    /// Converts <see cref="PayslipSendScheduleType"/> to and from the JSON value
    /// </summary>
    public static class PayslipSendScheduleTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PayslipSendScheduleType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayslipSendScheduleType FromString(string value)
        {
            if (value.Equals("OnApproval"))
                return PayslipSendScheduleType.OnApproval;

            if (value.Equals("OnPaymentDate"))
                return PayslipSendScheduleType.OnPaymentDate;

            if (value.Equals("OneDayBeforePayment"))
                return PayslipSendScheduleType.OneDayBeforePayment;

            if (value.Equals("TwoDaysBeforePayment"))
                return PayslipSendScheduleType.TwoDaysBeforePayment;

            throw new NotImplementedException($"Could not convert value to type PayslipSendScheduleType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PayslipSendScheduleType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayslipSendScheduleType? FromStringOrDefault(string value)
        {
            if (value.Equals("OnApproval"))
                return PayslipSendScheduleType.OnApproval;

            if (value.Equals("OnPaymentDate"))
                return PayslipSendScheduleType.OnPaymentDate;

            if (value.Equals("OneDayBeforePayment"))
                return PayslipSendScheduleType.OneDayBeforePayment;

            if (value.Equals("TwoDaysBeforePayment"))
                return PayslipSendScheduleType.TwoDaysBeforePayment;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PayslipSendScheduleType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PayslipSendScheduleType value)
        {
            if (value == PayslipSendScheduleType.OnApproval)
                return "OnApproval";

            if (value == PayslipSendScheduleType.OnPaymentDate)
                return "OnPaymentDate";

            if (value == PayslipSendScheduleType.OneDayBeforePayment)
                return "OneDayBeforePayment";

            if (value == PayslipSendScheduleType.TwoDaysBeforePayment)
                return "TwoDaysBeforePayment";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayslipSendScheduleType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PayslipSendScheduleTypeJsonConverter : JsonConverter<PayslipSendScheduleType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayslipSendScheduleType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayslipSendScheduleType? result = rawValue == null
                ? null
                : PayslipSendScheduleTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PayslipSendScheduleType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payslipSendScheduleType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayslipSendScheduleType payslipSendScheduleType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payslipSendScheduleType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayslipSendScheduleType"/>
    /// </summary>
    public class PayslipSendScheduleTypeNullableJsonConverter : JsonConverter<PayslipSendScheduleType?>
    {
        /// <summary>
        /// Returns a PayslipSendScheduleType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayslipSendScheduleType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayslipSendScheduleType? result = rawValue == null
                ? null
                : PayslipSendScheduleTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payslipSendScheduleType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayslipSendScheduleType? payslipSendScheduleType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payslipSendScheduleType?.ToString() ?? "null");
        }
    }
}
