// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for posting comment when adding a voucher to the approval workflow.
    /// </summary>
    public partial class SubmitForApprovalPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitForApprovalPostDto" /> class.
        /// </summary>
        /// <param name="comment">Comment for the voucher.  The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability</param>
        [JsonConstructor]
        public SubmitForApprovalPostDto(Option<string?> comment = default)
        {
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Comment for the voucher.  The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability
        /// </summary>
        /// <value>Comment for the voucher.  The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability</value>
        /* <example>This is my submitted voucher</example> */
        [JsonPropertyName("Comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitForApprovalPostDto {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1000.", new [] { "Comment" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubmitForApprovalPostDto" />
    /// </summary>
    public class SubmitForApprovalPostDtoJsonConverter : JsonConverter<SubmitForApprovalPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubmitForApprovalPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubmitForApprovalPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SubmitForApprovalPostDto(comment);
        }

        /// <summary>
        /// Serializes a <see cref="SubmitForApprovalPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitForApprovalPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubmitForApprovalPostDto submitForApprovalPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, submitForApprovalPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubmitForApprovalPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="submitForApprovalPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubmitForApprovalPostDto submitForApprovalPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (submitForApprovalPostDto.CommentOption.IsSet)
                if (submitForApprovalPostDto.CommentOption.Value != null)
                    writer.WriteString("Comment", submitForApprovalPostDto.Comment);
                else
                    writer.WriteNull("Comment");
        }
    }
}
