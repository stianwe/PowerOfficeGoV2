// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Detailed information about the current client integration.
    /// </summary>
    public partial class ClientIntegrationInformationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientIntegrationInformationDto" /> class.
        /// </summary>
        /// <param name="activeClientSubscriptions">activeClientSubscriptions</param>
        /// <param name="clientId">Id of the client.</param>
        /// <param name="clientName">Name of the client.</param>
        /// <param name="invalidPrivileges">All invalid privileges for the integration based on the active Go-subscriptions for the client.</param>
        /// <param name="validPrivileges">All valid privileges for the integration based on the active Go-subscriptions for the client.</param>
        [JsonConstructor]
        internal ClientIntegrationInformationDto(Option<List<string>?> activeClientSubscriptions = default, Option<string?> clientId = default, Option<string?> clientName = default, Option<List<string>?> invalidPrivileges = default, Option<List<string>?> validPrivileges = default)
        {
            ActiveClientSubscriptionsOption = activeClientSubscriptions;
            ClientIdOption = clientId;
            ClientNameOption = clientName;
            InvalidPrivilegesOption = invalidPrivileges;
            ValidPrivilegesOption = validPrivileges;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActiveClientSubscriptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ActiveClientSubscriptionsOption { get; }

        /// <summary>
        /// Gets or Sets ActiveClientSubscriptions
        /// </summary>
        [JsonPropertyName("ActiveClientSubscriptions")]
        public List<string>? ActiveClientSubscriptions { get { return this.ActiveClientSubscriptionsOption; } }

        /// <summary>
        /// Used to track the state of ClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientIdOption { get; }

        /// <summary>
        /// Id of the client.
        /// </summary>
        /// <value>Id of the client.</value>
        [JsonPropertyName("ClientId")]
        public string? ClientId { get { return this.ClientIdOption; } }

        /// <summary>
        /// Used to track the state of ClientName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientNameOption { get; }

        /// <summary>
        /// Name of the client.
        /// </summary>
        /// <value>Name of the client.</value>
        [JsonPropertyName("ClientName")]
        public string? ClientName { get { return this.ClientNameOption; } }

        /// <summary>
        /// Used to track the state of InvalidPrivileges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> InvalidPrivilegesOption { get; }

        /// <summary>
        /// All invalid privileges for the integration based on the active Go-subscriptions for the client.
        /// </summary>
        /// <value>All invalid privileges for the integration based on the active Go-subscriptions for the client.</value>
        [JsonPropertyName("InvalidPrivileges")]
        public List<string>? InvalidPrivileges { get { return this.InvalidPrivilegesOption; } }

        /// <summary>
        /// Used to track the state of ValidPrivileges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ValidPrivilegesOption { get; }

        /// <summary>
        /// All valid privileges for the integration based on the active Go-subscriptions for the client.
        /// </summary>
        /// <value>All valid privileges for the integration based on the active Go-subscriptions for the client.</value>
        [JsonPropertyName("ValidPrivileges")]
        public List<string>? ValidPrivileges { get { return this.ValidPrivilegesOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientIntegrationInformationDto {\n");
            sb.Append("  ActiveClientSubscriptions: ").Append(ActiveClientSubscriptions).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  InvalidPrivileges: ").Append(InvalidPrivileges).Append("\n");
            sb.Append("  ValidPrivileges: ").Append(ValidPrivileges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientIntegrationInformationDto" />
    /// </summary>
    public class ClientIntegrationInformationDtoJsonConverter : JsonConverter<ClientIntegrationInformationDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClientIntegrationInformationDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClientIntegrationInformationDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> activeClientSubscriptions = default;
            Option<string?> clientId = default;
            Option<string?> clientName = default;
            Option<List<string>?> invalidPrivileges = default;
            Option<List<string>?> validPrivileges = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ActiveClientSubscriptions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                activeClientSubscriptions = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ClientId":
                            clientId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ClientName":
                            clientName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "InvalidPrivileges":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invalidPrivileges = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ValidPrivileges":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validPrivileges = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ClientIntegrationInformationDto(activeClientSubscriptions, clientId, clientName, invalidPrivileges, validPrivileges);
        }

        /// <summary>
        /// Serializes a <see cref="ClientIntegrationInformationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientIntegrationInformationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClientIntegrationInformationDto clientIntegrationInformationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clientIntegrationInformationDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClientIntegrationInformationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientIntegrationInformationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClientIntegrationInformationDto clientIntegrationInformationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clientIntegrationInformationDto.ActiveClientSubscriptionsOption.IsSet)
                if (clientIntegrationInformationDto.ActiveClientSubscriptionsOption.Value != null)
                {
                    writer.WritePropertyName("ActiveClientSubscriptions");
                    JsonSerializer.Serialize(writer, clientIntegrationInformationDto.ActiveClientSubscriptions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ActiveClientSubscriptions");
            if (clientIntegrationInformationDto.ClientIdOption.IsSet)
                if (clientIntegrationInformationDto.ClientIdOption.Value != null)
                    writer.WriteString("ClientId", clientIntegrationInformationDto.ClientId);
                else
                    writer.WriteNull("ClientId");

            if (clientIntegrationInformationDto.ClientNameOption.IsSet)
                if (clientIntegrationInformationDto.ClientNameOption.Value != null)
                    writer.WriteString("ClientName", clientIntegrationInformationDto.ClientName);
                else
                    writer.WriteNull("ClientName");

            if (clientIntegrationInformationDto.InvalidPrivilegesOption.IsSet)
                if (clientIntegrationInformationDto.InvalidPrivilegesOption.Value != null)
                {
                    writer.WritePropertyName("InvalidPrivileges");
                    JsonSerializer.Serialize(writer, clientIntegrationInformationDto.InvalidPrivileges, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("InvalidPrivileges");
            if (clientIntegrationInformationDto.ValidPrivilegesOption.IsSet)
                if (clientIntegrationInformationDto.ValidPrivilegesOption.Value != null)
                {
                    writer.WritePropertyName("ValidPrivileges");
                    JsonSerializer.Serialize(writer, clientIntegrationInformationDto.ValidPrivileges, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ValidPrivileges");
        }
    }
}
