// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The initiate onboarding response DTO contains properties necessary for (continuing) the onboarding processes in external system.
    /// </summary>
    public partial class InitiateOnboardingResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiateOnboardingResponseDto" /> class.
        /// </summary>
        /// <param name="temporaryUrl">The temporary Url to be used in the process of user authentication and user authorization of onboarding the integrated application.</param>
        /// <param name="validUntilDateTimeOffset">The timestamp of when the temporary Url will expire.</param>
        [JsonConstructor]
        internal InitiateOnboardingResponseDto(Option<string?> temporaryUrl = default, Option<DateTime?> validUntilDateTimeOffset = default)
        {
            TemporaryUrlOption = temporaryUrl;
            ValidUntilDateTimeOffsetOption = validUntilDateTimeOffset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TemporaryUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TemporaryUrlOption { get; }

        /// <summary>
        /// The temporary Url to be used in the process of user authentication and user authorization of onboarding the integrated application.
        /// </summary>
        /// <value>The temporary Url to be used in the process of user authentication and user authorization of onboarding the integrated application.</value>
        /* <example>http://identity.poweroffice.net/ApiAuthV2?token&#x3D;iQcF9czVruLZQbhXyMTt7a11IyTDwZEwU1MifUbYN5RTy4I6sfoOX3HM2u5huwc7hz7SqRTLMIKkuiktiU1bWglYJd48uVv5QIZe2lhqPSGxJBQMMn9yTGWzn6I8BqKK</example> */
        [JsonPropertyName("TemporaryUrl")]
        public string? TemporaryUrl { get { return this.TemporaryUrlOption; } }

        /// <summary>
        /// Used to track the state of ValidUntilDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ValidUntilDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the temporary Url will expire.
        /// </summary>
        /// <value>The timestamp of when the temporary Url will expire.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("ValidUntilDateTimeOffset")]
        public DateTime? ValidUntilDateTimeOffset { get { return this.ValidUntilDateTimeOffsetOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiateOnboardingResponseDto {\n");
            sb.Append("  TemporaryUrl: ").Append(TemporaryUrl).Append("\n");
            sb.Append("  ValidUntilDateTimeOffset: ").Append(ValidUntilDateTimeOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InitiateOnboardingResponseDto" />
    /// </summary>
    public class InitiateOnboardingResponseDtoJsonConverter : JsonConverter<InitiateOnboardingResponseDto>
    {
        /// <summary>
        /// The format to use to serialize ValidUntilDateTimeOffset
        /// </summary>
        public static string ValidUntilDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="InitiateOnboardingResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InitiateOnboardingResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> temporaryUrl = default;
            Option<DateTime?> validUntilDateTimeOffset = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "TemporaryUrl":
                            temporaryUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ValidUntilDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validUntilDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (validUntilDateTimeOffset.IsSet && validUntilDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(validUntilDateTimeOffset), "Property is not nullable for class InitiateOnboardingResponseDto.");

            return new InitiateOnboardingResponseDto(temporaryUrl, validUntilDateTimeOffset);
        }

        /// <summary>
        /// Serializes a <see cref="InitiateOnboardingResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="initiateOnboardingResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InitiateOnboardingResponseDto initiateOnboardingResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, initiateOnboardingResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InitiateOnboardingResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="initiateOnboardingResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InitiateOnboardingResponseDto initiateOnboardingResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (initiateOnboardingResponseDto.TemporaryUrlOption.IsSet)
                if (initiateOnboardingResponseDto.TemporaryUrlOption.Value != null)
                    writer.WriteString("TemporaryUrl", initiateOnboardingResponseDto.TemporaryUrl);
                else
                    writer.WriteNull("TemporaryUrl");

            if (initiateOnboardingResponseDto.ValidUntilDateTimeOffsetOption.IsSet)
                writer.WriteString("ValidUntilDateTimeOffset", initiateOnboardingResponseDto.ValidUntilDateTimeOffsetOption.Value!.Value.ToString(ValidUntilDateTimeOffsetFormat));
        }
    }
}
