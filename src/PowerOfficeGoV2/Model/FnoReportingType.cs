// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing FNO (Finans Norge) reporting types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;VariableSalary&lt;/i&gt; - Report variable salary type to FNO.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdditionalSalary&lt;/i&gt; - Report additional salary type to FNO.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing FNO (Finans Norge) reporting types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;VariableSalary&lt;/i&gt; - Report variable salary type to FNO.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AdditionalSalary&lt;/i&gt; - Report additional salary type to FNO.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum FnoReportingType
    {
        /// <summary>
        /// Enum VariableSalary for value: VariableSalary
        /// </summary>
        VariableSalary = 1,

        /// <summary>
        /// Enum AdditionalSalary for value: AdditionalSalary
        /// </summary>
        AdditionalSalary = 2
    }

    /// <summary>
    /// Converts <see cref="FnoReportingType"/> to and from the JSON value
    /// </summary>
    public static class FnoReportingTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FnoReportingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FnoReportingType FromString(string value)
        {
            if (value.Equals("VariableSalary"))
                return FnoReportingType.VariableSalary;

            if (value.Equals("AdditionalSalary"))
                return FnoReportingType.AdditionalSalary;

            throw new NotImplementedException($"Could not convert value to type FnoReportingType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FnoReportingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FnoReportingType? FromStringOrDefault(string value)
        {
            if (value.Equals("VariableSalary"))
                return FnoReportingType.VariableSalary;

            if (value.Equals("AdditionalSalary"))
                return FnoReportingType.AdditionalSalary;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FnoReportingType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FnoReportingType value)
        {
            if (value == FnoReportingType.VariableSalary)
                return "VariableSalary";

            if (value == FnoReportingType.AdditionalSalary)
                return "AdditionalSalary";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FnoReportingType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FnoReportingTypeJsonConverter : JsonConverter<FnoReportingType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FnoReportingType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FnoReportingType? result = rawValue == null
                ? null
                : FnoReportingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FnoReportingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fnoReportingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FnoReportingType fnoReportingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(fnoReportingType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FnoReportingType"/>
    /// </summary>
    public class FnoReportingTypeNullableJsonConverter : JsonConverter<FnoReportingType?>
    {
        /// <summary>
        /// Returns a FnoReportingType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FnoReportingType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FnoReportingType? result = rawValue == null
                ? null
                : FnoReportingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fnoReportingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FnoReportingType? fnoReportingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(fnoReportingType?.ToString() ?? "null");
        }
    }
}
