// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Additional agriculture product related information that needs to be stored to be able to report on it
    /// </summary>
    public partial class AgricultureDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgricultureDetails" /> class.
        /// </summary>
        /// <param name="agriculturalIndustryCode">Gets or sets the agricultural industry code (driftsgrein)</param>
        /// <param name="isMainProductLine">Whether the posting info comes from a line that is a main product line (not only additions related to a product)</param>
        /// <param name="productAdditionSubtractionCode">Product addition or subtraction (Produkt tillegg trekk)</param>
        /// <param name="productAnimalId">The ID of the animal (Dyre-id)</param>
        /// <param name="productChassisId">VIN / Chassis number 17-digits according to iso</param>
        /// <param name="productCode">Product code according to Landbrukets dataflyt, can differ from product code voucher line</param>
        /// <param name="productDateOfBirth">Date of birth of the animal, required when information is related to live cattle</param>
        /// <param name="productDetailCode">Product detail code</param>
        /// <param name="productEcological">Whether a product is ecological or not</param>
        /// <param name="productGender">productGender</param>
        /// <param name="productGtinNumber">Global unit trade number</param>
        /// <param name="productHasForestCertificationCode">Flag whether the forestry product is environmentally certified (Milj√∏sertifisert)</param>
        /// <param name="productMachineType">Type of machinery</param>
        /// <param name="productQualityCode">The product quality code (Produktkvalitet)</param>
        /// <param name="productRacialCode">The race of the animal, required on sale of live animals</param>
        /// <param name="productRegistrationId">Registration number</param>
        [JsonConstructor]
        public AgricultureDetails(Option<int?> agriculturalIndustryCode = default, Option<bool?> isMainProductLine = default, Option<int?> productAdditionSubtractionCode = default, Option<string?> productAnimalId = default, Option<string?> productChassisId = default, Option<int?> productCode = default, Option<DateTimeOffset?> productDateOfBirth = default, Option<int?> productDetailCode = default, Option<bool?> productEcological = default, Option<LivestockGender?> productGender = default, Option<string?> productGtinNumber = default, Option<bool?> productHasForestCertificationCode = default, Option<string?> productMachineType = default, Option<int?> productQualityCode = default, Option<string?> productRacialCode = default, Option<string?> productRegistrationId = default)
        {
            AgriculturalIndustryCodeOption = agriculturalIndustryCode;
            IsMainProductLineOption = isMainProductLine;
            ProductAdditionSubtractionCodeOption = productAdditionSubtractionCode;
            ProductAnimalIdOption = productAnimalId;
            ProductChassisIdOption = productChassisId;
            ProductCodeOption = productCode;
            ProductDateOfBirthOption = productDateOfBirth;
            ProductDetailCodeOption = productDetailCode;
            ProductEcologicalOption = productEcological;
            ProductGenderOption = productGender;
            ProductGtinNumberOption = productGtinNumber;
            ProductHasForestCertificationCodeOption = productHasForestCertificationCode;
            ProductMachineTypeOption = productMachineType;
            ProductQualityCodeOption = productQualityCode;
            ProductRacialCodeOption = productRacialCode;
            ProductRegistrationIdOption = productRegistrationId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ProductGender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LivestockGender?> ProductGenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProductGender
        /// </summary>
        [JsonPropertyName("ProductGender")]
        public LivestockGender? ProductGender { get { return this.ProductGenderOption; } set { this.ProductGenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of AgriculturalIndustryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AgriculturalIndustryCodeOption { get; private set; }

        /// <summary>
        /// Gets or sets the agricultural industry code (driftsgrein)
        /// </summary>
        /// <value>Gets or sets the agricultural industry code (driftsgrein)</value>
        [JsonPropertyName("AgriculturalIndustryCode")]
        public int? AgriculturalIndustryCode { get { return this.AgriculturalIndustryCodeOption; } set { this.AgriculturalIndustryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsMainProductLine
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsMainProductLineOption { get; private set; }

        /// <summary>
        /// Whether the posting info comes from a line that is a main product line (not only additions related to a product)
        /// </summary>
        /// <value>Whether the posting info comes from a line that is a main product line (not only additions related to a product)</value>
        [JsonPropertyName("IsMainProductLine")]
        public bool? IsMainProductLine { get { return this.IsMainProductLineOption; } set { this.IsMainProductLineOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductAdditionSubtractionCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductAdditionSubtractionCodeOption { get; private set; }

        /// <summary>
        /// Product addition or subtraction (Produkt tillegg trekk)
        /// </summary>
        /// <value>Product addition or subtraction (Produkt tillegg trekk)</value>
        [JsonPropertyName("ProductAdditionSubtractionCode")]
        public int? ProductAdditionSubtractionCode { get { return this.ProductAdditionSubtractionCodeOption; } set { this.ProductAdditionSubtractionCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductAnimalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductAnimalIdOption { get; private set; }

        /// <summary>
        /// The ID of the animal (Dyre-id)
        /// </summary>
        /// <value>The ID of the animal (Dyre-id)</value>
        [JsonPropertyName("ProductAnimalId")]
        public string? ProductAnimalId { get { return this.ProductAnimalIdOption; } set { this.ProductAnimalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductChassisId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductChassisIdOption { get; private set; }

        /// <summary>
        /// VIN / Chassis number 17-digits according to iso
        /// </summary>
        /// <value>VIN / Chassis number 17-digits according to iso</value>
        [JsonPropertyName("ProductChassisId")]
        public string? ProductChassisId { get { return this.ProductChassisIdOption; } set { this.ProductChassisIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductCodeOption { get; private set; }

        /// <summary>
        /// Product code according to Landbrukets dataflyt, can differ from product code voucher line
        /// </summary>
        /// <value>Product code according to Landbrukets dataflyt, can differ from product code voucher line</value>
        [JsonPropertyName("ProductCode")]
        public int? ProductCode { get { return this.ProductCodeOption; } set { this.ProductCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductDateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> ProductDateOfBirthOption { get; private set; }

        /// <summary>
        /// Date of birth of the animal, required when information is related to live cattle
        /// </summary>
        /// <value>Date of birth of the animal, required when information is related to live cattle</value>
        [JsonPropertyName("ProductDateOfBirth")]
        public DateTimeOffset? ProductDateOfBirth { get { return this.ProductDateOfBirthOption; } set { this.ProductDateOfBirthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductDetailCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductDetailCodeOption { get; private set; }

        /// <summary>
        /// Product detail code
        /// </summary>
        /// <value>Product detail code</value>
        [JsonPropertyName("ProductDetailCode")]
        public int? ProductDetailCode { get { return this.ProductDetailCodeOption; } set { this.ProductDetailCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductEcological
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProductEcologicalOption { get; private set; }

        /// <summary>
        /// Whether a product is ecological or not
        /// </summary>
        /// <value>Whether a product is ecological or not</value>
        [JsonPropertyName("ProductEcological")]
        public bool? ProductEcological { get { return this.ProductEcologicalOption; } set { this.ProductEcologicalOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductGtinNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductGtinNumberOption { get; private set; }

        /// <summary>
        /// Global unit trade number
        /// </summary>
        /// <value>Global unit trade number</value>
        [JsonPropertyName("ProductGtinNumber")]
        public string? ProductGtinNumber { get { return this.ProductGtinNumberOption; } set { this.ProductGtinNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductHasForestCertificationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProductHasForestCertificationCodeOption { get; private set; }

        /// <summary>
        /// Flag whether the forestry product is environmentally certified (Milj√∏sertifisert)
        /// </summary>
        /// <value>Flag whether the forestry product is environmentally certified (Milj√∏sertifisert)</value>
        [JsonPropertyName("ProductHasForestCertificationCode")]
        public bool? ProductHasForestCertificationCode { get { return this.ProductHasForestCertificationCodeOption; } set { this.ProductHasForestCertificationCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductMachineType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductMachineTypeOption { get; private set; }

        /// <summary>
        /// Type of machinery
        /// </summary>
        /// <value>Type of machinery</value>
        [JsonPropertyName("ProductMachineType")]
        public string? ProductMachineType { get { return this.ProductMachineTypeOption; } set { this.ProductMachineTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductQualityCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProductQualityCodeOption { get; private set; }

        /// <summary>
        /// The product quality code (Produktkvalitet)
        /// </summary>
        /// <value>The product quality code (Produktkvalitet)</value>
        [JsonPropertyName("ProductQualityCode")]
        public int? ProductQualityCode { get { return this.ProductQualityCodeOption; } set { this.ProductQualityCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductRacialCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductRacialCodeOption { get; private set; }

        /// <summary>
        /// The race of the animal, required on sale of live animals
        /// </summary>
        /// <value>The race of the animal, required on sale of live animals</value>
        [JsonPropertyName("ProductRacialCode")]
        public string? ProductRacialCode { get { return this.ProductRacialCodeOption; } set { this.ProductRacialCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductRegistrationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductRegistrationIdOption { get; private set; }

        /// <summary>
        /// Registration number
        /// </summary>
        /// <value>Registration number</value>
        [JsonPropertyName("ProductRegistrationId")]
        public string? ProductRegistrationId { get { return this.ProductRegistrationIdOption; } set { this.ProductRegistrationIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgricultureDetails {\n");
            sb.Append("  AgriculturalIndustryCode: ").Append(AgriculturalIndustryCode).Append("\n");
            sb.Append("  IsMainProductLine: ").Append(IsMainProductLine).Append("\n");
            sb.Append("  ProductAdditionSubtractionCode: ").Append(ProductAdditionSubtractionCode).Append("\n");
            sb.Append("  ProductAnimalId: ").Append(ProductAnimalId).Append("\n");
            sb.Append("  ProductChassisId: ").Append(ProductChassisId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductDateOfBirth: ").Append(ProductDateOfBirth).Append("\n");
            sb.Append("  ProductDetailCode: ").Append(ProductDetailCode).Append("\n");
            sb.Append("  ProductEcological: ").Append(ProductEcological).Append("\n");
            sb.Append("  ProductGender: ").Append(ProductGender).Append("\n");
            sb.Append("  ProductGtinNumber: ").Append(ProductGtinNumber).Append("\n");
            sb.Append("  ProductHasForestCertificationCode: ").Append(ProductHasForestCertificationCode).Append("\n");
            sb.Append("  ProductMachineType: ").Append(ProductMachineType).Append("\n");
            sb.Append("  ProductQualityCode: ").Append(ProductQualityCode).Append("\n");
            sb.Append("  ProductRacialCode: ").Append(ProductRacialCode).Append("\n");
            sb.Append("  ProductRegistrationId: ").Append(ProductRegistrationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProductAnimalId (string) maxLength
            if (this.ProductAnimalId != null && this.ProductAnimalId.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ProductAnimalId, length must be less than 100.", new [] { "ProductAnimalId" });
            }

            // ProductChassisId (string) maxLength
            if (this.ProductChassisId != null && this.ProductChassisId.Length > 17)
            {
                yield return new ValidationResult("Invalid value for ProductChassisId, length must be less than 17.", new [] { "ProductChassisId" });
            }

            // ProductGtinNumber (string) maxLength
            if (this.ProductGtinNumber != null && this.ProductGtinNumber.Length > 14)
            {
                yield return new ValidationResult("Invalid value for ProductGtinNumber, length must be less than 14.", new [] { "ProductGtinNumber" });
            }

            // ProductMachineType (string) maxLength
            if (this.ProductMachineType != null && this.ProductMachineType.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ProductMachineType, length must be less than 100.", new [] { "ProductMachineType" });
            }

            // ProductRacialCode (string) maxLength
            if (this.ProductRacialCode != null && this.ProductRacialCode.Length > 32)
            {
                yield return new ValidationResult("Invalid value for ProductRacialCode, length must be less than 32.", new [] { "ProductRacialCode" });
            }

            // ProductRegistrationId (string) maxLength
            if (this.ProductRegistrationId != null && this.ProductRegistrationId.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ProductRegistrationId, length must be less than 100.", new [] { "ProductRegistrationId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AgricultureDetails" />
    /// </summary>
    public class AgricultureDetailsJsonConverter : JsonConverter<AgricultureDetails>
    {
        /// <summary>
        /// The format to use to serialize ProductDateOfBirth
        /// </summary>
        public static string ProductDateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="AgricultureDetails" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AgricultureDetails Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> agriculturalIndustryCode = default;
            Option<bool?> isMainProductLine = default;
            Option<int?> productAdditionSubtractionCode = default;
            Option<string?> productAnimalId = default;
            Option<string?> productChassisId = default;
            Option<int?> productCode = default;
            Option<DateTimeOffset?> productDateOfBirth = default;
            Option<int?> productDetailCode = default;
            Option<bool?> productEcological = default;
            Option<LivestockGender?> productGender = default;
            Option<string?> productGtinNumber = default;
            Option<bool?> productHasForestCertificationCode = default;
            Option<string?> productMachineType = default;
            Option<int?> productQualityCode = default;
            Option<string?> productRacialCode = default;
            Option<string?> productRegistrationId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AgriculturalIndustryCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agriculturalIndustryCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "IsMainProductLine":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isMainProductLine = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ProductAdditionSubtractionCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productAdditionSubtractionCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProductAnimalId":
                            productAnimalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductChassisId":
                            productChassisId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProductDateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productDateOfBirth = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ProductDetailCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productDetailCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProductEcological":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productEcological = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ProductGender":
                            string? productGenderRawValue = utf8JsonReader.GetString();
                            if (productGenderRawValue != null)
                                productGender = new Option<LivestockGender?>(LivestockGenderValueConverter.FromStringOrDefault(productGenderRawValue));
                            break;
                        case "ProductGtinNumber":
                            productGtinNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductHasForestCertificationCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productHasForestCertificationCode = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ProductMachineType":
                            productMachineType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductQualityCode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productQualityCode = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "ProductRacialCode":
                            productRacialCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductRegistrationId":
                            productRegistrationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isMainProductLine.IsSet && isMainProductLine.Value == null)
                throw new ArgumentNullException(nameof(isMainProductLine), "Property is not nullable for class AgricultureDetails.");

            return new AgricultureDetails(agriculturalIndustryCode, isMainProductLine, productAdditionSubtractionCode, productAnimalId, productChassisId, productCode, productDateOfBirth, productDetailCode, productEcological, productGender, productGtinNumber, productHasForestCertificationCode, productMachineType, productQualityCode, productRacialCode, productRegistrationId);
        }

        /// <summary>
        /// Serializes a <see cref="AgricultureDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agricultureDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AgricultureDetails agricultureDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, agricultureDetails, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AgricultureDetails" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="agricultureDetails"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AgricultureDetails agricultureDetails, JsonSerializerOptions jsonSerializerOptions)
        {
            if (agricultureDetails.AgriculturalIndustryCodeOption.IsSet)
                if (agricultureDetails.AgriculturalIndustryCodeOption.Value != null)
                    writer.WriteNumber("AgriculturalIndustryCode", agricultureDetails.AgriculturalIndustryCodeOption.Value!.Value);
                else
                    writer.WriteNull("AgriculturalIndustryCode");

            if (agricultureDetails.IsMainProductLineOption.IsSet)
                writer.WriteBoolean("IsMainProductLine", agricultureDetails.IsMainProductLineOption.Value!.Value);

            if (agricultureDetails.ProductAdditionSubtractionCodeOption.IsSet)
                if (agricultureDetails.ProductAdditionSubtractionCodeOption.Value != null)
                    writer.WriteNumber("ProductAdditionSubtractionCode", agricultureDetails.ProductAdditionSubtractionCodeOption.Value!.Value);
                else
                    writer.WriteNull("ProductAdditionSubtractionCode");

            if (agricultureDetails.ProductAnimalIdOption.IsSet)
                if (agricultureDetails.ProductAnimalIdOption.Value != null)
                    writer.WriteString("ProductAnimalId", agricultureDetails.ProductAnimalId);
                else
                    writer.WriteNull("ProductAnimalId");

            if (agricultureDetails.ProductChassisIdOption.IsSet)
                if (agricultureDetails.ProductChassisIdOption.Value != null)
                    writer.WriteString("ProductChassisId", agricultureDetails.ProductChassisId);
                else
                    writer.WriteNull("ProductChassisId");

            if (agricultureDetails.ProductCodeOption.IsSet)
                if (agricultureDetails.ProductCodeOption.Value != null)
                    writer.WriteNumber("ProductCode", agricultureDetails.ProductCodeOption.Value!.Value);
                else
                    writer.WriteNull("ProductCode");

            if (agricultureDetails.ProductDateOfBirthOption.IsSet)
                if (agricultureDetails.ProductDateOfBirthOption.Value != null)
                    writer.WriteString("ProductDateOfBirth", agricultureDetails.ProductDateOfBirthOption.Value!.Value.ToString(ProductDateOfBirthFormat));
                else
                    writer.WriteNull("ProductDateOfBirth");

            if (agricultureDetails.ProductDetailCodeOption.IsSet)
                if (agricultureDetails.ProductDetailCodeOption.Value != null)
                    writer.WriteNumber("ProductDetailCode", agricultureDetails.ProductDetailCodeOption.Value!.Value);
                else
                    writer.WriteNull("ProductDetailCode");

            if (agricultureDetails.ProductEcologicalOption.IsSet)
                if (agricultureDetails.ProductEcologicalOption.Value != null)
                    writer.WriteBoolean("ProductEcological", agricultureDetails.ProductEcologicalOption.Value!.Value);
                else
                    writer.WriteNull("ProductEcological");

            if (agricultureDetails.ProductGenderOption.IsSet)
                if (agricultureDetails.ProductGenderOption!.Value != null)
                {
                    var productGenderRawValue = LivestockGenderValueConverter.ToJsonValue(agricultureDetails.ProductGenderOption.Value!.Value);
                    writer.WriteString("ProductGender", productGenderRawValue);
                }
                else
                    writer.WriteNull("ProductGender");
            if (agricultureDetails.ProductGtinNumberOption.IsSet)
                if (agricultureDetails.ProductGtinNumberOption.Value != null)
                    writer.WriteString("ProductGtinNumber", agricultureDetails.ProductGtinNumber);
                else
                    writer.WriteNull("ProductGtinNumber");

            if (agricultureDetails.ProductHasForestCertificationCodeOption.IsSet)
                if (agricultureDetails.ProductHasForestCertificationCodeOption.Value != null)
                    writer.WriteBoolean("ProductHasForestCertificationCode", agricultureDetails.ProductHasForestCertificationCodeOption.Value!.Value);
                else
                    writer.WriteNull("ProductHasForestCertificationCode");

            if (agricultureDetails.ProductMachineTypeOption.IsSet)
                if (agricultureDetails.ProductMachineTypeOption.Value != null)
                    writer.WriteString("ProductMachineType", agricultureDetails.ProductMachineType);
                else
                    writer.WriteNull("ProductMachineType");

            if (agricultureDetails.ProductQualityCodeOption.IsSet)
                if (agricultureDetails.ProductQualityCodeOption.Value != null)
                    writer.WriteNumber("ProductQualityCode", agricultureDetails.ProductQualityCodeOption.Value!.Value);
                else
                    writer.WriteNull("ProductQualityCode");

            if (agricultureDetails.ProductRacialCodeOption.IsSet)
                if (agricultureDetails.ProductRacialCodeOption.Value != null)
                    writer.WriteString("ProductRacialCode", agricultureDetails.ProductRacialCode);
                else
                    writer.WriteNull("ProductRacialCode");

            if (agricultureDetails.ProductRegistrationIdOption.IsSet)
                if (agricultureDetails.ProductRegistrationIdOption.Value != null)
                    writer.WriteString("ProductRegistrationId", agricultureDetails.ProductRegistrationId);
                else
                    writer.WriteNull("ProductRegistrationId");
        }
    }
}
