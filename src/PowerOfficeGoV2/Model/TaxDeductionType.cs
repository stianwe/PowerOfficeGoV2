// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining tax deduction type of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;NoTax&lt;/i&gt; - No tax deduction.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Percentage&lt;/i&gt; - Tax deduction based on percentage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TaxTable&lt;/i&gt; - Tax deduction according to a tax table.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining tax deduction type of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;NoTax&lt;/i&gt; - No tax deduction.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Percentage&lt;/i&gt; - Tax deduction based on percentage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TaxTable&lt;/i&gt; - Tax deduction according to a tax table.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum TaxDeductionType
    {
        /// <summary>
        /// Enum NoTax for value: NoTax
        /// </summary>
        NoTax = 1,

        /// <summary>
        /// Enum Percentage for value: Percentage
        /// </summary>
        Percentage = 2,

        /// <summary>
        /// Enum TaxTable for value: TaxTable
        /// </summary>
        TaxTable = 3
    }

    /// <summary>
    /// Converts <see cref="TaxDeductionType"/> to and from the JSON value
    /// </summary>
    public static class TaxDeductionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TaxDeductionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxDeductionType FromString(string value)
        {
            if (value.Equals("NoTax"))
                return TaxDeductionType.NoTax;

            if (value.Equals("Percentage"))
                return TaxDeductionType.Percentage;

            if (value.Equals("TaxTable"))
                return TaxDeductionType.TaxTable;

            throw new NotImplementedException($"Could not convert value to type TaxDeductionType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TaxDeductionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxDeductionType? FromStringOrDefault(string value)
        {
            if (value.Equals("NoTax"))
                return TaxDeductionType.NoTax;

            if (value.Equals("Percentage"))
                return TaxDeductionType.Percentage;

            if (value.Equals("TaxTable"))
                return TaxDeductionType.TaxTable;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TaxDeductionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TaxDeductionType value)
        {
            if (value == TaxDeductionType.NoTax)
                return "NoTax";

            if (value == TaxDeductionType.Percentage)
                return "Percentage";

            if (value == TaxDeductionType.TaxTable)
                return "TaxTable";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TaxDeductionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TaxDeductionTypeJsonConverter : JsonConverter<TaxDeductionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TaxDeductionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TaxDeductionType? result = rawValue == null
                ? null
                : TaxDeductionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TaxDeductionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxDeductionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TaxDeductionType taxDeductionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(taxDeductionType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TaxDeductionType"/>
    /// </summary>
    public class TaxDeductionTypeNullableJsonConverter : JsonConverter<TaxDeductionType?>
    {
        /// <summary>
        /// Returns a TaxDeductionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TaxDeductionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TaxDeductionType? result = rawValue == null
                ? null
                : TaxDeductionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxDeductionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TaxDeductionType? taxDeductionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(taxDeductionType?.ToString() ?? "null");
        }
    }
}
