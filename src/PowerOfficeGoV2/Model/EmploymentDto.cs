// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employment DTO contains properties relevant to an employment relationship object in Go.  Will only contain line count for salary-, fixed salary-, leave-, layout- and percentage of full time employment lines.
    /// </summary>
    public partial class EmploymentDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentDto" /> class.
        /// </summary>
        /// <param name="createdDateTimeOffset">The timestamp when the employment entity was created.</param>
        /// <param name="employeeId">The identifier of the employee the employment belongs to.</param>
        /// <param name="employmentForm">employmentForm</param>
        /// <param name="employmentSpecification">employmentSpecification</param>
        /// <param name="employmentType">employmentType</param>
        /// <param name="endDate">The end date of the employment.</param>
        /// <param name="endDateReason">endDateReason</param>
        /// <param name="endedAndReported">True when the employment is ended and the reporting (a-melding) is done and finalized.  If true, the employment will not be included in future reporting (a-melding).</param>
        /// <param name="enterpriseId">The identifier of the enterprise for the employment.</param>
        /// <param name="fixedSalaryCount">The number of fixed salary lines on this employment.</param>
        /// <param name="ftePercentageCount">The number of full-time equivalent (FTE) percentage lines on this employment.</param>
        /// <param name="fullTimeHoursPerWeek">The number of hours that would represent full time week of employment.</param>
        /// <param name="id">The id of the employment (employment relationship).</param>
        /// <param name="isDefault">Indicates if the employment is the default employment for the employee.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp when the employment entity was last changed.</param>
        /// <param name="layoffCount">The number of layoff lines on this employment.</param>
        /// <param name="leaveCount">The number of leave lines on this employment.</param>
        /// <param name="professionCode">The profession code of the employment.  The code follow SSB&#39;s STYRK-98 standard with 7 digits.</param>
        /// <param name="professionTitle">The profession title of the employment.  Is directly connected to the profession code.</param>
        /// <param name="reportingId">The id of the employment that will be reported.  Can be set to match the id of the previous payroll system.  If not set, Go will assign an id.</param>
        /// <param name="salaryCount">The number of salary lines on this employment.</param>
        /// <param name="startDate">The start date of the employment.</param>
        /// <param name="taxCountryCode">The ISO 3166-1 alfa-2 country code (two characters).  Can only be set to Finland (FI) or Sweden (SE) if employment specification is set to cross border commuter.</param>
        /// <param name="taxRule">taxRule</param>
        /// <param name="workingHoursArrangement">workingHoursArrangement</param>
        [JsonConstructor]
        public EmploymentDto(Option<DateTimeOffset?> createdDateTimeOffset = default, Option<long?> employeeId = default, Option<EmploymentFormType?> employmentForm = default, Option<EmploymentSpecificationType?> employmentSpecification = default, Option<EmploymentType?> employmentType = default, Option<DateTimeOffset?> endDate = default, Option<EndDateReasonType?> endDateReason = default, Option<bool?> endedAndReported = default, Option<long?> enterpriseId = default, Option<long?> fixedSalaryCount = default, Option<long?> ftePercentageCount = default, Option<double?> fullTimeHoursPerWeek = default, Option<long?> id = default, Option<bool?> isDefault = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<long?> layoffCount = default, Option<long?> leaveCount = default, Option<string?> professionCode = default, Option<string?> professionTitle = default, Option<string?> reportingId = default, Option<long?> salaryCount = default, Option<DateTimeOffset?> startDate = default, Option<string?> taxCountryCode = default, Option<TaxRuleType?> taxRule = default, Option<WorkingHoursArrangementType?> workingHoursArrangement = default)
        {
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            EmployeeIdOption = employeeId;
            EmploymentFormOption = employmentForm;
            EmploymentSpecificationOption = employmentSpecification;
            EmploymentTypeOption = employmentType;
            EndDateOption = endDate;
            EndDateReasonOption = endDateReason;
            EndedAndReportedOption = endedAndReported;
            EnterpriseIdOption = enterpriseId;
            FixedSalaryCountOption = fixedSalaryCount;
            FtePercentageCountOption = ftePercentageCount;
            FullTimeHoursPerWeekOption = fullTimeHoursPerWeek;
            IdOption = id;
            IsDefaultOption = isDefault;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LayoffCountOption = layoffCount;
            LeaveCountOption = leaveCount;
            ProfessionCodeOption = professionCode;
            ProfessionTitleOption = professionTitle;
            ReportingIdOption = reportingId;
            SalaryCountOption = salaryCount;
            StartDateOption = startDate;
            TaxCountryCodeOption = taxCountryCode;
            TaxRuleOption = taxRule;
            WorkingHoursArrangementOption = workingHoursArrangement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmploymentForm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmploymentFormType?> EmploymentFormOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentForm
        /// </summary>
        [JsonPropertyName("EmploymentForm")]
        public EmploymentFormType? EmploymentForm { get { return this.EmploymentFormOption; } set { this.EmploymentFormOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmploymentSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmploymentSpecificationType?> EmploymentSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentSpecification
        /// </summary>
        [JsonPropertyName("EmploymentSpecification")]
        public EmploymentSpecificationType? EmploymentSpecification { get { return this.EmploymentSpecificationOption; } set { this.EmploymentSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmploymentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmploymentType?> EmploymentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentType
        /// </summary>
        [JsonPropertyName("EmploymentType")]
        public EmploymentType? EmploymentType { get { return this.EmploymentTypeOption; } set { this.EmploymentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDateReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndDateReasonType?> EndDateReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndDateReason
        /// </summary>
        [JsonPropertyName("EndDateReason")]
        public EndDateReasonType? EndDateReason { get { return this.EndDateReasonOption; } set { this.EndDateReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxRuleType?> TaxRuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxRule
        /// </summary>
        [JsonPropertyName("TaxRule")]
        public TaxRuleType? TaxRule { get { return this.TaxRuleOption; } set { this.TaxRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of WorkingHoursArrangement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WorkingHoursArrangementType?> WorkingHoursArrangementOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkingHoursArrangement
        /// </summary>
        [JsonPropertyName("WorkingHoursArrangement")]
        public WorkingHoursArrangementType? WorkingHoursArrangement { get { return this.WorkingHoursArrangementOption; } set { this.WorkingHoursArrangementOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the employment entity was created.
        /// </summary>
        /// <value>The timestamp when the employment entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of EmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployeeIdOption { get; }

        /// <summary>
        /// The identifier of the employee the employment belongs to.
        /// </summary>
        /// <value>The identifier of the employee the employment belongs to.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployeeId")]
        public long? EmployeeId { get { return this.EmployeeIdOption; } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> EndDateOption { get; private set; }

        /// <summary>
        /// The end date of the employment.
        /// </summary>
        /// <value>The end date of the employment.</value>
        /* <example>Sun Jul 31 02:00:00 CEST 2022</example> */
        [JsonPropertyName("EndDate")]
        public DateTimeOffset? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndedAndReported
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EndedAndReportedOption { get; }

        /// <summary>
        /// True when the employment is ended and the reporting (a-melding) is done and finalized.  If true, the employment will not be included in future reporting (a-melding).
        /// </summary>
        /// <value>True when the employment is ended and the reporting (a-melding) is done and finalized.  If true, the employment will not be included in future reporting (a-melding).</value>
        /* <example>false</example> */
        [JsonPropertyName("EndedAndReported")]
        public bool? EndedAndReported { get { return this.EndedAndReportedOption; } }

        /// <summary>
        /// Used to track the state of EnterpriseId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EnterpriseIdOption { get; private set; }

        /// <summary>
        /// The identifier of the enterprise for the employment.
        /// </summary>
        /// <value>The identifier of the enterprise for the employment.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EnterpriseId")]
        public long? EnterpriseId { get { return this.EnterpriseIdOption; } set { this.EnterpriseIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FixedSalaryCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FixedSalaryCountOption { get; }

        /// <summary>
        /// The number of fixed salary lines on this employment.
        /// </summary>
        /// <value>The number of fixed salary lines on this employment.</value>
        /* <example>1</example> */
        [JsonPropertyName("FixedSalaryCount")]
        public long? FixedSalaryCount { get { return this.FixedSalaryCountOption; } }

        /// <summary>
        /// Used to track the state of FtePercentageCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FtePercentageCountOption { get; }

        /// <summary>
        /// The number of full-time equivalent (FTE) percentage lines on this employment.
        /// </summary>
        /// <value>The number of full-time equivalent (FTE) percentage lines on this employment.</value>
        /* <example>4</example> */
        [JsonPropertyName("FtePercentageCount")]
        public long? FtePercentageCount { get { return this.FtePercentageCountOption; } }

        /// <summary>
        /// Used to track the state of FullTimeHoursPerWeek
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FullTimeHoursPerWeekOption { get; private set; }

        /// <summary>
        /// The number of hours that would represent full time week of employment.
        /// </summary>
        /// <value>The number of hours that would represent full time week of employment.</value>
        /* <example>37.5</example> */
        [JsonPropertyName("FullTimeHoursPerWeek")]
        public double? FullTimeHoursPerWeek { get { return this.FullTimeHoursPerWeekOption; } set { this.FullTimeHoursPerWeekOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The id of the employment (employment relationship).
        /// </summary>
        /// <value>The id of the employment (employment relationship).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// Indicates if the employment is the default employment for the employee.
        /// </summary>
        /// <value>Indicates if the employment is the default employment for the employee.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsDefault")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp when the employment entity was last changed.
        /// </summary>
        /// <value>The timestamp when the employment entity was last changed.</value>
        /* <example>2021-09-30T09:33:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LayoffCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LayoffCountOption { get; }

        /// <summary>
        /// The number of layoff lines on this employment.
        /// </summary>
        /// <value>The number of layoff lines on this employment.</value>
        /* <example>2</example> */
        [JsonPropertyName("LayoffCount")]
        public long? LayoffCount { get { return this.LayoffCountOption; } }

        /// <summary>
        /// Used to track the state of LeaveCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LeaveCountOption { get; }

        /// <summary>
        /// The number of leave lines on this employment.
        /// </summary>
        /// <value>The number of leave lines on this employment.</value>
        /* <example>3</example> */
        [JsonPropertyName("LeaveCount")]
        public long? LeaveCount { get { return this.LeaveCountOption; } }

        /// <summary>
        /// Used to track the state of ProfessionCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProfessionCodeOption { get; private set; }

        /// <summary>
        /// The profession code of the employment.  The code follow SSB&#39;s STYRK-98 standard with 7 digits.
        /// </summary>
        /// <value>The profession code of the employment.  The code follow SSB&#39;s STYRK-98 standard with 7 digits.</value>
        /* <example>5163121</example> */
        [JsonPropertyName("ProfessionCode")]
        public string? ProfessionCode { get { return this.ProfessionCodeOption; } set { this.ProfessionCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProfessionTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProfessionTitleOption { get; }

        /// <summary>
        /// The profession title of the employment.  Is directly connected to the profession code.
        /// </summary>
        /// <value>The profession title of the employment.  Is directly connected to the profession code.</value>
        /* <example>true</example> */
        [JsonPropertyName("ProfessionTitle")]
        public string? ProfessionTitle { get { return this.ProfessionTitleOption; } }

        /// <summary>
        /// Used to track the state of ReportingId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReportingIdOption { get; private set; }

        /// <summary>
        /// The id of the employment that will be reported.  Can be set to match the id of the previous payroll system.  If not set, Go will assign an id.
        /// </summary>
        /// <value>The id of the employment that will be reported.  Can be set to match the id of the previous payroll system.  If not set, Go will assign an id.</value>
        /* <example>POGO_24677</example> */
        [JsonPropertyName("ReportingId")]
        public string? ReportingId { get { return this.ReportingIdOption; } set { this.ReportingIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalaryCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalaryCountOption { get; }

        /// <summary>
        /// The number of salary lines on this employment.
        /// </summary>
        /// <value>The number of salary lines on this employment.</value>
        /* <example>5</example> */
        [JsonPropertyName("SalaryCount")]
        public long? SalaryCount { get { return this.SalaryCountOption; } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> StartDateOption { get; private set; }

        /// <summary>
        /// The start date of the employment.
        /// </summary>
        /// <value>The start date of the employment.</value>
        /* <example>Fri Jan 01 01:00:00 CET 2021</example> */
        [JsonPropertyName("StartDate")]
        public DateTimeOffset? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TaxCountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code (two characters).  Can only be set to Finland (FI) or Sweden (SE) if employment specification is set to cross border commuter.
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code (two characters).  Can only be set to Finland (FI) or Sweden (SE) if employment specification is set to cross border commuter.</value>
        /* <example>SE</example> */
        [JsonPropertyName("TaxCountryCode")]
        public string? TaxCountryCode { get { return this.TaxCountryCodeOption; } set { this.TaxCountryCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentDto {\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  EmploymentForm: ").Append(EmploymentForm).Append("\n");
            sb.Append("  EmploymentSpecification: ").Append(EmploymentSpecification).Append("\n");
            sb.Append("  EmploymentType: ").Append(EmploymentType).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndDateReason: ").Append(EndDateReason).Append("\n");
            sb.Append("  EndedAndReported: ").Append(EndedAndReported).Append("\n");
            sb.Append("  EnterpriseId: ").Append(EnterpriseId).Append("\n");
            sb.Append("  FixedSalaryCount: ").Append(FixedSalaryCount).Append("\n");
            sb.Append("  FtePercentageCount: ").Append(FtePercentageCount).Append("\n");
            sb.Append("  FullTimeHoursPerWeek: ").Append(FullTimeHoursPerWeek).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LayoffCount: ").Append(LayoffCount).Append("\n");
            sb.Append("  LeaveCount: ").Append(LeaveCount).Append("\n");
            sb.Append("  ProfessionCode: ").Append(ProfessionCode).Append("\n");
            sb.Append("  ProfessionTitle: ").Append(ProfessionTitle).Append("\n");
            sb.Append("  ReportingId: ").Append(ReportingId).Append("\n");
            sb.Append("  SalaryCount: ").Append(SalaryCount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TaxCountryCode: ").Append(TaxCountryCode).Append("\n");
            sb.Append("  TaxRule: ").Append(TaxRule).Append("\n");
            sb.Append("  WorkingHoursArrangement: ").Append(WorkingHoursArrangement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentDto" />
    /// </summary>
    public class EmploymentDtoJsonConverter : JsonConverter<EmploymentDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<long?> employeeId = default;
            Option<EmploymentFormType?> employmentForm = default;
            Option<EmploymentSpecificationType?> employmentSpecification = default;
            Option<EmploymentType?> employmentType = default;
            Option<DateTimeOffset?> endDate = default;
            Option<EndDateReasonType?> endDateReason = default;
            Option<bool?> endedAndReported = default;
            Option<long?> enterpriseId = default;
            Option<long?> fixedSalaryCount = default;
            Option<long?> ftePercentageCount = default;
            Option<double?> fullTimeHoursPerWeek = default;
            Option<long?> id = default;
            Option<bool?> isDefault = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<long?> layoffCount = default;
            Option<long?> leaveCount = default;
            Option<string?> professionCode = default;
            Option<string?> professionTitle = default;
            Option<string?> reportingId = default;
            Option<long?> salaryCount = default;
            Option<DateTimeOffset?> startDate = default;
            Option<string?> taxCountryCode = default;
            Option<TaxRuleType?> taxRule = default;
            Option<WorkingHoursArrangementType?> workingHoursArrangement = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmploymentForm":
                            string? employmentFormRawValue = utf8JsonReader.GetString();
                            if (employmentFormRawValue != null)
                                employmentForm = new Option<EmploymentFormType?>(EmploymentFormTypeValueConverter.FromStringOrDefault(employmentFormRawValue));
                            break;
                        case "EmploymentSpecification":
                            string? employmentSpecificationRawValue = utf8JsonReader.GetString();
                            if (employmentSpecificationRawValue != null)
                                employmentSpecification = new Option<EmploymentSpecificationType?>(EmploymentSpecificationTypeValueConverter.FromStringOrDefault(employmentSpecificationRawValue));
                            break;
                        case "EmploymentType":
                            string? employmentTypeRawValue = utf8JsonReader.GetString();
                            if (employmentTypeRawValue != null)
                                employmentType = new Option<EmploymentType?>(EmploymentTypeValueConverter.FromStringOrDefault(employmentTypeRawValue));
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EndDateReason":
                            string? endDateReasonRawValue = utf8JsonReader.GetString();
                            if (endDateReasonRawValue != null)
                                endDateReason = new Option<EndDateReasonType?>(EndDateReasonTypeValueConverter.FromStringOrDefault(endDateReasonRawValue));
                            break;
                        case "EndedAndReported":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endedAndReported = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "EnterpriseId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enterpriseId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FixedSalaryCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fixedSalaryCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FtePercentageCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ftePercentageCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FullTimeHoursPerWeek":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fullTimeHoursPerWeek = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LayoffCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                layoffCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "LeaveCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                leaveCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProfessionCode":
                            professionCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProfessionTitle":
                            professionTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ReportingId":
                            reportingId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SalaryCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salaryCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "TaxCountryCode":
                            taxCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TaxRule":
                            string? taxRuleRawValue = utf8JsonReader.GetString();
                            if (taxRuleRawValue != null)
                                taxRule = new Option<TaxRuleType?>(TaxRuleTypeValueConverter.FromStringOrDefault(taxRuleRawValue));
                            break;
                        case "WorkingHoursArrangement":
                            string? workingHoursArrangementRawValue = utf8JsonReader.GetString();
                            if (workingHoursArrangementRawValue != null)
                                workingHoursArrangement = new Option<WorkingHoursArrangementType?>(WorkingHoursArrangementTypeValueConverter.FromStringOrDefault(workingHoursArrangementRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class EmploymentDto.");

            if (employeeId.IsSet && employeeId.Value == null)
                throw new ArgumentNullException(nameof(employeeId), "Property is not nullable for class EmploymentDto.");

            if (endedAndReported.IsSet && endedAndReported.Value == null)
                throw new ArgumentNullException(nameof(endedAndReported), "Property is not nullable for class EmploymentDto.");

            if (fixedSalaryCount.IsSet && fixedSalaryCount.Value == null)
                throw new ArgumentNullException(nameof(fixedSalaryCount), "Property is not nullable for class EmploymentDto.");

            if (ftePercentageCount.IsSet && ftePercentageCount.Value == null)
                throw new ArgumentNullException(nameof(ftePercentageCount), "Property is not nullable for class EmploymentDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EmploymentDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class EmploymentDto.");

            if (layoffCount.IsSet && layoffCount.Value == null)
                throw new ArgumentNullException(nameof(layoffCount), "Property is not nullable for class EmploymentDto.");

            if (leaveCount.IsSet && leaveCount.Value == null)
                throw new ArgumentNullException(nameof(leaveCount), "Property is not nullable for class EmploymentDto.");

            if (salaryCount.IsSet && salaryCount.Value == null)
                throw new ArgumentNullException(nameof(salaryCount), "Property is not nullable for class EmploymentDto.");

            return new EmploymentDto(createdDateTimeOffset, employeeId, employmentForm, employmentSpecification, employmentType, endDate, endDateReason, endedAndReported, enterpriseId, fixedSalaryCount, ftePercentageCount, fullTimeHoursPerWeek, id, isDefault, lastChangedDateTimeOffset, layoffCount, leaveCount, professionCode, professionTitle, reportingId, salaryCount, startDate, taxCountryCode, taxRule, workingHoursArrangement);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentDto employmentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employmentDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmploymentDto employmentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", employmentDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (employmentDto.EmployeeIdOption.IsSet)
                writer.WriteNumber("EmployeeId", employmentDto.EmployeeIdOption.Value!.Value);

            if (employmentDto.EmploymentFormOption.IsSet)
                if (employmentDto.EmploymentFormOption!.Value != null)
                {
                    var employmentFormRawValue = EmploymentFormTypeValueConverter.ToJsonValue(employmentDto.EmploymentFormOption.Value!.Value);
                    writer.WriteString("EmploymentForm", employmentFormRawValue);
                }
                else
                    writer.WriteNull("EmploymentForm");
            if (employmentDto.EmploymentSpecificationOption.IsSet)
                if (employmentDto.EmploymentSpecificationOption!.Value != null)
                {
                    var employmentSpecificationRawValue = EmploymentSpecificationTypeValueConverter.ToJsonValue(employmentDto.EmploymentSpecificationOption.Value!.Value);
                    writer.WriteString("EmploymentSpecification", employmentSpecificationRawValue);
                }
                else
                    writer.WriteNull("EmploymentSpecification");
            if (employmentDto.EmploymentTypeOption.IsSet)
                if (employmentDto.EmploymentTypeOption!.Value != null)
                {
                    var employmentTypeRawValue = EmploymentTypeValueConverter.ToJsonValue(employmentDto.EmploymentTypeOption.Value!.Value);
                    writer.WriteString("EmploymentType", employmentTypeRawValue);
                }
                else
                    writer.WriteNull("EmploymentType");
            if (employmentDto.EndDateOption.IsSet)
                if (employmentDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", employmentDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (employmentDto.EndDateReasonOption.IsSet)
                if (employmentDto.EndDateReasonOption!.Value != null)
                {
                    var endDateReasonRawValue = EndDateReasonTypeValueConverter.ToJsonValue(employmentDto.EndDateReasonOption.Value!.Value);
                    writer.WriteString("EndDateReason", endDateReasonRawValue);
                }
                else
                    writer.WriteNull("EndDateReason");
            if (employmentDto.EndedAndReportedOption.IsSet)
                writer.WriteBoolean("EndedAndReported", employmentDto.EndedAndReportedOption.Value!.Value);

            if (employmentDto.EnterpriseIdOption.IsSet)
                if (employmentDto.EnterpriseIdOption.Value != null)
                    writer.WriteNumber("EnterpriseId", employmentDto.EnterpriseIdOption.Value!.Value);
                else
                    writer.WriteNull("EnterpriseId");

            if (employmentDto.FixedSalaryCountOption.IsSet)
                writer.WriteNumber("FixedSalaryCount", employmentDto.FixedSalaryCountOption.Value!.Value);

            if (employmentDto.FtePercentageCountOption.IsSet)
                writer.WriteNumber("FtePercentageCount", employmentDto.FtePercentageCountOption.Value!.Value);

            if (employmentDto.FullTimeHoursPerWeekOption.IsSet)
                if (employmentDto.FullTimeHoursPerWeekOption.Value != null)
                    writer.WriteNumber("FullTimeHoursPerWeek", employmentDto.FullTimeHoursPerWeekOption.Value!.Value);
                else
                    writer.WriteNull("FullTimeHoursPerWeek");

            if (employmentDto.IdOption.IsSet)
                writer.WriteNumber("Id", employmentDto.IdOption.Value!.Value);

            if (employmentDto.IsDefaultOption.IsSet)
                if (employmentDto.IsDefaultOption.Value != null)
                    writer.WriteBoolean("IsDefault", employmentDto.IsDefaultOption.Value!.Value);
                else
                    writer.WriteNull("IsDefault");

            if (employmentDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", employmentDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (employmentDto.LayoffCountOption.IsSet)
                writer.WriteNumber("LayoffCount", employmentDto.LayoffCountOption.Value!.Value);

            if (employmentDto.LeaveCountOption.IsSet)
                writer.WriteNumber("LeaveCount", employmentDto.LeaveCountOption.Value!.Value);

            if (employmentDto.ProfessionCodeOption.IsSet)
                if (employmentDto.ProfessionCodeOption.Value != null)
                    writer.WriteString("ProfessionCode", employmentDto.ProfessionCode);
                else
                    writer.WriteNull("ProfessionCode");

            if (employmentDto.ProfessionTitleOption.IsSet)
                if (employmentDto.ProfessionTitleOption.Value != null)
                    writer.WriteString("ProfessionTitle", employmentDto.ProfessionTitle);
                else
                    writer.WriteNull("ProfessionTitle");

            if (employmentDto.ReportingIdOption.IsSet)
                if (employmentDto.ReportingIdOption.Value != null)
                    writer.WriteString("ReportingId", employmentDto.ReportingId);
                else
                    writer.WriteNull("ReportingId");

            if (employmentDto.SalaryCountOption.IsSet)
                writer.WriteNumber("SalaryCount", employmentDto.SalaryCountOption.Value!.Value);

            if (employmentDto.StartDateOption.IsSet)
                if (employmentDto.StartDateOption.Value != null)
                    writer.WriteString("StartDate", employmentDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
                else
                    writer.WriteNull("StartDate");

            if (employmentDto.TaxCountryCodeOption.IsSet)
                if (employmentDto.TaxCountryCodeOption.Value != null)
                    writer.WriteString("TaxCountryCode", employmentDto.TaxCountryCode);
                else
                    writer.WriteNull("TaxCountryCode");

            if (employmentDto.TaxRuleOption.IsSet)
                if (employmentDto.TaxRuleOption!.Value != null)
                {
                    var taxRuleRawValue = TaxRuleTypeValueConverter.ToJsonValue(employmentDto.TaxRuleOption.Value!.Value);
                    writer.WriteString("TaxRule", taxRuleRawValue);
                }
                else
                    writer.WriteNull("TaxRule");
            if (employmentDto.WorkingHoursArrangementOption.IsSet)
                if (employmentDto.WorkingHoursArrangementOption!.Value != null)
                {
                    var workingHoursArrangementRawValue = WorkingHoursArrangementTypeValueConverter.ToJsonValue(employmentDto.WorkingHoursArrangementOption.Value!.Value);
                    writer.WriteString("WorkingHoursArrangement", workingHoursArrangementRawValue);
                }
                else
                    writer.WriteNull("WorkingHoursArrangement");
        }
    }
}
