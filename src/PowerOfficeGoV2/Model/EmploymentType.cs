// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The type of employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Ordinary&lt;/i&gt; - Ordinary employment, i.e. employees working in the service of others for pay or other remuneration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Maritime&lt;/i&gt; - Maritime employment, i.e. employees at sea, on vessels or mobile installations.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreelancersEtc&lt;/i&gt; - Freelancers, board members, elected officials, trustees, foster parents, support contacts, respite care workers and carers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionEtc&lt;/i&gt; - Pensions and other types of payment, without employment,                 coverage from the wage guarantee scheme and deceased debtors,                 persons participating in work training measures for the occupationally disabled when the pay is defined as the receipt of incentive payments (e.g. permanently adapted work),                 etc.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The type of employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Ordinary&lt;/i&gt; - Ordinary employment, i.e. employees working in the service of others for pay or other remuneration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Maritime&lt;/i&gt; - Maritime employment, i.e. employees at sea, on vessels or mobile installations.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreelancersEtc&lt;/i&gt; - Freelancers, board members, elected officials, trustees, foster parents, support contacts, respite care workers and carers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionEtc&lt;/i&gt; - Pensions and other types of payment, without employment,                 coverage from the wage guarantee scheme and deceased debtors,                 persons participating in work training measures for the occupationally disabled when the pay is defined as the receipt of incentive payments (e.g. permanently adapted work),                 etc.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum EmploymentType
    {
        /// <summary>
        /// Enum Ordinary for value: Ordinary
        /// </summary>
        Ordinary = 1,

        /// <summary>
        /// Enum Maritime for value: Maritime
        /// </summary>
        Maritime = 2,

        /// <summary>
        /// Enum FreelancersEtc for value: FreelancersEtc
        /// </summary>
        FreelancersEtc = 3,

        /// <summary>
        /// Enum PensionEtc for value: PensionEtc
        /// </summary>
        PensionEtc = 4
    }

    /// <summary>
    /// Converts <see cref="EmploymentType"/> to and from the JSON value
    /// </summary>
    public static class EmploymentTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmploymentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentType FromString(string value)
        {
            if (value.Equals("Ordinary"))
                return EmploymentType.Ordinary;

            if (value.Equals("Maritime"))
                return EmploymentType.Maritime;

            if (value.Equals("FreelancersEtc"))
                return EmploymentType.FreelancersEtc;

            if (value.Equals("PensionEtc"))
                return EmploymentType.PensionEtc;

            throw new NotImplementedException($"Could not convert value to type EmploymentType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmploymentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmploymentType? FromStringOrDefault(string value)
        {
            if (value.Equals("Ordinary"))
                return EmploymentType.Ordinary;

            if (value.Equals("Maritime"))
                return EmploymentType.Maritime;

            if (value.Equals("FreelancersEtc"))
                return EmploymentType.FreelancersEtc;

            if (value.Equals("PensionEtc"))
                return EmploymentType.PensionEtc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmploymentType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmploymentType value)
        {
            if (value == EmploymentType.Ordinary)
                return "Ordinary";

            if (value == EmploymentType.Maritime)
                return "Maritime";

            if (value == EmploymentType.FreelancersEtc)
                return "FreelancersEtc";

            if (value == EmploymentType.PensionEtc)
                return "PensionEtc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmploymentTypeJsonConverter : JsonConverter<EmploymentType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentType? result = rawValue == null
                ? null
                : EmploymentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmploymentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentType employmentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentType"/>
    /// </summary>
    public class EmploymentTypeNullableJsonConverter : JsonConverter<EmploymentType?>
    {
        /// <summary>
        /// Returns a EmploymentType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmploymentType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmploymentType? result = rawValue == null
                ? null
                : EmploymentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmploymentType? employmentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employmentType?.ToString() ?? "null");
        }
    }
}
