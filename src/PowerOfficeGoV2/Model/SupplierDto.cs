// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The supplier DTO contains all properties relevant to a supplier-object in Go
    /// </summary>
    public partial class SupplierDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierDto" /> class.
        /// </summary>
        /// <param name="contactCreatedDateTimeOffset">The timestamp the contact entity was created.  This might differ from the supplier created timestamp, if the contact was first created as a customer/employee.</param>
        /// <param name="contactGroupIds">The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid).  If the supplier was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="currencyCode">The standard currency code for the supplier.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.</param>
        /// <param name="dateOfBirth">The date of birth of the supplier.   Relevant only if the supplier is a person (when isPerson is true).</param>
        /// <param name="emailAddress">The (general) e-mail address registered for the supplier.  This field is validated for typos in POST/PATCH calls.</param>
        /// <param name="externalImportReference">The external import reference.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</param>
        /// <param name="externalNumber">The external number.  This field can be used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the supplier number.  I.e. when importing incoming invoices using a file, with the supplier number 20000 set in the file, the import will choose the supplier with ExternalNumber 20000 over the supplier with Number 20000. This is the case for file imports only.</param>
        /// <param name="firstName">The first name of the supplier.   Relevant and required if the supplier is a person (i.e. isPerson is true)</param>
        /// <param name="id">The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The supplier object is a contact entity, meaning the id might be shared with a customer and/or an employee if the contact is registered as both a supplier and customer/employee in Go.</param>
        /// <param name="isActive">A value indicating whether this supplier instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a supplier.  Can be false in situations where the customer is still active so that the contact entity cannot be archived, but the supplier is deactivated by a user in the GUI.</param>
        /// <param name="isArchived">A value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).</param>
        /// <param name="isPerson">A value indicating whether this supplier is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the supplier.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.</param>
        /// <param name="lastName">The last name of the supplier.  Relevant and required if the supplier is a person (i.e. isPerson is true)</param>
        /// <param name="legalName">The legal name of the supplier.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the supplier is a company (i.e. isPerson is false)</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="name">The name of the supplier.  Relevant and required if the supplier is a company (i.e. isPerson is false)</param>
        /// <param name="number">The supplier number.  The number will also represent the supplier ledger account, used for supplier ledger transactions.  When creating new suppliers and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the supplier ledger numberseries that exist on the client in Go.</param>
        /// <param name="organizationNumber">The organization number of the supplier.  Relevant for suppliers that are companies (i.e. isPerson is false).</param>
        /// <param name="payout">A flag indicating whether invoices or credit notes from this supplier should be paid using remittance.  Default true, and if true a remittance draft will be created when voucher are posted in the journal entry.</param>
        /// <param name="phoneNumber">The phone number of the supplier.</param>
        /// <param name="subledgerAccountId">The identifier of subledger account associated with the supplier.</param>
        /// <param name="supplierCreatedDateTimeOffset">The timestamp the contact first became a supplier.  For contacts being only suppliers, this property will be equal to the contactCreatedDateTimeOffset property.</param>
        /// <param name="websiteUrl">The url to the suppliers website.</param>
        [JsonConstructor]
        public SupplierDto(Option<DateTime?> contactCreatedDateTimeOffset = default, Option<List<long>?> contactGroupIds = default, Option<Guid?> createdFromImportJournalId = default, Option<string?> currencyCode = default, Option<DateOnly?> dateOfBirth = default, Option<string?> emailAddress = default, Option<string?> externalImportReference = default, Option<long?> externalNumber = default, Option<string?> firstName = default, Option<long?> id = default, Option<bool?> isActive = default, Option<bool?> isArchived = default, Option<bool?> isPerson = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> lastName = default, Option<string?> legalName = default, Option<ContactAddressDto?> mailAddress = default, Option<string?> name = default, Option<long?> number = default, Option<string?> organizationNumber = default, Option<bool?> payout = default, Option<string?> phoneNumber = default, Option<long?> subledgerAccountId = default, Option<DateTime?> supplierCreatedDateTimeOffset = default, Option<string?> websiteUrl = default)
        {
            ContactCreatedDateTimeOffsetOption = contactCreatedDateTimeOffset;
            ContactGroupIdsOption = contactGroupIds;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            CurrencyCodeOption = currencyCode;
            DateOfBirthOption = dateOfBirth;
            EmailAddressOption = emailAddress;
            ExternalImportReferenceOption = externalImportReference;
            ExternalNumberOption = externalNumber;
            FirstNameOption = firstName;
            IdOption = id;
            IsActiveOption = isActive;
            IsArchivedOption = isArchived;
            IsPersonOption = isPerson;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LastNameOption = lastName;
            LegalNameOption = legalName;
            MailAddressOption = mailAddress;
            NameOption = name;
            NumberOption = number;
            OrganizationNumberOption = organizationNumber;
            PayoutOption = payout;
            PhoneNumberOption = phoneNumber;
            SubledgerAccountIdOption = subledgerAccountId;
            SupplierCreatedDateTimeOffsetOption = supplierCreatedDateTimeOffset;
            WebsiteUrlOption = websiteUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ContactCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ContactCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact entity was created.  This might differ from the supplier created timestamp, if the contact was first created as a customer/employee.
        /// </summary>
        /// <value>The timestamp the contact entity was created.  This might differ from the supplier created timestamp, if the contact was first created as a customer/employee.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("ContactCreatedDateTimeOffset")]
        public DateTime? ContactCreatedDateTimeOffset { get { return this.ContactCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ContactGroupIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>?> ContactGroupIdsOption { get; private set; }

        /// <summary>
        /// The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.
        /// </summary>
        /// <value>The contact group ids the current contact is part of, or sets contact group id you want to add this contact to.</value>
        [JsonPropertyName("ContactGroupIds")]
        public List<long>? ContactGroupIds { get { return this.ContactGroupIdsOption; } set { this.ContactGroupIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid).  If the supplier was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid).  If the supplier was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The standard currency code for the supplier.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.
        /// </summary>
        /// <value>The standard currency code for the supplier.  Currencies active on the client can be queried using the AccountingSettings service.  Currency codes follow the ISO4217 standard.  Defaults to *NOK*.</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// The date of birth of the supplier.   Relevant only if the supplier is a person (when isPerson is true).
        /// </summary>
        /// <value>The date of birth of the supplier.   Relevant only if the supplier is a person (when isPerson is true).</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("DateOfBirth")]
        public DateOnly? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailAddressOption { get; private set; }

        /// <summary>
        /// The (general) e-mail address registered for the supplier.  This field is validated for typos in POST/PATCH calls.
        /// </summary>
        /// <value>The (general) e-mail address registered for the supplier.  This field is validated for typos in POST/PATCH calls.</value>
        /* <example>abc@test.yxz</example> */
        [JsonPropertyName("EmailAddress")]
        public string? EmailAddress { get { return this.EmailAddressOption; } set { this.EmailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.
        /// </summary>
        /// <value>The external import reference.  This field is not available in the GUI, but can be used by the integrating party to reference the external system.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Max length 50 characters.</value>
        /* <example>abc123-def456</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ExternalNumberOption { get; private set; }

        /// <summary>
        /// The external number.  This field can be used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the supplier number.  I.e. when importing incoming invoices using a file, with the supplier number 20000 set in the file, the import will choose the supplier with ExternalNumber 20000 over the supplier with Number 20000. This is the case for file imports only.
        /// </summary>
        /// <value>The external number.  This field can be used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name \&quot;External Code\&quot;.  The field must be unique within each class of Contacts (unique for customers, suppliers or employees).  Note that in file imports to Go (including file imports using the ImportFile endpoint), this number has precedence over the supplier number.  I.e. when importing incoming invoices using a file, with the supplier number 20000 set in the file, the import will choose the supplier with ExternalNumber 20000 over the supplier with Number 20000. This is the case for file imports only.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ExternalNumber")]
        public long? ExternalNumber { get { return this.ExternalNumberOption; } set { this.ExternalNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// The first name of the supplier.   Relevant and required if the supplier is a person (i.e. isPerson is true)
        /// </summary>
        /// <value>The first name of the supplier.   Relevant and required if the supplier is a person (i.e. isPerson is true)</value>
        /* <example>Henry</example> */
        [JsonPropertyName("FirstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The supplier object is a contact entity, meaning the id might be shared with a customer and/or an employee if the contact is registered as both a supplier and customer/employee in Go.
        /// </summary>
        /// <value>The identifier of the contact.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).  The supplier object is a contact entity, meaning the id might be shared with a customer and/or an employee if the contact is registered as both a supplier and customer/employee in Go.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; }

        /// <summary>
        /// A value indicating whether this supplier instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a supplier.  Can be false in situations where the customer is still active so that the contact entity cannot be archived, but the supplier is deactivated by a user in the GUI.
        /// </summary>
        /// <value>A value indicating whether this supplier instance is active.  This property reflects if a contact entity that was both a customer and a supplier, is currently active as a supplier.  Can be false in situations where the customer is still active so that the contact entity cannot be archived, but the supplier is deactivated by a user in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// A value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).
        /// </summary>
        /// <value>A value indicating whether this contact entity is/should be archived (set inactive)  Cannot be set if the contact have ledger balances (as either a customer or as a supplier).</value>
        /* <example>false</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPerson
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPersonOption { get; private set; }

        /// <summary>
        /// A value indicating whether this supplier is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.
        /// </summary>
        /// <value>A value indicating whether this supplier is a person.  The setting apply to the contact entity, and is used to differentiate persons from companies.  If set true, the firstName and lastName should be set.  The default setting is false if not provided.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsPerson")]
        public bool? IsPerson { get { return this.IsPersonOption; } set { this.IsPersonOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the supplier.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.
        /// </summary>
        /// <value>The timestamp of the last change of the supplier.  Note that this property do not reflect changes in sub-entities (address, contact person etc) related to the contact.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// The last name of the supplier.  Relevant and required if the supplier is a person (i.e. isPerson is true)
        /// </summary>
        /// <value>The last name of the supplier.  Relevant and required if the supplier is a person (i.e. isPerson is true)</value>
        /* <example>Ford</example> */
        [JsonPropertyName("LastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LegalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LegalNameOption { get; private set; }

        /// <summary>
        /// The legal name of the supplier.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the supplier is a company (i.e. isPerson is false)
        /// </summary>
        /// <value>The legal name of the supplier.  The legal name is the official registered name of the company, as opposed to the name which might be a marketing name.  Relevant only if the supplier is a company (i.e. isPerson is false)</value>
        /* <example>Ford Motor Company AS</example> */
        [JsonPropertyName("LegalName")]
        public string? LegalName { get { return this.LegalNameOption; } set { this.LegalNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContactAddressDto?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public ContactAddressDto? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the supplier.  Relevant and required if the supplier is a company (i.e. isPerson is false)
        /// </summary>
        /// <value>The name of the supplier.  Relevant and required if the supplier is a company (i.e. isPerson is false)</value>
        /* <example>Ford Motor</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NumberOption { get; private set; }

        /// <summary>
        /// The supplier number.  The number will also represent the supplier ledger account, used for supplier ledger transactions.  When creating new suppliers and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the supplier ledger numberseries that exist on the client in Go.
        /// </summary>
        /// <value>The supplier number.  The number will also represent the supplier ledger account, used for supplier ledger transactions.  When creating new suppliers and setting the number (as opposed to letting Go assign the next available number if left blank), the number must be within range of the supplier ledger numberseries that exist on the client in Go.</value>
        /* <example>20010</example> */
        [JsonPropertyName("Number")]
        public long? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganizationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationNumberOption { get; private set; }

        /// <summary>
        /// The organization number of the supplier.  Relevant for suppliers that are companies (i.e. isPerson is false).
        /// </summary>
        /// <value>The organization number of the supplier.  Relevant for suppliers that are companies (i.e. isPerson is false).</value>
        /* <example>980386465</example> */
        [JsonPropertyName("OrganizationNumber")]
        public string? OrganizationNumber { get { return this.OrganizationNumberOption; } set { this.OrganizationNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Payout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PayoutOption { get; private set; }

        /// <summary>
        /// A flag indicating whether invoices or credit notes from this supplier should be paid using remittance.  Default true, and if true a remittance draft will be created when voucher are posted in the journal entry.
        /// </summary>
        /// <value>A flag indicating whether invoices or credit notes from this supplier should be paid using remittance.  Default true, and if true a remittance draft will be created when voucher are posted in the journal entry.</value>
        /* <example>true</example> */
        [JsonPropertyName("Payout")]
        public bool? Payout { get { return this.PayoutOption; } set { this.PayoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// The phone number of the supplier.
        /// </summary>
        /// <value>The phone number of the supplier.</value>
        /* <example>+4712345678</example> */
        [JsonPropertyName("PhoneNumber")]
        public string? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of subledger account associated with the supplier.
        /// </summary>
        /// <value>The identifier of subledger account associated with the supplier.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SubledgerAccountId")]
        public long? SubledgerAccountId { get { return this.SubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of SupplierCreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> SupplierCreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the contact first became a supplier.  For contacts being only suppliers, this property will be equal to the contactCreatedDateTimeOffset property.
        /// </summary>
        /// <value>The timestamp the contact first became a supplier.  For contacts being only suppliers, this property will be equal to the contactCreatedDateTimeOffset property.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("SupplierCreatedDateTimeOffset")]
        public DateTime? SupplierCreatedDateTimeOffset { get { return this.SupplierCreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of WebsiteUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsiteUrlOption { get; private set; }

        /// <summary>
        /// The url to the suppliers website.
        /// </summary>
        /// <value>The url to the suppliers website.</value>
        /* <example>www.supplierswebsite.net</example> */
        [JsonPropertyName("WebsiteUrl")]
        public string? WebsiteUrl { get { return this.WebsiteUrlOption; } set { this.WebsiteUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierDto {\n");
            sb.Append("  ContactCreatedDateTimeOffset: ").Append(ContactCreatedDateTimeOffset).Append("\n");
            sb.Append("  ContactGroupIds: ").Append(ContactGroupIds).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  ExternalNumber: ").Append(ExternalNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsPerson: ").Append(IsPerson).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OrganizationNumber: ").Append(OrganizationNumber).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  SubledgerAccountId: ").Append(SubledgerAccountId).Append("\n");
            sb.Append("  SupplierCreatedDateTimeOffset: ").Append(SupplierCreatedDateTimeOffset).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SupplierDto" />
    /// </summary>
    public class SupplierDtoJsonConverter : JsonConverter<SupplierDto>
    {
        /// <summary>
        /// The format to use to serialize ContactCreatedDateTimeOffset
        /// </summary>
        public static string ContactCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DateOfBirth
        /// </summary>
        public static string DateOfBirthFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize SupplierCreatedDateTimeOffset
        /// </summary>
        public static string SupplierCreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SupplierDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SupplierDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> contactCreatedDateTimeOffset = default;
            Option<List<long>?> contactGroupIds = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<string?> currencyCode = default;
            Option<DateOnly?> dateOfBirth = default;
            Option<string?> emailAddress = default;
            Option<string?> externalImportReference = default;
            Option<long?> externalNumber = default;
            Option<string?> firstName = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<bool?> isArchived = default;
            Option<bool?> isPerson = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> lastName = default;
            Option<string?> legalName = default;
            Option<ContactAddressDto?> mailAddress = default;
            Option<string?> name = default;
            Option<long?> number = default;
            Option<string?> organizationNumber = default;
            Option<bool?> payout = default;
            Option<string?> phoneNumber = default;
            Option<long?> subledgerAccountId = default;
            Option<DateTime?> supplierCreatedDateTimeOffset = default;
            Option<string?> websiteUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ContactCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ContactGroupIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactGroupIds = new Option<List<long>?>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DateOfBirth":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dateOfBirth = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EmailAddress":
                            emailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                externalNumber = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FirstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsPerson":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isPerson = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LegalName":
                            legalName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<ContactAddressDto?>(JsonSerializer.Deserialize<ContactAddressDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OrganizationNumber":
                            organizationNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Payout":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payout = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "PhoneNumber":
                            phoneNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierCreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierCreatedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "WebsiteUrl":
                            websiteUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactCreatedDateTimeOffset.IsSet && contactCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(contactCreatedDateTimeOffset), "Property is not nullable for class SupplierDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SupplierDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class SupplierDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class SupplierDto.");

            if (subledgerAccountId.IsSet && subledgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(subledgerAccountId), "Property is not nullable for class SupplierDto.");

            if (supplierCreatedDateTimeOffset.IsSet && supplierCreatedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(supplierCreatedDateTimeOffset), "Property is not nullable for class SupplierDto.");

            return new SupplierDto(contactCreatedDateTimeOffset, contactGroupIds, createdFromImportJournalId, currencyCode, dateOfBirth, emailAddress, externalImportReference, externalNumber, firstName, id, isActive, isArchived, isPerson, lastChangedDateTimeOffset, lastName, legalName, mailAddress, name, number, organizationNumber, payout, phoneNumber, subledgerAccountId, supplierCreatedDateTimeOffset, websiteUrl);
        }

        /// <summary>
        /// Serializes a <see cref="SupplierDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SupplierDto supplierDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supplierDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SupplierDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SupplierDto supplierDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supplierDto.MailAddressOption.IsSet && supplierDto.MailAddress == null)
                throw new ArgumentNullException(nameof(supplierDto.MailAddress), "Property is required for class SupplierDto.");

            if (supplierDto.ContactCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("ContactCreatedDateTimeOffset", supplierDto.ContactCreatedDateTimeOffsetOption.Value!.Value.ToString(ContactCreatedDateTimeOffsetFormat));

            if (supplierDto.ContactGroupIdsOption.IsSet)
                if (supplierDto.ContactGroupIdsOption.Value != null)
                {
                    writer.WritePropertyName("ContactGroupIds");
                    JsonSerializer.Serialize(writer, supplierDto.ContactGroupIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ContactGroupIds");
            if (supplierDto.CreatedFromImportJournalIdOption.IsSet)
                if (supplierDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", supplierDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (supplierDto.CurrencyCodeOption.IsSet)
                if (supplierDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", supplierDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (supplierDto.DateOfBirthOption.IsSet)
                if (supplierDto.DateOfBirthOption.Value != null)
                    writer.WriteString("DateOfBirth", supplierDto.DateOfBirthOption.Value!.Value.ToString(DateOfBirthFormat));
                else
                    writer.WriteNull("DateOfBirth");

            if (supplierDto.EmailAddressOption.IsSet)
                if (supplierDto.EmailAddressOption.Value != null)
                    writer.WriteString("EmailAddress", supplierDto.EmailAddress);
                else
                    writer.WriteNull("EmailAddress");

            if (supplierDto.ExternalImportReferenceOption.IsSet)
                if (supplierDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", supplierDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (supplierDto.ExternalNumberOption.IsSet)
                if (supplierDto.ExternalNumberOption.Value != null)
                    writer.WriteNumber("ExternalNumber", supplierDto.ExternalNumberOption.Value!.Value);
                else
                    writer.WriteNull("ExternalNumber");

            if (supplierDto.FirstNameOption.IsSet)
                if (supplierDto.FirstNameOption.Value != null)
                    writer.WriteString("FirstName", supplierDto.FirstName);
                else
                    writer.WriteNull("FirstName");

            if (supplierDto.IdOption.IsSet)
                writer.WriteNumber("Id", supplierDto.IdOption.Value!.Value);

            if (supplierDto.IsActiveOption.IsSet)
                if (supplierDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", supplierDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (supplierDto.IsArchivedOption.IsSet)
                if (supplierDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", supplierDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (supplierDto.IsPersonOption.IsSet)
                if (supplierDto.IsPersonOption.Value != null)
                    writer.WriteBoolean("IsPerson", supplierDto.IsPersonOption.Value!.Value);
                else
                    writer.WriteNull("IsPerson");

            if (supplierDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", supplierDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (supplierDto.LastNameOption.IsSet)
                if (supplierDto.LastNameOption.Value != null)
                    writer.WriteString("LastName", supplierDto.LastName);
                else
                    writer.WriteNull("LastName");

            if (supplierDto.LegalNameOption.IsSet)
                if (supplierDto.LegalNameOption.Value != null)
                    writer.WriteString("LegalName", supplierDto.LegalName);
                else
                    writer.WriteNull("LegalName");

            if (supplierDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, supplierDto.MailAddress, jsonSerializerOptions);
            }
            if (supplierDto.NameOption.IsSet)
                if (supplierDto.NameOption.Value != null)
                    writer.WriteString("Name", supplierDto.Name);
                else
                    writer.WriteNull("Name");

            if (supplierDto.NumberOption.IsSet)
                if (supplierDto.NumberOption.Value != null)
                    writer.WriteNumber("Number", supplierDto.NumberOption.Value!.Value);
                else
                    writer.WriteNull("Number");

            if (supplierDto.OrganizationNumberOption.IsSet)
                if (supplierDto.OrganizationNumberOption.Value != null)
                    writer.WriteString("OrganizationNumber", supplierDto.OrganizationNumber);
                else
                    writer.WriteNull("OrganizationNumber");

            if (supplierDto.PayoutOption.IsSet)
                if (supplierDto.PayoutOption.Value != null)
                    writer.WriteBoolean("Payout", supplierDto.PayoutOption.Value!.Value);
                else
                    writer.WriteNull("Payout");

            if (supplierDto.PhoneNumberOption.IsSet)
                if (supplierDto.PhoneNumberOption.Value != null)
                    writer.WriteString("PhoneNumber", supplierDto.PhoneNumber);
                else
                    writer.WriteNull("PhoneNumber");

            if (supplierDto.SubledgerAccountIdOption.IsSet)
                writer.WriteNumber("SubledgerAccountId", supplierDto.SubledgerAccountIdOption.Value!.Value);

            if (supplierDto.SupplierCreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("SupplierCreatedDateTimeOffset", supplierDto.SupplierCreatedDateTimeOffsetOption.Value!.Value.ToString(SupplierCreatedDateTimeOffsetFormat));

            if (supplierDto.WebsiteUrlOption.IsSet)
                if (supplierDto.WebsiteUrlOption.Value != null)
                    writer.WriteString("WebsiteUrl", supplierDto.WebsiteUrl);
                else
                    writer.WriteNull("WebsiteUrl");
        }
    }
}
