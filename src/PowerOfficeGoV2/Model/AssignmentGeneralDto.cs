// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The available properties for the Quality Assignment General DTO in Go
    /// </summary>
    public partial class AssignmentGeneralDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssignmentGeneralDto" /> class.
        /// </summary>
        /// <param name="agreementSignedDate">The date the assignment agreement was signed.</param>
        /// <param name="associateSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="auditingCompanyId">The id of the audit company. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;</param>
        /// <param name="auditorId">The id of the auditor. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;</param>
        /// <param name="currentAgreementDate">The current date of the quality assignment agreement.</param>
        /// <param name="customerContactPersonId">The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.</param>
        /// <param name="customerSubledgerAccountId">The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.</param>
        /// <param name="description">The description of the quality assignment.</param>
        /// <param name="endDate">The start date of the quality assignment. Date is inclusive.</param>
        /// <param name="id">The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.</param>
        /// <param name="keyAccountManagerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="managerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="noticePeriod">The notice period, in months, if the agreement should be resigned.  Must be a positive integer between 1 and 24.</param>
        /// <param name="payrollManagerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="projectId">The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.</param>
        /// <param name="purposeForContact">A description of the purpose for contact.</param>
        /// <param name="reasonForContact">A description of the reason for contact.</param>
        /// <param name="revisionDate">The date of the last revision of the assignment.</param>
        /// <param name="startDate">The start date of the quality assignment. Date is inclusive.</param>
        /// <param name="status">status</param>
        /// <param name="subjectToAudit">subjectToAudit</param>
        [JsonConstructor]
        public AssignmentGeneralDto(Option<DateTimeOffset?> agreementSignedDate = default, Option<long?> associateSubledgerAccountId = default, Option<long?> auditingCompanyId = default, Option<long?> auditorId = default, Option<DateTimeOffset?> currentAgreementDate = default, Option<long?> customerContactPersonId = default, Option<long?> customerSubledgerAccountId = default, Option<string?> description = default, Option<DateTimeOffset?> endDate = default, Option<long?> id = default, Option<long?> keyAccountManagerSubledgerAccountId = default, Option<long?> managerSubledgerAccountId = default, Option<int?> noticePeriod = default, Option<long?> payrollManagerSubledgerAccountId = default, Option<long?> projectId = default, Option<string?> purposeForContact = default, Option<string?> reasonForContact = default, Option<DateTimeOffset?> revisionDate = default, Option<DateTimeOffset?> startDate = default, Option<AssignmentAgreementStatus?> status = default, Option<SubjectToAuditType?> subjectToAudit = default)
        {
            AgreementSignedDateOption = agreementSignedDate;
            AssociateSubledgerAccountIdOption = associateSubledgerAccountId;
            AuditingCompanyIdOption = auditingCompanyId;
            AuditorIdOption = auditorId;
            CurrentAgreementDateOption = currentAgreementDate;
            CustomerContactPersonIdOption = customerContactPersonId;
            CustomerSubledgerAccountIdOption = customerSubledgerAccountId;
            DescriptionOption = description;
            EndDateOption = endDate;
            IdOption = id;
            KeyAccountManagerSubledgerAccountIdOption = keyAccountManagerSubledgerAccountId;
            ManagerSubledgerAccountIdOption = managerSubledgerAccountId;
            NoticePeriodOption = noticePeriod;
            PayrollManagerSubledgerAccountIdOption = payrollManagerSubledgerAccountId;
            ProjectIdOption = projectId;
            PurposeForContactOption = purposeForContact;
            ReasonForContactOption = reasonForContact;
            RevisionDateOption = revisionDate;
            StartDateOption = startDate;
            StatusOption = status;
            SubjectToAuditOption = subjectToAudit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssignmentAgreementStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("Status")]
        public AssignmentAgreementStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectToAudit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubjectToAuditType?> SubjectToAuditOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubjectToAudit
        /// </summary>
        [JsonPropertyName("SubjectToAudit")]
        public SubjectToAuditType? SubjectToAudit { get { return this.SubjectToAuditOption; } set { this.SubjectToAuditOption = new(value); } }

        /// <summary>
        /// Used to track the state of AgreementSignedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> AgreementSignedDateOption { get; private set; }

        /// <summary>
        /// The date the assignment agreement was signed.
        /// </summary>
        /// <value>The date the assignment agreement was signed.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("AgreementSignedDate")]
        public DateTimeOffset? AgreementSignedDate { get { return this.AgreementSignedDateOption; } set { this.AgreementSignedDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssociateSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AssociateSubledgerAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("AssociateSubledgerAccountId")]
        public long? AssociateSubledgerAccountId { get { return this.AssociateSubledgerAccountIdOption; } set { this.AssociateSubledgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuditingCompanyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuditingCompanyIdOption { get; private set; }

        /// <summary>
        /// The id of the audit company. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;
        /// </summary>
        /// <value>The id of the audit company. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;</value>
        /* <example>123456</example> */
        [JsonPropertyName("AuditingCompanyId")]
        public long? AuditingCompanyId { get { return this.AuditingCompanyIdOption; } set { this.AuditingCompanyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuditorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AuditorIdOption { get; private set; }

        /// <summary>
        /// The id of the auditor. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;
        /// </summary>
        /// <value>The id of the auditor. Relevant only the customer is subject for audit, ie. AuditStatus is &#39;Yes&#39;</value>
        /* <example>12345</example> */
        [JsonPropertyName("AuditorId")]
        public long? AuditorId { get { return this.AuditorIdOption; } set { this.AuditorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentAgreementDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CurrentAgreementDateOption { get; private set; }

        /// <summary>
        /// The current date of the quality assignment agreement.
        /// </summary>
        /// <value>The current date of the quality assignment agreement.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("CurrentAgreementDate")]
        public DateTimeOffset? CurrentAgreementDate { get { return this.CurrentAgreementDateOption; } set { this.CurrentAgreementDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerContactPersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerContactPersonIdOption { get; private set; }

        /// <summary>
        /// The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.
        /// </summary>
        /// <value>The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerContactPersonId")]
        public long? CustomerContactPersonId { get { return this.CustomerContactPersonIdOption; } set { this.CustomerContactPersonIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerSubledgerAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.
        /// </summary>
        /// <value>The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerSubledgerAccountId")]
        public long? CustomerSubledgerAccountId { get { return this.CustomerSubledgerAccountIdOption; } set { this.CustomerSubledgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the quality assignment.
        /// </summary>
        /// <value>The description of the quality assignment.</value>
        /* <example>The very best accounting assignment</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> EndDateOption { get; private set; }

        /// <summary>
        /// The start date of the quality assignment. Date is inclusive.
        /// </summary>
        /// <value>The start date of the quality assignment. Date is inclusive.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("EndDate")]
        public DateTimeOffset? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.
        /// </summary>
        /// <value>The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of KeyAccountManagerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> KeyAccountManagerSubledgerAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("KeyAccountManagerSubledgerAccountId")]
        public long? KeyAccountManagerSubledgerAccountId { get { return this.KeyAccountManagerSubledgerAccountIdOption; } set { this.KeyAccountManagerSubledgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ManagerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ManagerSubledgerAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("ManagerSubledgerAccountId")]
        public long? ManagerSubledgerAccountId { get { return this.ManagerSubledgerAccountIdOption; } set { this.ManagerSubledgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoticePeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NoticePeriodOption { get; private set; }

        /// <summary>
        /// The notice period, in months, if the agreement should be resigned.  Must be a positive integer between 1 and 24.
        /// </summary>
        /// <value>The notice period, in months, if the agreement should be resigned.  Must be a positive integer between 1 and 24.</value>
        /* <example>24</example> */
        [JsonPropertyName("NoticePeriod")]
        public int? NoticePeriod { get { return this.NoticePeriodOption; } set { this.NoticePeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of PayrollManagerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PayrollManagerSubledgerAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("PayrollManagerSubledgerAccountId")]
        public long? PayrollManagerSubledgerAccountId { get { return this.PayrollManagerSubledgerAccountIdOption; } set { this.PayrollManagerSubledgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.
        /// </summary>
        /// <value>The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PurposeForContact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurposeForContactOption { get; private set; }

        /// <summary>
        /// A description of the purpose for contact.
        /// </summary>
        /// <value>A description of the purpose for contact.</value>
        /* <example>The contact needs auditing</example> */
        [JsonPropertyName("PurposeForContact")]
        public string? PurposeForContact { get { return this.PurposeForContactOption; } set { this.PurposeForContactOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonForContact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonForContactOption { get; private set; }

        /// <summary>
        /// A description of the reason for contact.
        /// </summary>
        /// <value>A description of the reason for contact.</value>
        /* <example>The contact needs auditing</example> */
        [JsonPropertyName("ReasonForContact")]
        public string? ReasonForContact { get { return this.ReasonForContactOption; } set { this.ReasonForContactOption = new(value); } }

        /// <summary>
        /// Used to track the state of RevisionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> RevisionDateOption { get; private set; }

        /// <summary>
        /// The date of the last revision of the assignment.
        /// </summary>
        /// <value>The date of the last revision of the assignment.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("RevisionDate")]
        public DateTimeOffset? RevisionDate { get { return this.RevisionDateOption; } set { this.RevisionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> StartDateOption { get; private set; }

        /// <summary>
        /// The start date of the quality assignment. Date is inclusive.
        /// </summary>
        /// <value>The start date of the quality assignment. Date is inclusive.</value>
        /* <example>Tue Jul 15 02:00:00 CEST 2003</example> */
        [JsonPropertyName("StartDate")]
        public DateTimeOffset? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssignmentGeneralDto {\n");
            sb.Append("  AgreementSignedDate: ").Append(AgreementSignedDate).Append("\n");
            sb.Append("  AssociateSubledgerAccountId: ").Append(AssociateSubledgerAccountId).Append("\n");
            sb.Append("  AuditingCompanyId: ").Append(AuditingCompanyId).Append("\n");
            sb.Append("  AuditorId: ").Append(AuditorId).Append("\n");
            sb.Append("  CurrentAgreementDate: ").Append(CurrentAgreementDate).Append("\n");
            sb.Append("  CustomerContactPersonId: ").Append(CustomerContactPersonId).Append("\n");
            sb.Append("  CustomerSubledgerAccountId: ").Append(CustomerSubledgerAccountId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeyAccountManagerSubledgerAccountId: ").Append(KeyAccountManagerSubledgerAccountId).Append("\n");
            sb.Append("  ManagerSubledgerAccountId: ").Append(ManagerSubledgerAccountId).Append("\n");
            sb.Append("  NoticePeriod: ").Append(NoticePeriod).Append("\n");
            sb.Append("  PayrollManagerSubledgerAccountId: ").Append(PayrollManagerSubledgerAccountId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurposeForContact: ").Append(PurposeForContact).Append("\n");
            sb.Append("  ReasonForContact: ").Append(ReasonForContact).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubjectToAudit: ").Append(SubjectToAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NoticePeriod (int) maximum
            if (this.NoticePeriodOption.IsSet && this.NoticePeriodOption.Value > (int)24)
            {
                yield return new ValidationResult("Invalid value for NoticePeriod, must be a value less than or equal to 24.", new [] { "NoticePeriod" });
            }

            // NoticePeriod (int) minimum
            if (this.NoticePeriodOption.IsSet && this.NoticePeriodOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for NoticePeriod, must be a value greater than or equal to 1.", new [] { "NoticePeriod" });
            }

            // PurposeForContact (string) maxLength
            if (this.PurposeForContact != null && this.PurposeForContact.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for PurposeForContact, length must be less than 2000.", new [] { "PurposeForContact" });
            }

            // ReasonForContact (string) maxLength
            if (this.ReasonForContact != null && this.ReasonForContact.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for ReasonForContact, length must be less than 2000.", new [] { "ReasonForContact" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssignmentGeneralDto" />
    /// </summary>
    public class AssignmentGeneralDtoJsonConverter : JsonConverter<AssignmentGeneralDto>
    {
        /// <summary>
        /// The format to use to serialize AgreementSignedDate
        /// </summary>
        public static string AgreementSignedDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize CurrentAgreementDate
        /// </summary>
        public static string CurrentAgreementDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize RevisionDate
        /// </summary>
        public static string RevisionDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="AssignmentGeneralDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssignmentGeneralDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTimeOffset?> agreementSignedDate = default;
            Option<long?> associateSubledgerAccountId = default;
            Option<long?> auditingCompanyId = default;
            Option<long?> auditorId = default;
            Option<DateTimeOffset?> currentAgreementDate = default;
            Option<long?> customerContactPersonId = default;
            Option<long?> customerSubledgerAccountId = default;
            Option<string?> description = default;
            Option<DateTimeOffset?> endDate = default;
            Option<long?> id = default;
            Option<long?> keyAccountManagerSubledgerAccountId = default;
            Option<long?> managerSubledgerAccountId = default;
            Option<int?> noticePeriod = default;
            Option<long?> payrollManagerSubledgerAccountId = default;
            Option<long?> projectId = default;
            Option<string?> purposeForContact = default;
            Option<string?> reasonForContact = default;
            Option<DateTimeOffset?> revisionDate = default;
            Option<DateTimeOffset?> startDate = default;
            Option<AssignmentAgreementStatus?> status = default;
            Option<SubjectToAuditType?> subjectToAudit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AgreementSignedDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agreementSignedDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "AssociateSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                associateSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AuditingCompanyId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                auditingCompanyId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AuditorId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                auditorId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CurrentAgreementDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentAgreementDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CustomerContactPersonId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerContactPersonId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "KeyAccountManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                keyAccountManagerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NoticePeriod":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                noticePeriod = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "PayrollManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payrollManagerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PurposeForContact":
                            purposeForContact = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ReasonForContact":
                            reasonForContact = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RevisionDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                revisionDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<AssignmentAgreementStatus?>(AssignmentAgreementStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "SubjectToAudit":
                            string? subjectToAuditRawValue = utf8JsonReader.GetString();
                            if (subjectToAuditRawValue != null)
                                subjectToAudit = new Option<SubjectToAuditType?>(SubjectToAuditTypeValueConverter.FromStringOrDefault(subjectToAuditRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (noticePeriod.IsSet && noticePeriod.Value == null)
                throw new ArgumentNullException(nameof(noticePeriod), "Property is not nullable for class AssignmentGeneralDto.");

            return new AssignmentGeneralDto(agreementSignedDate, associateSubledgerAccountId, auditingCompanyId, auditorId, currentAgreementDate, customerContactPersonId, customerSubledgerAccountId, description, endDate, id, keyAccountManagerSubledgerAccountId, managerSubledgerAccountId, noticePeriod, payrollManagerSubledgerAccountId, projectId, purposeForContact, reasonForContact, revisionDate, startDate, status, subjectToAudit);
        }

        /// <summary>
        /// Serializes a <see cref="AssignmentGeneralDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentGeneralDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssignmentGeneralDto assignmentGeneralDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assignmentGeneralDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssignmentGeneralDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentGeneralDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssignmentGeneralDto assignmentGeneralDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (assignmentGeneralDto.AgreementSignedDateOption.IsSet)
                if (assignmentGeneralDto.AgreementSignedDateOption.Value != null)
                    writer.WriteString("AgreementSignedDate", assignmentGeneralDto.AgreementSignedDateOption.Value!.Value.ToString(AgreementSignedDateFormat));
                else
                    writer.WriteNull("AgreementSignedDate");

            if (assignmentGeneralDto.AssociateSubledgerAccountIdOption.IsSet)
                if (assignmentGeneralDto.AssociateSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("AssociateSubledgerAccountId", assignmentGeneralDto.AssociateSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AssociateSubledgerAccountId");

            if (assignmentGeneralDto.AuditingCompanyIdOption.IsSet)
                if (assignmentGeneralDto.AuditingCompanyIdOption.Value != null)
                    writer.WriteNumber("AuditingCompanyId", assignmentGeneralDto.AuditingCompanyIdOption.Value!.Value);
                else
                    writer.WriteNull("AuditingCompanyId");

            if (assignmentGeneralDto.AuditorIdOption.IsSet)
                if (assignmentGeneralDto.AuditorIdOption.Value != null)
                    writer.WriteNumber("AuditorId", assignmentGeneralDto.AuditorIdOption.Value!.Value);
                else
                    writer.WriteNull("AuditorId");

            if (assignmentGeneralDto.CurrentAgreementDateOption.IsSet)
                if (assignmentGeneralDto.CurrentAgreementDateOption.Value != null)
                    writer.WriteString("CurrentAgreementDate", assignmentGeneralDto.CurrentAgreementDateOption.Value!.Value.ToString(CurrentAgreementDateFormat));
                else
                    writer.WriteNull("CurrentAgreementDate");

            if (assignmentGeneralDto.CustomerContactPersonIdOption.IsSet)
                if (assignmentGeneralDto.CustomerContactPersonIdOption.Value != null)
                    writer.WriteNumber("CustomerContactPersonId", assignmentGeneralDto.CustomerContactPersonIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerContactPersonId");

            if (assignmentGeneralDto.CustomerSubledgerAccountIdOption.IsSet)
                if (assignmentGeneralDto.CustomerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("CustomerSubledgerAccountId", assignmentGeneralDto.CustomerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerSubledgerAccountId");

            if (assignmentGeneralDto.DescriptionOption.IsSet)
                if (assignmentGeneralDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", assignmentGeneralDto.Description);
                else
                    writer.WriteNull("Description");

            if (assignmentGeneralDto.EndDateOption.IsSet)
                if (assignmentGeneralDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", assignmentGeneralDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (assignmentGeneralDto.IdOption.IsSet)
                if (assignmentGeneralDto.IdOption.Value != null)
                    writer.WriteNumber("Id", assignmentGeneralDto.IdOption.Value!.Value);
                else
                    writer.WriteNull("Id");

            if (assignmentGeneralDto.KeyAccountManagerSubledgerAccountIdOption.IsSet)
                if (assignmentGeneralDto.KeyAccountManagerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("KeyAccountManagerSubledgerAccountId", assignmentGeneralDto.KeyAccountManagerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("KeyAccountManagerSubledgerAccountId");

            if (assignmentGeneralDto.ManagerSubledgerAccountIdOption.IsSet)
                if (assignmentGeneralDto.ManagerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("ManagerSubledgerAccountId", assignmentGeneralDto.ManagerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("ManagerSubledgerAccountId");

            if (assignmentGeneralDto.NoticePeriodOption.IsSet)
                writer.WriteNumber("NoticePeriod", assignmentGeneralDto.NoticePeriodOption.Value!.Value);

            if (assignmentGeneralDto.PayrollManagerSubledgerAccountIdOption.IsSet)
                if (assignmentGeneralDto.PayrollManagerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("PayrollManagerSubledgerAccountId", assignmentGeneralDto.PayrollManagerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("PayrollManagerSubledgerAccountId");

            if (assignmentGeneralDto.ProjectIdOption.IsSet)
                if (assignmentGeneralDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", assignmentGeneralDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (assignmentGeneralDto.PurposeForContactOption.IsSet)
                if (assignmentGeneralDto.PurposeForContactOption.Value != null)
                    writer.WriteString("PurposeForContact", assignmentGeneralDto.PurposeForContact);
                else
                    writer.WriteNull("PurposeForContact");

            if (assignmentGeneralDto.ReasonForContactOption.IsSet)
                if (assignmentGeneralDto.ReasonForContactOption.Value != null)
                    writer.WriteString("ReasonForContact", assignmentGeneralDto.ReasonForContact);
                else
                    writer.WriteNull("ReasonForContact");

            if (assignmentGeneralDto.RevisionDateOption.IsSet)
                if (assignmentGeneralDto.RevisionDateOption.Value != null)
                    writer.WriteString("RevisionDate", assignmentGeneralDto.RevisionDateOption.Value!.Value.ToString(RevisionDateFormat));
                else
                    writer.WriteNull("RevisionDate");

            if (assignmentGeneralDto.StartDateOption.IsSet)
                if (assignmentGeneralDto.StartDateOption.Value != null)
                    writer.WriteString("StartDate", assignmentGeneralDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
                else
                    writer.WriteNull("StartDate");

            if (assignmentGeneralDto.StatusOption.IsSet)
                if (assignmentGeneralDto.StatusOption!.Value != null)
                {
                    var statusRawValue = AssignmentAgreementStatusValueConverter.ToJsonValue(assignmentGeneralDto.StatusOption.Value!.Value);
                    writer.WriteString("Status", statusRawValue);
                }
                else
                    writer.WriteNull("Status");
            if (assignmentGeneralDto.SubjectToAuditOption.IsSet)
                if (assignmentGeneralDto.SubjectToAuditOption!.Value != null)
                {
                    var subjectToAuditRawValue = SubjectToAuditTypeValueConverter.ToJsonValue(assignmentGeneralDto.SubjectToAuditOption.Value!.Value);
                    writer.WriteString("SubjectToAudit", subjectToAuditRawValue);
                }
                else
                    writer.WriteNull("SubjectToAudit");
        }
    }
}
