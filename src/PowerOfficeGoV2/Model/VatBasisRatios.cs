// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Custom VAT code basis ratios and valid from dates.
    /// </summary>
    public partial class VatBasisRatios : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VatBasisRatios" /> class.
        /// </summary>
        /// <param name="vatBasisRatio">The VAT basis ratio for a custom VatCode.</param>
        /// <param name="vatBasisRatioValidFrom">The from date for the VAT basis ratio.</param>
        [JsonConstructor]
        public VatBasisRatios(Option<double?> vatBasisRatio = default, Option<DateOnly?> vatBasisRatioValidFrom = default)
        {
            VatBasisRatioOption = vatBasisRatio;
            VatBasisRatioValidFromOption = vatBasisRatioValidFrom;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VatBasisRatio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VatBasisRatioOption { get; }

        /// <summary>
        /// The VAT basis ratio for a custom VatCode.
        /// </summary>
        /// <value>The VAT basis ratio for a custom VatCode.</value>
        /* <example>42</example> */
        [JsonPropertyName("VatBasisRatio")]
        public double? VatBasisRatio { get { return this.VatBasisRatioOption; } }

        /// <summary>
        /// Used to track the state of VatBasisRatioValidFrom
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VatBasisRatioValidFromOption { get; private set; }

        /// <summary>
        /// The from date for the VAT basis ratio.
        /// </summary>
        /// <value>The from date for the VAT basis ratio.</value>
        /* <example>Thu Apr 27 02:00:00 CEST 2023</example> */
        [JsonPropertyName("VatBasisRatioValidFrom")]
        public DateOnly? VatBasisRatioValidFrom { get { return this.VatBasisRatioValidFromOption; } set { this.VatBasisRatioValidFromOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VatBasisRatios {\n");
            sb.Append("  VatBasisRatio: ").Append(VatBasisRatio).Append("\n");
            sb.Append("  VatBasisRatioValidFrom: ").Append(VatBasisRatioValidFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatBasisRatios" />
    /// </summary>
    public class VatBasisRatiosJsonConverter : JsonConverter<VatBasisRatios>
    {
        /// <summary>
        /// The format to use to serialize VatBasisRatioValidFrom
        /// </summary>
        public static string VatBasisRatioValidFromFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="VatBasisRatios" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VatBasisRatios Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> vatBasisRatio = default;
            Option<DateOnly?> vatBasisRatioValidFrom = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "VatBasisRatio":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatBasisRatio = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatBasisRatioValidFrom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatBasisRatioValidFrom = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VatBasisRatios(vatBasisRatio, vatBasisRatioValidFrom);
        }

        /// <summary>
        /// Serializes a <see cref="VatBasisRatios" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatBasisRatios"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VatBasisRatios vatBasisRatios, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vatBasisRatios, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VatBasisRatios" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatBasisRatios"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VatBasisRatios vatBasisRatios, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vatBasisRatios.VatBasisRatioOption.IsSet)
                if (vatBasisRatios.VatBasisRatioOption.Value != null)
                    writer.WriteNumber("VatBasisRatio", vatBasisRatios.VatBasisRatioOption.Value!.Value);
                else
                    writer.WriteNull("VatBasisRatio");

            if (vatBasisRatios.VatBasisRatioValidFromOption.IsSet)
                if (vatBasisRatios.VatBasisRatioValidFromOption.Value != null)
                    writer.WriteString("VatBasisRatioValidFrom", vatBasisRatios.VatBasisRatioValidFromOption.Value!.Value.ToString(VatBasisRatioValidFromFormat));
                else
                    writer.WriteNull("VatBasisRatioValidFrom");
        }
    }
}
