// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Represents the lock date settings of a client.
    /// </summary>
    public partial class LockDateSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LockDateSettingsDto" /> class.
        /// </summary>
        /// <param name="lockDate">The lock date on the client. It&#39;s not possible to create accounting entries on this date or any previous date on this client.</param>
        [JsonConstructor]
        internal LockDateSettingsDto(Option<DateOnly?> lockDate = default)
        {
            LockDateOption = lockDate;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LockDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> LockDateOption { get; }

        /// <summary>
        /// The lock date on the client. It&#39;s not possible to create accounting entries on this date or any previous date on this client.
        /// </summary>
        /// <value>The lock date on the client. It&#39;s not possible to create accounting entries on this date or any previous date on this client.</value>
        /* <example>Sun Jan 01 01:00:00 CET 2023</example> */
        [JsonPropertyName("LockDate")]
        public DateOnly? LockDate { get { return this.LockDateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LockDateSettingsDto {\n");
            sb.Append("  LockDate: ").Append(LockDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LockDateSettingsDto" />
    /// </summary>
    public class LockDateSettingsDtoJsonConverter : JsonConverter<LockDateSettingsDto>
    {
        /// <summary>
        /// The format to use to serialize LockDate
        /// </summary>
        public static string LockDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="LockDateSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LockDateSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> lockDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "LockDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lockDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lockDate.IsSet && lockDate.Value == null)
                throw new ArgumentNullException(nameof(lockDate), "Property is not nullable for class LockDateSettingsDto.");

            return new LockDateSettingsDto(lockDate);
        }

        /// <summary>
        /// Serializes a <see cref="LockDateSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lockDateSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LockDateSettingsDto lockDateSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, lockDateSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LockDateSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="lockDateSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LockDateSettingsDto lockDateSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (lockDateSettingsDto.LockDateOption.IsSet)
                writer.WriteString("LockDate", lockDateSettingsDto.LockDateOption.Value!.Value.ToString(LockDateFormat));
        }
    }
}
