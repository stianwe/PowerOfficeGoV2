// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The pension scheme DTO contains all properties relevant to the pension schemes in payroll settings in Go.
    /// </summary>
    public partial class PensionSchemeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PensionSchemeDto" /> class.
        /// </summary>
        /// <param name="isActive">Value indicating whether this pension scheme entity is active.</param>
        /// <param name="pensionProviderName">The name of the pension provider.</param>
        /// <param name="pensionProviderOrganizationNo">The organization number of the pension provider.</param>
        [JsonConstructor]
        internal PensionSchemeDto(Option<bool?> isActive = default, Option<string?> pensionProviderName = default, Option<string?> pensionProviderOrganizationNo = default)
        {
            IsActiveOption = isActive;
            PensionProviderNameOption = pensionProviderName;
            PensionProviderOrganizationNoOption = pensionProviderOrganizationNo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; }

        /// <summary>
        /// Value indicating whether this pension scheme entity is active.
        /// </summary>
        /// <value>Value indicating whether this pension scheme entity is active.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } }

        /// <summary>
        /// Used to track the state of PensionProviderName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PensionProviderNameOption { get; }

        /// <summary>
        /// The name of the pension provider.
        /// </summary>
        /// <value>The name of the pension provider.</value>
        /* <example>ABC Pension Fund</example> */
        [JsonPropertyName("PensionProviderName")]
        public string? PensionProviderName { get { return this.PensionProviderNameOption; } }

        /// <summary>
        /// Used to track the state of PensionProviderOrganizationNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PensionProviderOrganizationNoOption { get; }

        /// <summary>
        /// The organization number of the pension provider.
        /// </summary>
        /// <value>The organization number of the pension provider.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("PensionProviderOrganizationNo")]
        public string? PensionProviderOrganizationNo { get { return this.PensionProviderOrganizationNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PensionSchemeDto {\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  PensionProviderName: ").Append(PensionProviderName).Append("\n");
            sb.Append("  PensionProviderOrganizationNo: ").Append(PensionProviderOrganizationNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PensionSchemeDto" />
    /// </summary>
    public class PensionSchemeDtoJsonConverter : JsonConverter<PensionSchemeDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="PensionSchemeDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PensionSchemeDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isActive = default;
            Option<string?> pensionProviderName = default;
            Option<string?> pensionProviderOrganizationNo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "PensionProviderName":
                            pensionProviderName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PensionProviderOrganizationNo":
                            pensionProviderOrganizationNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class PensionSchemeDto.");

            return new PensionSchemeDto(isActive, pensionProviderName, pensionProviderOrganizationNo);
        }

        /// <summary>
        /// Serializes a <see cref="PensionSchemeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pensionSchemeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PensionSchemeDto pensionSchemeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pensionSchemeDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PensionSchemeDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pensionSchemeDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PensionSchemeDto pensionSchemeDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pensionSchemeDto.IsActiveOption.IsSet)
                writer.WriteBoolean("IsActive", pensionSchemeDto.IsActiveOption.Value!.Value);

            if (pensionSchemeDto.PensionProviderNameOption.IsSet)
                if (pensionSchemeDto.PensionProviderNameOption.Value != null)
                    writer.WriteString("PensionProviderName", pensionSchemeDto.PensionProviderName);
                else
                    writer.WriteNull("PensionProviderName");

            if (pensionSchemeDto.PensionProviderOrganizationNoOption.IsSet)
                if (pensionSchemeDto.PensionProviderOrganizationNoOption.Value != null)
                    writer.WriteString("PensionProviderOrganizationNo", pensionSchemeDto.PensionProviderOrganizationNo);
                else
                    writer.WriteNull("PensionProviderOrganizationNo");
        }
    }
}
