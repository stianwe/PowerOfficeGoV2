// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for Department read operations.
    /// </summary>
    public partial class DepartmentDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentDto" /> class.
        /// </summary>
        /// <param name="code">The code of the department.</param>
        /// <param name="createdDateTimeOffset">The timestamp the department entity was created.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid). If the department was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="id">The identifier of the department.</param>
        /// <param name="isActive">Value indicating whether this instance is active.  Inactive departments disable the usage of that departments in the GUI.  Defaults to false.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the department.</param>
        /// <param name="managerEmployeeId">The employee id of the manager of the department.</param>
        /// <param name="managerEmployeeNo">The employee number of the manager of the department.</param>
        /// <param name="name">The name of the department</param>
        [JsonConstructor]
        public DepartmentDto(Option<string?> code = default, Option<DateTime?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<long?> id = default, Option<bool?> isActive = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<long?> managerEmployeeId = default, Option<long?> managerEmployeeNo = default, Option<string?> name = default)
        {
            CodeOption = code;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            IdOption = id;
            IsActiveOption = isActive;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            ManagerEmployeeIdOption = managerEmployeeId;
            ManagerEmployeeNoOption = managerEmployeeNo;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the department.
        /// </summary>
        /// <value>The code of the department.</value>
        /* <example>10</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the department entity was created.
        /// </summary>
        /// <value>The timestamp the department entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid). If the department was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid). If the department was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>f575b4b0-55be-4b56-b01f-44b204df82c5</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the department.
        /// </summary>
        /// <value>The identifier of the department.</value>
        /* <example>1610</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Value indicating whether this instance is active.  Inactive departments disable the usage of that departments in the GUI.  Defaults to false.
        /// </summary>
        /// <value>Value indicating whether this instance is active.  Inactive departments disable the usage of that departments in the GUI.  Defaults to false.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the department.
        /// </summary>
        /// <value>The timestamp of the last change of the department.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ManagerEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ManagerEmployeeIdOption { get; }

        /// <summary>
        /// The employee id of the manager of the department.
        /// </summary>
        /// <value>The employee id of the manager of the department.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ManagerEmployeeId")]
        public long? ManagerEmployeeId { get { return this.ManagerEmployeeIdOption; } }

        /// <summary>
        /// Used to track the state of ManagerEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ManagerEmployeeNoOption { get; }

        /// <summary>
        /// The employee number of the manager of the department.
        /// </summary>
        /// <value>The employee number of the manager of the department.</value>
        /* <example>2</example> */
        [JsonPropertyName("ManagerEmployeeNo")]
        public long? ManagerEmployeeNo { get { return this.ManagerEmployeeNoOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the department
        /// </summary>
        /// <value>The name of the department</value>
        /* <example>Research</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepartmentDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  ManagerEmployeeId: ").Append(ManagerEmployeeId).Append("\n");
            sb.Append("  ManagerEmployeeNo: ").Append(ManagerEmployeeNo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DepartmentDto" />
    /// </summary>
    public class DepartmentDtoJsonConverter : JsonConverter<DepartmentDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DepartmentDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DepartmentDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<long?> managerEmployeeId = default;
            Option<long?> managerEmployeeNo = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ManagerEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ManagerEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class DepartmentDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DepartmentDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class DepartmentDto.");

            return new DepartmentDto(code, createdDateTimeOffset, createdFromImportJournalId, id, isActive, lastChangedDateTimeOffset, managerEmployeeId, managerEmployeeNo, name);
        }

        /// <summary>
        /// Serializes a <see cref="DepartmentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="departmentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DepartmentDto departmentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, departmentDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DepartmentDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="departmentDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DepartmentDto departmentDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (departmentDto.CodeOption.IsSet)
                if (departmentDto.CodeOption.Value != null)
                    writer.WriteString("Code", departmentDto.Code);
                else
                    writer.WriteNull("Code");

            if (departmentDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", departmentDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (departmentDto.CreatedFromImportJournalIdOption.IsSet)
                if (departmentDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", departmentDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (departmentDto.IdOption.IsSet)
                writer.WriteNumber("Id", departmentDto.IdOption.Value!.Value);

            if (departmentDto.IsActiveOption.IsSet)
                if (departmentDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", departmentDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (departmentDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", departmentDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (departmentDto.ManagerEmployeeIdOption.IsSet)
                if (departmentDto.ManagerEmployeeIdOption.Value != null)
                    writer.WriteNumber("ManagerEmployeeId", departmentDto.ManagerEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("ManagerEmployeeId");

            if (departmentDto.ManagerEmployeeNoOption.IsSet)
                if (departmentDto.ManagerEmployeeNoOption.Value != null)
                    writer.WriteNumber("ManagerEmployeeNo", departmentDto.ManagerEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("ManagerEmployeeNo");

            if (departmentDto.NameOption.IsSet)
                if (departmentDto.NameOption.Value != null)
                    writer.WriteString("Name", departmentDto.Name);
                else
                    writer.WriteNull("Name");
        }
    }
}
