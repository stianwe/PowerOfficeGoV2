// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum representing product types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Product&lt;/i&gt; - Ordinary physical product unit. The default when a product is created.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Service&lt;/i&gt; - The product represent a service provided, instead of a physical unit.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum representing product types.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Product&lt;/i&gt; - Ordinary physical product unit. The default when a product is created.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Service&lt;/i&gt; - The product represent a service provided, instead of a physical unit.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ProductType
    {
        /// <summary>
        /// Enum Product for value: Product
        /// </summary>
        Product = 1,

        /// <summary>
        /// Enum Service for value: Service
        /// </summary>
        Service = 2
    }

    /// <summary>
    /// Converts <see cref="ProductType"/> to and from the JSON value
    /// </summary>
    public static class ProductTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProductType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProductType FromString(string value)
        {
            if (value.Equals("Product"))
                return ProductType.Product;

            if (value.Equals("Service"))
                return ProductType.Service;

            throw new NotImplementedException($"Could not convert value to type ProductType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProductType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProductType? FromStringOrDefault(string value)
        {
            if (value.Equals("Product"))
                return ProductType.Product;

            if (value.Equals("Service"))
                return ProductType.Service;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProductType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProductType value)
        {
            if (value == ProductType.Product)
                return "Product";

            if (value == ProductType.Service)
                return "Service";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProductTypeJsonConverter : JsonConverter<ProductType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProductType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProductType? result = rawValue == null
                ? null
                : ProductTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProductType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProductType productType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(productType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductType"/>
    /// </summary>
    public class ProductTypeNullableJsonConverter : JsonConverter<ProductType?>
    {
        /// <summary>
        /// Returns a ProductType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProductType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProductType? result = rawValue == null
                ? null
                : ProductTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProductType? productType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(productType?.ToString() ?? "null");
        }
    }
}
