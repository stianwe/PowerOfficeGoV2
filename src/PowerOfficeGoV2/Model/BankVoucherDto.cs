// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Dto for bank voucher type
    /// </summary>
    public partial class BankVoucherDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankVoucherDto" /> class.
        /// </summary>
        /// <param name="createdDateTimeOffset">The timestamp the year end voucher entity was created.</param>
        /// <param name="currencyCode">The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="description">The description field of the voucher header.</param>
        /// <param name="externalImportReference">The external import reference associated with the voucher. This property can be set by integrations creating  vouchers, in order to reference the external system and ensure a duplicate check (only one instance of the  reference can exist on the client). Can be used to correlate/duplicate check transactions. Guid&#39;s are  recommended, or other unique references. This property is only available using the api (not visible in the user  interface)</param>
        /// <param name="id">A value that uniquely identifies this voucher. The Id is assigned by Go when the entry is created</param>
        /// <param name="importedVoucherNo">The external voucher number. Can be used to reference the voucher number in the external system. The external  voucher number is visible in Go in various reports.</param>
        /// <param name="isReversed">Value indicating whether this voucher has been reversed.</param>
        /// <param name="saftBatchId">The SAF-T batch id. This is the ID of the batch in the system that transferred the voucher. Should be set if  this voucher is a batch voucher containing the entries of multiple vouchers in the external system. When this  voucher is exported to SAF-T, this property is transactions BatchID in the SAF-T file. The external systems  SAF-T export should set the same BatchId on all the transactions that are included in this Voucher to ensure  audit trail. Max length 35 characters.</param>
        /// <param name="saftSourceId">The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export it&#39;s own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.</param>
        /// <param name="voucherDate">The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.</param>
        /// <param name="voucherLines">The lines of the bank voucher</param>
        /// <param name="voucherNo">The voucher number. This is the voucher number assigned by Go when the voucher was posted. Voucher numbers are  assigned by Go in sequence.</param>
        [JsonConstructor]
        public BankVoucherDto(Option<DateTime?> createdDateTimeOffset = default, Option<string?> currencyCode = default, Option<string?> description = default, Option<string?> externalImportReference = default, Option<Guid?> id = default, Option<long?> importedVoucherNo = default, Option<bool?> isReversed = default, Option<string?> saftBatchId = default, Option<string?> saftSourceId = default, Option<DateOnly?> voucherDate = default, Option<List<BankVoucherLineDto>?> voucherLines = default, Option<long?> voucherNo = default)
        {
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyCodeOption = currencyCode;
            DescriptionOption = description;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            ImportedVoucherNoOption = importedVoucherNo;
            IsReversedOption = isReversed;
            SaftBatchIdOption = saftBatchId;
            SaftSourceIdOption = saftSourceId;
            VoucherDateOption = voucherDate;
            VoucherLinesOption = voucherLines;
            VoucherNoOption = voucherNo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the year end voucher entity was created.
        /// </summary>
        /// <value>The timestamp the year end voucher entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description field of the voucher header.
        /// </summary>
        /// <value>The description field of the voucher header.</value>
        /* <example>My first voucher description</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference associated with the voucher. This property can be set by integrations creating  vouchers, in order to reference the external system and ensure a duplicate check (only one instance of the  reference can exist on the client). Can be used to correlate/duplicate check transactions. Guid&#39;s are  recommended, or other unique references. This property is only available using the api (not visible in the user  interface)
        /// </summary>
        /// <value>The external import reference associated with the voucher. This property can be set by integrations creating  vouchers, in order to reference the external system and ensure a duplicate check (only one instance of the  reference can exist on the client). Can be used to correlate/duplicate check transactions. Guid&#39;s are  recommended, or other unique references. This property is only available using the api (not visible in the user  interface)</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this voucher. The Id is assigned by Go when the entry is created
        /// </summary>
        /// <value>A value that uniquely identifies this voucher. The Id is assigned by Go when the entry is created</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ImportedVoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedVoucherNoOption { get; private set; }

        /// <summary>
        /// The external voucher number. Can be used to reference the voucher number in the external system. The external  voucher number is visible in Go in various reports.
        /// </summary>
        /// <value>The external voucher number. Can be used to reference the voucher number in the external system. The external  voucher number is visible in Go in various reports.</value>
        /* <example>23145</example> */
        [JsonPropertyName("ImportedVoucherNo")]
        public long? ImportedVoucherNo { get { return this.ImportedVoucherNoOption; } set { this.ImportedVoucherNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReversed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReversedOption { get; }

        /// <summary>
        /// Value indicating whether this voucher has been reversed.
        /// </summary>
        /// <value>Value indicating whether this voucher has been reversed.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsReversed")]
        public bool? IsReversed { get { return this.IsReversedOption; } }

        /// <summary>
        /// Used to track the state of SaftBatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SaftBatchIdOption { get; private set; }

        /// <summary>
        /// The SAF-T batch id. This is the ID of the batch in the system that transferred the voucher. Should be set if  this voucher is a batch voucher containing the entries of multiple vouchers in the external system. When this  voucher is exported to SAF-T, this property is transactions BatchID in the SAF-T file. The external systems  SAF-T export should set the same BatchId on all the transactions that are included in this Voucher to ensure  audit trail. Max length 35 characters.
        /// </summary>
        /// <value>The SAF-T batch id. This is the ID of the batch in the system that transferred the voucher. Should be set if  this voucher is a batch voucher containing the entries of multiple vouchers in the external system. When this  voucher is exported to SAF-T, this property is transactions BatchID in the SAF-T file. The external systems  SAF-T export should set the same BatchId on all the transactions that are included in this Voucher to ensure  audit trail. Max length 35 characters.</value>
        /* <example>12312</example> */
        [JsonPropertyName("SaftBatchId")]
        public string? SaftBatchId { get { return this.SaftBatchIdOption; } set { this.SaftBatchIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SaftSourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SaftSourceIdOption { get; private set; }

        /// <summary>
        /// The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export it&#39;s own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.
        /// </summary>
        /// <value>The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export it&#39;s own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.</value>
        /* <example>System_123</example> */
        [JsonPropertyName("SaftSourceId")]
        public string? SaftSourceId { get { return this.SaftSourceIdOption; } set { this.SaftSourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VoucherDateOption { get; private set; }

        /// <summary>
        /// The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.
        /// </summary>
        /// <value>The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.</value>
        /* <example>Wed Mar 20 01:00:00 CET 2024</example> */
        [JsonPropertyName("VoucherDate")]
        public DateOnly? VoucherDate { get { return this.VoucherDateOption; } set { this.VoucherDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<BankVoucherLineDto>?> VoucherLinesOption { get; private set; }

        /// <summary>
        /// The lines of the bank voucher
        /// </summary>
        /// <value>The lines of the bank voucher</value>
        [JsonPropertyName("VoucherLines")]
        public List<BankVoucherLineDto>? VoucherLines { get { return this.VoucherLinesOption; } set { this.VoucherLinesOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number. This is the voucher number assigned by Go when the voucher was posted. Voucher numbers are  assigned by Go in sequence.
        /// </summary>
        /// <value>The voucher number. This is the voucher number assigned by Go when the voucher was posted. Voucher numbers are  assigned by Go in sequence.</value>
        /* <example>123456</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankVoucherDto {\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedVoucherNo: ").Append(ImportedVoucherNo).Append("\n");
            sb.Append("  IsReversed: ").Append(IsReversed).Append("\n");
            sb.Append("  SaftBatchId: ").Append(SaftBatchId).Append("\n");
            sb.Append("  SaftSourceId: ").Append(SaftSourceId).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherLines: ").Append(VoucherLines).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) maxLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be less than 3.", new [] { "CurrencyCode" });
            }

            // CurrencyCode (string) minLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length < 0)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be greater than 0.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BankVoucherDto" />
    /// </summary>
    public class BankVoucherDtoJsonConverter : JsonConverter<BankVoucherDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="BankVoucherDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BankVoucherDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdDateTimeOffset = default;
            Option<string?> currencyCode = default;
            Option<string?> description = default;
            Option<string?> externalImportReference = default;
            Option<Guid?> id = default;
            Option<long?> importedVoucherNo = default;
            Option<bool?> isReversed = default;
            Option<string?> saftBatchId = default;
            Option<string?> saftSourceId = default;
            Option<DateOnly?> voucherDate = default;
            Option<List<BankVoucherLineDto>?> voucherLines = default;
            Option<long?> voucherNo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ImportedVoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedVoucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsReversed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReversed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "SaftBatchId":
                            saftBatchId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SaftSourceId":
                            saftSourceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherLines = new Option<List<BankVoucherLineDto>?>(JsonSerializer.Deserialize<List<BankVoucherLineDto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class BankVoucherDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BankVoucherDto.");

            if (voucherDate.IsSet && voucherDate.Value == null)
                throw new ArgumentNullException(nameof(voucherDate), "Property is not nullable for class BankVoucherDto.");

            if (voucherNo.IsSet && voucherNo.Value == null)
                throw new ArgumentNullException(nameof(voucherNo), "Property is not nullable for class BankVoucherDto.");

            return new BankVoucherDto(createdDateTimeOffset, currencyCode, description, externalImportReference, id, importedVoucherNo, isReversed, saftBatchId, saftSourceId, voucherDate, voucherLines, voucherNo);
        }

        /// <summary>
        /// Serializes a <see cref="BankVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BankVoucherDto bankVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bankVoucherDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BankVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BankVoucherDto bankVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bankVoucherDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", bankVoucherDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (bankVoucherDto.CurrencyCodeOption.IsSet)
                if (bankVoucherDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", bankVoucherDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (bankVoucherDto.DescriptionOption.IsSet)
                if (bankVoucherDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", bankVoucherDto.Description);
                else
                    writer.WriteNull("Description");

            if (bankVoucherDto.ExternalImportReferenceOption.IsSet)
                if (bankVoucherDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", bankVoucherDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (bankVoucherDto.IdOption.IsSet)
                writer.WriteString("Id", bankVoucherDto.IdOption.Value!.Value);

            if (bankVoucherDto.ImportedVoucherNoOption.IsSet)
                if (bankVoucherDto.ImportedVoucherNoOption.Value != null)
                    writer.WriteNumber("ImportedVoucherNo", bankVoucherDto.ImportedVoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedVoucherNo");

            if (bankVoucherDto.IsReversedOption.IsSet)
                if (bankVoucherDto.IsReversedOption.Value != null)
                    writer.WriteBoolean("IsReversed", bankVoucherDto.IsReversedOption.Value!.Value);
                else
                    writer.WriteNull("IsReversed");

            if (bankVoucherDto.SaftBatchIdOption.IsSet)
                if (bankVoucherDto.SaftBatchIdOption.Value != null)
                    writer.WriteString("SaftBatchId", bankVoucherDto.SaftBatchId);
                else
                    writer.WriteNull("SaftBatchId");

            if (bankVoucherDto.SaftSourceIdOption.IsSet)
                if (bankVoucherDto.SaftSourceIdOption.Value != null)
                    writer.WriteString("SaftSourceId", bankVoucherDto.SaftSourceId);
                else
                    writer.WriteNull("SaftSourceId");

            if (bankVoucherDto.VoucherDateOption.IsSet)
                writer.WriteString("VoucherDate", bankVoucherDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));

            if (bankVoucherDto.VoucherLinesOption.IsSet)
                if (bankVoucherDto.VoucherLinesOption.Value != null)
                {
                    writer.WritePropertyName("VoucherLines");
                    JsonSerializer.Serialize(writer, bankVoucherDto.VoucherLines, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("VoucherLines");
            if (bankVoucherDto.VoucherNoOption.IsSet)
                writer.WriteNumber("VoucherNo", bankVoucherDto.VoucherNoOption.Value!.Value);
        }
    }
}
