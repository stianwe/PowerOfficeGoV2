// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employee pension settings DTO contains properties relevant for pension settings on an employee in Go.
    /// </summary>
    public partial class EmployeePensionSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeePensionSettingsDto" /> class.
        /// </summary>
        /// <param name="fnoStatus">fnoStatus</param>
        /// <param name="fnoStatusPercentage">The percentage related to the FNO status that is reported.</param>
        /// <param name="hoursPerYearFno">The number of hours per year for a full time employment, in terms of FNO reporting.  If null, the general payroll settings is used.</param>
        /// <param name="includeInFnoPensionReport">Property indicating whether the employee should be included in the FNO pension reporting.</param>
        /// <param name="isReceivingAfp">Property indicating whether the employee is receiving AFP (in terms of FNO pension report).</param>
        /// <param name="isUnfitForWork">Property indicating whether the employee is unfit for work (in terms of FNO pension report).</param>
        /// <param name="pensionAgeFno">The pension age in terms of FNO reporting.  If null, the general payroll settings is used.</param>
        [JsonConstructor]
        public EmployeePensionSettingsDto(Option<FnoStatusType?> fnoStatus = default, Option<int?> fnoStatusPercentage = default, Option<int?> hoursPerYearFno = default, Option<bool?> includeInFnoPensionReport = default, Option<bool?> isReceivingAfp = default, Option<bool?> isUnfitForWork = default, Option<int?> pensionAgeFno = default)
        {
            FnoStatusOption = fnoStatus;
            FnoStatusPercentageOption = fnoStatusPercentage;
            HoursPerYearFnoOption = hoursPerYearFno;
            IncludeInFnoPensionReportOption = includeInFnoPensionReport;
            IsReceivingAfpOption = isReceivingAfp;
            IsUnfitForWorkOption = isUnfitForWork;
            PensionAgeFnoOption = pensionAgeFno;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FnoStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FnoStatusType?> FnoStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets FnoStatus
        /// </summary>
        [JsonPropertyName("FnoStatus")]
        public FnoStatusType? FnoStatus { get { return this.FnoStatusOption; } set { this.FnoStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of FnoStatusPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FnoStatusPercentageOption { get; private set; }

        /// <summary>
        /// The percentage related to the FNO status that is reported.
        /// </summary>
        /// <value>The percentage related to the FNO status that is reported.</value>
        /* <example>12</example> */
        [JsonPropertyName("FnoStatusPercentage")]
        public int? FnoStatusPercentage { get { return this.FnoStatusPercentageOption; } set { this.FnoStatusPercentageOption = new(value); } }

        /// <summary>
        /// Used to track the state of HoursPerYearFno
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HoursPerYearFnoOption { get; private set; }

        /// <summary>
        /// The number of hours per year for a full time employment, in terms of FNO reporting.  If null, the general payroll settings is used.
        /// </summary>
        /// <value>The number of hours per year for a full time employment, in terms of FNO reporting.  If null, the general payroll settings is used.</value>
        /* <example>1850</example> */
        [JsonPropertyName("HoursPerYearFno")]
        public int? HoursPerYearFno { get { return this.HoursPerYearFnoOption; } set { this.HoursPerYearFnoOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeInFnoPensionReport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeInFnoPensionReportOption { get; private set; }

        /// <summary>
        /// Property indicating whether the employee should be included in the FNO pension reporting.
        /// </summary>
        /// <value>Property indicating whether the employee should be included in the FNO pension reporting.</value>
        /* <example>true</example> */
        [JsonPropertyName("IncludeInFnoPensionReport")]
        public bool? IncludeInFnoPensionReport { get { return this.IncludeInFnoPensionReportOption; } set { this.IncludeInFnoPensionReportOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReceivingAfp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReceivingAfpOption { get; private set; }

        /// <summary>
        /// Property indicating whether the employee is receiving AFP (in terms of FNO pension report).
        /// </summary>
        /// <value>Property indicating whether the employee is receiving AFP (in terms of FNO pension report).</value>
        /* <example>true</example> */
        [JsonPropertyName("IsReceivingAfp")]
        public bool? IsReceivingAfp { get { return this.IsReceivingAfpOption; } set { this.IsReceivingAfpOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsUnfitForWork
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsUnfitForWorkOption { get; private set; }

        /// <summary>
        /// Property indicating whether the employee is unfit for work (in terms of FNO pension report).
        /// </summary>
        /// <value>Property indicating whether the employee is unfit for work (in terms of FNO pension report).</value>
        /* <example>true</example> */
        [JsonPropertyName("IsUnfitForWork")]
        public bool? IsUnfitForWork { get { return this.IsUnfitForWorkOption; } set { this.IsUnfitForWorkOption = new(value); } }

        /// <summary>
        /// Used to track the state of PensionAgeFno
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PensionAgeFnoOption { get; private set; }

        /// <summary>
        /// The pension age in terms of FNO reporting.  If null, the general payroll settings is used.
        /// </summary>
        /// <value>The pension age in terms of FNO reporting.  If null, the general payroll settings is used.</value>
        /* <example>67</example> */
        [JsonPropertyName("PensionAgeFno")]
        public int? PensionAgeFno { get { return this.PensionAgeFnoOption; } set { this.PensionAgeFnoOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmployeePensionSettingsDto {\n");
            sb.Append("  FnoStatus: ").Append(FnoStatus).Append("\n");
            sb.Append("  FnoStatusPercentage: ").Append(FnoStatusPercentage).Append("\n");
            sb.Append("  HoursPerYearFno: ").Append(HoursPerYearFno).Append("\n");
            sb.Append("  IncludeInFnoPensionReport: ").Append(IncludeInFnoPensionReport).Append("\n");
            sb.Append("  IsReceivingAfp: ").Append(IsReceivingAfp).Append("\n");
            sb.Append("  IsUnfitForWork: ").Append(IsUnfitForWork).Append("\n");
            sb.Append("  PensionAgeFno: ").Append(PensionAgeFno).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployeePensionSettingsDto" />
    /// </summary>
    public class EmployeePensionSettingsDtoJsonConverter : JsonConverter<EmployeePensionSettingsDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmployeePensionSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmployeePensionSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FnoStatusType?> fnoStatus = default;
            Option<int?> fnoStatusPercentage = default;
            Option<int?> hoursPerYearFno = default;
            Option<bool?> includeInFnoPensionReport = default;
            Option<bool?> isReceivingAfp = default;
            Option<bool?> isUnfitForWork = default;
            Option<int?> pensionAgeFno = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FnoStatus":
                            string? fnoStatusRawValue = utf8JsonReader.GetString();
                            if (fnoStatusRawValue != null)
                                fnoStatus = new Option<FnoStatusType?>(FnoStatusTypeValueConverter.FromStringOrDefault(fnoStatusRawValue));
                            break;
                        case "FnoStatusPercentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fnoStatusPercentage = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "HoursPerYearFno":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hoursPerYearFno = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "IncludeInFnoPensionReport":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                includeInFnoPensionReport = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsReceivingAfp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReceivingAfp = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsUnfitForWork":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isUnfitForWork = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "PensionAgeFno":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pensionAgeFno = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmployeePensionSettingsDto(fnoStatus, fnoStatusPercentage, hoursPerYearFno, includeInFnoPensionReport, isReceivingAfp, isUnfitForWork, pensionAgeFno);
        }

        /// <summary>
        /// Serializes a <see cref="EmployeePensionSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employeePensionSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmployeePensionSettingsDto employeePensionSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employeePensionSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmployeePensionSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employeePensionSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmployeePensionSettingsDto employeePensionSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employeePensionSettingsDto.FnoStatusOption.IsSet)
                if (employeePensionSettingsDto.FnoStatusOption!.Value != null)
                {
                    var fnoStatusRawValue = FnoStatusTypeValueConverter.ToJsonValue(employeePensionSettingsDto.FnoStatusOption.Value!.Value);
                    writer.WriteString("FnoStatus", fnoStatusRawValue);
                }
                else
                    writer.WriteNull("FnoStatus");
            if (employeePensionSettingsDto.FnoStatusPercentageOption.IsSet)
                if (employeePensionSettingsDto.FnoStatusPercentageOption.Value != null)
                    writer.WriteNumber("FnoStatusPercentage", employeePensionSettingsDto.FnoStatusPercentageOption.Value!.Value);
                else
                    writer.WriteNull("FnoStatusPercentage");

            if (employeePensionSettingsDto.HoursPerYearFnoOption.IsSet)
                if (employeePensionSettingsDto.HoursPerYearFnoOption.Value != null)
                    writer.WriteNumber("HoursPerYearFno", employeePensionSettingsDto.HoursPerYearFnoOption.Value!.Value);
                else
                    writer.WriteNull("HoursPerYearFno");

            if (employeePensionSettingsDto.IncludeInFnoPensionReportOption.IsSet)
                if (employeePensionSettingsDto.IncludeInFnoPensionReportOption.Value != null)
                    writer.WriteBoolean("IncludeInFnoPensionReport", employeePensionSettingsDto.IncludeInFnoPensionReportOption.Value!.Value);
                else
                    writer.WriteNull("IncludeInFnoPensionReport");

            if (employeePensionSettingsDto.IsReceivingAfpOption.IsSet)
                if (employeePensionSettingsDto.IsReceivingAfpOption.Value != null)
                    writer.WriteBoolean("IsReceivingAfp", employeePensionSettingsDto.IsReceivingAfpOption.Value!.Value);
                else
                    writer.WriteNull("IsReceivingAfp");

            if (employeePensionSettingsDto.IsUnfitForWorkOption.IsSet)
                if (employeePensionSettingsDto.IsUnfitForWorkOption.Value != null)
                    writer.WriteBoolean("IsUnfitForWork", employeePensionSettingsDto.IsUnfitForWorkOption.Value!.Value);
                else
                    writer.WriteNull("IsUnfitForWork");

            if (employeePensionSettingsDto.PensionAgeFnoOption.IsSet)
                if (employeePensionSettingsDto.PensionAgeFnoOption.Value != null)
                    writer.WriteNumber("PensionAgeFno", employeePensionSettingsDto.PensionAgeFnoOption.Value!.Value);
                else
                    writer.WriteNull("PensionAgeFno");
        }
    }
}
