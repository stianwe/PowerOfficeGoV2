// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The type of the account&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Asset&lt;/i&gt; - Represent the different types of economic resources owned or controlled by business, common examples of                  Asset accounts are cash, cash in bank, building, inventory, prepaid rent, goodwill, accounts receivable.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Liability&lt;/i&gt; - Represent the different types of economic obligations by a business, such as accounts payable, bank loan,                  bonds payable, accrued interest.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Equity&lt;/i&gt; - Represent the residual equity of a business (after deducting from Assets all the liabilities) including Retained Earnings and Appropriations.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Income&lt;/i&gt; - (Revenue) Represent the company&#39;s gross earnings and common examples include Sales, Service revenue and Interest Income.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Expense&lt;/i&gt; - Represent the company&#39;s expenditures to enable itself to operate. Common examples are electricity and water,                 rentals, depreciation, doubtful accounts, interest, insurance.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The type of the account&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Asset&lt;/i&gt; - Represent the different types of economic resources owned or controlled by business, common examples of                  Asset accounts are cash, cash in bank, building, inventory, prepaid rent, goodwill, accounts receivable.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Liability&lt;/i&gt; - Represent the different types of economic obligations by a business, such as accounts payable, bank loan,                  bonds payable, accrued interest.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Equity&lt;/i&gt; - Represent the residual equity of a business (after deducting from Assets all the liabilities) including Retained Earnings and Appropriations.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Income&lt;/i&gt; - (Revenue) Represent the company&#39;s gross earnings and common examples include Sales, Service revenue and Interest Income.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Expense&lt;/i&gt; - Represent the company&#39;s expenditures to enable itself to operate. Common examples are electricity and water,                 rentals, depreciation, doubtful accounts, interest, insurance.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum GeneralLedgerAccountType
    {
        /// <summary>
        /// Enum Asset for value: Asset
        /// </summary>
        Asset = 1,

        /// <summary>
        /// Enum Liability for value: Liability
        /// </summary>
        Liability = 2,

        /// <summary>
        /// Enum Equity for value: Equity
        /// </summary>
        Equity = 3,

        /// <summary>
        /// Enum Income for value: Income
        /// </summary>
        Income = 4,

        /// <summary>
        /// Enum Expense for value: Expense
        /// </summary>
        Expense = 5
    }

    /// <summary>
    /// Converts <see cref="GeneralLedgerAccountType"/> to and from the JSON value
    /// </summary>
    public static class GeneralLedgerAccountTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GeneralLedgerAccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GeneralLedgerAccountType FromString(string value)
        {
            if (value.Equals("Asset"))
                return GeneralLedgerAccountType.Asset;

            if (value.Equals("Liability"))
                return GeneralLedgerAccountType.Liability;

            if (value.Equals("Equity"))
                return GeneralLedgerAccountType.Equity;

            if (value.Equals("Income"))
                return GeneralLedgerAccountType.Income;

            if (value.Equals("Expense"))
                return GeneralLedgerAccountType.Expense;

            throw new NotImplementedException($"Could not convert value to type GeneralLedgerAccountType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="GeneralLedgerAccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GeneralLedgerAccountType? FromStringOrDefault(string value)
        {
            if (value.Equals("Asset"))
                return GeneralLedgerAccountType.Asset;

            if (value.Equals("Liability"))
                return GeneralLedgerAccountType.Liability;

            if (value.Equals("Equity"))
                return GeneralLedgerAccountType.Equity;

            if (value.Equals("Income"))
                return GeneralLedgerAccountType.Income;

            if (value.Equals("Expense"))
                return GeneralLedgerAccountType.Expense;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GeneralLedgerAccountType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(GeneralLedgerAccountType value)
        {
            if (value == GeneralLedgerAccountType.Asset)
                return "Asset";

            if (value == GeneralLedgerAccountType.Liability)
                return "Liability";

            if (value == GeneralLedgerAccountType.Equity)
                return "Equity";

            if (value == GeneralLedgerAccountType.Income)
                return "Income";

            if (value == GeneralLedgerAccountType.Expense)
                return "Expense";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GeneralLedgerAccountType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class GeneralLedgerAccountTypeJsonConverter : JsonConverter<GeneralLedgerAccountType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GeneralLedgerAccountType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GeneralLedgerAccountType? result = rawValue == null
                ? null
                : GeneralLedgerAccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the GeneralLedgerAccountType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generalLedgerAccountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GeneralLedgerAccountType generalLedgerAccountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(generalLedgerAccountType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GeneralLedgerAccountType"/>
    /// </summary>
    public class GeneralLedgerAccountTypeNullableJsonConverter : JsonConverter<GeneralLedgerAccountType?>
    {
        /// <summary>
        /// Returns a GeneralLedgerAccountType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GeneralLedgerAccountType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GeneralLedgerAccountType? result = rawValue == null
                ? null
                : GeneralLedgerAccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generalLedgerAccountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GeneralLedgerAccountType? generalLedgerAccountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(generalLedgerAccountType?.ToString() ?? "null");
        }
    }
}
