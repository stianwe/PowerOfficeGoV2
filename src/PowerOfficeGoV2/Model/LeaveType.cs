// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The type of leave.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;EducationalNonStatutory&lt;/i&gt; - Educational leave (Non-statutory).&lt;/li&gt;&lt;li&gt;&lt;i&gt;EducationalStatutory&lt;/i&gt; - Educational leave (Statutory).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Maternity&lt;/i&gt; - Leave with parental benefits.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Military&lt;/i&gt; - Leave for military service.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherNonStatutory&lt;/i&gt; - Other non-statutory leaves.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherStatutory&lt;/i&gt; - Other statutory leaves.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The type of leave.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;EducationalNonStatutory&lt;/i&gt; - Educational leave (Non-statutory).&lt;/li&gt;&lt;li&gt;&lt;i&gt;EducationalStatutory&lt;/i&gt; - Educational leave (Statutory).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Maternity&lt;/i&gt; - Leave with parental benefits.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Military&lt;/i&gt; - Leave for military service.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherNonStatutory&lt;/i&gt; - Other non-statutory leaves.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OtherStatutory&lt;/i&gt; - Other statutory leaves.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum LeaveType
    {
        /// <summary>
        /// Enum EducationalNonStatutory for value: EducationalNonStatutory
        /// </summary>
        EducationalNonStatutory = 1,

        /// <summary>
        /// Enum EducationalStatutory for value: EducationalStatutory
        /// </summary>
        EducationalStatutory = 2,

        /// <summary>
        /// Enum Maternity for value: Maternity
        /// </summary>
        Maternity = 3,

        /// <summary>
        /// Enum Military for value: Military
        /// </summary>
        Military = 4,

        /// <summary>
        /// Enum OtherNonStatutory for value: OtherNonStatutory
        /// </summary>
        OtherNonStatutory = 5,

        /// <summary>
        /// Enum OtherStatutory for value: OtherStatutory
        /// </summary>
        OtherStatutory = 6
    }

    /// <summary>
    /// Converts <see cref="LeaveType"/> to and from the JSON value
    /// </summary>
    public static class LeaveTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LeaveType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LeaveType FromString(string value)
        {
            if (value.Equals("EducationalNonStatutory"))
                return LeaveType.EducationalNonStatutory;

            if (value.Equals("EducationalStatutory"))
                return LeaveType.EducationalStatutory;

            if (value.Equals("Maternity"))
                return LeaveType.Maternity;

            if (value.Equals("Military"))
                return LeaveType.Military;

            if (value.Equals("OtherNonStatutory"))
                return LeaveType.OtherNonStatutory;

            if (value.Equals("OtherStatutory"))
                return LeaveType.OtherStatutory;

            throw new NotImplementedException($"Could not convert value to type LeaveType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="LeaveType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LeaveType? FromStringOrDefault(string value)
        {
            if (value.Equals("EducationalNonStatutory"))
                return LeaveType.EducationalNonStatutory;

            if (value.Equals("EducationalStatutory"))
                return LeaveType.EducationalStatutory;

            if (value.Equals("Maternity"))
                return LeaveType.Maternity;

            if (value.Equals("Military"))
                return LeaveType.Military;

            if (value.Equals("OtherNonStatutory"))
                return LeaveType.OtherNonStatutory;

            if (value.Equals("OtherStatutory"))
                return LeaveType.OtherStatutory;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LeaveType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(LeaveType value)
        {
            if (value == LeaveType.EducationalNonStatutory)
                return "EducationalNonStatutory";

            if (value == LeaveType.EducationalStatutory)
                return "EducationalStatutory";

            if (value == LeaveType.Maternity)
                return "Maternity";

            if (value == LeaveType.Military)
                return "Military";

            if (value == LeaveType.OtherNonStatutory)
                return "OtherNonStatutory";

            if (value == LeaveType.OtherStatutory)
                return "OtherStatutory";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LeaveType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LeaveTypeJsonConverter : JsonConverter<LeaveType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LeaveType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LeaveType? result = rawValue == null
                ? null
                : LeaveTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LeaveType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="leaveType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LeaveType leaveType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(leaveType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LeaveType"/>
    /// </summary>
    public class LeaveTypeNullableJsonConverter : JsonConverter<LeaveType?>
    {
        /// <summary>
        /// Returns a LeaveType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LeaveType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LeaveType? result = rawValue == null
                ? null
                : LeaveTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="leaveType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LeaveType? leaveType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(leaveType?.ToString() ?? "null");
        }
    }
}
