// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The gender of a livestock&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Male&lt;/i&gt; - Male (Hanndyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Female&lt;/i&gt; - Female (Hunndyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NeuteredMale&lt;/i&gt; - Neutered male (Kastrat)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The gender of a livestock&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Male&lt;/i&gt; - Male (Hanndyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Female&lt;/i&gt; - Female (Hunndyr)&lt;/li&gt;&lt;li&gt;&lt;i&gt;NeuteredMale&lt;/i&gt; - Neutered male (Kastrat)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum LivestockGender
    {
        /// <summary>
        /// Enum Male for value: Male
        /// </summary>
        Male = 1,

        /// <summary>
        /// Enum Female for value: Female
        /// </summary>
        Female = 2,

        /// <summary>
        /// Enum NeuteredMale for value: NeuteredMale
        /// </summary>
        NeuteredMale = 3
    }

    /// <summary>
    /// Converts <see cref="LivestockGender"/> to and from the JSON value
    /// </summary>
    public static class LivestockGenderValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LivestockGender"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LivestockGender FromString(string value)
        {
            if (value.Equals("Male"))
                return LivestockGender.Male;

            if (value.Equals("Female"))
                return LivestockGender.Female;

            if (value.Equals("NeuteredMale"))
                return LivestockGender.NeuteredMale;

            throw new NotImplementedException($"Could not convert value to type LivestockGender: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="LivestockGender"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LivestockGender? FromStringOrDefault(string value)
        {
            if (value.Equals("Male"))
                return LivestockGender.Male;

            if (value.Equals("Female"))
                return LivestockGender.Female;

            if (value.Equals("NeuteredMale"))
                return LivestockGender.NeuteredMale;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LivestockGender"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(LivestockGender value)
        {
            if (value == LivestockGender.Male)
                return "Male";

            if (value == LivestockGender.Female)
                return "Female";

            if (value == LivestockGender.NeuteredMale)
                return "NeuteredMale";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LivestockGender"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LivestockGenderJsonConverter : JsonConverter<LivestockGender>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LivestockGender Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LivestockGender? result = rawValue == null
                ? null
                : LivestockGenderValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the LivestockGender to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="livestockGender"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LivestockGender livestockGender, JsonSerializerOptions options)
        {
            writer.WriteStringValue(livestockGender.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LivestockGender"/>
    /// </summary>
    public class LivestockGenderNullableJsonConverter : JsonConverter<LivestockGender?>
    {
        /// <summary>
        /// Returns a LivestockGender from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LivestockGender? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            LivestockGender? result = rawValue == null
                ? null
                : LivestockGenderValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="livestockGender"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LivestockGender? livestockGender, JsonSerializerOptions options)
        {
            writer.WriteStringValue(livestockGender?.ToString() ?? "null");
        }
    }
}
