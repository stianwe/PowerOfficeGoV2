// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Outgoing-invoice / Credit-note Line
    /// </summary>
    public partial class OutgoingInvoiceLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceLineDto" /> class.
        /// </summary>
        /// <param name="accountId">The general ledger account id this invoice line was posted to.</param>
        /// <param name="accountNo">The general ledger account code this invoice line was posted to.</param>
        /// <param name="agricultureDepartment">agricultureDepartment</param>
        /// <param name="allowance">The percent of allowance/discount or allowance charge for this invoice line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.</param>
        /// <param name="departmentCode">The code of the department this invoice line is associated with.</param>
        /// <param name="departmentId">The id of the department this invoice line is associated with.</param>
        /// <param name="description">The description set on this invoice line.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with this invoice line.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with this invoice line.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with this invoice line.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with this invoice line.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with this invoice line.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with this invoice line.</param>
        /// <param name="externalImportReference">The external import reference for this invoice line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.</param>
        /// <param name="id">The identifier of this invoice line.  The id is assigned by Go when the invoice is created.  Note that on the line level, the invoice lines do not correspond with the sales order lines, if the invoice was an sales order created in Go.  This is because the lines are recreated in the process of sending and posting the information when an order is transformed to an invoice.</param>
        /// <param name="isAccrued">Value indicating whether the net posted amount was accrued over time when the invoice voucher was posted in Go. If true, the accrual transactions is best retrieved by getting the accounttransactions of invoice voucher.</param>
        /// <param name="lineType">lineType</param>
        /// <param name="locationCode">The code of the location dimension associated with this invoice line.</param>
        /// <param name="locationId">The id of the location dimension associated with this invoice line.</param>
        /// <param name="netAmount">The net amount of this invoice line (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="netPostedAmount">The net posted amount of this invoice line (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate of the invoice.</param>
        /// <param name="productCode">The code of the product associated with this invoice line.</param>
        /// <param name="productId">The id of the product associated with this invoice line.</param>
        /// <param name="productUnitCost">The cost per unit of the product associated with this invoice line.</param>
        /// <param name="productUnitPrice">The sales price per unit of the product associated with this invoice line.</param>
        /// <param name="projectCode">The project code associated with this invoice line.</param>
        /// <param name="projectId">The project id associated with is invoice line.</param>
        /// <param name="quantity">The quantity of this invoice line.</param>
        /// <param name="sellersReferenceEmployeeId">The id of the employee set as the seller reference.</param>
        /// <param name="sellersReferenceEmployeeNo">The number of the employee set as the seller reference.</param>
        /// <param name="sortOrder">The sort order of the line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.</param>
        /// <param name="totalAmount">The total amount of this invoice line (VAT inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="totalPostedAmount">The total posted amount of this invoice line (VAT inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode</param>
        /// <param name="vatAmount">The VAT amount of this invoice line.</param>
        /// <param name="vatCode">The VAT code used on this invoice line.  Standard codes in Go is based on the SAF-T standard.</param>
        /// <param name="vatId">The VAT id for the VAT code used on this invoice line.</param>
        /// <param name="vatRate">The VAT rate for the VAT code used on this invoice line.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        [JsonConstructor]
        public OutgoingInvoiceLineDto(Option<long?> accountId = default, Option<long?> accountNo = default, Option<AgricultureDepartment?> agricultureDepartment = default, Option<double?> allowance = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> description = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<string?> externalImportReference = default, Option<long?> id = default, Option<bool?> isAccrued = default, Option<VoucherLineType?> lineType = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<double?> netAmount = default, Option<double?> netPostedAmount = default, Option<string?> productCode = default, Option<long?> productId = default, Option<double?> productUnitCost = default, Option<double?> productUnitPrice = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<long?> sellersReferenceEmployeeId = default, Option<long?> sellersReferenceEmployeeNo = default, Option<int?> sortOrder = default, Option<double?> totalAmount = default, Option<double?> totalPostedAmount = default, Option<UnitOfMeasureType?> unitOfMeasureCode = default, Option<double?> vatAmount = default, Option<string?> vatCode = default, Option<int?> vatId = default, Option<double?> vatRate = default, Option<VatReturnSpecification?> vatReturnSpecification = default)
        {
            AccountIdOption = accountId;
            AccountNoOption = accountNo;
            AgricultureDepartmentOption = agricultureDepartment;
            AllowanceOption = allowance;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            IsAccruedOption = isAccrued;
            LineTypeOption = lineType;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            NetAmountOption = netAmount;
            NetPostedAmountOption = netPostedAmount;
            ProductCodeOption = productCode;
            ProductIdOption = productId;
            ProductUnitCostOption = productUnitCost;
            ProductUnitPriceOption = productUnitPrice;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            SellersReferenceEmployeeIdOption = sellersReferenceEmployeeId;
            SellersReferenceEmployeeNoOption = sellersReferenceEmployeeNo;
            SortOrderOption = sortOrder;
            TotalAmountOption = totalAmount;
            TotalPostedAmountOption = totalPostedAmount;
            UnitOfMeasureCodeOption = unitOfMeasureCode;
            VatAmountOption = vatAmount;
            VatCodeOption = vatCode;
            VatIdOption = vatId;
            VatRateOption = vatRate;
            VatReturnSpecificationOption = vatReturnSpecification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> AgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDepartment
        /// </summary>
        [JsonPropertyName("AgricultureDepartment")]
        public AgricultureDepartment? AgricultureDepartment { get { return this.AgricultureDepartmentOption; } set { this.AgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of LineType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherLineType?> LineTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [JsonPropertyName("LineType")]
        public VoucherLineType? LineType { get { return this.LineTypeOption; } set { this.LineTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitOfMeasureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureCode
        /// </summary>
        [JsonPropertyName("UnitOfMeasureCode")]
        public UnitOfMeasureType? UnitOfMeasureCode { get { return this.UnitOfMeasureCodeOption; } set { this.UnitOfMeasureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; }

        /// <summary>
        /// The general ledger account id this invoice line was posted to.
        /// </summary>
        /// <value>The general ledger account id this invoice line was posted to.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountNoOption { get; }

        /// <summary>
        /// The general ledger account code this invoice line was posted to.
        /// </summary>
        /// <value>The general ledger account code this invoice line was posted to.</value>
        /* <example>3000</example> */
        [JsonPropertyName("AccountNo")]
        public long? AccountNo { get { return this.AccountNoOption; } }

        /// <summary>
        /// Used to track the state of Allowance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AllowanceOption { get; }

        /// <summary>
        /// The percent of allowance/discount or allowance charge for this invoice line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.
        /// </summary>
        /// <value>The percent of allowance/discount or allowance charge for this invoice line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.</value>
        /* <example>56.75</example> */
        [JsonPropertyName("Allowance")]
        public double? Allowance { get { return this.AllowanceOption; } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; }

        /// <summary>
        /// The code of the department this invoice line is associated with.
        /// </summary>
        /// <value>The code of the department this invoice line is associated with.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; }

        /// <summary>
        /// The id of the department this invoice line is associated with.
        /// </summary>
        /// <value>The id of the department this invoice line is associated with.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; }

        /// <summary>
        /// The description set on this invoice line.
        /// </summary>
        /// <value>The description set on this invoice line.</value>
        /* <example>Hello accounting world</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with this invoice line.
        /// </summary>
        /// <value>The code of the dimension 1 associated with this invoice line.</value>
        /* <example>dimcode111</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; }

        /// <summary>
        /// The id of the dimension 1 associated with this invoice line.
        /// </summary>
        /// <value>The id of the dimension 1 associated with this invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with this invoice line.
        /// </summary>
        /// <value>The code of the dimension 2 associated with this invoice line.</value>
        /* <example>dimcode222</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; }

        /// <summary>
        /// The id of the dimension 2 associated with this invoice line.
        /// </summary>
        /// <value>The id of the dimension 2 associated with this invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with this invoice line.
        /// </summary>
        /// <value>The code of the dimension 3 associated with this invoice line.</value>
        /* <example>dimcode333</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; }

        /// <summary>
        /// The id of the dimension 3 associated with this invoice line.
        /// </summary>
        /// <value>The id of the dimension 3 associated with this invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; }

        /// <summary>
        /// The external import reference for this invoice line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.
        /// </summary>
        /// <value>The external import reference for this invoice line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of this invoice line.  The id is assigned by Go when the invoice is created.  Note that on the line level, the invoice lines do not correspond with the sales order lines, if the invoice was an sales order created in Go.  This is because the lines are recreated in the process of sending and posting the information when an order is transformed to an invoice.
        /// </summary>
        /// <value>The identifier of this invoice line.  The id is assigned by Go when the invoice is created.  Note that on the line level, the invoice lines do not correspond with the sales order lines, if the invoice was an sales order created in Go.  This is because the lines are recreated in the process of sending and posting the information when an order is transformed to an invoice.</value>
        /* <example>476023749</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsAccrued
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsAccruedOption { get; }

        /// <summary>
        /// Value indicating whether the net posted amount was accrued over time when the invoice voucher was posted in Go. If true, the accrual transactions is best retrieved by getting the accounttransactions of invoice voucher.
        /// </summary>
        /// <value>Value indicating whether the net posted amount was accrued over time when the invoice voucher was posted in Go. If true, the accrual transactions is best retrieved by getting the accounttransactions of invoice voucher.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsAccrued")]
        public bool? IsAccrued { get { return this.IsAccruedOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with this invoice line.
        /// </summary>
        /// <value>The code of the location dimension associated with this invoice line.</value>
        /* <example>L1337</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; }

        /// <summary>
        /// The id of the location dimension associated with this invoice line.
        /// </summary>
        /// <value>The id of the location dimension associated with this invoice line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } }

        /// <summary>
        /// Used to track the state of NetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetAmountOption { get; }

        /// <summary>
        /// The net amount of this invoice line (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The net amount of this invoice line (vat exclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>1000.33</example> */
        [JsonPropertyName("NetAmount")]
        public double? NetAmount { get { return this.NetAmountOption; } }

        /// <summary>
        /// Used to track the state of NetPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetPostedAmountOption { get; }

        /// <summary>
        /// The net posted amount of this invoice line (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate of the invoice.
        /// </summary>
        /// <value>The net posted amount of this invoice line (vat exclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the netAmount and the normalized currencyExchangeRate of the invoice.</value>
        /* <example>1000.33</example> */
        [JsonPropertyName("NetPostedAmount")]
        public double? NetPostedAmount { get { return this.NetPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of ProductCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductCodeOption { get; }

        /// <summary>
        /// The code of the product associated with this invoice line.
        /// </summary>
        /// <value>The code of the product associated with this invoice line.</value>
        /* <example>10</example> */
        [JsonPropertyName("ProductCode")]
        public string? ProductCode { get { return this.ProductCodeOption; } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; }

        /// <summary>
        /// The id of the product associated with this invoice line.
        /// </summary>
        /// <value>The id of the product associated with this invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } }

        /// <summary>
        /// Used to track the state of ProductUnitCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ProductUnitCostOption { get; }

        /// <summary>
        /// The cost per unit of the product associated with this invoice line.
        /// </summary>
        /// <value>The cost per unit of the product associated with this invoice line.</value>
        /* <example>300</example> */
        [JsonPropertyName("ProductUnitCost")]
        public double? ProductUnitCost { get { return this.ProductUnitCostOption; } }

        /// <summary>
        /// Used to track the state of ProductUnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ProductUnitPriceOption { get; }

        /// <summary>
        /// The sales price per unit of the product associated with this invoice line.
        /// </summary>
        /// <value>The sales price per unit of the product associated with this invoice line.</value>
        /* <example>200</example> */
        [JsonPropertyName("ProductUnitPrice")]
        public double? ProductUnitPrice { get { return this.ProductUnitPriceOption; } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The project code associated with this invoice line.
        /// </summary>
        /// <value>The project code associated with this invoice line.</value>
        /* <example>100</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The project id associated with is invoice line.
        /// </summary>
        /// <value>The project id associated with is invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; }

        /// <summary>
        /// The quantity of this invoice line.
        /// </summary>
        /// <value>The quantity of this invoice line.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeIdOption { get; }

        /// <summary>
        /// The id of the employee set as the seller reference.
        /// </summary>
        /// <value>The id of the employee set as the seller reference.</value>
        /* <example>756319</example> */
        [JsonPropertyName("SellersReferenceEmployeeId")]
        public long? SellersReferenceEmployeeId { get { return this.SellersReferenceEmployeeIdOption; } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeNoOption { get; }

        /// <summary>
        /// The number of the employee set as the seller reference.
        /// </summary>
        /// <value>The number of the employee set as the seller reference.</value>
        /* <example>1</example> */
        [JsonPropertyName("SellersReferenceEmployeeNo")]
        public long? SellersReferenceEmployeeNo { get { return this.SellersReferenceEmployeeNoOption; } }

        /// <summary>
        /// Used to track the state of SortOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SortOrderOption { get; }

        /// <summary>
        /// The sort order of the line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.
        /// </summary>
        /// <value>The sort order of the line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.</value>
        /* <example>0</example> */
        [JsonPropertyName("SortOrder")]
        public int? SortOrder { get { return this.SortOrderOption; } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalAmountOption { get; }

        /// <summary>
        /// The total amount of this invoice line (VAT inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The total amount of this invoice line (VAT inclusive).  This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>12500.33</example> */
        [JsonPropertyName("TotalAmount")]
        public double? TotalAmount { get { return this.TotalAmountOption; } }

        /// <summary>
        /// Used to track the state of TotalPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalPostedAmountOption { get; }

        /// <summary>
        /// The total posted amount of this invoice line (VAT inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.
        /// </summary>
        /// <value>The total posted amount of this invoice line (VAT inclusive).  This amount is always presented in the client currency (NOK).  Will correspond with the totalAmount and the normalized currencyExchangeRate.</value>
        /* <example>12500.33</example> */
        [JsonPropertyName("TotalPostedAmount")]
        public double? TotalPostedAmount { get { return this.TotalPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of VatAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VatAmountOption { get; }

        /// <summary>
        /// The VAT amount of this invoice line.
        /// </summary>
        /// <value>The VAT amount of this invoice line.</value>
        /* <example>-71.14</example> */
        [JsonPropertyName("VatAmount")]
        public double? VatAmount { get { return this.VatAmountOption; } }

        /// <summary>
        /// Used to track the state of VatCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VatCodeOption { get; }

        /// <summary>
        /// The VAT code used on this invoice line.  Standard codes in Go is based on the SAF-T standard.
        /// </summary>
        /// <value>The VAT code used on this invoice line.  Standard codes in Go is based on the SAF-T standard.</value>
        /* <example>33</example> */
        [JsonPropertyName("VatCode")]
        public string? VatCode { get { return this.VatCodeOption; } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatIdOption { get; }

        /// <summary>
        /// The VAT id for the VAT code used on this invoice line.
        /// </summary>
        /// <value>The VAT id for the VAT code used on this invoice line.</value>
        /* <example>123456</example> */
        [JsonPropertyName("VatId")]
        public int? VatId { get { return this.VatIdOption; } }

        /// <summary>
        /// Used to track the state of VatRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> VatRateOption { get; }

        /// <summary>
        /// The VAT rate for the VAT code used on this invoice line.
        /// </summary>
        /// <value>The VAT rate for the VAT code used on this invoice line.</value>
        /* <example>0.12</example> */
        [JsonPropertyName("VatRate")]
        public double? VatRate { get { return this.VatRateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutgoingInvoiceLineDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AgricultureDepartment: ").Append(AgricultureDepartment).Append("\n");
            sb.Append("  Allowance: ").Append(Allowance).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAccrued: ").Append(IsAccrued).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  NetPostedAmount: ").Append(NetPostedAmount).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductUnitCost: ").Append(ProductUnitCost).Append("\n");
            sb.Append("  ProductUnitPrice: ").Append(ProductUnitPrice).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellersReferenceEmployeeId: ").Append(SellersReferenceEmployeeId).Append("\n");
            sb.Append("  SellersReferenceEmployeeNo: ").Append(SellersReferenceEmployeeNo).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalPostedAmount: ").Append(TotalPostedAmount).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  VatCode: ").Append(VatCode).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceLineDto" />
    /// </summary>
    public class OutgoingInvoiceLineDtoJsonConverter : JsonConverter<OutgoingInvoiceLineDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="OutgoingInvoiceLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OutgoingInvoiceLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<long?> accountNo = default;
            Option<AgricultureDepartment?> agricultureDepartment = default;
            Option<double?> allowance = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<string?> externalImportReference = default;
            Option<long?> id = default;
            Option<bool?> isAccrued = default;
            Option<VoucherLineType?> lineType = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<double?> netAmount = default;
            Option<double?> netPostedAmount = default;
            Option<string?> productCode = default;
            Option<long?> productId = default;
            Option<double?> productUnitCost = default;
            Option<double?> productUnitPrice = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<long?> sellersReferenceEmployeeId = default;
            Option<long?> sellersReferenceEmployeeNo = default;
            Option<int?> sortOrder = default;
            Option<double?> totalAmount = default;
            Option<double?> totalPostedAmount = default;
            Option<UnitOfMeasureType?> unitOfMeasureCode = default;
            Option<double?> vatAmount = default;
            Option<string?> vatCode = default;
            Option<int?> vatId = default;
            Option<double?> vatRate = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AgricultureDepartment":
                            string? agricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (agricultureDepartmentRawValue != null)
                                agricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(agricultureDepartmentRawValue));
                            break;
                        case "Allowance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsAccrued":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isAccrued = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LineType":
                            string? lineTypeRawValue = utf8JsonReader.GetString();
                            if (lineTypeRawValue != null)
                                lineType = new Option<VoucherLineType?>(VoucherLineTypeValueConverter.FromStringOrDefault(lineTypeRawValue));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NetAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "NetPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProductCode":
                            productCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductUnitCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productUnitCost = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProductUnitPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productUnitPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "SellersReferenceEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SellersReferenceEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SortOrder":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sortOrder = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "TotalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "TotalPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitOfMeasureCode":
                            string? unitOfMeasureCodeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureCodeRawValue != null)
                                unitOfMeasureCode = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureCodeRawValue));
                            break;
                        case "VatAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatCode":
                            vatCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "VatRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (netAmount.IsSet && netAmount.Value == null)
                throw new ArgumentNullException(nameof(netAmount), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (netPostedAmount.IsSet && netPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(netPostedAmount), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (productUnitPrice.IsSet && productUnitPrice.Value == null)
                throw new ArgumentNullException(nameof(productUnitPrice), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (sortOrder.IsSet && sortOrder.Value == null)
                throw new ArgumentNullException(nameof(sortOrder), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (totalPostedAmount.IsSet && totalPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(totalPostedAmount), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (vatAmount.IsSet && vatAmount.Value == null)
                throw new ArgumentNullException(nameof(vatAmount), "Property is not nullable for class OutgoingInvoiceLineDto.");

            if (vatRate.IsSet && vatRate.Value == null)
                throw new ArgumentNullException(nameof(vatRate), "Property is not nullable for class OutgoingInvoiceLineDto.");

            return new OutgoingInvoiceLineDto(accountId, accountNo, agricultureDepartment, allowance, departmentCode, departmentId, description, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, externalImportReference, id, isAccrued, lineType, locationCode, locationId, netAmount, netPostedAmount, productCode, productId, productUnitCost, productUnitPrice, projectCode, projectId, quantity, sellersReferenceEmployeeId, sellersReferenceEmployeeNo, sortOrder, totalAmount, totalPostedAmount, unitOfMeasureCode, vatAmount, vatCode, vatId, vatRate, vatReturnSpecification);
        }

        /// <summary>
        /// Serializes a <see cref="OutgoingInvoiceLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceLineDto outgoingInvoiceLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, outgoingInvoiceLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OutgoingInvoiceLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OutgoingInvoiceLineDto outgoingInvoiceLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (outgoingInvoiceLineDto.AccountIdOption.IsSet)
                if (outgoingInvoiceLineDto.AccountIdOption.Value != null)
                    writer.WriteNumber("AccountId", outgoingInvoiceLineDto.AccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccountId");

            if (outgoingInvoiceLineDto.AccountNoOption.IsSet)
                if (outgoingInvoiceLineDto.AccountNoOption.Value != null)
                    writer.WriteNumber("AccountNo", outgoingInvoiceLineDto.AccountNoOption.Value!.Value);
                else
                    writer.WriteNull("AccountNo");

            if (outgoingInvoiceLineDto.AgricultureDepartmentOption.IsSet)
                if (outgoingInvoiceLineDto.AgricultureDepartmentOption!.Value != null)
                {
                    var agricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(outgoingInvoiceLineDto.AgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("AgricultureDepartment", agricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("AgricultureDepartment");
            if (outgoingInvoiceLineDto.AllowanceOption.IsSet)
                if (outgoingInvoiceLineDto.AllowanceOption.Value != null)
                    writer.WriteNumber("Allowance", outgoingInvoiceLineDto.AllowanceOption.Value!.Value);
                else
                    writer.WriteNull("Allowance");

            if (outgoingInvoiceLineDto.DepartmentCodeOption.IsSet)
                if (outgoingInvoiceLineDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", outgoingInvoiceLineDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (outgoingInvoiceLineDto.DepartmentIdOption.IsSet)
                if (outgoingInvoiceLineDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", outgoingInvoiceLineDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (outgoingInvoiceLineDto.DescriptionOption.IsSet)
                if (outgoingInvoiceLineDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", outgoingInvoiceLineDto.Description);
                else
                    writer.WriteNull("Description");

            if (outgoingInvoiceLineDto.Dim1CodeOption.IsSet)
                if (outgoingInvoiceLineDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", outgoingInvoiceLineDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (outgoingInvoiceLineDto.Dim1IdOption.IsSet)
                if (outgoingInvoiceLineDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", outgoingInvoiceLineDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (outgoingInvoiceLineDto.Dim2CodeOption.IsSet)
                if (outgoingInvoiceLineDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", outgoingInvoiceLineDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (outgoingInvoiceLineDto.Dim2IdOption.IsSet)
                if (outgoingInvoiceLineDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", outgoingInvoiceLineDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (outgoingInvoiceLineDto.Dim3CodeOption.IsSet)
                if (outgoingInvoiceLineDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", outgoingInvoiceLineDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (outgoingInvoiceLineDto.Dim3IdOption.IsSet)
                if (outgoingInvoiceLineDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", outgoingInvoiceLineDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (outgoingInvoiceLineDto.ExternalImportReferenceOption.IsSet)
                if (outgoingInvoiceLineDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", outgoingInvoiceLineDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (outgoingInvoiceLineDto.IdOption.IsSet)
                writer.WriteNumber("Id", outgoingInvoiceLineDto.IdOption.Value!.Value);

            if (outgoingInvoiceLineDto.IsAccruedOption.IsSet)
                if (outgoingInvoiceLineDto.IsAccruedOption.Value != null)
                    writer.WriteBoolean("IsAccrued", outgoingInvoiceLineDto.IsAccruedOption.Value!.Value);
                else
                    writer.WriteNull("IsAccrued");

            if (outgoingInvoiceLineDto.LineTypeOption.IsSet)
                if (outgoingInvoiceLineDto.LineTypeOption!.Value != null)
                {
                    var lineTypeRawValue = VoucherLineTypeValueConverter.ToJsonValue(outgoingInvoiceLineDto.LineTypeOption.Value!.Value);
                    writer.WriteString("LineType", lineTypeRawValue);
                }
                else
                    writer.WriteNull("LineType");
            if (outgoingInvoiceLineDto.LocationCodeOption.IsSet)
                if (outgoingInvoiceLineDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", outgoingInvoiceLineDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (outgoingInvoiceLineDto.LocationIdOption.IsSet)
                if (outgoingInvoiceLineDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", outgoingInvoiceLineDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (outgoingInvoiceLineDto.NetAmountOption.IsSet)
                writer.WriteNumber("NetAmount", outgoingInvoiceLineDto.NetAmountOption.Value!.Value);

            if (outgoingInvoiceLineDto.NetPostedAmountOption.IsSet)
                writer.WriteNumber("NetPostedAmount", outgoingInvoiceLineDto.NetPostedAmountOption.Value!.Value);

            if (outgoingInvoiceLineDto.ProductCodeOption.IsSet)
                if (outgoingInvoiceLineDto.ProductCodeOption.Value != null)
                    writer.WriteString("ProductCode", outgoingInvoiceLineDto.ProductCode);
                else
                    writer.WriteNull("ProductCode");

            if (outgoingInvoiceLineDto.ProductIdOption.IsSet)
                if (outgoingInvoiceLineDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", outgoingInvoiceLineDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (outgoingInvoiceLineDto.ProductUnitCostOption.IsSet)
                if (outgoingInvoiceLineDto.ProductUnitCostOption.Value != null)
                    writer.WriteNumber("ProductUnitCost", outgoingInvoiceLineDto.ProductUnitCostOption.Value!.Value);
                else
                    writer.WriteNull("ProductUnitCost");

            if (outgoingInvoiceLineDto.ProductUnitPriceOption.IsSet)
                writer.WriteNumber("ProductUnitPrice", outgoingInvoiceLineDto.ProductUnitPriceOption.Value!.Value);

            if (outgoingInvoiceLineDto.ProjectCodeOption.IsSet)
                if (outgoingInvoiceLineDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", outgoingInvoiceLineDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (outgoingInvoiceLineDto.ProjectIdOption.IsSet)
                if (outgoingInvoiceLineDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", outgoingInvoiceLineDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (outgoingInvoiceLineDto.QuantityOption.IsSet)
                if (outgoingInvoiceLineDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", outgoingInvoiceLineDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (outgoingInvoiceLineDto.SellersReferenceEmployeeIdOption.IsSet)
                if (outgoingInvoiceLineDto.SellersReferenceEmployeeIdOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeId", outgoingInvoiceLineDto.SellersReferenceEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeId");

            if (outgoingInvoiceLineDto.SellersReferenceEmployeeNoOption.IsSet)
                if (outgoingInvoiceLineDto.SellersReferenceEmployeeNoOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeNo", outgoingInvoiceLineDto.SellersReferenceEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeNo");

            if (outgoingInvoiceLineDto.SortOrderOption.IsSet)
                writer.WriteNumber("SortOrder", outgoingInvoiceLineDto.SortOrderOption.Value!.Value);

            if (outgoingInvoiceLineDto.TotalAmountOption.IsSet)
                writer.WriteNumber("TotalAmount", outgoingInvoiceLineDto.TotalAmountOption.Value!.Value);

            if (outgoingInvoiceLineDto.TotalPostedAmountOption.IsSet)
                writer.WriteNumber("TotalPostedAmount", outgoingInvoiceLineDto.TotalPostedAmountOption.Value!.Value);

            if (outgoingInvoiceLineDto.UnitOfMeasureCodeOption.IsSet)
                if (outgoingInvoiceLineDto.UnitOfMeasureCodeOption!.Value != null)
                {
                    var unitOfMeasureCodeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(outgoingInvoiceLineDto.UnitOfMeasureCodeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureCode", unitOfMeasureCodeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureCode");
            if (outgoingInvoiceLineDto.VatAmountOption.IsSet)
                writer.WriteNumber("VatAmount", outgoingInvoiceLineDto.VatAmountOption.Value!.Value);

            if (outgoingInvoiceLineDto.VatCodeOption.IsSet)
                if (outgoingInvoiceLineDto.VatCodeOption.Value != null)
                    writer.WriteString("VatCode", outgoingInvoiceLineDto.VatCode);
                else
                    writer.WriteNull("VatCode");

            if (outgoingInvoiceLineDto.VatIdOption.IsSet)
                if (outgoingInvoiceLineDto.VatIdOption.Value != null)
                    writer.WriteNumber("VatId", outgoingInvoiceLineDto.VatIdOption.Value!.Value);
                else
                    writer.WriteNull("VatId");

            if (outgoingInvoiceLineDto.VatRateOption.IsSet)
                writer.WriteNumber("VatRate", outgoingInvoiceLineDto.VatRateOption.Value!.Value);

            if (outgoingInvoiceLineDto.VatReturnSpecificationOption.IsSet)
                if (outgoingInvoiceLineDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(outgoingInvoiceLineDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
        }
    }
}
