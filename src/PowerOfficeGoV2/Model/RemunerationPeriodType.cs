// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The remuneration period of the employment salary.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Monthly&lt;/i&gt; - Remuneration on a monthly basis.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TwoWeeks&lt;/i&gt; - Remuneration every 14 days.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The remuneration period of the employment salary.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Monthly&lt;/i&gt; - Remuneration on a monthly basis.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TwoWeeks&lt;/i&gt; - Remuneration every 14 days.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum RemunerationPeriodType
    {
        /// <summary>
        /// Enum Monthly for value: Monthly
        /// </summary>
        Monthly = 1,

        /// <summary>
        /// Enum TwoWeeks for value: TwoWeeks
        /// </summary>
        TwoWeeks = 2
    }

    /// <summary>
    /// Converts <see cref="RemunerationPeriodType"/> to and from the JSON value
    /// </summary>
    public static class RemunerationPeriodTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RemunerationPeriodType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RemunerationPeriodType FromString(string value)
        {
            if (value.Equals("Monthly"))
                return RemunerationPeriodType.Monthly;

            if (value.Equals("TwoWeeks"))
                return RemunerationPeriodType.TwoWeeks;

            throw new NotImplementedException($"Could not convert value to type RemunerationPeriodType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="RemunerationPeriodType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RemunerationPeriodType? FromStringOrDefault(string value)
        {
            if (value.Equals("Monthly"))
                return RemunerationPeriodType.Monthly;

            if (value.Equals("TwoWeeks"))
                return RemunerationPeriodType.TwoWeeks;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RemunerationPeriodType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(RemunerationPeriodType value)
        {
            if (value == RemunerationPeriodType.Monthly)
                return "Monthly";

            if (value == RemunerationPeriodType.TwoWeeks)
                return "TwoWeeks";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RemunerationPeriodType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RemunerationPeriodTypeJsonConverter : JsonConverter<RemunerationPeriodType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RemunerationPeriodType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RemunerationPeriodType? result = rawValue == null
                ? null
                : RemunerationPeriodTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the RemunerationPeriodType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="remunerationPeriodType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RemunerationPeriodType remunerationPeriodType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(remunerationPeriodType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RemunerationPeriodType"/>
    /// </summary>
    public class RemunerationPeriodTypeNullableJsonConverter : JsonConverter<RemunerationPeriodType?>
    {
        /// <summary>
        /// Returns a RemunerationPeriodType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RemunerationPeriodType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            RemunerationPeriodType? result = rawValue == null
                ? null
                : RemunerationPeriodTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="remunerationPeriodType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RemunerationPeriodType? remunerationPeriodType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(remunerationPeriodType?.ToString() ?? "null");
        }
    }
}
