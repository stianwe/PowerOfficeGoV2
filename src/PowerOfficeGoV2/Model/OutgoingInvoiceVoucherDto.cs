// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// properties available when posting an outgoing invoice voucher
    /// </summary>
    public partial class OutgoingInvoiceVoucherDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoiceVoucherDto" /> class.
        /// </summary>
        /// <param name="cid">The cid number (norwegian: KID), if applicable to the outgoing invoice voucher.</param>
        /// <param name="contractNo">The contract number reference of the outgoing invoice, if applicable.</param>
        /// <param name="createdDateTimeOffset">The timestamp of when the voucher object was created..</param>
        /// <param name="currencyAmount">The total amount of the outgoing voucher, in the currency specified by the currency code of the voucher.</param>
        /// <param name="currencyCode">The currency code of the outgoing invoice.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate.</param>
        /// <param name="customMatchingReference">The custom matching reference of the customer sub-ledger transaction.</param>
        /// <param name="customerAccountId">The id of the customer sub-ledger account.</param>
        /// <param name="customerReference">The customer reference (i.e. buyers reference) of the outgoing invoice.</param>
        /// <param name="deliveryAddress1">The primary delivery address as it was set when the invoice was delivered.</param>
        /// <param name="deliveryAddress2">The secondary delivery address as it was set when the invoice was delivered.</param>
        /// <param name="deliveryAddressCity">The delivery address city as it was set when the invoice was delivered.</param>
        /// <param name="deliveryAddressCountryCode">The delivery address country code as it was set when the invoice was delivered.</param>
        /// <param name="deliveryAddressZipCode">The delivery address zip code as it was set when the invoice was delivered.</param>
        /// <param name="deliveryDate">The delivery date of the goods/services sold.</param>
        /// <param name="deliveryTermId">The id of the delivery term associated with the outgoing credit note.</param>
        /// <param name="departmentId">The department Id of the voucher header and the customer sub-ledger transaction. Departments can be queried and identified using the Department service.</param>
        /// <param name="description">The description of the customer sub-ledger transaction.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the voucher header and the customer sub-ledger transaction.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the voucher header and the customer sub-ledger transaction.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the voucher header and the customer sub-ledger transaction.</param>
        /// <param name="dueDate">The due date of the outgoing invoice.</param>
        /// <param name="externalImportReference">The external import reference associated with the voucher.  This property can be set by integrations creating vouchers, in order to reference the external system and ensure  a duplicate check (only one instance of the reference can exist on the client). Can be used to correlate/duplicate  check transactions. Guid&#39;s are recommended, or other unique references. This property is only available using  the api (not visible in the user interface)</param>
        /// <param name="id">A value that uniquely identifies this voucher. The Id is assigned by PowerOffice when the entry is created</param>
        /// <param name="importedOrderNo">The imported order number. Can be used to reference the order number in the external system. The imported order  number is visible on the invoice reports in the PowerOffice GUI.</param>
        /// <param name="importedVoucherNo">The external voucher number. Can be used to reference the voucher number in the external system.  The external voucher number is visible in PowerOffice in various reports.</param>
        /// <param name="invoiceNo">The invoice number of the outgoing invoice (invoice to a customer). Required property and must be unique for the client.</param>
        /// <param name="isReversed">Value indicating whether this voucher has been reversed. If an outgoing invoice voucher is reversed, the  invoiceNo and externalImportReference properties can be reused on a new voucher</param>
        /// <param name="locationId">The id of the location dimension associated with the voucher header and the customer sub-ledger transaction.</param>
        /// <param name="outgoingInvoiceLines">outgoing invoice voucher lines</param>
        /// <param name="projectId">The id of the project associated with the voucher header and the customer sub-ledger.</param>
        /// <param name="purchaseOrderReference">The purchase order reference. The property can be used to reference purchase orders placed by the customer.</param>
        /// <param name="saftSourceId">The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export its own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.</param>
        /// <param name="salesPersonEmployeeId">The (employee) id of the sales person associated with the outgoing credit note.</param>
        /// <param name="voucherDate">The voucher date. This represents the date of the voucher, the posting date and the document date of the  outgoing invoice (invoice date).</param>
        /// <param name="voucherNo">The voucher number. This is the voucher number assigned by PowerOffice when the voucher was posted. Voucher  numbers are assigned in sequence.</param>
        [JsonConstructor]
        public OutgoingInvoiceVoucherDto(Option<string?> cid = default, Option<string?> contractNo = default, Option<DateTime?> createdDateTimeOffset = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<string?> customMatchingReference = default, Option<long?> customerAccountId = default, Option<string?> customerReference = default, Option<string?> deliveryAddress1 = default, Option<string?> deliveryAddress2 = default, Option<string?> deliveryAddressCity = default, Option<string?> deliveryAddressCountryCode = default, Option<string?> deliveryAddressZipCode = default, Option<DateOnly?> deliveryDate = default, Option<long?> deliveryTermId = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<DateOnly?> dueDate = default, Option<string?> externalImportReference = default, Option<Guid?> id = default, Option<long?> importedOrderNo = default, Option<long?> importedVoucherNo = default, Option<string?> invoiceNo = default, Option<bool?> isReversed = default, Option<long?> locationId = default, Option<List<OutgoingInvoiceVoucherLineDto>?> outgoingInvoiceLines = default, Option<long?> projectId = default, Option<string?> purchaseOrderReference = default, Option<string?> saftSourceId = default, Option<long?> salesPersonEmployeeId = default, Option<DateOnly?> voucherDate = default, Option<long?> voucherNo = default)
        {
            CidOption = cid;
            ContractNoOption = contractNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CustomMatchingReferenceOption = customMatchingReference;
            CustomerAccountIdOption = customerAccountId;
            CustomerReferenceOption = customerReference;
            DeliveryAddress1Option = deliveryAddress1;
            DeliveryAddress2Option = deliveryAddress2;
            DeliveryAddressCityOption = deliveryAddressCity;
            DeliveryAddressCountryCodeOption = deliveryAddressCountryCode;
            DeliveryAddressZipCodeOption = deliveryAddressZipCode;
            DeliveryDateOption = deliveryDate;
            DeliveryTermIdOption = deliveryTermId;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            DueDateOption = dueDate;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            ImportedOrderNoOption = importedOrderNo;
            ImportedVoucherNoOption = importedVoucherNo;
            InvoiceNoOption = invoiceNo;
            IsReversedOption = isReversed;
            LocationIdOption = locationId;
            OutgoingInvoiceLinesOption = outgoingInvoiceLines;
            ProjectIdOption = projectId;
            PurchaseOrderReferenceOption = purchaseOrderReference;
            SaftSourceIdOption = saftSourceId;
            SalesPersonEmployeeIdOption = salesPersonEmployeeId;
            VoucherDateOption = voucherDate;
            VoucherNoOption = voucherNo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; private set; }

        /// <summary>
        /// The cid number (norwegian: KID), if applicable to the outgoing invoice voucher.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if applicable to the outgoing invoice voucher.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } set { this.CidOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContractNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractNoOption { get; private set; }

        /// <summary>
        /// The contract number reference of the outgoing invoice, if applicable.
        /// </summary>
        /// <value>The contract number reference of the outgoing invoice, if applicable.</value>
        /* <example>123-ABC</example> */
        [JsonPropertyName("ContractNo")]
        public string? ContractNo { get { return this.ContractNoOption; } set { this.ContractNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the voucher object was created..
        /// </summary>
        /// <value>The timestamp of when the voucher object was created..</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The total amount of the outgoing voucher, in the currency specified by the currency code of the voucher.
        /// </summary>
        /// <value>The total amount of the outgoing voucher, in the currency specified by the currency code of the voucher.</value>
        /* <example>99</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the outgoing invoice.
        /// </summary>
        /// <value>The currency code of the outgoing invoice.</value>
        /* <example>USD</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; private set; }

        /// <summary>
        /// The normalized currency exchange rate.
        /// </summary>
        /// <value>The normalized currency exchange rate.</value>
        /* <example>1.23</example> */
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } set { this.CurrencyExchangeRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; private set; }

        /// <summary>
        /// The custom matching reference of the customer sub-ledger transaction.
        /// </summary>
        /// <value>The custom matching reference of the customer sub-ledger transaction.</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } set { this.CustomMatchingReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the customer sub-ledger account.
        /// </summary>
        /// <value>The id of the customer sub-ledger account.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CustomerAccountId")]
        public long? CustomerAccountId { get { return this.CustomerAccountIdOption; } set { this.CustomerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomerReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomerReferenceOption { get; private set; }

        /// <summary>
        /// The customer reference (i.e. buyers reference) of the outgoing invoice.
        /// </summary>
        /// <value>The customer reference (i.e. buyers reference) of the outgoing invoice.</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomerReference")]
        public string? CustomerReference { get { return this.CustomerReferenceOption; } set { this.CustomerReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddress1Option { get; private set; }

        /// <summary>
        /// The primary delivery address as it was set when the invoice was delivered.
        /// </summary>
        /// <value>The primary delivery address as it was set when the invoice was delivered.</value>
        /* <example>Street Address 1</example> */
        [JsonPropertyName("DeliveryAddress1")]
        public string? DeliveryAddress1 { get { return this.DeliveryAddress1Option; } set { this.DeliveryAddress1Option = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddress2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddress2Option { get; private set; }

        /// <summary>
        /// The secondary delivery address as it was set when the invoice was delivered.
        /// </summary>
        /// <value>The secondary delivery address as it was set when the invoice was delivered.</value>
        /* <example>Apartment 101</example> */
        [JsonPropertyName("DeliveryAddress2")]
        public string? DeliveryAddress2 { get { return this.DeliveryAddress2Option; } set { this.DeliveryAddress2Option = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddressCity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressCityOption { get; private set; }

        /// <summary>
        /// The delivery address city as it was set when the invoice was delivered.
        /// </summary>
        /// <value>The delivery address city as it was set when the invoice was delivered.</value>
        /* <example>Oslo</example> */
        [JsonPropertyName("DeliveryAddressCity")]
        public string? DeliveryAddressCity { get { return this.DeliveryAddressCityOption; } set { this.DeliveryAddressCityOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddressCountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressCountryCodeOption { get; private set; }

        /// <summary>
        /// The delivery address country code as it was set when the invoice was delivered.
        /// </summary>
        /// <value>The delivery address country code as it was set when the invoice was delivered.</value>
        /* <example>NO</example> */
        [JsonPropertyName("DeliveryAddressCountryCode")]
        public string? DeliveryAddressCountryCode { get { return this.DeliveryAddressCountryCodeOption; } set { this.DeliveryAddressCountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryAddressZipCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryAddressZipCodeOption { get; private set; }

        /// <summary>
        /// The delivery address zip code as it was set when the invoice was delivered.
        /// </summary>
        /// <value>The delivery address zip code as it was set when the invoice was delivered.</value>
        /* <example>1337</example> */
        [JsonPropertyName("DeliveryAddressZipCode")]
        public string? DeliveryAddressZipCode { get { return this.DeliveryAddressZipCodeOption; } set { this.DeliveryAddressZipCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DeliveryDateOption { get; private set; }

        /// <summary>
        /// The delivery date of the goods/services sold.
        /// </summary>
        /// <value>The delivery date of the goods/services sold.</value>
        /* <example>Sat Jul 25 02:00:00 CEST 2020</example> */
        [JsonPropertyName("DeliveryDate")]
        public DateOnly? DeliveryDate { get { return this.DeliveryDateOption; } set { this.DeliveryDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryTermId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DeliveryTermIdOption { get; private set; }

        /// <summary>
        /// The id of the delivery term associated with the outgoing credit note.
        /// </summary>
        /// <value>The id of the delivery term associated with the outgoing credit note.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DeliveryTermId")]
        public long? DeliveryTermId { get { return this.DeliveryTermIdOption; } set { this.DeliveryTermIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department Id of the voucher header and the customer sub-ledger transaction. Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department Id of the voucher header and the customer sub-ledger transaction. Departments can be queried and identified using the Department service.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the customer sub-ledger transaction.
        /// </summary>
        /// <value>The description of the customer sub-ledger transaction.</value>
        /* <example>Something credit note related</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the voucher header and the customer sub-ledger transaction.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the voucher header and the customer sub-ledger transaction.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the voucher header and the customer sub-ledger transaction.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the voucher header and the customer sub-ledger transaction.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the voucher header and the customer sub-ledger transaction.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the voucher header and the customer sub-ledger transaction.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> DueDateOption { get; private set; }

        /// <summary>
        /// The due date of the outgoing invoice.
        /// </summary>
        /// <value>The due date of the outgoing invoice.</value>
        /* <example>Tue Sep 28 02:00:00 CEST 2027</example> */
        [JsonPropertyName("DueDate")]
        public DateOnly? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference associated with the voucher.  This property can be set by integrations creating vouchers, in order to reference the external system and ensure  a duplicate check (only one instance of the reference can exist on the client). Can be used to correlate/duplicate  check transactions. Guid&#39;s are recommended, or other unique references. This property is only available using  the api (not visible in the user interface)
        /// </summary>
        /// <value>The external import reference associated with the voucher.  This property can be set by integrations creating vouchers, in order to reference the external system and ensure  a duplicate check (only one instance of the reference can exist on the client). Can be used to correlate/duplicate  check transactions. Guid&#39;s are recommended, or other unique references. This property is only available using  the api (not visible in the user interface)</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this voucher. The Id is assigned by PowerOffice when the entry is created
        /// </summary>
        /// <value>A value that uniquely identifies this voucher. The Id is assigned by PowerOffice when the entry is created</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ImportedOrderNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedOrderNoOption { get; private set; }

        /// <summary>
        /// The imported order number. Can be used to reference the order number in the external system. The imported order  number is visible on the invoice reports in the PowerOffice GUI.
        /// </summary>
        /// <value>The imported order number. Can be used to reference the order number in the external system. The imported order  number is visible on the invoice reports in the PowerOffice GUI.</value>
        /* <example>23145</example> */
        [JsonPropertyName("ImportedOrderNo")]
        public long? ImportedOrderNo { get { return this.ImportedOrderNoOption; } set { this.ImportedOrderNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImportedVoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ImportedVoucherNoOption { get; private set; }

        /// <summary>
        /// The external voucher number. Can be used to reference the voucher number in the external system.  The external voucher number is visible in PowerOffice in various reports.
        /// </summary>
        /// <value>The external voucher number. Can be used to reference the voucher number in the external system.  The external voucher number is visible in PowerOffice in various reports.</value>
        /* <example>23145</example> */
        [JsonPropertyName("ImportedVoucherNo")]
        public long? ImportedVoucherNo { get { return this.ImportedVoucherNoOption; } set { this.ImportedVoucherNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNoOption { get; private set; }

        /// <summary>
        /// The invoice number of the outgoing invoice (invoice to a customer). Required property and must be unique for the client.
        /// </summary>
        /// <value>The invoice number of the outgoing invoice (invoice to a customer). Required property and must be unique for the client.</value>
        /* <example>12345</example> */
        [JsonPropertyName("InvoiceNo")]
        public string? InvoiceNo { get { return this.InvoiceNoOption; } set { this.InvoiceNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsReversed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReversedOption { get; private set; }

        /// <summary>
        /// Value indicating whether this voucher has been reversed. If an outgoing invoice voucher is reversed, the  invoiceNo and externalImportReference properties can be reused on a new voucher
        /// </summary>
        /// <value>Value indicating whether this voucher has been reversed. If an outgoing invoice voucher is reversed, the  invoiceNo and externalImportReference properties can be reused on a new voucher</value>
        /* <example>false</example> */
        [JsonPropertyName("IsReversed")]
        public bool? IsReversed { get { return this.IsReversedOption; } set { this.IsReversedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the voucher header and the customer sub-ledger transaction.
        /// </summary>
        /// <value>The id of the location dimension associated with the voucher header and the customer sub-ledger transaction.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of OutgoingInvoiceLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OutgoingInvoiceVoucherLineDto>?> OutgoingInvoiceLinesOption { get; private set; }

        /// <summary>
        /// outgoing invoice voucher lines
        /// </summary>
        /// <value>outgoing invoice voucher lines</value>
        [JsonPropertyName("OutgoingInvoiceLines")]
        public List<OutgoingInvoiceVoucherLineDto>? OutgoingInvoiceLines { get { return this.OutgoingInvoiceLinesOption; } set { this.OutgoingInvoiceLinesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the voucher header and the customer sub-ledger.
        /// </summary>
        /// <value>The id of the project associated with the voucher header and the customer sub-ledger.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PurchaseOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurchaseOrderReferenceOption { get; private set; }

        /// <summary>
        /// The purchase order reference. The property can be used to reference purchase orders placed by the customer.
        /// </summary>
        /// <value>The purchase order reference. The property can be used to reference purchase orders placed by the customer.</value>
        /* <example>PO-1337</example> */
        [JsonPropertyName("PurchaseOrderReference")]
        public string? PurchaseOrderReference { get { return this.PurchaseOrderReferenceOption; } set { this.PurchaseOrderReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of SaftSourceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SaftSourceIdOption { get; private set; }

        /// <summary>
        /// The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export its own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.
        /// </summary>
        /// <value>The SAF-T source id. This is the ID of the system that generated the voucher. When this voucher is exported to  SAF-T, this property is mapped on the transactions SourceID in the SAF-T file. If the creating system is  required to export its own SAF-T file, this source id should correspond with the SystemID in the SAF-T file of  the external system to ensure an audit trail. Max length is 35 characters.</value>
        /* <example>System_123</example> */
        [JsonPropertyName("SaftSourceId")]
        public string? SaftSourceId { get { return this.SaftSourceIdOption; } set { this.SaftSourceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SalesPersonEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalesPersonEmployeeIdOption { get; private set; }

        /// <summary>
        /// The (employee) id of the sales person associated with the outgoing credit note.
        /// </summary>
        /// <value>The (employee) id of the sales person associated with the outgoing credit note.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SalesPersonEmployeeId")]
        public long? SalesPersonEmployeeId { get { return this.SalesPersonEmployeeIdOption; } set { this.SalesPersonEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> VoucherDateOption { get; private set; }

        /// <summary>
        /// The voucher date. This represents the date of the voucher, the posting date and the document date of the  outgoing invoice (invoice date).
        /// </summary>
        /// <value>The voucher date. This represents the date of the voucher, the posting date and the document date of the  outgoing invoice (invoice date).</value>
        /* <example>Sat Jul 25 02:00:00 CEST 2020</example> */
        [JsonPropertyName("VoucherDate")]
        public DateOnly? VoucherDate { get { return this.VoucherDateOption; } set { this.VoucherDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number. This is the voucher number assigned by PowerOffice when the voucher was posted. Voucher  numbers are assigned in sequence.
        /// </summary>
        /// <value>The voucher number. This is the voucher number assigned by PowerOffice when the voucher was posted. Voucher  numbers are assigned in sequence.</value>
        /* <example>123456</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutgoingInvoiceVoucherDto {\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ContractNo: ").Append(ContractNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  CustomerAccountId: ").Append(CustomerAccountId).Append("\n");
            sb.Append("  CustomerReference: ").Append(CustomerReference).Append("\n");
            sb.Append("  DeliveryAddress1: ").Append(DeliveryAddress1).Append("\n");
            sb.Append("  DeliveryAddress2: ").Append(DeliveryAddress2).Append("\n");
            sb.Append("  DeliveryAddressCity: ").Append(DeliveryAddressCity).Append("\n");
            sb.Append("  DeliveryAddressCountryCode: ").Append(DeliveryAddressCountryCode).Append("\n");
            sb.Append("  DeliveryAddressZipCode: ").Append(DeliveryAddressZipCode).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryTermId: ").Append(DeliveryTermId).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportedOrderNo: ").Append(ImportedOrderNo).Append("\n");
            sb.Append("  ImportedVoucherNo: ").Append(ImportedVoucherNo).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  IsReversed: ").Append(IsReversed).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OutgoingInvoiceLines: ").Append(OutgoingInvoiceLines).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurchaseOrderReference: ").Append(PurchaseOrderReference).Append("\n");
            sb.Append("  SaftSourceId: ").Append(SaftSourceId).Append("\n");
            sb.Append("  SalesPersonEmployeeId: ").Append(SalesPersonEmployeeId).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cid (string) maxLength
            if (this.Cid != null && this.Cid.Length > 25)
            {
                yield return new ValidationResult("Invalid value for Cid, length must be less than 25.", new [] { "Cid" });
            }

            // Cid (string) minLength
            if (this.Cid != null && this.Cid.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Cid, length must be greater than 0.", new [] { "Cid" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceVoucherDto" />
    /// </summary>
    public class OutgoingInvoiceVoucherDtoJsonConverter : JsonConverter<OutgoingInvoiceVoucherDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DeliveryDate
        /// </summary>
        public static string DeliveryDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="OutgoingInvoiceVoucherDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OutgoingInvoiceVoucherDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> cid = default;
            Option<string?> contractNo = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<string?> customMatchingReference = default;
            Option<long?> customerAccountId = default;
            Option<string?> customerReference = default;
            Option<string?> deliveryAddress1 = default;
            Option<string?> deliveryAddress2 = default;
            Option<string?> deliveryAddressCity = default;
            Option<string?> deliveryAddressCountryCode = default;
            Option<string?> deliveryAddressZipCode = default;
            Option<DateOnly?> deliveryDate = default;
            Option<long?> deliveryTermId = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<DateOnly?> dueDate = default;
            Option<string?> externalImportReference = default;
            Option<Guid?> id = default;
            Option<long?> importedOrderNo = default;
            Option<long?> importedVoucherNo = default;
            Option<string?> invoiceNo = default;
            Option<bool?> isReversed = default;
            Option<long?> locationId = default;
            Option<List<OutgoingInvoiceVoucherLineDto>?> outgoingInvoiceLines = default;
            Option<long?> projectId = default;
            Option<string?> purchaseOrderReference = default;
            Option<string?> saftSourceId = default;
            Option<long?> salesPersonEmployeeId = default;
            Option<DateOnly?> voucherDate = default;
            Option<long?> voucherNo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ContractNo":
                            contractNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CustomerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerReference":
                            customerReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddress1":
                            deliveryAddress1 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddress2":
                            deliveryAddress2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressCity":
                            deliveryAddressCity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressCountryCode":
                            deliveryAddressCountryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryAddressZipCode":
                            deliveryAddressZipCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DeliveryDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DeliveryTermId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deliveryTermId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ImportedOrderNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedOrderNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ImportedVoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                importedVoucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceNo":
                            invoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsReversed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReversed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OutgoingInvoiceLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outgoingInvoiceLines = new Option<List<OutgoingInvoiceVoucherLineDto>?>(JsonSerializer.Deserialize<List<OutgoingInvoiceVoucherLineDto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PurchaseOrderReference":
                            purchaseOrderReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SaftSourceId":
                            saftSourceId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SalesPersonEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salesPersonEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class OutgoingInvoiceVoucherDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class OutgoingInvoiceVoucherDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OutgoingInvoiceVoucherDto.");

            if (voucherDate.IsSet && voucherDate.Value == null)
                throw new ArgumentNullException(nameof(voucherDate), "Property is not nullable for class OutgoingInvoiceVoucherDto.");

            return new OutgoingInvoiceVoucherDto(cid, contractNo, createdDateTimeOffset, currencyAmount, currencyCode, currencyExchangeRate, customMatchingReference, customerAccountId, customerReference, deliveryAddress1, deliveryAddress2, deliveryAddressCity, deliveryAddressCountryCode, deliveryAddressZipCode, deliveryDate, deliveryTermId, departmentId, description, dim1Id, dim2Id, dim3Id, dueDate, externalImportReference, id, importedOrderNo, importedVoucherNo, invoiceNo, isReversed, locationId, outgoingInvoiceLines, projectId, purchaseOrderReference, saftSourceId, salesPersonEmployeeId, voucherDate, voucherNo);
        }

        /// <summary>
        /// Serializes a <see cref="OutgoingInvoiceVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceVoucherDto outgoingInvoiceVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, outgoingInvoiceVoucherDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OutgoingInvoiceVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OutgoingInvoiceVoucherDto outgoingInvoiceVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (outgoingInvoiceVoucherDto.CidOption.IsSet)
                if (outgoingInvoiceVoucherDto.CidOption.Value != null)
                    writer.WriteString("Cid", outgoingInvoiceVoucherDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (outgoingInvoiceVoucherDto.ContractNoOption.IsSet)
                if (outgoingInvoiceVoucherDto.ContractNoOption.Value != null)
                    writer.WriteString("ContractNo", outgoingInvoiceVoucherDto.ContractNo);
                else
                    writer.WriteNull("ContractNo");

            if (outgoingInvoiceVoucherDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", outgoingInvoiceVoucherDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (outgoingInvoiceVoucherDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", outgoingInvoiceVoucherDto.CurrencyAmountOption.Value!.Value);

            if (outgoingInvoiceVoucherDto.CurrencyCodeOption.IsSet)
                if (outgoingInvoiceVoucherDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", outgoingInvoiceVoucherDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (outgoingInvoiceVoucherDto.CurrencyExchangeRateOption.IsSet)
                if (outgoingInvoiceVoucherDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", outgoingInvoiceVoucherDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (outgoingInvoiceVoucherDto.CustomMatchingReferenceOption.IsSet)
                if (outgoingInvoiceVoucherDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", outgoingInvoiceVoucherDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (outgoingInvoiceVoucherDto.CustomerAccountIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.CustomerAccountIdOption.Value != null)
                    writer.WriteNumber("CustomerAccountId", outgoingInvoiceVoucherDto.CustomerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerAccountId");

            if (outgoingInvoiceVoucherDto.CustomerReferenceOption.IsSet)
                if (outgoingInvoiceVoucherDto.CustomerReferenceOption.Value != null)
                    writer.WriteString("CustomerReference", outgoingInvoiceVoucherDto.CustomerReference);
                else
                    writer.WriteNull("CustomerReference");

            if (outgoingInvoiceVoucherDto.DeliveryAddress1Option.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryAddress1Option.Value != null)
                    writer.WriteString("DeliveryAddress1", outgoingInvoiceVoucherDto.DeliveryAddress1);
                else
                    writer.WriteNull("DeliveryAddress1");

            if (outgoingInvoiceVoucherDto.DeliveryAddress2Option.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryAddress2Option.Value != null)
                    writer.WriteString("DeliveryAddress2", outgoingInvoiceVoucherDto.DeliveryAddress2);
                else
                    writer.WriteNull("DeliveryAddress2");

            if (outgoingInvoiceVoucherDto.DeliveryAddressCityOption.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryAddressCityOption.Value != null)
                    writer.WriteString("DeliveryAddressCity", outgoingInvoiceVoucherDto.DeliveryAddressCity);
                else
                    writer.WriteNull("DeliveryAddressCity");

            if (outgoingInvoiceVoucherDto.DeliveryAddressCountryCodeOption.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryAddressCountryCodeOption.Value != null)
                    writer.WriteString("DeliveryAddressCountryCode", outgoingInvoiceVoucherDto.DeliveryAddressCountryCode);
                else
                    writer.WriteNull("DeliveryAddressCountryCode");

            if (outgoingInvoiceVoucherDto.DeliveryAddressZipCodeOption.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryAddressZipCodeOption.Value != null)
                    writer.WriteString("DeliveryAddressZipCode", outgoingInvoiceVoucherDto.DeliveryAddressZipCode);
                else
                    writer.WriteNull("DeliveryAddressZipCode");

            if (outgoingInvoiceVoucherDto.DeliveryDateOption.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryDateOption.Value != null)
                    writer.WriteString("DeliveryDate", outgoingInvoiceVoucherDto.DeliveryDateOption.Value!.Value.ToString(DeliveryDateFormat));
                else
                    writer.WriteNull("DeliveryDate");

            if (outgoingInvoiceVoucherDto.DeliveryTermIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.DeliveryTermIdOption.Value != null)
                    writer.WriteNumber("DeliveryTermId", outgoingInvoiceVoucherDto.DeliveryTermIdOption.Value!.Value);
                else
                    writer.WriteNull("DeliveryTermId");

            if (outgoingInvoiceVoucherDto.DepartmentIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", outgoingInvoiceVoucherDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (outgoingInvoiceVoucherDto.DescriptionOption.IsSet)
                if (outgoingInvoiceVoucherDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", outgoingInvoiceVoucherDto.Description);
                else
                    writer.WriteNull("Description");

            if (outgoingInvoiceVoucherDto.Dim1IdOption.IsSet)
                if (outgoingInvoiceVoucherDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", outgoingInvoiceVoucherDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (outgoingInvoiceVoucherDto.Dim2IdOption.IsSet)
                if (outgoingInvoiceVoucherDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", outgoingInvoiceVoucherDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (outgoingInvoiceVoucherDto.Dim3IdOption.IsSet)
                if (outgoingInvoiceVoucherDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", outgoingInvoiceVoucherDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (outgoingInvoiceVoucherDto.DueDateOption.IsSet)
                if (outgoingInvoiceVoucherDto.DueDateOption.Value != null)
                    writer.WriteString("DueDate", outgoingInvoiceVoucherDto.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("DueDate");

            if (outgoingInvoiceVoucherDto.ExternalImportReferenceOption.IsSet)
                if (outgoingInvoiceVoucherDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", outgoingInvoiceVoucherDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (outgoingInvoiceVoucherDto.IdOption.IsSet)
                writer.WriteString("Id", outgoingInvoiceVoucherDto.IdOption.Value!.Value);

            if (outgoingInvoiceVoucherDto.ImportedOrderNoOption.IsSet)
                if (outgoingInvoiceVoucherDto.ImportedOrderNoOption.Value != null)
                    writer.WriteNumber("ImportedOrderNo", outgoingInvoiceVoucherDto.ImportedOrderNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedOrderNo");

            if (outgoingInvoiceVoucherDto.ImportedVoucherNoOption.IsSet)
                if (outgoingInvoiceVoucherDto.ImportedVoucherNoOption.Value != null)
                    writer.WriteNumber("ImportedVoucherNo", outgoingInvoiceVoucherDto.ImportedVoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("ImportedVoucherNo");

            if (outgoingInvoiceVoucherDto.InvoiceNoOption.IsSet)
                if (outgoingInvoiceVoucherDto.InvoiceNoOption.Value != null)
                    writer.WriteString("InvoiceNo", outgoingInvoiceVoucherDto.InvoiceNo);
                else
                    writer.WriteNull("InvoiceNo");

            if (outgoingInvoiceVoucherDto.IsReversedOption.IsSet)
                if (outgoingInvoiceVoucherDto.IsReversedOption.Value != null)
                    writer.WriteBoolean("IsReversed", outgoingInvoiceVoucherDto.IsReversedOption.Value!.Value);
                else
                    writer.WriteNull("IsReversed");

            if (outgoingInvoiceVoucherDto.LocationIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", outgoingInvoiceVoucherDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (outgoingInvoiceVoucherDto.OutgoingInvoiceLinesOption.IsSet)
                if (outgoingInvoiceVoucherDto.OutgoingInvoiceLinesOption.Value != null)
                {
                    writer.WritePropertyName("OutgoingInvoiceLines");
                    JsonSerializer.Serialize(writer, outgoingInvoiceVoucherDto.OutgoingInvoiceLines, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("OutgoingInvoiceLines");
            if (outgoingInvoiceVoucherDto.ProjectIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", outgoingInvoiceVoucherDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (outgoingInvoiceVoucherDto.PurchaseOrderReferenceOption.IsSet)
                if (outgoingInvoiceVoucherDto.PurchaseOrderReferenceOption.Value != null)
                    writer.WriteString("PurchaseOrderReference", outgoingInvoiceVoucherDto.PurchaseOrderReference);
                else
                    writer.WriteNull("PurchaseOrderReference");

            if (outgoingInvoiceVoucherDto.SaftSourceIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.SaftSourceIdOption.Value != null)
                    writer.WriteString("SaftSourceId", outgoingInvoiceVoucherDto.SaftSourceId);
                else
                    writer.WriteNull("SaftSourceId");

            if (outgoingInvoiceVoucherDto.SalesPersonEmployeeIdOption.IsSet)
                if (outgoingInvoiceVoucherDto.SalesPersonEmployeeIdOption.Value != null)
                    writer.WriteNumber("SalesPersonEmployeeId", outgoingInvoiceVoucherDto.SalesPersonEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SalesPersonEmployeeId");

            if (outgoingInvoiceVoucherDto.VoucherDateOption.IsSet)
                writer.WriteString("VoucherDate", outgoingInvoiceVoucherDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));

            if (outgoingInvoiceVoucherDto.VoucherNoOption.IsSet)
                if (outgoingInvoiceVoucherDto.VoucherNoOption.Value != null)
                    writer.WriteNumber("VoucherNo", outgoingInvoiceVoucherDto.VoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("VoucherNo");
        }
    }
}
