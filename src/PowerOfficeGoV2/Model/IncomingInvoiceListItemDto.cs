// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Represents an incoming invoice list item.
    /// </summary>
    public partial class IncomingInvoiceListItemDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingInvoiceListItemDto" /> class.
        /// </summary>
        /// <param name="balance">The balance of the supplier ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is greater than totalPostedAmount, the entry will have a match in the supplier ledger with at least one other entry with the opposite amount, and those entries will share the same matchId. If the balance is zero, the invoice is considered paid in the GUI.</param>
        /// <param name="balanceLastChangedDateTimeOffset">The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the supplier ledger entry this invoice relates to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.</param>
        /// <param name="cid">The cid number (norwegian: KID), if present.</param>
        /// <param name="contractNo">The contract number, if set on the invoice.</param>
        /// <param name="createdDateTimeOffset">The created timestamp of the invoice voucher.</param>
        /// <param name="currencyCode">The standard currency code for the invoice. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard. Defaults to *NOK*.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate. Always base 1.</param>
        /// <param name="customMatchingReference">The custom matching reference, if set. This property will only have value on entries created through the API or Import with CustomMatchingReference specified. This property is used for matching purposes in the supplier subledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the subledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</param>
        /// <param name="departmentCode">The code of the department for the invoice, if set. Note that this is the department set in the header of the invoice. The invoice costlines might specify other departments or no department.</param>
        /// <param name="departmentId">The id of the department, if departmentCode is set on the invoice.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the invoice, if set. Note that this is the dimension 1 set in the header of the invoice. The invoice costlines might specify other dimension 1 values or no dimension 1. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the invoice, if dim1Code is set.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the invoice. Note that this is the dimension 2 set in the header of the invoice. The invoice costlines might specify other dimension 2 values or no dimension 2. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the invoice, if dim2Code is set.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the invoice. Note that this is the dimension 3 set in the header of the invoice. The invoice costlines might specify other dimension 3 values or no dimension 3. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the invoice, if dim3Code is set.</param>
        /// <param name="dueDate">The due date of the invoice.</param>
        /// <param name="externalImportReference">The ExternalImportReference, if set. This property can be set by integrations posting vouchers to Go, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.  Max 50 characters.</param>
        /// <param name="id">The identifier of the invoice and the posted voucher. The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher (transactions have unique id&#39;s, but share the same property voucherId).</param>
        /// <param name="invoiceNo">The invoice number of the invoice.</param>
        /// <param name="isReversed">Gets a flag indicating whether the invoice voucher have been reversed. If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused. Only possible to reverse an invoice voucher using the IncomingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.</param>
        /// <param name="lastChangedDateTimeOffset">    The timestamp of the last change of the invoice.  For posted invoices, no direct invoice information or related account transactions can change, so this property can be expected to be equal to the CreatedDateTimeOffset property.</param>
        /// <param name="locationCode">The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.</param>
        /// <param name="locationId">The id of the location dimension associated with the invoice.</param>
        /// <param name="matchId">The match id of the supplier ledger entry this invoice relate to, if present. Available if the invoice have a match with other supplier ledger entries - typically payment transactions. Can be used with the SupplierLedger endpoint to retrive the matched transactions.</param>
        /// <param name="netAmount">The net amount of the invoice (vat exclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="netPostedAmount">The net posted amount of the invoice (vat exclusive). This amount is always presented in the client currency (NOK). Will correspond with the netAmount and the normalized currencyExchangeRate.</param>
        /// <param name="projectCode">The project code, if set on the invoice. Note that this is the project set in the header of the invoice. The invoice costlines might specify other projects or no project. Projects can be queried and identified using the Project service.  Max 50 characters.</param>
        /// <param name="projectId">The project id, if projectCode is set. Projects can be queried and identified using the Project service.</param>
        /// <param name="purchaseOrderReference">The purchase order reference, if set. The property can be used to reference purchase order placed to the supplier.</param>
        /// <param name="relatedInvoiceNo">The related invoice number. Can be available on supplier credit notes. If available, this property will reference the original invoice being credited.</param>
        /// <param name="supplierId">The identifier of the supplier this invoice is related to.</param>
        /// <param name="supplierNo">The supplier number for the supplier this invoice relates to. Suppliers can be queried and identified using the Supplier service.</param>
        /// <param name="totalAmount">The total amount of the invoice (vat inclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</param>
        /// <param name="totalPostedAmount">The total posted amount of the invoice (vat inclusive). This amount is always presented in the client currency (NOK). Will correspond with the totalAmount and the normalized currencyExchangeRate.</param>
        /// <param name="voucherDate">The date of the invoice voucher. This represents the date of the voucher and the document date of the invoice.</param>
        /// <param name="voucherNo">The voucher number of the invoice voucher. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.</param>
        /// <param name="voucherType">voucherType</param>
        [JsonConstructor]
        public IncomingInvoiceListItemDto(Option<double?> balance = default, Option<DateTimeOffset?> balanceLastChangedDateTimeOffset = default, Option<string?> cid = default, Option<string?> contractNo = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<string?> customMatchingReference = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<DateTimeOffset?> dueDate = default, Option<string?> externalImportReference = default, Option<Guid?> id = default, Option<string?> invoiceNo = default, Option<bool?> isReversed = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<long?> matchId = default, Option<double?> netAmount = default, Option<double?> netPostedAmount = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<string?> purchaseOrderReference = default, Option<string?> relatedInvoiceNo = default, Option<long?> supplierId = default, Option<long?> supplierNo = default, Option<double?> totalAmount = default, Option<double?> totalPostedAmount = default, Option<DateTimeOffset?> voucherDate = default, Option<long?> voucherNo = default, Option<IncomingVoucherType?> voucherType = default)
        {
            BalanceOption = balance;
            BalanceLastChangedDateTimeOffsetOption = balanceLastChangedDateTimeOffset;
            CidOption = cid;
            ContractNoOption = contractNo;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CustomMatchingReferenceOption = customMatchingReference;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            DueDateOption = dueDate;
            ExternalImportReferenceOption = externalImportReference;
            IdOption = id;
            InvoiceNoOption = invoiceNo;
            IsReversedOption = isReversed;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            MatchIdOption = matchId;
            NetAmountOption = netAmount;
            NetPostedAmountOption = netPostedAmount;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            PurchaseOrderReferenceOption = purchaseOrderReference;
            RelatedInvoiceNoOption = relatedInvoiceNo;
            SupplierIdOption = supplierId;
            SupplierNoOption = supplierNo;
            TotalAmountOption = totalAmount;
            TotalPostedAmountOption = totalPostedAmount;
            VoucherDateOption = voucherDate;
            VoucherNoOption = voucherNo;
            VoucherTypeOption = voucherType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IncomingVoucherType?> VoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [JsonPropertyName("VoucherType")]
        public IncomingVoucherType? VoucherType { get { return this.VoucherTypeOption; } set { this.VoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The balance of the supplier ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is greater than totalPostedAmount, the entry will have a match in the supplier ledger with at least one other entry with the opposite amount, and those entries will share the same matchId. If the balance is zero, the invoice is considered paid in the GUI.
        /// </summary>
        /// <value>The balance of the supplier ledger entry this invoice is related to (remaining amount to be paid), in the client currency.  If balance is greater than totalPostedAmount, the entry will have a match in the supplier ledger with at least one other entry with the opposite amount, and those entries will share the same matchId. If the balance is zero, the invoice is considered paid in the GUI.</value>
        /* <example>10000</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Used to track the state of BalanceLastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> BalanceLastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the supplier ledger entry this invoice relates to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.
        /// </summary>
        /// <value>The timestamp of the last change of the balance property.  This reflect the last changed timestamp of the supplier ledger entry this invoice relates to, and the match state of the sub-ledger entry.  Using this property as filtering is one way of retrieving the payment status of invoices.</value>
        /* <example>2019-01-01T11:22:12.123456700Z</example> */
        [JsonPropertyName("BalanceLastChangedDateTimeOffset")]
        public DateTimeOffset? BalanceLastChangedDateTimeOffset { get { return this.BalanceLastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; }

        /// <summary>
        /// The cid number (norwegian: KID), if present.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if present.</value>
        /* <example>9876543210</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } }

        /// <summary>
        /// Used to track the state of ContractNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContractNoOption { get; }

        /// <summary>
        /// The contract number, if set on the invoice.
        /// </summary>
        /// <value>The contract number, if set on the invoice.</value>
        /* <example>CN-12345</example> */
        [JsonPropertyName("ContractNo")]
        public string? ContractNo { get { return this.ContractNoOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The created timestamp of the invoice voucher.
        /// </summary>
        /// <value>The created timestamp of the invoice voucher.</value>
        /* <example>2019-01-01T11:22:12.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The standard currency code for the invoice. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard. Defaults to *NOK*.
        /// </summary>
        /// <value>The standard currency code for the invoice. Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard. Defaults to *NOK*.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; }

        /// <summary>
        /// The normalized currency exchange rate. Always base 1.
        /// </summary>
        /// <value>The normalized currency exchange rate. Always base 1.</value>
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; }

        /// <summary>
        /// The custom matching reference, if set. This property will only have value on entries created through the API or Import with CustomMatchingReference specified. This property is used for matching purposes in the supplier subledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the subledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).
        /// </summary>
        /// <value>The custom matching reference, if set. This property will only have value on entries created through the API or Import with CustomMatchingReference specified. This property is used for matching purposes in the supplier subledger account, where entries posted with a CustomMatchingReference will be matched immediately with existing entries in the subledger that have the same CustomMatchingReference and opposite amount (unless existing entries are already matched out).</value>
        /* <example>CMR-12345</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; private set; }

        /// <summary>
        /// The code of the department for the invoice, if set. Note that this is the department set in the header of the invoice. The invoice costlines might specify other departments or no department.
        /// </summary>
        /// <value>The code of the department for the invoice, if set. Note that this is the department set in the header of the invoice. The invoice costlines might specify other departments or no department.</value>
        /* <example>10</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } set { this.DepartmentCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department, if departmentCode is set on the invoice.
        /// </summary>
        /// <value>The id of the department, if departmentCode is set on the invoice.</value>
        /* <example>1234567</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; }

        /// <summary>
        /// The code of the dimension 1 associated with the invoice, if set. Note that this is the dimension 1 set in the header of the invoice. The invoice costlines might specify other dimension 1 values or no dimension 1. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the invoice, if set. Note that this is the dimension 1 set in the header of the invoice. The invoice costlines might specify other dimension 1 values or no dimension 1. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</value>
        /* <example>1</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; }

        /// <summary>
        /// The id of the dimension 1 associated with the invoice, if dim1Code is set.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the invoice, if dim1Code is set.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; }

        /// <summary>
        /// The code of the dimension 2 associated with the invoice. Note that this is the dimension 2 set in the header of the invoice. The invoice costlines might specify other dimension 2 values or no dimension 2. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the invoice. Note that this is the dimension 2 set in the header of the invoice. The invoice costlines might specify other dimension 2 values or no dimension 2. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</value>
        /* <example>2</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; }

        /// <summary>
        /// The id of the dimension 2 associated with the invoice, if dim2Code is set.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the invoice, if dim2Code is set.</value>
        /* <example>23456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; }

        /// <summary>
        /// The code of the dimension 3 associated with the invoice. Note that this is the dimension 3 set in the header of the invoice. The invoice costlines might specify other dimension 3 values or no dimension 3. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the invoice. Note that this is the dimension 3 set in the header of the invoice. The invoice costlines might specify other dimension 3 values or no dimension 3. Dimension 1-3 are customizable dimensions that can be defined and queried using the CustomDimension and CustomDimensionValue serivces.</value>
        /* <example>3</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; }

        /// <summary>
        /// The id of the dimension 3 associated with the invoice, if dim3Code is set.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the invoice, if dim3Code is set.</value>
        /* <example>34567</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> DueDateOption { get; }

        /// <summary>
        /// The due date of the invoice.
        /// </summary>
        /// <value>The due date of the invoice.</value>
        /* <example>Mon Jan 30 01:00:00 CET 2023</example> */
        [JsonPropertyName("DueDate")]
        public DateTimeOffset? DueDate { get { return this.DueDateOption; } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; }

        /// <summary>
        /// The ExternalImportReference, if set. This property can be set by integrations posting vouchers to Go, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.  Max 50 characters.
        /// </summary>
        /// <value>The ExternalImportReference, if set. This property can be set by integrations posting vouchers to Go, in order to reference the external system and ensure a duplicate check (only one instance of the reference can exist for the object type).  Can be used to correlate/duplicate check transactions.  Max 50 characters.</value>
        /* <example>CMR-12345</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// The identifier of the invoice and the posted voucher. The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher (transactions have unique id&#39;s, but share the same property voucherId).
        /// </summary>
        /// <value>The identifier of the invoice and the posted voucher. The id is assigned by Go when the voucher is created, and is shared by all transactions within the same voucher (transactions have unique id&#39;s, but share the same property voucherId).</value>
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNoOption { get; }

        /// <summary>
        /// The invoice number of the invoice.
        /// </summary>
        /// <value>The invoice number of the invoice.</value>
        /* <example>123</example> */
        [JsonPropertyName("InvoiceNo")]
        public string? InvoiceNo { get { return this.InvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of IsReversed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReversedOption { get; }

        /// <summary>
        /// Gets a flag indicating whether the invoice voucher have been reversed. If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused. Only possible to reverse an invoice voucher using the IncomingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.
        /// </summary>
        /// <value>Gets a flag indicating whether the invoice voucher have been reversed. If true, the invoice voucher have been reversed with a reversal voucher (nullifying the invoice voucher), and the invoice number can be reused. Only possible to reverse an invoice voucher using the IncomingInvoiceVoucher api, and only by the integration that created the invoice voucher originally using this api.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsReversed")]
        public bool? IsReversed { get { return this.IsReversedOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        ///     The timestamp of the last change of the invoice.  For posted invoices, no direct invoice information or related account transactions can change, so this property can be expected to be equal to the CreatedDateTimeOffset property.
        /// </summary>
        /// <value>    The timestamp of the last change of the invoice.  For posted invoices, no direct invoice information or related account transactions can change, so this property can be expected to be equal to the CreatedDateTimeOffset property.</value>
        /* <example>2023-01-30T12:47:02.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; }

        /// <summary>
        /// The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.
        /// </summary>
        /// <value>The code of the location dimension associated with the invoice.  Note that this is the location set in the header of the invoice. The invoice lines might specify other location values or no location.</value>
        /* <example>4A</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; }

        /// <summary>
        /// The id of the location dimension associated with the invoice.
        /// </summary>
        /// <value>The id of the location dimension associated with the invoice.</value>
        /* <example>123546</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } }

        /// <summary>
        /// Used to track the state of MatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MatchIdOption { get; }

        /// <summary>
        /// The match id of the supplier ledger entry this invoice relate to, if present. Available if the invoice have a match with other supplier ledger entries - typically payment transactions. Can be used with the SupplierLedger endpoint to retrive the matched transactions.
        /// </summary>
        /// <value>The match id of the supplier ledger entry this invoice relate to, if present. Available if the invoice have a match with other supplier ledger entries - typically payment transactions. Can be used with the SupplierLedger endpoint to retrive the matched transactions.</value>
        [JsonPropertyName("MatchId")]
        public long? MatchId { get { return this.MatchIdOption; } }

        /// <summary>
        /// Used to track the state of NetAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetAmountOption { get; }

        /// <summary>
        /// The net amount of the invoice (vat exclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The net amount of the invoice (vat exclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>133700</example> */
        [JsonPropertyName("NetAmount")]
        public double? NetAmount { get { return this.NetAmountOption; } }

        /// <summary>
        /// Used to track the state of NetPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NetPostedAmountOption { get; }

        /// <summary>
        /// The net posted amount of the invoice (vat exclusive). This amount is always presented in the client currency (NOK). Will correspond with the netAmount and the normalized currencyExchangeRate.
        /// </summary>
        /// <value>The net posted amount of the invoice (vat exclusive). This amount is always presented in the client currency (NOK). Will correspond with the netAmount and the normalized currencyExchangeRate.</value>
        /* <example>133700</example> */
        [JsonPropertyName("NetPostedAmount")]
        public double? NetPostedAmount { get { return this.NetPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; }

        /// <summary>
        /// The project code, if set on the invoice. Note that this is the project set in the header of the invoice. The invoice costlines might specify other projects or no project. Projects can be queried and identified using the Project service.  Max 50 characters.
        /// </summary>
        /// <value>The project code, if set on the invoice. Note that this is the project set in the header of the invoice. The invoice costlines might specify other projects or no project. Projects can be queried and identified using the Project service.  Max 50 characters.</value>
        /* <example>10</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The project id, if projectCode is set. Projects can be queried and identified using the Project service.
        /// </summary>
        /// <value>The project id, if projectCode is set. Projects can be queried and identified using the Project service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of PurchaseOrderReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PurchaseOrderReferenceOption { get; }

        /// <summary>
        /// The purchase order reference, if set. The property can be used to reference purchase order placed to the supplier.
        /// </summary>
        /// <value>The purchase order reference, if set. The property can be used to reference purchase order placed to the supplier.</value>
        /* <example>POR-123</example> */
        [JsonPropertyName("PurchaseOrderReference")]
        public string? PurchaseOrderReference { get { return this.PurchaseOrderReferenceOption; } }

        /// <summary>
        /// Used to track the state of RelatedInvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RelatedInvoiceNoOption { get; }

        /// <summary>
        /// The related invoice number. Can be available on supplier credit notes. If available, this property will reference the original invoice being credited.
        /// </summary>
        /// <value>The related invoice number. Can be available on supplier credit notes. If available, this property will reference the original invoice being credited.</value>
        /* <example>12345</example> */
        [JsonPropertyName("RelatedInvoiceNo")]
        public string? RelatedInvoiceNo { get { return this.RelatedInvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of SupplierId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierIdOption { get; }

        /// <summary>
        /// The identifier of the supplier this invoice is related to.
        /// </summary>
        /// <value>The identifier of the supplier this invoice is related to.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SupplierId")]
        public long? SupplierId { get { return this.SupplierIdOption; } }

        /// <summary>
        /// Used to track the state of SupplierNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierNoOption { get; }

        /// <summary>
        /// The supplier number for the supplier this invoice relates to. Suppliers can be queried and identified using the Supplier service.
        /// </summary>
        /// <value>The supplier number for the supplier this invoice relates to. Suppliers can be queried and identified using the Supplier service.</value>
        /* <example>21137</example> */
        [JsonPropertyName("SupplierNo")]
        public long? SupplierNo { get { return this.SupplierNoOption; } }

        /// <summary>
        /// Used to track the state of TotalAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalAmountOption { get; }

        /// <summary>
        /// The total amount of the invoice (vat inclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).
        /// </summary>
        /// <value>The total amount of the invoice (vat inclusive). This amount is presented in the currency used on the invoice (the currency given by the currencyCode).</value>
        /* <example>133700</example> */
        [JsonPropertyName("TotalAmount")]
        public double? TotalAmount { get { return this.TotalAmountOption; } }

        /// <summary>
        /// Used to track the state of TotalPostedAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TotalPostedAmountOption { get; }

        /// <summary>
        /// The total posted amount of the invoice (vat inclusive). This amount is always presented in the client currency (NOK). Will correspond with the totalAmount and the normalized currencyExchangeRate.
        /// </summary>
        /// <value>The total posted amount of the invoice (vat inclusive). This amount is always presented in the client currency (NOK). Will correspond with the totalAmount and the normalized currencyExchangeRate.</value>
        /* <example>167125</example> */
        [JsonPropertyName("TotalPostedAmount")]
        public double? TotalPostedAmount { get { return this.TotalPostedAmountOption; } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> VoucherDateOption { get; }

        /// <summary>
        /// The date of the invoice voucher. This represents the date of the voucher and the document date of the invoice.
        /// </summary>
        /// <value>The date of the invoice voucher. This represents the date of the voucher and the document date of the invoice.</value>
        /* <example>Mon Jan 30 01:00:00 CET 2023</example> */
        [JsonPropertyName("VoucherDate")]
        public DateTimeOffset? VoucherDate { get { return this.VoucherDateOption; } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number of the invoice voucher. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.
        /// </summary>
        /// <value>The voucher number of the invoice voucher. This is the voucher number assigned by Go when the voucher was posted.  Voucher numbers are assigned by Go in sequence.  Always present on invoices.</value>
        /* <example>42</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncomingInvoiceListItemDto {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BalanceLastChangedDateTimeOffset: ").Append(BalanceLastChangedDateTimeOffset).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ContractNo: ").Append(ContractNo).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  IsReversed: ").Append(IsReversed).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  NetPostedAmount: ").Append(NetPostedAmount).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  PurchaseOrderReference: ").Append(PurchaseOrderReference).Append("\n");
            sb.Append("  RelatedInvoiceNo: ").Append(RelatedInvoiceNo).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  SupplierNo: ").Append(SupplierNo).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalPostedAmount: ").Append(TotalPostedAmount).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IncomingInvoiceListItemDto" />
    /// </summary>
    public class IncomingInvoiceListItemDtoJsonConverter : JsonConverter<IncomingInvoiceListItemDto>
    {
        /// <summary>
        /// The format to use to serialize BalanceLastChangedDateTimeOffset
        /// </summary>
        public static string BalanceLastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IncomingInvoiceListItemDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IncomingInvoiceListItemDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> balance = default;
            Option<DateTimeOffset?> balanceLastChangedDateTimeOffset = default;
            Option<string?> cid = default;
            Option<string?> contractNo = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<string?> customMatchingReference = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<DateTimeOffset?> dueDate = default;
            Option<string?> externalImportReference = default;
            Option<Guid?> id = default;
            Option<string?> invoiceNo = default;
            Option<bool?> isReversed = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<long?> matchId = default;
            Option<double?> netAmount = default;
            Option<double?> netPostedAmount = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<string?> purchaseOrderReference = default;
            Option<string?> relatedInvoiceNo = default;
            Option<long?> supplierId = default;
            Option<long?> supplierNo = default;
            Option<double?> totalAmount = default;
            Option<double?> totalPostedAmount = default;
            Option<DateTimeOffset?> voucherDate = default;
            Option<long?> voucherNo = default;
            Option<IncomingVoucherType?> voucherType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "BalanceLastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balanceLastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ContractNo":
                            contractNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DueDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dueDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "InvoiceNo":
                            invoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsReversed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isReversed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "MatchId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                matchId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NetAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "NetPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                netPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PurchaseOrderReference":
                            purchaseOrderReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RelatedInvoiceNo":
                            relatedInvoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "SupplierId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TotalAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "TotalPostedAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPostedAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherType":
                            string? voucherTypeRawValue = utf8JsonReader.GetString();
                            if (voucherTypeRawValue != null)
                                voucherType = new Option<IncomingVoucherType?>(IncomingVoucherTypeValueConverter.FromStringOrDefault(voucherTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (dueDate.IsSet && dueDate.Value == null)
                throw new ArgumentNullException(nameof(dueDate), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (netAmount.IsSet && netAmount.Value == null)
                throw new ArgumentNullException(nameof(netAmount), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (netPostedAmount.IsSet && netPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(netPostedAmount), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (supplierId.IsSet && supplierId.Value == null)
                throw new ArgumentNullException(nameof(supplierId), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (supplierNo.IsSet && supplierNo.Value == null)
                throw new ArgumentNullException(nameof(supplierNo), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (totalAmount.IsSet && totalAmount.Value == null)
                throw new ArgumentNullException(nameof(totalAmount), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (totalPostedAmount.IsSet && totalPostedAmount.Value == null)
                throw new ArgumentNullException(nameof(totalPostedAmount), "Property is not nullable for class IncomingInvoiceListItemDto.");

            if (voucherNo.IsSet && voucherNo.Value == null)
                throw new ArgumentNullException(nameof(voucherNo), "Property is not nullable for class IncomingInvoiceListItemDto.");

            return new IncomingInvoiceListItemDto(balance, balanceLastChangedDateTimeOffset, cid, contractNo, createdDateTimeOffset, currencyCode, currencyExchangeRate, customMatchingReference, departmentCode, departmentId, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, dueDate, externalImportReference, id, invoiceNo, isReversed, lastChangedDateTimeOffset, locationCode, locationId, matchId, netAmount, netPostedAmount, projectCode, projectId, purchaseOrderReference, relatedInvoiceNo, supplierId, supplierNo, totalAmount, totalPostedAmount, voucherDate, voucherNo, voucherType);
        }

        /// <summary>
        /// Serializes a <see cref="IncomingInvoiceListItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="incomingInvoiceListItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IncomingInvoiceListItemDto incomingInvoiceListItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, incomingInvoiceListItemDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IncomingInvoiceListItemDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="incomingInvoiceListItemDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IncomingInvoiceListItemDto incomingInvoiceListItemDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (incomingInvoiceListItemDto.BalanceOption.IsSet)
                writer.WriteNumber("Balance", incomingInvoiceListItemDto.BalanceOption.Value!.Value);

            if (incomingInvoiceListItemDto.BalanceLastChangedDateTimeOffsetOption.IsSet)
                if (incomingInvoiceListItemDto.BalanceLastChangedDateTimeOffsetOption.Value != null)
                    writer.WriteString("BalanceLastChangedDateTimeOffset", incomingInvoiceListItemDto.BalanceLastChangedDateTimeOffsetOption.Value!.Value.ToString(BalanceLastChangedDateTimeOffsetFormat));
                else
                    writer.WriteNull("BalanceLastChangedDateTimeOffset");

            if (incomingInvoiceListItemDto.CidOption.IsSet)
                if (incomingInvoiceListItemDto.CidOption.Value != null)
                    writer.WriteString("Cid", incomingInvoiceListItemDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (incomingInvoiceListItemDto.ContractNoOption.IsSet)
                if (incomingInvoiceListItemDto.ContractNoOption.Value != null)
                    writer.WriteString("ContractNo", incomingInvoiceListItemDto.ContractNo);
                else
                    writer.WriteNull("ContractNo");

            if (incomingInvoiceListItemDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", incomingInvoiceListItemDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (incomingInvoiceListItemDto.CurrencyCodeOption.IsSet)
                if (incomingInvoiceListItemDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", incomingInvoiceListItemDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (incomingInvoiceListItemDto.CurrencyExchangeRateOption.IsSet)
                if (incomingInvoiceListItemDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", incomingInvoiceListItemDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (incomingInvoiceListItemDto.CustomMatchingReferenceOption.IsSet)
                if (incomingInvoiceListItemDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", incomingInvoiceListItemDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (incomingInvoiceListItemDto.DepartmentCodeOption.IsSet)
                if (incomingInvoiceListItemDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", incomingInvoiceListItemDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (incomingInvoiceListItemDto.DepartmentIdOption.IsSet)
                if (incomingInvoiceListItemDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", incomingInvoiceListItemDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (incomingInvoiceListItemDto.Dim1CodeOption.IsSet)
                if (incomingInvoiceListItemDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", incomingInvoiceListItemDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (incomingInvoiceListItemDto.Dim1IdOption.IsSet)
                if (incomingInvoiceListItemDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", incomingInvoiceListItemDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (incomingInvoiceListItemDto.Dim2CodeOption.IsSet)
                if (incomingInvoiceListItemDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", incomingInvoiceListItemDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (incomingInvoiceListItemDto.Dim2IdOption.IsSet)
                if (incomingInvoiceListItemDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", incomingInvoiceListItemDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (incomingInvoiceListItemDto.Dim3CodeOption.IsSet)
                if (incomingInvoiceListItemDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", incomingInvoiceListItemDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (incomingInvoiceListItemDto.Dim3IdOption.IsSet)
                if (incomingInvoiceListItemDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", incomingInvoiceListItemDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (incomingInvoiceListItemDto.DueDateOption.IsSet)
                writer.WriteString("DueDate", incomingInvoiceListItemDto.DueDateOption.Value!.Value.ToString(DueDateFormat));

            if (incomingInvoiceListItemDto.ExternalImportReferenceOption.IsSet)
                if (incomingInvoiceListItemDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", incomingInvoiceListItemDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (incomingInvoiceListItemDto.IdOption.IsSet)
                writer.WriteString("Id", incomingInvoiceListItemDto.IdOption.Value!.Value);

            if (incomingInvoiceListItemDto.InvoiceNoOption.IsSet)
                if (incomingInvoiceListItemDto.InvoiceNoOption.Value != null)
                    writer.WriteString("InvoiceNo", incomingInvoiceListItemDto.InvoiceNo);
                else
                    writer.WriteNull("InvoiceNo");

            if (incomingInvoiceListItemDto.IsReversedOption.IsSet)
                if (incomingInvoiceListItemDto.IsReversedOption.Value != null)
                    writer.WriteBoolean("IsReversed", incomingInvoiceListItemDto.IsReversedOption.Value!.Value);
                else
                    writer.WriteNull("IsReversed");

            if (incomingInvoiceListItemDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", incomingInvoiceListItemDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (incomingInvoiceListItemDto.LocationCodeOption.IsSet)
                if (incomingInvoiceListItemDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", incomingInvoiceListItemDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (incomingInvoiceListItemDto.LocationIdOption.IsSet)
                if (incomingInvoiceListItemDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", incomingInvoiceListItemDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (incomingInvoiceListItemDto.MatchIdOption.IsSet)
                if (incomingInvoiceListItemDto.MatchIdOption.Value != null)
                    writer.WriteNumber("MatchId", incomingInvoiceListItemDto.MatchIdOption.Value!.Value);
                else
                    writer.WriteNull("MatchId");

            if (incomingInvoiceListItemDto.NetAmountOption.IsSet)
                writer.WriteNumber("NetAmount", incomingInvoiceListItemDto.NetAmountOption.Value!.Value);

            if (incomingInvoiceListItemDto.NetPostedAmountOption.IsSet)
                writer.WriteNumber("NetPostedAmount", incomingInvoiceListItemDto.NetPostedAmountOption.Value!.Value);

            if (incomingInvoiceListItemDto.ProjectCodeOption.IsSet)
                if (incomingInvoiceListItemDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", incomingInvoiceListItemDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (incomingInvoiceListItemDto.ProjectIdOption.IsSet)
                if (incomingInvoiceListItemDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", incomingInvoiceListItemDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (incomingInvoiceListItemDto.PurchaseOrderReferenceOption.IsSet)
                if (incomingInvoiceListItemDto.PurchaseOrderReferenceOption.Value != null)
                    writer.WriteString("PurchaseOrderReference", incomingInvoiceListItemDto.PurchaseOrderReference);
                else
                    writer.WriteNull("PurchaseOrderReference");

            if (incomingInvoiceListItemDto.RelatedInvoiceNoOption.IsSet)
                if (incomingInvoiceListItemDto.RelatedInvoiceNoOption.Value != null)
                    writer.WriteString("RelatedInvoiceNo", incomingInvoiceListItemDto.RelatedInvoiceNo);
                else
                    writer.WriteNull("RelatedInvoiceNo");

            if (incomingInvoiceListItemDto.SupplierIdOption.IsSet)
                writer.WriteNumber("SupplierId", incomingInvoiceListItemDto.SupplierIdOption.Value!.Value);

            if (incomingInvoiceListItemDto.SupplierNoOption.IsSet)
                writer.WriteNumber("SupplierNo", incomingInvoiceListItemDto.SupplierNoOption.Value!.Value);

            if (incomingInvoiceListItemDto.TotalAmountOption.IsSet)
                writer.WriteNumber("TotalAmount", incomingInvoiceListItemDto.TotalAmountOption.Value!.Value);

            if (incomingInvoiceListItemDto.TotalPostedAmountOption.IsSet)
                writer.WriteNumber("TotalPostedAmount", incomingInvoiceListItemDto.TotalPostedAmountOption.Value!.Value);

            if (incomingInvoiceListItemDto.VoucherDateOption.IsSet)
                if (incomingInvoiceListItemDto.VoucherDateOption.Value != null)
                    writer.WriteString("VoucherDate", incomingInvoiceListItemDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));
                else
                    writer.WriteNull("VoucherDate");

            if (incomingInvoiceListItemDto.VoucherNoOption.IsSet)
                writer.WriteNumber("VoucherNo", incomingInvoiceListItemDto.VoucherNoOption.Value!.Value);

            if (incomingInvoiceListItemDto.VoucherTypeOption.IsSet)
                if (incomingInvoiceListItemDto.VoucherTypeOption!.Value != null)
                {
                    var voucherTypeRawValue = IncomingVoucherTypeValueConverter.ToJsonValue(incomingInvoiceListItemDto.VoucherTypeOption.Value!.Value);
                    writer.WriteString("VoucherType", voucherTypeRawValue);
                }
                else
                    writer.WriteNull("VoucherType");
        }
    }
}
