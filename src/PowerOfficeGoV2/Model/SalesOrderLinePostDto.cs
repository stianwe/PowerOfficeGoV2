// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The sales order line post DTO contains only properties relevant to a sales order line in Go that can be created via POST-method in API.
    /// </summary>
    public partial class SalesOrderLinePostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderLinePostDto" /> class.
        /// </summary>
        /// <param name="accrual">accrual</param>
        /// <param name="allowance">The percent of allowance/discount or allowance charge for this sales order line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.  If null, the allowance may inherit the value set on the Customer entity, if the value is set on the customer.</param>
        /// <param name="departmentCode">The code of the department associated with the sales order line.  Will inherit department code from sales order head if not specifically set on the line.  Note that if DepartmentId is set as well in the request, DepartmentId takes precedence and DepartmentCode is ignored.  DepartmentCode &#x3D; -1 means no department.</param>
        /// <param name="departmentId">The id of the department associated with the sales order line.  Will inherit department id from sales order head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</param>
        /// <param name="description">The description for the sales order line.  When product is set on the line, the description will be the name of the product if no other description is specifically set on the line.  It is usually recommended to set a specific description in order to control the information on the line.</param>
        /// <param name="dim1Code">The code of the dimension 1 associated with the sales order line.  Will inherit dimension 1 code from sales order head if not specifically set on the line.  Note that if Dim1Id is set as well in the request, Dim1Id takes precedence and Dim1Code is ignored.  Dim1Code &#x3D; -1 means no dimension 1.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the sales order line.  Will inherit dimension 1 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.</param>
        /// <param name="dim2Code">The code of the dimension 2 associated with the sales order line.  Will inherit dimension 2 code from sales order head if not specifically set on the line.  Note that if Dim2Id is set as well in the request, Dim2Id takes precedence and Dim2Code is ignored.  Dim2Code &#x3D; -1 means no dimension 2.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the sales order line.  Will inherit dimension 2 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.</param>
        /// <param name="dim3Code">The code of the dimension 3 associated with the sales order line.  Will inherit dimension 3 code from sales order head if not specifically set on the line.  Note that if Dim3Id is set as well in the request, Dim3Id takes precedence and Dim3Code is ignored.  Dim3Code &#x3D; -1 means no dimension 3.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the sales order line.  Will inherit dimension 3 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.</param>
        /// <param name="externalImportReference">The external import reference for the sales order line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.</param>
        /// <param name="lineType">lineType</param>
        /// <param name="locationCode">The code of the location dimension associated with the sales order line.  Will inherit location code from sales order head if not specifically set on the line.  Note that if LocationId is set as well in the request, LocationId takes precedence and LocationCode is ignored.  LocationCode &#x3D; -1 means no location.</param>
        /// <param name="locationId">The id of the location dimension associated with the sales order line.  Will inherit location id from sales order head if not specifically set on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.</param>
        /// <param name="productCode">The code of the product associated with the sales order line.  The product object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which vat code option that can be applied).  Please refer to our workflow description for more details.  Note that if ProductId is set as well in the request, ProductId takes precedence and ProductCode is ignored.</param>
        /// <param name="productId">The id of the product associated with the sales order line.  The product-object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which VAT code option that can be applied).  Products can be queried and identified using the Products endpoint.</param>
        /// <param name="productUnitCost">The cost per unit of the product associated with the sales order line.  Will inherit (on creation) the unit cost set on the product object if not specifically set on the line.</param>
        /// <param name="productUnitPrice">The sales price per unit of the product associated with the sales order line.  Will inherit (on creation) the sales price set on the product object if not specifically set on the line.</param>
        /// <param name="projectCode">The code of the project associated with the sales order line.  Will inherit project code from sales order head if not specifically set on the line.  Note that if ProjectId is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectCode &#x3D; -1 means no project.</param>
        /// <param name="projectId">The id of the project associated with the sales order line.  Will inherit project id from sales order head if not specifically set on the line.  Note that if ProjectCode is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectId &#x3D; -1 means no project.</param>
        /// <param name="quantity">The quantity for the sales order line.  Required to set if the line contain a product code.  NOTE Setting a negative quantity, will result in the line being interpreted as a creditation of the product quantity.  If the sum of the lines for the total sales order is negative, the sales order is considered a credit note draft.</param>
        /// <param name="sellersReferenceEmployeeId">The id of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeNo is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.</param>
        /// <param name="sellersReferenceEmployeeNo">The number of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeId is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.</param>
        /// <param name="sortOrder">The sort order of the sales order line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode</param>
        /// <param name="useStandardSalesAccount">Whether the standard sales account of the product set on the sales order line is used.                 If false, the optional sales account set on the product is used.  Query the product endpoint to retrieve the sales account information on the product.                    If set to null, the standard sales account will be inherited from the customer account&#39;s VAT-free  setting. In other words, if the VAT-free setting is enabled, the StandardSalesAccount will be set to  false and the optional sales account set on the product is used.                The concept of sales accounts is also explained in the common workflow articles.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        [JsonConstructor]
        public SalesOrderLinePostDto(Option<SalesOrderAccrualPostDto?> accrual = default, Option<double?> allowance = default, Option<string?> departmentCode = default, Option<long?> departmentId = default, Option<string?> description = default, Option<string?> dim1Code = default, Option<long?> dim1Id = default, Option<string?> dim2Code = default, Option<long?> dim2Id = default, Option<string?> dim3Code = default, Option<long?> dim3Id = default, Option<string?> externalImportReference = default, Option<VoucherLineType?> lineType = default, Option<string?> locationCode = default, Option<long?> locationId = default, Option<string?> productCode = default, Option<long?> productId = default, Option<double?> productUnitCost = default, Option<double?> productUnitPrice = default, Option<string?> projectCode = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<long?> sellersReferenceEmployeeId = default, Option<long?> sellersReferenceEmployeeNo = default, Option<int?> sortOrder = default, Option<UnitOfMeasureType?> unitOfMeasureCode = default, Option<bool?> useStandardSalesAccount = default, Option<VatReturnSpecification?> vatReturnSpecification = default)
        {
            AccrualOption = accrual;
            AllowanceOption = allowance;
            DepartmentCodeOption = departmentCode;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1CodeOption = dim1Code;
            Dim1IdOption = dim1Id;
            Dim2CodeOption = dim2Code;
            Dim2IdOption = dim2Id;
            Dim3CodeOption = dim3Code;
            Dim3IdOption = dim3Id;
            ExternalImportReferenceOption = externalImportReference;
            LineTypeOption = lineType;
            LocationCodeOption = locationCode;
            LocationIdOption = locationId;
            ProductCodeOption = productCode;
            ProductIdOption = productId;
            ProductUnitCostOption = productUnitCost;
            ProductUnitPriceOption = productUnitPrice;
            ProjectCodeOption = projectCode;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            SellersReferenceEmployeeIdOption = sellersReferenceEmployeeId;
            SellersReferenceEmployeeNoOption = sellersReferenceEmployeeNo;
            SortOrderOption = sortOrder;
            UnitOfMeasureCodeOption = unitOfMeasureCode;
            UseStandardSalesAccountOption = useStandardSalesAccount;
            VatReturnSpecificationOption = vatReturnSpecification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LineType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherLineType?> LineTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets LineType
        /// </summary>
        [JsonPropertyName("LineType")]
        public VoucherLineType? LineType { get { return this.LineTypeOption; } set { this.LineTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitOfMeasureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureCode
        /// </summary>
        [JsonPropertyName("UnitOfMeasureCode")]
        public UnitOfMeasureType? UnitOfMeasureCode { get { return this.UnitOfMeasureCodeOption; } set { this.UnitOfMeasureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accrual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SalesOrderAccrualPostDto?> AccrualOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accrual
        /// </summary>
        [JsonPropertyName("Accrual")]
        public SalesOrderAccrualPostDto? Accrual { get { return this.AccrualOption; } set { this.AccrualOption = new(value); } }

        /// <summary>
        /// Used to track the state of Allowance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AllowanceOption { get; private set; }

        /// <summary>
        /// The percent of allowance/discount or allowance charge for this sales order line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.  If null, the allowance may inherit the value set on the Customer entity, if the value is set on the customer.
        /// </summary>
        /// <value>The percent of allowance/discount or allowance charge for this sales order line.  The value is between -1000 and 100 (reflects as -1000% or 100% in the GUI).  Negative percentage means the line is set with allowance charge.  Positive percentage means the line is set up with discount/allowance.  If null, the allowance may inherit the value set on the Customer entity, if the value is set on the customer.</value>
        /* <example>56.75</example> */
        [JsonPropertyName("Allowance")]
        public double? Allowance { get { return this.AllowanceOption; } set { this.AllowanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DepartmentCodeOption { get; private set; }

        /// <summary>
        /// The code of the department associated with the sales order line.  Will inherit department code from sales order head if not specifically set on the line.  Note that if DepartmentId is set as well in the request, DepartmentId takes precedence and DepartmentCode is ignored.  DepartmentCode &#x3D; -1 means no department.
        /// </summary>
        /// <value>The code of the department associated with the sales order line.  Will inherit department code from sales order head if not specifically set on the line.  Note that if DepartmentId is set as well in the request, DepartmentId takes precedence and DepartmentCode is ignored.  DepartmentCode &#x3D; -1 means no department.</value>
        /* <example>1A</example> */
        [JsonPropertyName("DepartmentCode")]
        public string? DepartmentCode { get { return this.DepartmentCodeOption; } set { this.DepartmentCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The id of the department associated with the sales order line.  Will inherit department id from sales order head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.
        /// </summary>
        /// <value>The id of the department associated with the sales order line.  Will inherit department id from sales order head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Departments endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description for the sales order line.  When product is set on the line, the description will be the name of the product if no other description is specifically set on the line.  It is usually recommended to set a specific description in order to control the information on the line.
        /// </summary>
        /// <value>The description for the sales order line.  When product is set on the line, the description will be the name of the product if no other description is specifically set on the line.  It is usually recommended to set a specific description in order to control the information on the line.</value>
        /* <example>Hello accounting world</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim1CodeOption { get; private set; }

        /// <summary>
        /// The code of the dimension 1 associated with the sales order line.  Will inherit dimension 1 code from sales order head if not specifically set on the line.  Note that if Dim1Id is set as well in the request, Dim1Id takes precedence and Dim1Code is ignored.  Dim1Code &#x3D; -1 means no dimension 1.
        /// </summary>
        /// <value>The code of the dimension 1 associated with the sales order line.  Will inherit dimension 1 code from sales order head if not specifically set on the line.  Note that if Dim1Id is set as well in the request, Dim1Id takes precedence and Dim1Code is ignored.  Dim1Code &#x3D; -1 means no dimension 1.</value>
        /* <example>dimcode111</example> */
        [JsonPropertyName("Dim1Code")]
        public string? Dim1Code { get { return this.Dim1CodeOption; } set { this.Dim1CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the sales order line.  Will inherit dimension 1 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the sales order line.  Will inherit dimension 1 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim1Id &#x3D; -1 means no dimension 1.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim2CodeOption { get; private set; }

        /// <summary>
        /// The code of the dimension 2 associated with the sales order line.  Will inherit dimension 2 code from sales order head if not specifically set on the line.  Note that if Dim2Id is set as well in the request, Dim2Id takes precedence and Dim2Code is ignored.  Dim2Code &#x3D; -1 means no dimension 2.
        /// </summary>
        /// <value>The code of the dimension 2 associated with the sales order line.  Will inherit dimension 2 code from sales order head if not specifically set on the line.  Note that if Dim2Id is set as well in the request, Dim2Id takes precedence and Dim2Code is ignored.  Dim2Code &#x3D; -1 means no dimension 2.</value>
        /* <example>dimcode222</example> */
        [JsonPropertyName("Dim2Code")]
        public string? Dim2Code { get { return this.Dim2CodeOption; } set { this.Dim2CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the sales order line.  Will inherit dimension 2 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the sales order line.  Will inherit dimension 2 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim2Id &#x3D; -1 means no dimension 2.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Dim3CodeOption { get; private set; }

        /// <summary>
        /// The code of the dimension 3 associated with the sales order line.  Will inherit dimension 3 code from sales order head if not specifically set on the line.  Note that if Dim3Id is set as well in the request, Dim3Id takes precedence and Dim3Code is ignored.  Dim3Code &#x3D; -1 means no dimension 3.
        /// </summary>
        /// <value>The code of the dimension 3 associated with the sales order line.  Will inherit dimension 3 code from sales order head if not specifically set on the line.  Note that if Dim3Id is set as well in the request, Dim3Id takes precedence and Dim3Code is ignored.  Dim3Code &#x3D; -1 means no dimension 3.</value>
        /* <example>dimcode333</example> */
        [JsonPropertyName("Dim3Code")]
        public string? Dim3Code { get { return this.Dim3CodeOption; } set { this.Dim3CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the sales order line.  Will inherit dimension 3 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the sales order line.  Will inherit dimension 3 id from sales order head if not specifically set on the line.  Dimension 1-3 are customizable dimensions that can be defined and queried using the Custom Dimensions endpoint.  Dim3Id &#x3D; -1 means no dimension 3.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference for the sales order line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.
        /// </summary>
        /// <value>The external import reference for the sales order line.  This property can be set by integrations posting vouchers in Go or creating sales orders (invoice drafts), in order to reference the external system&#39;s invoice line and ensure a duplicate check (only one instance of the reference can exist within each invoice object).  Can be used to correlate/duplicate check transaction.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocationCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationCodeOption { get; private set; }

        /// <summary>
        /// The code of the location dimension associated with the sales order line.  Will inherit location code from sales order head if not specifically set on the line.  Note that if LocationId is set as well in the request, LocationId takes precedence and LocationCode is ignored.  LocationCode &#x3D; -1 means no location.
        /// </summary>
        /// <value>The code of the location dimension associated with the sales order line.  Will inherit location code from sales order head if not specifically set on the line.  Note that if LocationId is set as well in the request, LocationId takes precedence and LocationCode is ignored.  LocationCode &#x3D; -1 means no location.</value>
        /* <example>4A</example> */
        [JsonPropertyName("LocationCode")]
        public string? LocationCode { get { return this.LocationCodeOption; } set { this.LocationCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the sales order line.  Will inherit location id from sales order head if not specifically set on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.
        /// </summary>
        /// <value>The id of the location dimension associated with the sales order line.  Will inherit location id from sales order head if not specifically set on the line.  Locations can be queried and identified using the Locations endpoint.  LocationId &#x3D; -1 means no location.</value>
        /* <example>123546</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductCodeOption { get; private set; }

        /// <summary>
        /// The code of the product associated with the sales order line.  The product object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which vat code option that can be applied).  Please refer to our workflow description for more details.  Note that if ProductId is set as well in the request, ProductId takes precedence and ProductCode is ignored.
        /// </summary>
        /// <value>The code of the product associated with the sales order line.  The product object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which vat code option that can be applied).  Please refer to our workflow description for more details.  Note that if ProductId is set as well in the request, ProductId takes precedence and ProductCode is ignored.</value>
        /* <example>10A</example> */
        [JsonPropertyName("ProductCode")]
        public string? ProductCode { get { return this.ProductCodeOption; } set { this.ProductCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; private set; }

        /// <summary>
        /// The id of the product associated with the sales order line.  The product-object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which VAT code option that can be applied).  Products can be queried and identified using the Products endpoint.
        /// </summary>
        /// <value>The id of the product associated with the sales order line.  The product-object in Go contain information of sales account  (in effect which sales account number is used when the order is invoiced, and which VAT code option that can be applied).  Products can be queried and identified using the Products endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductUnitCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ProductUnitCostOption { get; private set; }

        /// <summary>
        /// The cost per unit of the product associated with the sales order line.  Will inherit (on creation) the unit cost set on the product object if not specifically set on the line.
        /// </summary>
        /// <value>The cost per unit of the product associated with the sales order line.  Will inherit (on creation) the unit cost set on the product object if not specifically set on the line.</value>
        /* <example>300</example> */
        [JsonPropertyName("ProductUnitCost")]
        public double? ProductUnitCost { get { return this.ProductUnitCostOption; } set { this.ProductUnitCostOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductUnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ProductUnitPriceOption { get; private set; }

        /// <summary>
        /// The sales price per unit of the product associated with the sales order line.  Will inherit (on creation) the sales price set on the product object if not specifically set on the line.
        /// </summary>
        /// <value>The sales price per unit of the product associated with the sales order line.  Will inherit (on creation) the sales price set on the product object if not specifically set on the line.</value>
        /* <example>200</example> */
        [JsonPropertyName("ProductUnitPrice")]
        public double? ProductUnitPrice { get { return this.ProductUnitPriceOption; } set { this.ProductUnitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectCodeOption { get; private set; }

        /// <summary>
        /// The code of the project associated with the sales order line.  Will inherit project code from sales order head if not specifically set on the line.  Note that if ProjectId is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectCode &#x3D; -1 means no project.
        /// </summary>
        /// <value>The code of the project associated with the sales order line.  Will inherit project code from sales order head if not specifically set on the line.  Note that if ProjectId is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectCode &#x3D; -1 means no project.</value>
        /* <example>100A</example> */
        [JsonPropertyName("ProjectCode")]
        public string? ProjectCode { get { return this.ProjectCodeOption; } set { this.ProjectCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the sales order line.  Will inherit project id from sales order head if not specifically set on the line.  Note that if ProjectCode is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectId &#x3D; -1 means no project.
        /// </summary>
        /// <value>The id of the project associated with the sales order line.  Will inherit project id from sales order head if not specifically set on the line.  Note that if ProjectCode is set as well in the request, ProjectId takes precedence and ProjectCode is ignored.  ProjectId &#x3D; -1 means no project.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity for the sales order line.  Required to set if the line contain a product code.  NOTE Setting a negative quantity, will result in the line being interpreted as a creditation of the product quantity.  If the sum of the lines for the total sales order is negative, the sales order is considered a credit note draft.
        /// </summary>
        /// <value>The quantity for the sales order line.  Required to set if the line contain a product code.  NOTE Setting a negative quantity, will result in the line being interpreted as a creditation of the product quantity.  If the sum of the lines for the total sales order is negative, the sales order is considered a credit note draft.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeIdOption { get; private set; }

        /// <summary>
        /// The id of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeNo is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.
        /// </summary>
        /// <value>The id of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeNo is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.</value>
        /* <example>756319</example> */
        [JsonPropertyName("SellersReferenceEmployeeId")]
        public long? SellersReferenceEmployeeId { get { return this.SellersReferenceEmployeeIdOption; } set { this.SellersReferenceEmployeeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SellersReferenceEmployeeNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SellersReferenceEmployeeNoOption { get; private set; }

        /// <summary>
        /// The number of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeId is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.
        /// </summary>
        /// <value>The number of the employee set as the seller reference for the sales order line.  Will inherit the seller reference from sales order head if not specifically set on the line.  Note that if SellersReferenceEmployeeId is set as well in the request, SellersReferenceEmployeeId takes precedence and SellersReferenceEmployeeNo is ignored.</value>
        /* <example>1</example> */
        [JsonPropertyName("SellersReferenceEmployeeNo")]
        public long? SellersReferenceEmployeeNo { get { return this.SellersReferenceEmployeeNoOption; } set { this.SellersReferenceEmployeeNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of SortOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SortOrderOption { get; private set; }

        /// <summary>
        /// The sort order of the sales order line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.
        /// </summary>
        /// <value>The sort order of the sales order line.  Sort order start at 0.  The first line as viewed from the GUI, will have sortOrder &#x3D; 0.</value>
        /* <example>0</example> */
        [JsonPropertyName("SortOrder")]
        public int? SortOrder { get { return this.SortOrderOption; } set { this.SortOrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseStandardSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseStandardSalesAccountOption { get; private set; }

        /// <summary>
        /// Whether the standard sales account of the product set on the sales order line is used.                 If false, the optional sales account set on the product is used.  Query the product endpoint to retrieve the sales account information on the product.                    If set to null, the standard sales account will be inherited from the customer account&#39;s VAT-free  setting. In other words, if the VAT-free setting is enabled, the StandardSalesAccount will be set to  false and the optional sales account set on the product is used.                The concept of sales accounts is also explained in the common workflow articles.
        /// </summary>
        /// <value>Whether the standard sales account of the product set on the sales order line is used.                 If false, the optional sales account set on the product is used.  Query the product endpoint to retrieve the sales account information on the product.                    If set to null, the standard sales account will be inherited from the customer account&#39;s VAT-free  setting. In other words, if the VAT-free setting is enabled, the StandardSalesAccount will be set to  false and the optional sales account set on the product is used.                The concept of sales accounts is also explained in the common workflow articles.</value>
        /* <example>true</example> */
        [JsonPropertyName("UseStandardSalesAccount")]
        public bool? UseStandardSalesAccount { get { return this.UseStandardSalesAccountOption; } set { this.UseStandardSalesAccountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalesOrderLinePostDto {\n");
            sb.Append("  Accrual: ").Append(Accrual).Append("\n");
            sb.Append("  Allowance: ").Append(Allowance).Append("\n");
            sb.Append("  DepartmentCode: ").Append(DepartmentCode).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Code: ").Append(Dim1Code).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Code: ").Append(Dim2Code).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Code: ").Append(Dim3Code).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  LineType: ").Append(LineType).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ProductCode: ").Append(ProductCode).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductUnitCost: ").Append(ProductUnitCost).Append("\n");
            sb.Append("  ProductUnitPrice: ").Append(ProductUnitPrice).Append("\n");
            sb.Append("  ProjectCode: ").Append(ProjectCode).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellersReferenceEmployeeId: ").Append(SellersReferenceEmployeeId).Append("\n");
            sb.Append("  SellersReferenceEmployeeNo: ").Append(SellersReferenceEmployeeNo).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  UseStandardSalesAccount: ").Append(UseStandardSalesAccount).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalesOrderLinePostDto" />
    /// </summary>
    public class SalesOrderLinePostDtoJsonConverter : JsonConverter<SalesOrderLinePostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SalesOrderLinePostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SalesOrderLinePostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SalesOrderAccrualPostDto?> accrual = default;
            Option<double?> allowance = default;
            Option<string?> departmentCode = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<string?> dim1Code = default;
            Option<long?> dim1Id = default;
            Option<string?> dim2Code = default;
            Option<long?> dim2Id = default;
            Option<string?> dim3Code = default;
            Option<long?> dim3Id = default;
            Option<string?> externalImportReference = default;
            Option<VoucherLineType?> lineType = default;
            Option<string?> locationCode = default;
            Option<long?> locationId = default;
            Option<string?> productCode = default;
            Option<long?> productId = default;
            Option<double?> productUnitCost = default;
            Option<double?> productUnitPrice = default;
            Option<string?> projectCode = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<long?> sellersReferenceEmployeeId = default;
            Option<long?> sellersReferenceEmployeeNo = default;
            Option<int?> sortOrder = default;
            Option<UnitOfMeasureType?> unitOfMeasureCode = default;
            Option<bool?> useStandardSalesAccount = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Accrual":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrual = new Option<SalesOrderAccrualPostDto?>(JsonSerializer.Deserialize<SalesOrderAccrualPostDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Allowance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "DepartmentCode":
                            departmentCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Code":
                            dim1Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Code":
                            dim2Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Code":
                            dim3Code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LineType":
                            string? lineTypeRawValue = utf8JsonReader.GetString();
                            if (lineTypeRawValue != null)
                                lineType = new Option<VoucherLineType?>(VoucherLineTypeValueConverter.FromStringOrDefault(lineTypeRawValue));
                            break;
                        case "LocationCode":
                            locationCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductCode":
                            productCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductUnitCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productUnitCost = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProductUnitPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productUnitPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProjectCode":
                            projectCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "SellersReferenceEmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SellersReferenceEmployeeNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellersReferenceEmployeeNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SortOrder":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sortOrder = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "UnitOfMeasureCode":
                            string? unitOfMeasureCodeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureCodeRawValue != null)
                                unitOfMeasureCode = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureCodeRawValue));
                            break;
                        case "UseStandardSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useStandardSalesAccount = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accrual.IsSet && accrual.Value == null)
                throw new ArgumentNullException(nameof(accrual), "Property is not nullable for class SalesOrderLinePostDto.");

            return new SalesOrderLinePostDto(accrual, allowance, departmentCode, departmentId, description, dim1Code, dim1Id, dim2Code, dim2Id, dim3Code, dim3Id, externalImportReference, lineType, locationCode, locationId, productCode, productId, productUnitCost, productUnitPrice, projectCode, projectId, quantity, sellersReferenceEmployeeId, sellersReferenceEmployeeNo, sortOrder, unitOfMeasureCode, useStandardSalesAccount, vatReturnSpecification);
        }

        /// <summary>
        /// Serializes a <see cref="SalesOrderLinePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salesOrderLinePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SalesOrderLinePostDto salesOrderLinePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, salesOrderLinePostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SalesOrderLinePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salesOrderLinePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SalesOrderLinePostDto salesOrderLinePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (salesOrderLinePostDto.AccrualOption.IsSet && salesOrderLinePostDto.Accrual == null)
                throw new ArgumentNullException(nameof(salesOrderLinePostDto.Accrual), "Property is required for class SalesOrderLinePostDto.");

            if (salesOrderLinePostDto.AccrualOption.IsSet)
            {
                writer.WritePropertyName("Accrual");
                JsonSerializer.Serialize(writer, salesOrderLinePostDto.Accrual, jsonSerializerOptions);
            }
            if (salesOrderLinePostDto.AllowanceOption.IsSet)
                if (salesOrderLinePostDto.AllowanceOption.Value != null)
                    writer.WriteNumber("Allowance", salesOrderLinePostDto.AllowanceOption.Value!.Value);
                else
                    writer.WriteNull("Allowance");

            if (salesOrderLinePostDto.DepartmentCodeOption.IsSet)
                if (salesOrderLinePostDto.DepartmentCodeOption.Value != null)
                    writer.WriteString("DepartmentCode", salesOrderLinePostDto.DepartmentCode);
                else
                    writer.WriteNull("DepartmentCode");

            if (salesOrderLinePostDto.DepartmentIdOption.IsSet)
                if (salesOrderLinePostDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", salesOrderLinePostDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (salesOrderLinePostDto.DescriptionOption.IsSet)
                if (salesOrderLinePostDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", salesOrderLinePostDto.Description);
                else
                    writer.WriteNull("Description");

            if (salesOrderLinePostDto.Dim1CodeOption.IsSet)
                if (salesOrderLinePostDto.Dim1CodeOption.Value != null)
                    writer.WriteString("Dim1Code", salesOrderLinePostDto.Dim1Code);
                else
                    writer.WriteNull("Dim1Code");

            if (salesOrderLinePostDto.Dim1IdOption.IsSet)
                if (salesOrderLinePostDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", salesOrderLinePostDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (salesOrderLinePostDto.Dim2CodeOption.IsSet)
                if (salesOrderLinePostDto.Dim2CodeOption.Value != null)
                    writer.WriteString("Dim2Code", salesOrderLinePostDto.Dim2Code);
                else
                    writer.WriteNull("Dim2Code");

            if (salesOrderLinePostDto.Dim2IdOption.IsSet)
                if (salesOrderLinePostDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", salesOrderLinePostDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (salesOrderLinePostDto.Dim3CodeOption.IsSet)
                if (salesOrderLinePostDto.Dim3CodeOption.Value != null)
                    writer.WriteString("Dim3Code", salesOrderLinePostDto.Dim3Code);
                else
                    writer.WriteNull("Dim3Code");

            if (salesOrderLinePostDto.Dim3IdOption.IsSet)
                if (salesOrderLinePostDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", salesOrderLinePostDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (salesOrderLinePostDto.ExternalImportReferenceOption.IsSet)
                if (salesOrderLinePostDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", salesOrderLinePostDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (salesOrderLinePostDto.LineTypeOption.IsSet)
                if (salesOrderLinePostDto.LineTypeOption!.Value != null)
                {
                    var lineTypeRawValue = VoucherLineTypeValueConverter.ToJsonValue(salesOrderLinePostDto.LineTypeOption.Value!.Value);
                    writer.WriteString("LineType", lineTypeRawValue);
                }
                else
                    writer.WriteNull("LineType");
            if (salesOrderLinePostDto.LocationCodeOption.IsSet)
                if (salesOrderLinePostDto.LocationCodeOption.Value != null)
                    writer.WriteString("LocationCode", salesOrderLinePostDto.LocationCode);
                else
                    writer.WriteNull("LocationCode");

            if (salesOrderLinePostDto.LocationIdOption.IsSet)
                if (salesOrderLinePostDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", salesOrderLinePostDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (salesOrderLinePostDto.ProductCodeOption.IsSet)
                if (salesOrderLinePostDto.ProductCodeOption.Value != null)
                    writer.WriteString("ProductCode", salesOrderLinePostDto.ProductCode);
                else
                    writer.WriteNull("ProductCode");

            if (salesOrderLinePostDto.ProductIdOption.IsSet)
                if (salesOrderLinePostDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", salesOrderLinePostDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (salesOrderLinePostDto.ProductUnitCostOption.IsSet)
                if (salesOrderLinePostDto.ProductUnitCostOption.Value != null)
                    writer.WriteNumber("ProductUnitCost", salesOrderLinePostDto.ProductUnitCostOption.Value!.Value);
                else
                    writer.WriteNull("ProductUnitCost");

            if (salesOrderLinePostDto.ProductUnitPriceOption.IsSet)
                if (salesOrderLinePostDto.ProductUnitPriceOption.Value != null)
                    writer.WriteNumber("ProductUnitPrice", salesOrderLinePostDto.ProductUnitPriceOption.Value!.Value);
                else
                    writer.WriteNull("ProductUnitPrice");

            if (salesOrderLinePostDto.ProjectCodeOption.IsSet)
                if (salesOrderLinePostDto.ProjectCodeOption.Value != null)
                    writer.WriteString("ProjectCode", salesOrderLinePostDto.ProjectCode);
                else
                    writer.WriteNull("ProjectCode");

            if (salesOrderLinePostDto.ProjectIdOption.IsSet)
                if (salesOrderLinePostDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", salesOrderLinePostDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (salesOrderLinePostDto.QuantityOption.IsSet)
                if (salesOrderLinePostDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", salesOrderLinePostDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (salesOrderLinePostDto.SellersReferenceEmployeeIdOption.IsSet)
                if (salesOrderLinePostDto.SellersReferenceEmployeeIdOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeId", salesOrderLinePostDto.SellersReferenceEmployeeIdOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeId");

            if (salesOrderLinePostDto.SellersReferenceEmployeeNoOption.IsSet)
                if (salesOrderLinePostDto.SellersReferenceEmployeeNoOption.Value != null)
                    writer.WriteNumber("SellersReferenceEmployeeNo", salesOrderLinePostDto.SellersReferenceEmployeeNoOption.Value!.Value);
                else
                    writer.WriteNull("SellersReferenceEmployeeNo");

            if (salesOrderLinePostDto.SortOrderOption.IsSet)
                if (salesOrderLinePostDto.SortOrderOption.Value != null)
                    writer.WriteNumber("SortOrder", salesOrderLinePostDto.SortOrderOption.Value!.Value);
                else
                    writer.WriteNull("SortOrder");

            if (salesOrderLinePostDto.UnitOfMeasureCodeOption.IsSet)
                if (salesOrderLinePostDto.UnitOfMeasureCodeOption!.Value != null)
                {
                    var unitOfMeasureCodeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(salesOrderLinePostDto.UnitOfMeasureCodeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureCode", unitOfMeasureCodeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureCode");
            if (salesOrderLinePostDto.UseStandardSalesAccountOption.IsSet)
                if (salesOrderLinePostDto.UseStandardSalesAccountOption.Value != null)
                    writer.WriteBoolean("UseStandardSalesAccount", salesOrderLinePostDto.UseStandardSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("UseStandardSalesAccount");

            if (salesOrderLinePostDto.VatReturnSpecificationOption.IsSet)
                if (salesOrderLinePostDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(salesOrderLinePostDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
        }
    }
}
