// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Indicates the type of incoming voucher.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;IncomingInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Indicates the type of incoming voucher.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;IncomingInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client.&lt;/li&gt;&lt;li&gt;&lt;i&gt;IncomingCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum IncomingVoucherType
    {
        /// <summary>
        /// Enum IncomingInvoice for value: IncomingInvoice
        /// </summary>
        IncomingInvoice = 1,

        /// <summary>
        /// Enum IncomingCreditNote for value: IncomingCreditNote
        /// </summary>
        IncomingCreditNote = 2
    }

    /// <summary>
    /// Converts <see cref="IncomingVoucherType"/> to and from the JSON value
    /// </summary>
    public static class IncomingVoucherTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="IncomingVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IncomingVoucherType FromString(string value)
        {
            if (value.Equals("IncomingInvoice"))
                return IncomingVoucherType.IncomingInvoice;

            if (value.Equals("IncomingCreditNote"))
                return IncomingVoucherType.IncomingCreditNote;

            throw new NotImplementedException($"Could not convert value to type IncomingVoucherType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="IncomingVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IncomingVoucherType? FromStringOrDefault(string value)
        {
            if (value.Equals("IncomingInvoice"))
                return IncomingVoucherType.IncomingInvoice;

            if (value.Equals("IncomingCreditNote"))
                return IncomingVoucherType.IncomingCreditNote;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IncomingVoucherType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(IncomingVoucherType value)
        {
            if (value == IncomingVoucherType.IncomingInvoice)
                return "IncomingInvoice";

            if (value == IncomingVoucherType.IncomingCreditNote)
                return "IncomingCreditNote";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IncomingVoucherType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class IncomingVoucherTypeJsonConverter : JsonConverter<IncomingVoucherType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IncomingVoucherType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IncomingVoucherType? result = rawValue == null
                ? null
                : IncomingVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IncomingVoucherType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="incomingVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IncomingVoucherType incomingVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(incomingVoucherType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IncomingVoucherType"/>
    /// </summary>
    public class IncomingVoucherTypeNullableJsonConverter : JsonConverter<IncomingVoucherType?>
    {
        /// <summary>
        /// Returns a IncomingVoucherType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IncomingVoucherType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IncomingVoucherType? result = rawValue == null
                ? null
                : IncomingVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="incomingVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IncomingVoucherType? incomingVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(incomingVoucherType?.ToString() ?? "null");
        }
    }
}
