// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for creating delivery terms.
    /// </summary>
    public partial class DeliveryTermPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryTermPostDto" /> class.
        /// </summary>
        /// <param name="isDefault">A value indicating if this delivery term is the standard delivery term set on the client.  Customers and sales orders will default inherit the standard delivery term from the client invoice settings.  Defaults to false.</param>
        /// <param name="name">Gets or sets the name of the delivery term.</param>
        [JsonConstructor]
        public DeliveryTermPostDto(Option<bool?> isDefault = default, string? name = default)
        {
            IsDefaultOption = isDefault;
            Name = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; private set; }

        /// <summary>
        /// A value indicating if this delivery term is the standard delivery term set on the client.  Customers and sales orders will default inherit the standard delivery term from the client invoice settings.  Defaults to false.
        /// </summary>
        /// <value>A value indicating if this delivery term is the standard delivery term set on the client.  Customers and sales orders will default inherit the standard delivery term from the client invoice settings.  Defaults to false.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsDefault")]
        public bool? IsDefault { get { return this.IsDefaultOption; } set { this.IsDefaultOption = new(value); } }

        /// <summary>
        /// Gets or sets the name of the delivery term.
        /// </summary>
        /// <value>Gets or sets the name of the delivery term.</value>
        /* <example>EXW</example> */
        [JsonPropertyName("Name")]
        public string? Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryTermPostDto {\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DeliveryTermPostDto" />
    /// </summary>
    public class DeliveryTermPostDtoJsonConverter : JsonConverter<DeliveryTermPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="DeliveryTermPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DeliveryTermPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isDefault = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "IsDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class DeliveryTermPostDto.", nameof(name));

            return new DeliveryTermPostDto(isDefault, name.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="DeliveryTermPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deliveryTermPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DeliveryTermPostDto deliveryTermPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, deliveryTermPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DeliveryTermPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="deliveryTermPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DeliveryTermPostDto deliveryTermPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (deliveryTermPostDto.IsDefaultOption.IsSet)
                if (deliveryTermPostDto.IsDefaultOption.Value != null)
                    writer.WriteBoolean("IsDefault", deliveryTermPostDto.IsDefaultOption.Value!.Value);
                else
                    writer.WriteNull("IsDefault");

            if (deliveryTermPostDto.Name != null)
                writer.WriteString("Name", deliveryTermPostDto.Name);
            else
                writer.WriteNull("Name");
        }
    }
}
