// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Vat Settings DTO contains all properties relevant to VAT settings in
    /// </summary>
    public partial class VatSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VatSettingsDto" /> class.
        /// </summary>
        /// <param name="alternativeVatPeriod">alternativeVatPeriod</param>
        /// <param name="alternativeVatReturnFromYear">The year the client wants to start reporting additional vat returns. Relevant only if ReportAlternativeVatReturn is true.</param>
        /// <param name="alternativeVatReturnType">alternativeVatReturnType</param>
        /// <param name="isVatRegistered">Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert). If false, vat is not applied to outgoing invoices.</param>
        /// <param name="reportAlternativeVatReturn">Information on whether this client report additional vat return for some departments.</param>
        /// <param name="reportVatReturnManually">Information on whether this client report vat returns manually. True if the client are obliged to submit more than one type of vat return, are jointly registered or shall deliver vat return for vat compensation or reverse tax liability.</param>
        /// <param name="roundingAccountAgricultureDepartment">roundingAccountAgricultureDepartment</param>
        /// <param name="roundingAccountId">The identifier of the rounding account number.</param>
        /// <param name="roundingAccountNo">The account used if rounding need to be posted when the principal vat report is sent.  When sending vat reports, the system vat accounts are emptied, but the account balances might have decimal precision and the vat reports do not.  If so, the rounding difference is posted to the rounding account.</param>
        /// <param name="useVatCompensation">Information on whether this client are entitled to and uses vat compensation. If true, vat codes with first letter notation K can be used when relevant for the client.</param>
        /// <param name="vatAlternativeGrouping">vatAlternativeGrouping</param>
        /// <param name="vatNumber">The vat number of the client. The vat number will equal the organization number for norwegian clients, but will relevant in vat terms only if the property isVatRegistered is true.</param>
        /// <param name="vatPeriod">vatPeriod</param>
        /// <param name="vatReturnType">vatReturnType</param>
        [JsonConstructor]
        public VatSettingsDto(Option<VatPeriodType?> alternativeVatPeriod = default, Option<int?> alternativeVatReturnFromYear = default, Option<VatReturnType?> alternativeVatReturnType = default, Option<bool?> isVatRegistered = default, Option<bool?> reportAlternativeVatReturn = default, Option<bool?> reportVatReturnManually = default, Option<AgricultureDepartment?> roundingAccountAgricultureDepartment = default, Option<long?> roundingAccountId = default, Option<long?> roundingAccountNo = default, Option<bool?> useVatCompensation = default, Option<VatAlternativeGrouping?> vatAlternativeGrouping = default, Option<string?> vatNumber = default, Option<VatPeriodType?> vatPeriod = default, Option<VatReturnType?> vatReturnType = default)
        {
            AlternativeVatPeriodOption = alternativeVatPeriod;
            AlternativeVatReturnFromYearOption = alternativeVatReturnFromYear;
            AlternativeVatReturnTypeOption = alternativeVatReturnType;
            IsVatRegisteredOption = isVatRegistered;
            ReportAlternativeVatReturnOption = reportAlternativeVatReturn;
            ReportVatReturnManuallyOption = reportVatReturnManually;
            RoundingAccountAgricultureDepartmentOption = roundingAccountAgricultureDepartment;
            RoundingAccountIdOption = roundingAccountId;
            RoundingAccountNoOption = roundingAccountNo;
            UseVatCompensationOption = useVatCompensation;
            VatAlternativeGroupingOption = vatAlternativeGrouping;
            VatNumberOption = vatNumber;
            VatPeriodOption = vatPeriod;
            VatReturnTypeOption = vatReturnType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AlternativeVatPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatPeriodType?> AlternativeVatPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativeVatPeriod
        /// </summary>
        [JsonPropertyName("AlternativeVatPeriod")]
        public VatPeriodType? AlternativeVatPeriod { get { return this.AlternativeVatPeriodOption; } set { this.AlternativeVatPeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlternativeVatReturnType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnType?> AlternativeVatReturnTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets AlternativeVatReturnType
        /// </summary>
        [JsonPropertyName("AlternativeVatReturnType")]
        public VatReturnType? AlternativeVatReturnType { get { return this.AlternativeVatReturnTypeOption; } set { this.AlternativeVatReturnTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RoundingAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> RoundingAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets RoundingAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("RoundingAccountAgricultureDepartment")]
        public AgricultureDepartment? RoundingAccountAgricultureDepartment { get { return this.RoundingAccountAgricultureDepartmentOption; } set { this.RoundingAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatAlternativeGrouping
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatAlternativeGrouping?> VatAlternativeGroupingOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatAlternativeGrouping
        /// </summary>
        [JsonPropertyName("VatAlternativeGrouping")]
        public VatAlternativeGrouping? VatAlternativeGrouping { get { return this.VatAlternativeGroupingOption; } set { this.VatAlternativeGroupingOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatPeriodType?> VatPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatPeriod
        /// </summary>
        [JsonPropertyName("VatPeriod")]
        public VatPeriodType? VatPeriod { get { return this.VatPeriodOption; } set { this.VatPeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatReturnType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnType?> VatReturnTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnType
        /// </summary>
        [JsonPropertyName("VatReturnType")]
        public VatReturnType? VatReturnType { get { return this.VatReturnTypeOption; } set { this.VatReturnTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AlternativeVatReturnFromYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AlternativeVatReturnFromYearOption { get; }

        /// <summary>
        /// The year the client wants to start reporting additional vat returns. Relevant only if ReportAlternativeVatReturn is true.
        /// </summary>
        /// <value>The year the client wants to start reporting additional vat returns. Relevant only if ReportAlternativeVatReturn is true.</value>
        /* <example>2024</example> */
        [JsonPropertyName("AlternativeVatReturnFromYear")]
        public int? AlternativeVatReturnFromYear { get { return this.AlternativeVatReturnFromYearOption; } }

        /// <summary>
        /// Used to track the state of IsVatRegistered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVatRegisteredOption { get; }

        /// <summary>
        /// Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert). If false, vat is not applied to outgoing invoices.
        /// </summary>
        /// <value>Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert). If false, vat is not applied to outgoing invoices.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsVatRegistered")]
        public bool? IsVatRegistered { get { return this.IsVatRegisteredOption; } }

        /// <summary>
        /// Used to track the state of ReportAlternativeVatReturn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReportAlternativeVatReturnOption { get; }

        /// <summary>
        /// Information on whether this client report additional vat return for some departments.
        /// </summary>
        /// <value>Information on whether this client report additional vat return for some departments.</value>
        [JsonPropertyName("ReportAlternativeVatReturn")]
        public bool? ReportAlternativeVatReturn { get { return this.ReportAlternativeVatReturnOption; } }

        /// <summary>
        /// Used to track the state of ReportVatReturnManually
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReportVatReturnManuallyOption { get; }

        /// <summary>
        /// Information on whether this client report vat returns manually. True if the client are obliged to submit more than one type of vat return, are jointly registered or shall deliver vat return for vat compensation or reverse tax liability.
        /// </summary>
        /// <value>Information on whether this client report vat returns manually. True if the client are obliged to submit more than one type of vat return, are jointly registered or shall deliver vat return for vat compensation or reverse tax liability.</value>
        /* <example>false</example> */
        [JsonPropertyName("ReportVatReturnManually")]
        public bool? ReportVatReturnManually { get { return this.ReportVatReturnManuallyOption; } }

        /// <summary>
        /// Used to track the state of RoundingAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RoundingAccountIdOption { get; }

        /// <summary>
        /// The identifier of the rounding account number.
        /// </summary>
        /// <value>The identifier of the rounding account number.</value>
        /* <example>123456</example> */
        [JsonPropertyName("RoundingAccountId")]
        public long? RoundingAccountId { get { return this.RoundingAccountIdOption; } }

        /// <summary>
        /// Used to track the state of RoundingAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> RoundingAccountNoOption { get; }

        /// <summary>
        /// The account used if rounding need to be posted when the principal vat report is sent.  When sending vat reports, the system vat accounts are emptied, but the account balances might have decimal precision and the vat reports do not.  If so, the rounding difference is posted to the rounding account.
        /// </summary>
        /// <value>The account used if rounding need to be posted when the principal vat report is sent.  When sending vat reports, the system vat accounts are emptied, but the account balances might have decimal precision and the vat reports do not.  If so, the rounding difference is posted to the rounding account.</value>
        /* <example>8160</example> */
        [JsonPropertyName("RoundingAccountNo")]
        public long? RoundingAccountNo { get { return this.RoundingAccountNoOption; } }

        /// <summary>
        /// Used to track the state of UseVatCompensation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseVatCompensationOption { get; }

        /// <summary>
        /// Information on whether this client are entitled to and uses vat compensation. If true, vat codes with first letter notation K can be used when relevant for the client.
        /// </summary>
        /// <value>Information on whether this client are entitled to and uses vat compensation. If true, vat codes with first letter notation K can be used when relevant for the client.</value>
        /* <example>false</example> */
        [JsonPropertyName("UseVatCompensation")]
        public bool? UseVatCompensation { get { return this.UseVatCompensationOption; } }

        /// <summary>
        /// Used to track the state of VatNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VatNumberOption { get; }

        /// <summary>
        /// The vat number of the client. The vat number will equal the organization number for norwegian clients, but will relevant in vat terms only if the property isVatRegistered is true.
        /// </summary>
        /// <value>The vat number of the client. The vat number will equal the organization number for norwegian clients, but will relevant in vat terms only if the property isVatRegistered is true.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("VatNumber")]
        public string? VatNumber { get { return this.VatNumberOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VatSettingsDto {\n");
            sb.Append("  AlternativeVatPeriod: ").Append(AlternativeVatPeriod).Append("\n");
            sb.Append("  AlternativeVatReturnFromYear: ").Append(AlternativeVatReturnFromYear).Append("\n");
            sb.Append("  AlternativeVatReturnType: ").Append(AlternativeVatReturnType).Append("\n");
            sb.Append("  IsVatRegistered: ").Append(IsVatRegistered).Append("\n");
            sb.Append("  ReportAlternativeVatReturn: ").Append(ReportAlternativeVatReturn).Append("\n");
            sb.Append("  ReportVatReturnManually: ").Append(ReportVatReturnManually).Append("\n");
            sb.Append("  RoundingAccountAgricultureDepartment: ").Append(RoundingAccountAgricultureDepartment).Append("\n");
            sb.Append("  RoundingAccountId: ").Append(RoundingAccountId).Append("\n");
            sb.Append("  RoundingAccountNo: ").Append(RoundingAccountNo).Append("\n");
            sb.Append("  UseVatCompensation: ").Append(UseVatCompensation).Append("\n");
            sb.Append("  VatAlternativeGrouping: ").Append(VatAlternativeGrouping).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  VatPeriod: ").Append(VatPeriod).Append("\n");
            sb.Append("  VatReturnType: ").Append(VatReturnType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatSettingsDto" />
    /// </summary>
    public class VatSettingsDtoJsonConverter : JsonConverter<VatSettingsDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="VatSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VatSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<VatPeriodType?> alternativeVatPeriod = default;
            Option<int?> alternativeVatReturnFromYear = default;
            Option<VatReturnType?> alternativeVatReturnType = default;
            Option<bool?> isVatRegistered = default;
            Option<bool?> reportAlternativeVatReturn = default;
            Option<bool?> reportVatReturnManually = default;
            Option<AgricultureDepartment?> roundingAccountAgricultureDepartment = default;
            Option<long?> roundingAccountId = default;
            Option<long?> roundingAccountNo = default;
            Option<bool?> useVatCompensation = default;
            Option<VatAlternativeGrouping?> vatAlternativeGrouping = default;
            Option<string?> vatNumber = default;
            Option<VatPeriodType?> vatPeriod = default;
            Option<VatReturnType?> vatReturnType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AlternativeVatPeriod":
                            string? alternativeVatPeriodRawValue = utf8JsonReader.GetString();
                            if (alternativeVatPeriodRawValue != null)
                                alternativeVatPeriod = new Option<VatPeriodType?>(VatPeriodTypeValueConverter.FromStringOrDefault(alternativeVatPeriodRawValue));
                            break;
                        case "AlternativeVatReturnFromYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                alternativeVatReturnFromYear = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "AlternativeVatReturnType":
                            string? alternativeVatReturnTypeRawValue = utf8JsonReader.GetString();
                            if (alternativeVatReturnTypeRawValue != null)
                                alternativeVatReturnType = new Option<VatReturnType?>(VatReturnTypeValueConverter.FromStringOrDefault(alternativeVatReturnTypeRawValue));
                            break;
                        case "IsVatRegistered":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isVatRegistered = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ReportAlternativeVatReturn":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reportAlternativeVatReturn = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ReportVatReturnManually":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reportVatReturnManually = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "RoundingAccountAgricultureDepartment":
                            string? roundingAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (roundingAccountAgricultureDepartmentRawValue != null)
                                roundingAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(roundingAccountAgricultureDepartmentRawValue));
                            break;
                        case "RoundingAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roundingAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "RoundingAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roundingAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "UseVatCompensation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useVatCompensation = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "VatAlternativeGrouping":
                            string? vatAlternativeGroupingRawValue = utf8JsonReader.GetString();
                            if (vatAlternativeGroupingRawValue != null)
                                vatAlternativeGrouping = new Option<VatAlternativeGrouping?>(VatAlternativeGroupingValueConverter.FromStringOrDefault(vatAlternativeGroupingRawValue));
                            break;
                        case "VatNumber":
                            vatNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "VatPeriod":
                            string? vatPeriodRawValue = utf8JsonReader.GetString();
                            if (vatPeriodRawValue != null)
                                vatPeriod = new Option<VatPeriodType?>(VatPeriodTypeValueConverter.FromStringOrDefault(vatPeriodRawValue));
                            break;
                        case "VatReturnType":
                            string? vatReturnTypeRawValue = utf8JsonReader.GetString();
                            if (vatReturnTypeRawValue != null)
                                vatReturnType = new Option<VatReturnType?>(VatReturnTypeValueConverter.FromStringOrDefault(vatReturnTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VatSettingsDto(alternativeVatPeriod, alternativeVatReturnFromYear, alternativeVatReturnType, isVatRegistered, reportAlternativeVatReturn, reportVatReturnManually, roundingAccountAgricultureDepartment, roundingAccountId, roundingAccountNo, useVatCompensation, vatAlternativeGrouping, vatNumber, vatPeriod, vatReturnType);
        }

        /// <summary>
        /// Serializes a <see cref="VatSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VatSettingsDto vatSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vatSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VatSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VatSettingsDto vatSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vatSettingsDto.AlternativeVatPeriodOption.IsSet)
                if (vatSettingsDto.AlternativeVatPeriodOption!.Value != null)
                {
                    var alternativeVatPeriodRawValue = VatPeriodTypeValueConverter.ToJsonValue(vatSettingsDto.AlternativeVatPeriodOption.Value!.Value);
                    writer.WriteString("AlternativeVatPeriod", alternativeVatPeriodRawValue);
                }
                else
                    writer.WriteNull("AlternativeVatPeriod");
            if (vatSettingsDto.AlternativeVatReturnFromYearOption.IsSet)
                if (vatSettingsDto.AlternativeVatReturnFromYearOption.Value != null)
                    writer.WriteNumber("AlternativeVatReturnFromYear", vatSettingsDto.AlternativeVatReturnFromYearOption.Value!.Value);
                else
                    writer.WriteNull("AlternativeVatReturnFromYear");

            if (vatSettingsDto.AlternativeVatReturnTypeOption.IsSet)
                if (vatSettingsDto.AlternativeVatReturnTypeOption!.Value != null)
                {
                    var alternativeVatReturnTypeRawValue = VatReturnTypeValueConverter.ToJsonValue(vatSettingsDto.AlternativeVatReturnTypeOption.Value!.Value);
                    writer.WriteString("AlternativeVatReturnType", alternativeVatReturnTypeRawValue);
                }
                else
                    writer.WriteNull("AlternativeVatReturnType");
            if (vatSettingsDto.IsVatRegisteredOption.IsSet)
                if (vatSettingsDto.IsVatRegisteredOption.Value != null)
                    writer.WriteBoolean("IsVatRegistered", vatSettingsDto.IsVatRegisteredOption.Value!.Value);
                else
                    writer.WriteNull("IsVatRegistered");

            if (vatSettingsDto.ReportAlternativeVatReturnOption.IsSet)
                if (vatSettingsDto.ReportAlternativeVatReturnOption.Value != null)
                    writer.WriteBoolean("ReportAlternativeVatReturn", vatSettingsDto.ReportAlternativeVatReturnOption.Value!.Value);
                else
                    writer.WriteNull("ReportAlternativeVatReturn");

            if (vatSettingsDto.ReportVatReturnManuallyOption.IsSet)
                if (vatSettingsDto.ReportVatReturnManuallyOption.Value != null)
                    writer.WriteBoolean("ReportVatReturnManually", vatSettingsDto.ReportVatReturnManuallyOption.Value!.Value);
                else
                    writer.WriteNull("ReportVatReturnManually");

            if (vatSettingsDto.RoundingAccountAgricultureDepartmentOption.IsSet)
                if (vatSettingsDto.RoundingAccountAgricultureDepartmentOption!.Value != null)
                {
                    var roundingAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(vatSettingsDto.RoundingAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("RoundingAccountAgricultureDepartment", roundingAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("RoundingAccountAgricultureDepartment");
            if (vatSettingsDto.RoundingAccountIdOption.IsSet)
                if (vatSettingsDto.RoundingAccountIdOption.Value != null)
                    writer.WriteNumber("RoundingAccountId", vatSettingsDto.RoundingAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("RoundingAccountId");

            if (vatSettingsDto.RoundingAccountNoOption.IsSet)
                if (vatSettingsDto.RoundingAccountNoOption.Value != null)
                    writer.WriteNumber("RoundingAccountNo", vatSettingsDto.RoundingAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("RoundingAccountNo");

            if (vatSettingsDto.UseVatCompensationOption.IsSet)
                if (vatSettingsDto.UseVatCompensationOption.Value != null)
                    writer.WriteBoolean("UseVatCompensation", vatSettingsDto.UseVatCompensationOption.Value!.Value);
                else
                    writer.WriteNull("UseVatCompensation");

            if (vatSettingsDto.VatAlternativeGroupingOption.IsSet)
                if (vatSettingsDto.VatAlternativeGroupingOption!.Value != null)
                {
                    var vatAlternativeGroupingRawValue = VatAlternativeGroupingValueConverter.ToJsonValue(vatSettingsDto.VatAlternativeGroupingOption.Value!.Value);
                    writer.WriteString("VatAlternativeGrouping", vatAlternativeGroupingRawValue);
                }
                else
                    writer.WriteNull("VatAlternativeGrouping");
            if (vatSettingsDto.VatNumberOption.IsSet)
                if (vatSettingsDto.VatNumberOption.Value != null)
                    writer.WriteString("VatNumber", vatSettingsDto.VatNumber);
                else
                    writer.WriteNull("VatNumber");

            if (vatSettingsDto.VatPeriodOption.IsSet)
                if (vatSettingsDto.VatPeriodOption!.Value != null)
                {
                    var vatPeriodRawValue = VatPeriodTypeValueConverter.ToJsonValue(vatSettingsDto.VatPeriodOption.Value!.Value);
                    writer.WriteString("VatPeriod", vatPeriodRawValue);
                }
                else
                    writer.WriteNull("VatPeriod");
            if (vatSettingsDto.VatReturnTypeOption.IsSet)
                if (vatSettingsDto.VatReturnTypeOption!.Value != null)
                {
                    var vatReturnTypeRawValue = VatReturnTypeValueConverter.ToJsonValue(vatSettingsDto.VatReturnTypeOption.Value!.Value);
                    writer.WriteString("VatReturnType", vatReturnTypeRawValue);
                }
                else
                    writer.WriteNull("VatReturnType");
        }
    }
}
