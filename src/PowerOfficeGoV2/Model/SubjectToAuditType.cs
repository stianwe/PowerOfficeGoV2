// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Available audit states of the customer&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Yes&lt;/i&gt; - The customer is subject of audit&lt;/li&gt;&lt;li&gt;&lt;i&gt;OptedOut&lt;/i&gt; - The customer may be subject of audit but have opted out&lt;/li&gt;&lt;li&gt;&lt;i&gt;No&lt;/i&gt; - Customer is not subject of audit&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Available audit states of the customer&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Yes&lt;/i&gt; - The customer is subject of audit&lt;/li&gt;&lt;li&gt;&lt;i&gt;OptedOut&lt;/i&gt; - The customer may be subject of audit but have opted out&lt;/li&gt;&lt;li&gt;&lt;i&gt;No&lt;/i&gt; - Customer is not subject of audit&lt;/li&gt;&lt;/ul&gt;</value>
    public enum SubjectToAuditType
    {
        /// <summary>
        /// Enum Yes for value: Yes
        /// </summary>
        Yes = 1,

        /// <summary>
        /// Enum OptedOut for value: OptedOut
        /// </summary>
        OptedOut = 2,

        /// <summary>
        /// Enum No for value: No
        /// </summary>
        No = 3
    }

    /// <summary>
    /// Converts <see cref="SubjectToAuditType"/> to and from the JSON value
    /// </summary>
    public static class SubjectToAuditTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SubjectToAuditType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SubjectToAuditType FromString(string value)
        {
            if (value.Equals("Yes"))
                return SubjectToAuditType.Yes;

            if (value.Equals("OptedOut"))
                return SubjectToAuditType.OptedOut;

            if (value.Equals("No"))
                return SubjectToAuditType.No;

            throw new NotImplementedException($"Could not convert value to type SubjectToAuditType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SubjectToAuditType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SubjectToAuditType? FromStringOrDefault(string value)
        {
            if (value.Equals("Yes"))
                return SubjectToAuditType.Yes;

            if (value.Equals("OptedOut"))
                return SubjectToAuditType.OptedOut;

            if (value.Equals("No"))
                return SubjectToAuditType.No;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SubjectToAuditType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SubjectToAuditType value)
        {
            if (value == SubjectToAuditType.Yes)
                return "Yes";

            if (value == SubjectToAuditType.OptedOut)
                return "OptedOut";

            if (value == SubjectToAuditType.No)
                return "No";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubjectToAuditType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SubjectToAuditTypeJsonConverter : JsonConverter<SubjectToAuditType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SubjectToAuditType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SubjectToAuditType? result = rawValue == null
                ? null
                : SubjectToAuditTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SubjectToAuditType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subjectToAuditType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SubjectToAuditType subjectToAuditType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(subjectToAuditType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubjectToAuditType"/>
    /// </summary>
    public class SubjectToAuditTypeNullableJsonConverter : JsonConverter<SubjectToAuditType?>
    {
        /// <summary>
        /// Returns a SubjectToAuditType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SubjectToAuditType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SubjectToAuditType? result = rawValue == null
                ? null
                : SubjectToAuditTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subjectToAuditType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SubjectToAuditType? subjectToAuditType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(subjectToAuditType?.ToString() ?? "null");
        }
    }
}
