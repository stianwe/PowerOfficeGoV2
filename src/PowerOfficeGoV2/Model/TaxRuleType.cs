// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining tax rule of an employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Ordinary&lt;/i&gt; - Ordinary employment, i.e. employees working in the service of others for pay or other remuneration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Svalbard&lt;/i&gt; - Svalbard income.&lt;/li&gt;&lt;li&gt;&lt;i&gt;JanMayenAndDependencies&lt;/i&gt; - Jan Mayen and the Norwegian dependencies.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SpecialAllowanceForSeafarers&lt;/i&gt; - Special allowance for seafarers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TaxFreeOrganisation&lt;/i&gt; - Tax-exempt organisation.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining tax rule of an employment.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Ordinary&lt;/i&gt; - Ordinary employment, i.e. employees working in the service of others for pay or other remuneration.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Svalbard&lt;/i&gt; - Svalbard income.&lt;/li&gt;&lt;li&gt;&lt;i&gt;JanMayenAndDependencies&lt;/i&gt; - Jan Mayen and the Norwegian dependencies.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SpecialAllowanceForSeafarers&lt;/i&gt; - Special allowance for seafarers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TaxFreeOrganisation&lt;/i&gt; - Tax-exempt organisation.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum TaxRuleType
    {
        /// <summary>
        /// Enum Ordinary for value: Ordinary
        /// </summary>
        Ordinary = 1,

        /// <summary>
        /// Enum Svalbard for value: Svalbard
        /// </summary>
        Svalbard = 2,

        /// <summary>
        /// Enum JanMayenAndDependencies for value: JanMayenAndDependencies
        /// </summary>
        JanMayenAndDependencies = 3,

        /// <summary>
        /// Enum SpecialAllowanceForSeafarers for value: SpecialAllowanceForSeafarers
        /// </summary>
        SpecialAllowanceForSeafarers = 4,

        /// <summary>
        /// Enum TaxFreeOrganisation for value: TaxFreeOrganisation
        /// </summary>
        TaxFreeOrganisation = 5
    }

    /// <summary>
    /// Converts <see cref="TaxRuleType"/> to and from the JSON value
    /// </summary>
    public static class TaxRuleTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="TaxRuleType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxRuleType FromString(string value)
        {
            if (value.Equals("Ordinary"))
                return TaxRuleType.Ordinary;

            if (value.Equals("Svalbard"))
                return TaxRuleType.Svalbard;

            if (value.Equals("JanMayenAndDependencies"))
                return TaxRuleType.JanMayenAndDependencies;

            if (value.Equals("SpecialAllowanceForSeafarers"))
                return TaxRuleType.SpecialAllowanceForSeafarers;

            if (value.Equals("TaxFreeOrganisation"))
                return TaxRuleType.TaxFreeOrganisation;

            throw new NotImplementedException($"Could not convert value to type TaxRuleType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="TaxRuleType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TaxRuleType? FromStringOrDefault(string value)
        {
            if (value.Equals("Ordinary"))
                return TaxRuleType.Ordinary;

            if (value.Equals("Svalbard"))
                return TaxRuleType.Svalbard;

            if (value.Equals("JanMayenAndDependencies"))
                return TaxRuleType.JanMayenAndDependencies;

            if (value.Equals("SpecialAllowanceForSeafarers"))
                return TaxRuleType.SpecialAllowanceForSeafarers;

            if (value.Equals("TaxFreeOrganisation"))
                return TaxRuleType.TaxFreeOrganisation;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TaxRuleType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(TaxRuleType value)
        {
            if (value == TaxRuleType.Ordinary)
                return "Ordinary";

            if (value == TaxRuleType.Svalbard)
                return "Svalbard";

            if (value == TaxRuleType.JanMayenAndDependencies)
                return "JanMayenAndDependencies";

            if (value == TaxRuleType.SpecialAllowanceForSeafarers)
                return "SpecialAllowanceForSeafarers";

            if (value == TaxRuleType.TaxFreeOrganisation)
                return "TaxFreeOrganisation";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TaxRuleType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class TaxRuleTypeJsonConverter : JsonConverter<TaxRuleType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TaxRuleType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TaxRuleType? result = rawValue == null
                ? null
                : TaxRuleTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the TaxRuleType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxRuleType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TaxRuleType taxRuleType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(taxRuleType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TaxRuleType"/>
    /// </summary>
    public class TaxRuleTypeNullableJsonConverter : JsonConverter<TaxRuleType?>
    {
        /// <summary>
        /// Returns a TaxRuleType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override TaxRuleType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            TaxRuleType? result = rawValue == null
                ? null
                : TaxRuleTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxRuleType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, TaxRuleType? taxRuleType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(taxRuleType?.ToString() ?? "null");
        }
    }
}
