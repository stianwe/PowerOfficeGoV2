// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for ProductGroup read operations.
    /// </summary>
    public partial class ProductGroupDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductGroupDto" /> class.
        /// </summary>
        /// <param name="code">The code of the product group.</param>
        /// <param name="createdDateTimeOffset">The timestamp the product group entity was created.</param>
        /// <param name="createdFromImportJournalId">The created from import journal identifier (guid).  If the product group was created from an import, this property will contain the Id of the Import that created this entity.</param>
        /// <param name="description">The description of the product group.</param>
        /// <param name="id">The ID of the product group.</param>
        /// <param name="isArchived">Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the product group.</param>
        /// <param name="name">The name of the product group.</param>
        /// <param name="optionalSalesAccount">The code of the optional sales account of the product group.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</param>
        /// <param name="optionalSalesAccountAgricultureDepartment">optionalSalesAccountAgricultureDepartment</param>
        /// <param name="optionalSalesAccountId">The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</param>
        /// <param name="productType">productType</param>
        /// <param name="standardSalesAccount">The code of the standard sales account of the product group.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</param>
        /// <param name="standardSalesAccountAgricultureDepartment">standardSalesAccountAgricultureDepartment</param>
        /// <param name="standardSalesAccountId">The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</param>
        /// <param name="unitCost">The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode</param>
        /// <param name="unitPrice">The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.</param>
        [JsonConstructor]
        public ProductGroupDto(Option<string?> code = default, Option<DateTime?> createdDateTimeOffset = default, Option<Guid?> createdFromImportJournalId = default, Option<string?> description = default, Option<long?> id = default, Option<bool?> isArchived = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<string?> name = default, Option<long?> optionalSalesAccount = default, Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default, Option<long?> optionalSalesAccountId = default, Option<ProductType?> productType = default, Option<long?> standardSalesAccount = default, Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default, Option<long?> standardSalesAccountId = default, Option<double?> unitCost = default, Option<UnitOfMeasureType?> unitOfMeasureCode = default, Option<double?> unitPrice = default)
        {
            CodeOption = code;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreatedFromImportJournalIdOption = createdFromImportJournalId;
            DescriptionOption = description;
            IdOption = id;
            IsArchivedOption = isArchived;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            NameOption = name;
            OptionalSalesAccountOption = optionalSalesAccount;
            OptionalSalesAccountAgricultureDepartmentOption = optionalSalesAccountAgricultureDepartment;
            OptionalSalesAccountIdOption = optionalSalesAccountId;
            ProductTypeOption = productType;
            StandardSalesAccountOption = standardSalesAccount;
            StandardSalesAccountAgricultureDepartmentOption = standardSalesAccountAgricultureDepartment;
            StandardSalesAccountIdOption = standardSalesAccountId;
            UnitCostOption = unitCost;
            UnitOfMeasureCodeOption = unitOfMeasureCode;
            UnitPriceOption = unitPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> OptionalSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("OptionalSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? OptionalSalesAccountAgricultureDepartment { get { return this.OptionalSalesAccountAgricultureDepartmentOption; } set { this.OptionalSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProductType?> ProductTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("ProductType")]
        public ProductType? ProductType { get { return this.ProductTypeOption; } set { this.ProductTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> StandardSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("StandardSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? StandardSalesAccountAgricultureDepartment { get { return this.StandardSalesAccountAgricultureDepartmentOption; } set { this.StandardSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitOfMeasureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureCode
        /// </summary>
        [JsonPropertyName("UnitOfMeasureCode")]
        public UnitOfMeasureType? UnitOfMeasureCode { get { return this.UnitOfMeasureCodeOption; } set { this.UnitOfMeasureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the product group.
        /// </summary>
        /// <value>The code of the product group.</value>
        /* <example>BA12</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the product group entity was created.
        /// </summary>
        /// <value>The timestamp the product group entity was created.</value>
        /* <example>2023-09-07T14:13:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreatedFromImportJournalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> CreatedFromImportJournalIdOption { get; }

        /// <summary>
        /// The created from import journal identifier (guid).  If the product group was created from an import, this property will contain the Id of the Import that created this entity.
        /// </summary>
        /// <value>The created from import journal identifier (guid).  If the product group was created from an import, this property will contain the Id of the Import that created this entity.</value>
        /* <example>f575b4b0-55be-4b56-b01f-44b204df82c5</example> */
        [JsonPropertyName("CreatedFromImportJournalId")]
        public Guid? CreatedFromImportJournalId { get { return this.CreatedFromImportJournalIdOption; } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the product group.
        /// </summary>
        /// <value>The description of the product group.</value>
        /* <example>Bottomless boxes of mysteries</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The ID of the product group.
        /// </summary>
        /// <value>The ID of the product group.</value>
        /* <example>1234</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.
        /// </summary>
        /// <value>Value indicating whether the product group is archived (set inactive).  Default is false.  Archived product groups will be unavailable for usage in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the product group.
        /// </summary>
        /// <value>The timestamp of the last change of the product group.</value>
        /* <example>2023-09-07T14:13:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The name of the product group.
        /// </summary>
        /// <value>The name of the product group.</value>
        /* <example>Big blue boxes</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionalSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountOption { get; }

        /// <summary>
        /// The code of the optional sales account of the product group.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.
        /// </summary>
        /// <value>The code of the optional sales account of the product group.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</value>
        /* <example>3100</example> */
        [JsonPropertyName("OptionalSalesAccount")]
        public long? OptionalSalesAccount { get { return this.OptionalSalesAccountOption; } }

        /// <summary>
        /// Used to track the state of OptionalSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.
        /// </summary>
        /// <value>The id of the optional sales account of the product group.  Products assigned to this product group will inherit the optional sales account from the group, if not set/overridden on the product object.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product group will inherit the optional sales account from the the general sales settings on the client.</value>
        /* <example>123456</example> */
        [JsonPropertyName("OptionalSalesAccountId")]
        public long? OptionalSalesAccountId { get { return this.OptionalSalesAccountIdOption; } set { this.OptionalSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountOption { get; }

        /// <summary>
        /// The code of the standard sales account of the product group.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.
        /// </summary>
        /// <value>The code of the standard sales account of the product group.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</value>
        /* <example>3000</example> */
        [JsonPropertyName("StandardSalesAccount")]
        public long? StandardSalesAccount { get { return this.StandardSalesAccountOption; } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.
        /// </summary>
        /// <value>The id of the standard sales account of the product group.  Products assigned to this product group will inherit the standard sales account from the group, if not set/overridden on the product object.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product group will inherit the standard sales account from the general sales settings on the client.</value>
        /* <example>123456</example> */
        [JsonPropertyName("StandardSalesAccountId")]
        public long? StandardSalesAccountId { get { return this.StandardSalesAccountIdOption; } set { this.StandardSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitCostOption { get; private set; }

        /// <summary>
        /// The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.
        /// </summary>
        /// <value>The cost per unit of the product group.  Products assigned to this group will inherit the unitCost from the group, if not set/overridden on the product object.</value>
        /* <example>69.42</example> */
        [JsonPropertyName("UnitCost")]
        public double? UnitCost { get { return this.UnitCostOption; } set { this.UnitCostOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitPriceOption { get; private set; }

        /// <summary>
        /// The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.
        /// </summary>
        /// <value>The sales price per unit of the product group.  Products assigned to this group will inherit the unitPrice from the group, if not set/overridden on the product object.</value>
        /* <example>100.12</example> */
        [JsonPropertyName("UnitPrice")]
        public double? UnitPrice { get { return this.UnitPriceOption; } set { this.UnitPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductGroupDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreatedFromImportJournalId: ").Append(CreatedFromImportJournalId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OptionalSalesAccount: ").Append(OptionalSalesAccount).Append("\n");
            sb.Append("  OptionalSalesAccountAgricultureDepartment: ").Append(OptionalSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  OptionalSalesAccountId: ").Append(OptionalSalesAccountId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  StandardSalesAccount: ").Append(StandardSalesAccount).Append("\n");
            sb.Append("  StandardSalesAccountAgricultureDepartment: ").Append(StandardSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  StandardSalesAccountId: ").Append(StandardSalesAccountId).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 200.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductGroupDto" />
    /// </summary>
    public class ProductGroupDtoJsonConverter : JsonConverter<ProductGroupDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ProductGroupDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProductGroupDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<Guid?> createdFromImportJournalId = default;
            Option<string?> description = default;
            Option<long?> id = default;
            Option<bool?> isArchived = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<string?> name = default;
            Option<long?> optionalSalesAccount = default;
            Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default;
            Option<long?> optionalSalesAccountId = default;
            Option<ProductType?> productType = default;
            Option<long?> standardSalesAccount = default;
            Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default;
            Option<long?> standardSalesAccountId = default;
            Option<double?> unitCost = default;
            Option<UnitOfMeasureType?> unitOfMeasureCode = default;
            Option<double?> unitPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreatedFromImportJournalId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdFromImportJournalId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OptionalSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OptionalSalesAccountAgricultureDepartment":
                            string? optionalSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (optionalSalesAccountAgricultureDepartmentRawValue != null)
                                optionalSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(optionalSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "OptionalSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductType":
                            string? productTypeRawValue = utf8JsonReader.GetString();
                            if (productTypeRawValue != null)
                                productType = new Option<ProductType?>(ProductTypeValueConverter.FromStringOrDefault(productTypeRawValue));
                            break;
                        case "StandardSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StandardSalesAccountAgricultureDepartment":
                            string? standardSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (standardSalesAccountAgricultureDepartmentRawValue != null)
                                standardSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(standardSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "StandardSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "UnitCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitCost = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitOfMeasureCode":
                            string? unitOfMeasureCodeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureCodeRawValue != null)
                                unitOfMeasureCode = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureCodeRawValue));
                            break;
                        case "UnitPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class ProductGroupDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ProductGroupDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class ProductGroupDto.");

            return new ProductGroupDto(code, createdDateTimeOffset, createdFromImportJournalId, description, id, isArchived, lastChangedDateTimeOffset, name, optionalSalesAccount, optionalSalesAccountAgricultureDepartment, optionalSalesAccountId, productType, standardSalesAccount, standardSalesAccountAgricultureDepartment, standardSalesAccountId, unitCost, unitOfMeasureCode, unitPrice);
        }

        /// <summary>
        /// Serializes a <see cref="ProductGroupDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productGroupDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProductGroupDto productGroupDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, productGroupDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProductGroupDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productGroupDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProductGroupDto productGroupDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (productGroupDto.CodeOption.IsSet)
                if (productGroupDto.CodeOption.Value != null)
                    writer.WriteString("Code", productGroupDto.Code);
                else
                    writer.WriteNull("Code");

            if (productGroupDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", productGroupDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (productGroupDto.CreatedFromImportJournalIdOption.IsSet)
                if (productGroupDto.CreatedFromImportJournalIdOption.Value != null)
                    writer.WriteString("CreatedFromImportJournalId", productGroupDto.CreatedFromImportJournalIdOption.Value!.Value);
                else
                    writer.WriteNull("CreatedFromImportJournalId");

            if (productGroupDto.DescriptionOption.IsSet)
                if (productGroupDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", productGroupDto.Description);
                else
                    writer.WriteNull("Description");

            if (productGroupDto.IdOption.IsSet)
                writer.WriteNumber("Id", productGroupDto.IdOption.Value!.Value);

            if (productGroupDto.IsArchivedOption.IsSet)
                if (productGroupDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", productGroupDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (productGroupDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", productGroupDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (productGroupDto.NameOption.IsSet)
                if (productGroupDto.NameOption.Value != null)
                    writer.WriteString("Name", productGroupDto.Name);
                else
                    writer.WriteNull("Name");

            if (productGroupDto.OptionalSalesAccountOption.IsSet)
                if (productGroupDto.OptionalSalesAccountOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccount", productGroupDto.OptionalSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccount");

            if (productGroupDto.OptionalSalesAccountAgricultureDepartmentOption.IsSet)
                if (productGroupDto.OptionalSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var optionalSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productGroupDto.OptionalSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("OptionalSalesAccountAgricultureDepartment", optionalSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("OptionalSalesAccountAgricultureDepartment");
            if (productGroupDto.OptionalSalesAccountIdOption.IsSet)
                if (productGroupDto.OptionalSalesAccountIdOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccountId", productGroupDto.OptionalSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccountId");

            if (productGroupDto.ProductTypeOption.IsSet)
                if (productGroupDto.ProductTypeOption!.Value != null)
                {
                    var productTypeRawValue = ProductTypeValueConverter.ToJsonValue(productGroupDto.ProductTypeOption.Value!.Value);
                    writer.WriteString("ProductType", productTypeRawValue);
                }
                else
                    writer.WriteNull("ProductType");
            if (productGroupDto.StandardSalesAccountOption.IsSet)
                if (productGroupDto.StandardSalesAccountOption.Value != null)
                    writer.WriteNumber("StandardSalesAccount", productGroupDto.StandardSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccount");

            if (productGroupDto.StandardSalesAccountAgricultureDepartmentOption.IsSet)
                if (productGroupDto.StandardSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var standardSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productGroupDto.StandardSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("StandardSalesAccountAgricultureDepartment", standardSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("StandardSalesAccountAgricultureDepartment");
            if (productGroupDto.StandardSalesAccountIdOption.IsSet)
                if (productGroupDto.StandardSalesAccountIdOption.Value != null)
                    writer.WriteNumber("StandardSalesAccountId", productGroupDto.StandardSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccountId");

            if (productGroupDto.UnitCostOption.IsSet)
                if (productGroupDto.UnitCostOption.Value != null)
                    writer.WriteNumber("UnitCost", productGroupDto.UnitCostOption.Value!.Value);
                else
                    writer.WriteNull("UnitCost");

            if (productGroupDto.UnitOfMeasureCodeOption.IsSet)
                if (productGroupDto.UnitOfMeasureCodeOption!.Value != null)
                {
                    var unitOfMeasureCodeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(productGroupDto.UnitOfMeasureCodeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureCode", unitOfMeasureCodeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureCode");
            if (productGroupDto.UnitPriceOption.IsSet)
                if (productGroupDto.UnitPriceOption.Value != null)
                    writer.WriteNumber("UnitPrice", productGroupDto.UnitPriceOption.Value!.Value);
                else
                    writer.WriteNull("UnitPrice");
        }
    }
}
