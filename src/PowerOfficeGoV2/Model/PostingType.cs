// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining the posting types of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralLedgerAccount&lt;/i&gt; - Posting on a general ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EmployeeLedgerAccount&lt;/i&gt; - Posting on a employee ledger account.                 If set, only the opposite account id is relevant to set.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining the posting types of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;GeneralLedgerAccount&lt;/i&gt; - Posting on a general ledger account.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EmployeeLedgerAccount&lt;/i&gt; - Posting on a employee ledger account.                 If set, only the opposite account id is relevant to set.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum PostingType
    {
        /// <summary>
        /// Enum GeneralLedgerAccount for value: GeneralLedgerAccount
        /// </summary>
        GeneralLedgerAccount = 1,

        /// <summary>
        /// Enum EmployeeLedgerAccount for value: EmployeeLedgerAccount
        /// </summary>
        EmployeeLedgerAccount = 2
    }

    /// <summary>
    /// Converts <see cref="PostingType"/> to and from the JSON value
    /// </summary>
    public static class PostingTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PostingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PostingType FromString(string value)
        {
            if (value.Equals("GeneralLedgerAccount"))
                return PostingType.GeneralLedgerAccount;

            if (value.Equals("EmployeeLedgerAccount"))
                return PostingType.EmployeeLedgerAccount;

            throw new NotImplementedException($"Could not convert value to type PostingType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PostingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PostingType? FromStringOrDefault(string value)
        {
            if (value.Equals("GeneralLedgerAccount"))
                return PostingType.GeneralLedgerAccount;

            if (value.Equals("EmployeeLedgerAccount"))
                return PostingType.EmployeeLedgerAccount;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PostingType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PostingType value)
        {
            if (value == PostingType.GeneralLedgerAccount)
                return "GeneralLedgerAccount";

            if (value == PostingType.EmployeeLedgerAccount)
                return "EmployeeLedgerAccount";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostingType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PostingTypeJsonConverter : JsonConverter<PostingType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PostingType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PostingType? result = rawValue == null
                ? null
                : PostingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PostingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PostingType postingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(postingType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostingType"/>
    /// </summary>
    public class PostingTypeNullableJsonConverter : JsonConverter<PostingType?>
    {
        /// <summary>
        /// Returns a PostingType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PostingType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PostingType? result = rawValue == null
                ? null
                : PostingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PostingType? postingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(postingType?.ToString() ?? "null");
        }
    }
}
