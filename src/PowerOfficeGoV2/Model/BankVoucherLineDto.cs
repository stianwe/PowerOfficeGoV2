// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The lines of the bank voucher
    /// </summary>
    public partial class BankVoucherLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankVoucherLineDto" /> class.
        /// </summary>
        /// <param name="postingDate">The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency  conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</param>
        /// <param name="accountId">The id of the general ledger account or the subledger account to post the amount.</param>
        /// <param name="cid">The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.</param>
        /// <param name="createdDateTimeOffset">The timestamp the year end voucher entity was created.</param>
        /// <param name="currencyAmount">The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code. The amount must be a positive or negative number not 0.</param>
        /// <param name="currencyCode">The currency code of the voucher line. Will inherit the currency code of the voucher head if not set.  The line currency amounts will be determined in the currency specified on the line. Currencies active on the  client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate. Always base 1.                Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set. The rates in Go are retrieved  from ECB via api.</param>
        /// <param name="customMatchingReference">The custom matching reference of the line. This property may be used for matching purposes on sub-ledger  accounts, where entries posted with a CustomMatchingReference will be matched immediately with existing entries  in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are  already matched out).</param>
        /// <param name="departmentId">The department Id.</param>
        /// <param name="description">The description of the voucher line.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the line.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the line.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the line.</param>
        /// <param name="externalLineReference">The external line reference associated with the line. This property can only be set using the api, in order  to reference the external system&#39;s line. Can be used to correlate/duplicate check transactions.</param>
        /// <param name="id">A value that uniquely identifies the voucher objects line. The id is assigned by Go when the entry is  created. This id have no relation to the account transaction id posted by the system.</param>
        /// <param name="invoiceNo">The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.</param>
        /// <param name="locationId">The id of the location dimension associated with the line.</param>
        /// <param name="productId">The product id associated with the line.</param>
        /// <param name="projectId">The id of the project associated with the line.</param>
        /// <param name="quantity">The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</param>
        /// <param name="quantity2">The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</param>
        /// <param name="vatId">The id of the vat code used for the credit entry.</param>
        /// <param name="vatReturnSpecification">vatReturnSpecification</param>
        [JsonConstructor]
        public BankVoucherLineDto(DateTimeOffset postingDate, Option<long?> accountId = default, Option<string?> cid = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<string?> customMatchingReference = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<string?> externalLineReference = default, Option<long?> id = default, Option<string?> invoiceNo = default, Option<long?> locationId = default, Option<long?> productId = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> quantity2 = default, Option<int?> vatId = default, Option<VatReturnSpecification?> vatReturnSpecification = default)
        {
            PostingDate = postingDate;
            AccountIdOption = accountId;
            CidOption = cid;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CustomMatchingReferenceOption = customMatchingReference;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            ExternalLineReferenceOption = externalLineReference;
            IdOption = id;
            InvoiceNoOption = invoiceNo;
            LocationIdOption = locationId;
            ProductIdOption = productId;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            Quantity2Option = quantity2;
            VatIdOption = vatId;
            VatReturnSpecificationOption = vatReturnSpecification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> VatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets VatReturnSpecification
        /// </summary>
        [JsonPropertyName("VatReturnSpecification")]
        public VatReturnSpecification? VatReturnSpecification { get { return this.VatReturnSpecificationOption; } set { this.VatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency  conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.
        /// </summary>
        /// <value>The posting date.  This is the date of effect in the accounting system for the Amount and CurrencyAmount (also the currency  conversion date used by Go if the currency rate was not set explicit when posted).  Always present on transactions.</value>
        /* <example>Tue Sep 28 02:00:00 CEST 2021</example> */
        [JsonPropertyName("PostingDate")]
        public DateTimeOffset PostingDate { get; set; }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account or the subledger account to post the amount.
        /// </summary>
        /// <value>The id of the general ledger account or the subledger account to post the amount.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } set { this.AccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; }

        /// <summary>
        /// The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if present.  Entries with the opposite amounts and the same cid will be matched on the sub-ledger account, if the client use cid and the items are not already matched out.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; private set; }

        /// <summary>
        /// The timestamp the year end voucher entity was created.
        /// </summary>
        /// <value>The timestamp the year end voucher entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } set { this.CreatedDateTimeOffsetOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code. The amount must be a positive or negative number not 0.
        /// </summary>
        /// <value>The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code. The amount must be a positive or negative number not 0.</value>
        /* <example>69420</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the voucher line. Will inherit the currency code of the voucher head if not set.  The line currency amounts will be determined in the currency specified on the line. Currencies active on the  client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code of the voucher line. Will inherit the currency code of the voucher head if not set.  The line currency amounts will be determined in the currency specified on the line. Currencies active on the  client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>USD</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; private set; }

        /// <summary>
        /// The normalized currency exchange rate. Always base 1.                Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set. The rates in Go are retrieved  from ECB via api.
        /// </summary>
        /// <value>The normalized currency exchange rate. Always base 1.                Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set. The rates in Go are retrieved  from ECB via api.</value>
        /* <example>10.78</example> */
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } set { this.CurrencyExchangeRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomMatchingReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomMatchingReferenceOption { get; private set; }

        /// <summary>
        /// The custom matching reference of the line. This property may be used for matching purposes on sub-ledger  accounts, where entries posted with a CustomMatchingReference will be matched immediately with existing entries  in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are  already matched out).
        /// </summary>
        /// <value>The custom matching reference of the line. This property may be used for matching purposes on sub-ledger  accounts, where entries posted with a CustomMatchingReference will be matched immediately with existing entries  in the sub-ledger that have the same CustomMatchingReference and opposite amount (unless existing entries are  already matched out).</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("CustomMatchingReference")]
        public string? CustomMatchingReference { get { return this.CustomMatchingReferenceOption; } set { this.CustomMatchingReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department Id.
        /// </summary>
        /// <value>The department Id.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the voucher line.
        /// </summary>
        /// <value>The description of the voucher line.</value>
        /* <example>Hello accounting world!</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the line.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalLineReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalLineReferenceOption { get; private set; }

        /// <summary>
        /// The external line reference associated with the line. This property can only be set using the api, in order  to reference the external system&#39;s line. Can be used to correlate/duplicate check transactions.
        /// </summary>
        /// <value>The external line reference associated with the line. This property can only be set using the api, in order  to reference the external system&#39;s line. Can be used to correlate/duplicate check transactions.</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("ExternalLineReference")]
        public string? ExternalLineReference { get { return this.ExternalLineReferenceOption; } set { this.ExternalLineReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies the voucher objects line. The id is assigned by Go when the entry is  created. This id have no relation to the account transaction id posted by the system.
        /// </summary>
        /// <value>A value that uniquely identifies the voucher objects line. The id is assigned by Go when the entry is  created. This id have no relation to the account transaction id posted by the system.</value>
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNoOption { get; }

        /// <summary>
        /// The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.
        /// </summary>
        /// <value>The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.</value>
        /* <example>753159</example> */
        [JsonPropertyName("InvoiceNo")]
        public string? InvoiceNo { get { return this.InvoiceNoOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the line.
        /// </summary>
        /// <value>The id of the location dimension associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; private set; }

        /// <summary>
        /// The product id associated with the line.
        /// </summary>
        /// <value>The product id associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the line.
        /// </summary>
        /// <value>The id of the project associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.
        /// </summary>
        /// <value>The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Quantity2Option { get; private set; }

        /// <summary>
        /// The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.
        /// </summary>
        /// <value>The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</value>
        /* <example>200</example> */
        [JsonPropertyName("Quantity2")]
        public double? Quantity2 { get { return this.Quantity2Option; } set { this.Quantity2Option = new(value); } }

        /// <summary>
        /// Used to track the state of VatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used for the credit entry.
        /// </summary>
        /// <value>The id of the vat code used for the credit entry.</value>
        /* <example>12345</example> */
        [JsonPropertyName("VatId")]
        public int? VatId { get { return this.VatIdOption; } set { this.VatIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankVoucherLineDto {\n");
            sb.Append("  PostingDate: ").Append(PostingDate).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CustomMatchingReference: ").Append(CustomMatchingReference).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  ExternalLineReference: ").Append(ExternalLineReference).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Quantity2: ").Append(Quantity2).Append("\n");
            sb.Append("  VatId: ").Append(VatId).Append("\n");
            sb.Append("  VatReturnSpecification: ").Append(VatReturnSpecification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Cid (string) maxLength
            if (this.Cid != null && this.Cid.Length > 25)
            {
                yield return new ValidationResult("Invalid value for Cid, length must be less than 25.", new [] { "Cid" });
            }

            // Cid (string) minLength
            if (this.Cid != null && this.Cid.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Cid, length must be greater than 0.", new [] { "Cid" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BankVoucherLineDto" />
    /// </summary>
    public class BankVoucherLineDtoJsonConverter : JsonConverter<BankVoucherLineDto>
    {
        /// <summary>
        /// The format to use to serialize PostingDate
        /// </summary>
        public static string PostingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BankVoucherLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BankVoucherLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTimeOffset?> postingDate = default;
            Option<long?> accountId = default;
            Option<string?> cid = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<string?> customMatchingReference = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<string?> externalLineReference = default;
            Option<long?> id = default;
            Option<string?> invoiceNo = default;
            Option<long?> locationId = default;
            Option<long?> productId = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> quantity2 = default;
            Option<int?> vatId = default;
            Option<VatReturnSpecification?> vatReturnSpecification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "PostingDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postingDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CustomMatchingReference":
                            customMatchingReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalLineReference":
                            externalLineReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceNo":
                            invoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Quantity2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity2 = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "VatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "VatReturnSpecification":
                            string? vatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (vatReturnSpecificationRawValue != null)
                                vatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(vatReturnSpecificationRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!postingDate.IsSet)
                throw new ArgumentException("Property is required for class BankVoucherLineDto.", nameof(postingDate));

            if (postingDate.IsSet && postingDate.Value == null)
                throw new ArgumentNullException(nameof(postingDate), "Property is not nullable for class BankVoucherLineDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class BankVoucherLineDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class BankVoucherLineDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BankVoucherLineDto.");

            return new BankVoucherLineDto(postingDate.Value!.Value!, accountId, cid, createdDateTimeOffset, currencyAmount, currencyCode, currencyExchangeRate, customMatchingReference, departmentId, description, dim1Id, dim2Id, dim3Id, externalLineReference, id, invoiceNo, locationId, productId, projectId, quantity, quantity2, vatId, vatReturnSpecification);
        }

        /// <summary>
        /// Serializes a <see cref="BankVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BankVoucherLineDto bankVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bankVoucherLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BankVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BankVoucherLineDto bankVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("PostingDate", bankVoucherLineDto.PostingDate.ToString(PostingDateFormat));

            if (bankVoucherLineDto.AccountIdOption.IsSet)
                if (bankVoucherLineDto.AccountIdOption.Value != null)
                    writer.WriteNumber("AccountId", bankVoucherLineDto.AccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccountId");

            if (bankVoucherLineDto.CidOption.IsSet)
                if (bankVoucherLineDto.CidOption.Value != null)
                    writer.WriteString("Cid", bankVoucherLineDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (bankVoucherLineDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", bankVoucherLineDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (bankVoucherLineDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", bankVoucherLineDto.CurrencyAmountOption.Value!.Value);

            if (bankVoucherLineDto.CurrencyCodeOption.IsSet)
                if (bankVoucherLineDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", bankVoucherLineDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (bankVoucherLineDto.CurrencyExchangeRateOption.IsSet)
                if (bankVoucherLineDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", bankVoucherLineDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (bankVoucherLineDto.CustomMatchingReferenceOption.IsSet)
                if (bankVoucherLineDto.CustomMatchingReferenceOption.Value != null)
                    writer.WriteString("CustomMatchingReference", bankVoucherLineDto.CustomMatchingReference);
                else
                    writer.WriteNull("CustomMatchingReference");

            if (bankVoucherLineDto.DepartmentIdOption.IsSet)
                if (bankVoucherLineDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", bankVoucherLineDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (bankVoucherLineDto.DescriptionOption.IsSet)
                if (bankVoucherLineDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", bankVoucherLineDto.Description);
                else
                    writer.WriteNull("Description");

            if (bankVoucherLineDto.Dim1IdOption.IsSet)
                if (bankVoucherLineDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", bankVoucherLineDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (bankVoucherLineDto.Dim2IdOption.IsSet)
                if (bankVoucherLineDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", bankVoucherLineDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (bankVoucherLineDto.Dim3IdOption.IsSet)
                if (bankVoucherLineDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", bankVoucherLineDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (bankVoucherLineDto.ExternalLineReferenceOption.IsSet)
                if (bankVoucherLineDto.ExternalLineReferenceOption.Value != null)
                    writer.WriteString("ExternalLineReference", bankVoucherLineDto.ExternalLineReference);
                else
                    writer.WriteNull("ExternalLineReference");

            if (bankVoucherLineDto.IdOption.IsSet)
                writer.WriteNumber("Id", bankVoucherLineDto.IdOption.Value!.Value);

            if (bankVoucherLineDto.InvoiceNoOption.IsSet)
                if (bankVoucherLineDto.InvoiceNoOption.Value != null)
                    writer.WriteString("InvoiceNo", bankVoucherLineDto.InvoiceNo);
                else
                    writer.WriteNull("InvoiceNo");

            if (bankVoucherLineDto.LocationIdOption.IsSet)
                if (bankVoucherLineDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", bankVoucherLineDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (bankVoucherLineDto.ProductIdOption.IsSet)
                if (bankVoucherLineDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", bankVoucherLineDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (bankVoucherLineDto.ProjectIdOption.IsSet)
                if (bankVoucherLineDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", bankVoucherLineDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (bankVoucherLineDto.QuantityOption.IsSet)
                if (bankVoucherLineDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", bankVoucherLineDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (bankVoucherLineDto.Quantity2Option.IsSet)
                if (bankVoucherLineDto.Quantity2Option.Value != null)
                    writer.WriteNumber("Quantity2", bankVoucherLineDto.Quantity2Option.Value!.Value);
                else
                    writer.WriteNull("Quantity2");

            if (bankVoucherLineDto.VatIdOption.IsSet)
                if (bankVoucherLineDto.VatIdOption.Value != null)
                    writer.WriteNumber("VatId", bankVoucherLineDto.VatIdOption.Value!.Value);
                else
                    writer.WriteNull("VatId");

            if (bankVoucherLineDto.VatReturnSpecificationOption.IsSet)
                if (bankVoucherLineDto.VatReturnSpecificationOption!.Value != null)
                {
                    var vatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(bankVoucherLineDto.VatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("VatReturnSpecification", vatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("VatReturnSpecification");
        }
    }
}
