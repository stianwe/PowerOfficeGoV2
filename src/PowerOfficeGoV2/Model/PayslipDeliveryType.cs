// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The payslip delivery type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;App&lt;/i&gt; - Payslip is delivered to the PowerOffice mobile application.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EmailAndApp&lt;/i&gt; - The payslip is delivered by e-mail to the employee, and to the PowerOffice mobile application.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PrintAndApp&lt;/i&gt; - A pdf of the payslip is generated for download for user managing the payroll, and the payslip is delivered to the PowerOffice mobile application.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The payslip delivery type.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;App&lt;/i&gt; - Payslip is delivered to the PowerOffice mobile application.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EmailAndApp&lt;/i&gt; - The payslip is delivered by e-mail to the employee, and to the PowerOffice mobile application.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PrintAndApp&lt;/i&gt; - A pdf of the payslip is generated for download for user managing the payroll, and the payslip is delivered to the PowerOffice mobile application.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum PayslipDeliveryType
    {
        /// <summary>
        /// Enum App for value: App
        /// </summary>
        App = 1,

        /// <summary>
        /// Enum EmailAndApp for value: EmailAndApp
        /// </summary>
        EmailAndApp = 2,

        /// <summary>
        /// Enum PrintAndApp for value: PrintAndApp
        /// </summary>
        PrintAndApp = 3
    }

    /// <summary>
    /// Converts <see cref="PayslipDeliveryType"/> to and from the JSON value
    /// </summary>
    public static class PayslipDeliveryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PayslipDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayslipDeliveryType FromString(string value)
        {
            if (value.Equals("App"))
                return PayslipDeliveryType.App;

            if (value.Equals("EmailAndApp"))
                return PayslipDeliveryType.EmailAndApp;

            if (value.Equals("PrintAndApp"))
                return PayslipDeliveryType.PrintAndApp;

            throw new NotImplementedException($"Could not convert value to type PayslipDeliveryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PayslipDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayslipDeliveryType? FromStringOrDefault(string value)
        {
            if (value.Equals("App"))
                return PayslipDeliveryType.App;

            if (value.Equals("EmailAndApp"))
                return PayslipDeliveryType.EmailAndApp;

            if (value.Equals("PrintAndApp"))
                return PayslipDeliveryType.PrintAndApp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PayslipDeliveryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PayslipDeliveryType value)
        {
            if (value == PayslipDeliveryType.App)
                return "App";

            if (value == PayslipDeliveryType.EmailAndApp)
                return "EmailAndApp";

            if (value == PayslipDeliveryType.PrintAndApp)
                return "PrintAndApp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayslipDeliveryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PayslipDeliveryTypeJsonConverter : JsonConverter<PayslipDeliveryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayslipDeliveryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayslipDeliveryType? result = rawValue == null
                ? null
                : PayslipDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PayslipDeliveryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payslipDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayslipDeliveryType payslipDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payslipDeliveryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayslipDeliveryType"/>
    /// </summary>
    public class PayslipDeliveryTypeNullableJsonConverter : JsonConverter<PayslipDeliveryType?>
    {
        /// <summary>
        /// Returns a PayslipDeliveryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayslipDeliveryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayslipDeliveryType? result = rawValue == null
                ? null
                : PayslipDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payslipDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayslipDeliveryType? payslipDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payslipDeliveryType?.ToString() ?? "null");
        }
    }
}
