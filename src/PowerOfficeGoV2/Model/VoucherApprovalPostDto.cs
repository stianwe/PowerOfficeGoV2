// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Dto for available information to set when updating the approval state back to the Go client
    /// </summary>
    public partial class VoucherApprovalPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherApprovalPostDto" /> class.
        /// </summary>
        /// <param name="comment">Comment associated with the approval status. We recommend that you provide a comment that reflects  the previous events in the external system and/or information that is relevant for the accounting  entries. The comment will be visible in the user interface in Go and added as a voucher history entry.                The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability.</param>
        /// <param name="voucherApprovalStatus">voucherApprovalStatus</param>
        [JsonConstructor]
        public VoucherApprovalPostDto(string comment, VoucherApprovalStatus? voucherApprovalStatus = default)
        {
            Comment = comment;
            VoucherApprovalStatus = voucherApprovalStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets VoucherApprovalStatus
        /// </summary>
        [JsonPropertyName("VoucherApprovalStatus")]
        public VoucherApprovalStatus? VoucherApprovalStatus { get; set; }

        /// <summary>
        /// Comment associated with the approval status. We recommend that you provide a comment that reflects  the previous events in the external system and/or information that is relevant for the accounting  entries. The comment will be visible in the user interface in Go and added as a voucher history entry.                The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability.
        /// </summary>
        /// <value>Comment associated with the approval status. We recommend that you provide a comment that reflects  the previous events in the external system and/or information that is relevant for the accounting  entries. The comment will be visible in the user interface in Go and added as a voucher history entry.                The comment text should be human-readable. If necessary, use newline characters (\\n) to format the text for better readability.</value>
        /* <example>
                &quot;External system feature:\n
                - Added project to lines. \n
                - Project code corrected in line 2.\n
                Approved in external system by:\n
                - Project Manager Espen Askeladd\n
                - Department Manager Ola Nordmann.&quot;
            </example> */
        [JsonPropertyName("Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherApprovalPostDto {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  VoucherApprovalStatus: ").Append(VoucherApprovalStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1000.", new [] { "Comment" });
            }

            // Comment (string) minLength
            if (this.Comment != null && this.Comment.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be greater than 1.", new [] { "Comment" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherApprovalPostDto" />
    /// </summary>
    public class VoucherApprovalPostDtoJsonConverter : JsonConverter<VoucherApprovalPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="VoucherApprovalPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VoucherApprovalPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> comment = default;
            Option<VoucherApprovalStatus?> voucherApprovalStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "VoucherApprovalStatus":
                            string? voucherApprovalStatusRawValue = utf8JsonReader.GetString();
                            if (voucherApprovalStatusRawValue != null)
                                voucherApprovalStatus = new Option<VoucherApprovalStatus?>(VoucherApprovalStatusValueConverter.FromStringOrDefault(voucherApprovalStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!comment.IsSet)
                throw new ArgumentException("Property is required for class VoucherApprovalPostDto.", nameof(comment));

            if (!voucherApprovalStatus.IsSet)
                throw new ArgumentException("Property is required for class VoucherApprovalPostDto.", nameof(voucherApprovalStatus));

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class VoucherApprovalPostDto.");

            return new VoucherApprovalPostDto(comment.Value!, voucherApprovalStatus.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="VoucherApprovalPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherApprovalPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VoucherApprovalPostDto voucherApprovalPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, voucherApprovalPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VoucherApprovalPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherApprovalPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VoucherApprovalPostDto voucherApprovalPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (voucherApprovalPostDto.Comment == null)
                throw new ArgumentNullException(nameof(voucherApprovalPostDto.Comment), "Property is required for class VoucherApprovalPostDto.");

            writer.WriteString("Comment", voucherApprovalPostDto.Comment);

            if (voucherApprovalPostDto.VoucherApprovalStatus == null)
                writer.WriteNull("VoucherApprovalStatus");
            else
            {
                var voucherApprovalStatusRawValue = VoucherApprovalStatusValueConverter.ToJsonValue(voucherApprovalPostDto.VoucherApprovalStatus.Value);
                if (voucherApprovalStatusRawValue != null)
                    writer.WriteString("VoucherApprovalStatus", voucherApprovalStatusRawValue);
                else
                    writer.WriteNull("VoucherApprovalStatus");
            }
        }
    }
}
