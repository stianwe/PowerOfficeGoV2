// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Data transfer object for the bank approver.
    /// </summary>
    public partial class BankApproverDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankApproverDto" /> class.
        /// </summary>
        /// <param name="bankAccountId">The identifier of the client bank account.</param>
        /// <param name="bankAccountNumber">The client bank account number.</param>
        /// <param name="fromDate">From date, inclusive.  The user will have access to approval on the account from this date.</param>
        /// <param name="id">The identifier of this bank approver (Bank Warrant).</param>
        /// <param name="isActiveApprover">Indicates whether the user is an active approver for the bank account.</param>
        /// <param name="toDate">To date, inclusive.  The user will have access to approval on the account until and including this date.  Afterwards, the user is deactivated on the client.</param>
        /// <param name="userId">The identifier of the user.</param>
        [JsonConstructor]
        internal BankApproverDto(Option<long?> bankAccountId = default, Option<string?> bankAccountNumber = default, Option<DateOnly?> fromDate = default, Option<long?> id = default, Option<bool?> isActiveApprover = default, Option<DateOnly?> toDate = default, Option<Guid?> userId = default)
        {
            BankAccountIdOption = bankAccountId;
            BankAccountNumberOption = bankAccountNumber;
            FromDateOption = fromDate;
            IdOption = id;
            IsActiveApproverOption = isActiveApprover;
            ToDateOption = toDate;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BankAccountIdOption { get; }

        /// <summary>
        /// The identifier of the client bank account.
        /// </summary>
        /// <value>The identifier of the client bank account.</value>
        /* <example>12345</example> */
        [JsonPropertyName("BankAccountId")]
        public long? BankAccountId { get { return this.BankAccountIdOption; } }

        /// <summary>
        /// Used to track the state of BankAccountNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BankAccountNumberOption { get; }

        /// <summary>
        /// The client bank account number.
        /// </summary>
        /// <value>The client bank account number.</value>
        /* <example>12345678903</example> */
        [JsonPropertyName("BankAccountNumber")]
        public string? BankAccountNumber { get { return this.BankAccountNumberOption; } }

        /// <summary>
        /// Used to track the state of FromDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> FromDateOption { get; }

        /// <summary>
        /// From date, inclusive.  The user will have access to approval on the account from this date.
        /// </summary>
        /// <value>From date, inclusive.  The user will have access to approval on the account from this date.</value>
        /* <example>Mon Jan 01 01:00:00 CET 2024</example> */
        [JsonPropertyName("FromDate")]
        public DateOnly? FromDate { get { return this.FromDateOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of this bank approver (Bank Warrant).
        /// </summary>
        /// <value>The identifier of this bank approver (Bank Warrant).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActiveApprover
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveApproverOption { get; }

        /// <summary>
        /// Indicates whether the user is an active approver for the bank account.
        /// </summary>
        /// <value>Indicates whether the user is an active approver for the bank account.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActiveApprover")]
        public bool? IsActiveApprover { get { return this.IsActiveApproverOption; } }

        /// <summary>
        /// Used to track the state of ToDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ToDateOption { get; }

        /// <summary>
        /// To date, inclusive.  The user will have access to approval on the account until and including this date.  Afterwards, the user is deactivated on the client.
        /// </summary>
        /// <value>To date, inclusive.  The user will have access to approval on the account until and including this date.  Afterwards, the user is deactivated on the client.</value>
        /* <example>Wed Jan 31 01:00:00 CET 2024</example> */
        [JsonPropertyName("ToDate")]
        public DateOnly? ToDate { get { return this.ToDateOption; } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> UserIdOption { get; }

        /// <summary>
        /// The identifier of the user.
        /// </summary>
        /// <value>The identifier of the user.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("UserId")]
        public Guid? UserId { get { return this.UserIdOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankApproverDto {\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActiveApprover: ").Append(IsActiveApprover).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BankApproverDto" />
    /// </summary>
    public class BankApproverDtoJsonConverter : JsonConverter<BankApproverDto>
    {
        /// <summary>
        /// The format to use to serialize FromDate
        /// </summary>
        public static string FromDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ToDate
        /// </summary>
        public static string ToDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="BankApproverDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BankApproverDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> bankAccountId = default;
            Option<string?> bankAccountNumber = default;
            Option<DateOnly?> fromDate = default;
            Option<long?> id = default;
            Option<bool?> isActiveApprover = default;
            Option<DateOnly?> toDate = default;
            Option<Guid?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "BankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "BankAccountNumber":
                            bankAccountNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "FromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActiveApprover":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActiveApprover = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ToDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "UserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bankAccountId.IsSet && bankAccountId.Value == null)
                throw new ArgumentNullException(nameof(bankAccountId), "Property is not nullable for class BankApproverDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BankApproverDto.");

            if (isActiveApprover.IsSet && isActiveApprover.Value == null)
                throw new ArgumentNullException(nameof(isActiveApprover), "Property is not nullable for class BankApproverDto.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class BankApproverDto.");

            return new BankApproverDto(bankAccountId, bankAccountNumber, fromDate, id, isActiveApprover, toDate, userId);
        }

        /// <summary>
        /// Serializes a <see cref="BankApproverDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankApproverDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BankApproverDto bankApproverDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bankApproverDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BankApproverDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankApproverDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BankApproverDto bankApproverDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bankApproverDto.BankAccountIdOption.IsSet)
                writer.WriteNumber("BankAccountId", bankApproverDto.BankAccountIdOption.Value!.Value);

            if (bankApproverDto.BankAccountNumberOption.IsSet)
                if (bankApproverDto.BankAccountNumberOption.Value != null)
                    writer.WriteString("BankAccountNumber", bankApproverDto.BankAccountNumber);
                else
                    writer.WriteNull("BankAccountNumber");

            if (bankApproverDto.FromDateOption.IsSet)
                if (bankApproverDto.FromDateOption.Value != null)
                    writer.WriteString("FromDate", bankApproverDto.FromDateOption.Value!.Value.ToString(FromDateFormat));
                else
                    writer.WriteNull("FromDate");

            if (bankApproverDto.IdOption.IsSet)
                writer.WriteNumber("Id", bankApproverDto.IdOption.Value!.Value);

            if (bankApproverDto.IsActiveApproverOption.IsSet)
                writer.WriteBoolean("IsActiveApprover", bankApproverDto.IsActiveApproverOption.Value!.Value);

            if (bankApproverDto.ToDateOption.IsSet)
                if (bankApproverDto.ToDateOption.Value != null)
                    writer.WriteString("ToDate", bankApproverDto.ToDateOption.Value!.Value.ToString(ToDateFormat));
                else
                    writer.WriteNull("ToDate");

            if (bankApproverDto.UserIdOption.IsSet)
                writer.WriteString("UserId", bankApproverDto.UserIdOption.Value!.Value);
        }
    }
}
