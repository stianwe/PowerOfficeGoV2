// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Dto for available information returned after successfully posting a status update.
    /// </summary>
    public partial class VoucherApprovalStatusResponseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherApprovalStatusResponseDto" /> class.
        /// </summary>
        /// <param name="inApprovalWorkflow">Property indicating whether the journal entry voucher is sent to approval and is in the approval workflow. If true, the voucher cannot be deleted</param>
        /// <param name="isPosted">Property indicating whether the journal entry voucher is posted. If true, the voucher is posted an cannot be deleted via api or edited by a user in the GUI. If false, the voucher is unposted</param>
        /// <param name="voucherId">A value that uniquely identifies the voucher. The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</param>
        [JsonConstructor]
        public VoucherApprovalStatusResponseDto(Option<bool?> inApprovalWorkflow = default, Option<bool?> isPosted = default, Option<Guid?> voucherId = default)
        {
            InApprovalWorkflowOption = inApprovalWorkflow;
            IsPostedOption = isPosted;
            VoucherIdOption = voucherId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InApprovalWorkflow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InApprovalWorkflowOption { get; private set; }

        /// <summary>
        /// Property indicating whether the journal entry voucher is sent to approval and is in the approval workflow. If true, the voucher cannot be deleted
        /// </summary>
        /// <value>Property indicating whether the journal entry voucher is sent to approval and is in the approval workflow. If true, the voucher cannot be deleted</value>
        /* <example>false</example> */
        [JsonPropertyName("InApprovalWorkflow")]
        public bool? InApprovalWorkflow { get { return this.InApprovalWorkflowOption; } set { this.InApprovalWorkflowOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPosted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPostedOption { get; private set; }

        /// <summary>
        /// Property indicating whether the journal entry voucher is posted. If true, the voucher is posted an cannot be deleted via api or edited by a user in the GUI. If false, the voucher is unposted
        /// </summary>
        /// <value>Property indicating whether the journal entry voucher is posted. If true, the voucher is posted an cannot be deleted via api or edited by a user in the GUI. If false, the voucher is unposted</value>
        /* <example>true</example> */
        [JsonPropertyName("IsPosted")]
        public bool? IsPosted { get { return this.IsPostedOption; } set { this.IsPostedOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> VoucherIdOption { get; private set; }

        /// <summary>
        /// A value that uniquely identifies the voucher. The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.
        /// </summary>
        /// <value>A value that uniquely identifies the voucher. The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</value>
        [JsonPropertyName("VoucherId")]
        public Guid? VoucherId { get { return this.VoucherIdOption; } set { this.VoucherIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherApprovalStatusResponseDto {\n");
            sb.Append("  InApprovalWorkflow: ").Append(InApprovalWorkflow).Append("\n");
            sb.Append("  IsPosted: ").Append(IsPosted).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherApprovalStatusResponseDto" />
    /// </summary>
    public class VoucherApprovalStatusResponseDtoJsonConverter : JsonConverter<VoucherApprovalStatusResponseDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="VoucherApprovalStatusResponseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VoucherApprovalStatusResponseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> inApprovalWorkflow = default;
            Option<bool?> isPosted = default;
            Option<Guid?> voucherId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "InApprovalWorkflow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inApprovalWorkflow = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsPosted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isPosted = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "VoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (inApprovalWorkflow.IsSet && inApprovalWorkflow.Value == null)
                throw new ArgumentNullException(nameof(inApprovalWorkflow), "Property is not nullable for class VoucherApprovalStatusResponseDto.");

            if (isPosted.IsSet && isPosted.Value == null)
                throw new ArgumentNullException(nameof(isPosted), "Property is not nullable for class VoucherApprovalStatusResponseDto.");

            if (voucherId.IsSet && voucherId.Value == null)
                throw new ArgumentNullException(nameof(voucherId), "Property is not nullable for class VoucherApprovalStatusResponseDto.");

            return new VoucherApprovalStatusResponseDto(inApprovalWorkflow, isPosted, voucherId);
        }

        /// <summary>
        /// Serializes a <see cref="VoucherApprovalStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherApprovalStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VoucherApprovalStatusResponseDto voucherApprovalStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, voucherApprovalStatusResponseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VoucherApprovalStatusResponseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherApprovalStatusResponseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VoucherApprovalStatusResponseDto voucherApprovalStatusResponseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (voucherApprovalStatusResponseDto.InApprovalWorkflowOption.IsSet)
                writer.WriteBoolean("InApprovalWorkflow", voucherApprovalStatusResponseDto.InApprovalWorkflowOption.Value!.Value);

            if (voucherApprovalStatusResponseDto.IsPostedOption.IsSet)
                writer.WriteBoolean("IsPosted", voucherApprovalStatusResponseDto.IsPostedOption.Value!.Value);

            if (voucherApprovalStatusResponseDto.VoucherIdOption.IsSet)
                writer.WriteString("VoucherId", voucherApprovalStatusResponseDto.VoucherIdOption.Value!.Value);
        }
    }
}
