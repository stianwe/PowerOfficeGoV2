// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// A supplier voucher line.
    /// </summary>
    public partial class SupplierVoucherLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierVoucherLineDto" /> class.
        /// </summary>
        /// <param name="accrual">accrual</param>
        /// <param name="agricultureDetails">agricultureDetails</param>
        /// <param name="createdDateTimeOffset">The timestamp of when the line was created.</param>
        /// <param name="creditAccountAgricultureDepartment">creditAccountAgricultureDepartment</param>
        /// <param name="creditAccountId">The id of the general ledger account or the subledger account to post the credit amount.</param>
        /// <param name="creditAccountType">creditAccountType</param>
        /// <param name="creditContactId">The contact ID of the credit account, relevant if CreditAccountId is set to a sub-ledger account.</param>
        /// <param name="creditVatId">The id of the vat code used for the credit entry.</param>
        /// <param name="creditVatReturnSpecification">creditVatReturnSpecification</param>
        /// <param name="currencyAmount">The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.</param>
        /// <param name="debitAccountAgricultureDepartment">debitAccountAgricultureDepartment</param>
        /// <param name="debitAccountId">The id of the general ledger account or the subledger account to post the debit amount.</param>
        /// <param name="debitAccountType">debitAccountType</param>
        /// <param name="debitContactId">The contact ID of the debit account, relevant if DebitAccountId is set to a sub-ledger account.</param>
        /// <param name="debitVatId">The id of the vat code used for the debit entry.</param>
        /// <param name="debitVatReturnSpecification">debitVatReturnSpecification</param>
        /// <param name="departmentId">The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="description">The description of the voucher line.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.</param>
        /// <param name="id">A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.</param>
        /// <param name="itemDescription">The suppliers item description, as stated in the ehf xml. Only available if the voucher was received by ehf, and  the ehf coding \&quot;itemize by product\&quot; is in use.</param>
        /// <param name="itemName">The suppliers item name, as stated in the ehf xml. Only available if the voucher was received by ehf, and the  ehf coding \&quot;itemize by product\&quot; is in use.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the line.</param>
        /// <param name="locationId">The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.</param>
        /// <param name="productId">The product id associated with the line.</param>
        /// <param name="projectId">The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.</param>
        /// <param name="quantity">The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</param>
        /// <param name="quantity2">The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</param>
        /// <param name="sellersItemIdentification">The suppliers item identification, as stated in the ehf xml. Only available if the voucher was received by ehf,  and the ehf coding \&quot;itemize by product\&quot; is in use.</param>
        [JsonConstructor]
        public SupplierVoucherLineDto(Option<AccrualBase?> accrual = default, Option<AgricultureDetails?> agricultureDetails = default, Option<DateTime?> createdDateTimeOffset = default, Option<AgricultureDepartment?> creditAccountAgricultureDepartment = default, Option<long?> creditAccountId = default, Option<AccountType?> creditAccountType = default, Option<long?> creditContactId = default, Option<int?> creditVatId = default, Option<VatReturnSpecification?> creditVatReturnSpecification = default, Option<double?> currencyAmount = default, Option<AgricultureDepartment?> debitAccountAgricultureDepartment = default, Option<long?> debitAccountId = default, Option<AccountType?> debitAccountType = default, Option<long?> debitContactId = default, Option<int?> debitVatId = default, Option<VatReturnSpecification?> debitVatReturnSpecification = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<long?> id = default, Option<string?> itemDescription = default, Option<string?> itemName = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<long?> locationId = default, Option<long?> productId = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> quantity2 = default, Option<string?> sellersItemIdentification = default)
        {
            AccrualOption = accrual;
            AgricultureDetailsOption = agricultureDetails;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreditAccountAgricultureDepartmentOption = creditAccountAgricultureDepartment;
            CreditAccountIdOption = creditAccountId;
            CreditAccountTypeOption = creditAccountType;
            CreditContactIdOption = creditContactId;
            CreditVatIdOption = creditVatId;
            CreditVatReturnSpecificationOption = creditVatReturnSpecification;
            CurrencyAmountOption = currencyAmount;
            DebitAccountAgricultureDepartmentOption = debitAccountAgricultureDepartment;
            DebitAccountIdOption = debitAccountId;
            DebitAccountTypeOption = debitAccountType;
            DebitContactIdOption = debitContactId;
            DebitVatIdOption = debitVatId;
            DebitVatReturnSpecificationOption = debitVatReturnSpecification;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            IdOption = id;
            ItemDescriptionOption = itemDescription;
            ItemNameOption = itemName;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationIdOption = locationId;
            ProductIdOption = productId;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            Quantity2Option = quantity2;
            SellersItemIdentificationOption = sellersItemIdentification;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreditAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> CreditAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("CreditAccountAgricultureDepartment")]
        public AgricultureDepartment? CreditAccountAgricultureDepartment { get { return this.CreditAccountAgricultureDepartmentOption; } set { this.CreditAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditAccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountType?> CreditAccountTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditAccountType
        /// </summary>
        [JsonPropertyName("CreditAccountType")]
        public AccountType? CreditAccountType { get { return this.CreditAccountTypeOption; } set { this.CreditAccountTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditVatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> CreditVatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditVatReturnSpecification
        /// </summary>
        [JsonPropertyName("CreditVatReturnSpecification")]
        public VatReturnSpecification? CreditVatReturnSpecification { get { return this.CreditVatReturnSpecificationOption; } set { this.CreditVatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> DebitAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebitAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("DebitAccountAgricultureDepartment")]
        public AgricultureDepartment? DebitAccountAgricultureDepartment { get { return this.DebitAccountAgricultureDepartmentOption; } set { this.DebitAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitAccountType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccountType?> DebitAccountTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebitAccountType
        /// </summary>
        [JsonPropertyName("DebitAccountType")]
        public AccountType? DebitAccountType { get { return this.DebitAccountTypeOption; } set { this.DebitAccountTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitVatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> DebitVatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebitVatReturnSpecification
        /// </summary>
        [JsonPropertyName("DebitVatReturnSpecification")]
        public VatReturnSpecification? DebitVatReturnSpecification { get { return this.DebitVatReturnSpecificationOption; } set { this.DebitVatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accrual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccrualBase?> AccrualOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accrual
        /// </summary>
        [JsonPropertyName("Accrual")]
        public AccrualBase? Accrual { get { return this.AccrualOption; } set { this.AccrualOption = new(value); } }

        /// <summary>
        /// Used to track the state of AgricultureDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDetails?> AgricultureDetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDetails
        /// </summary>
        [JsonPropertyName("AgricultureDetails")]
        public AgricultureDetails? AgricultureDetails { get { return this.AgricultureDetailsOption; } set { this.AgricultureDetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the line was created.
        /// </summary>
        /// <value>The timestamp of when the line was created.</value>
        /* <example>2024-03-20T12:52:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreditAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CreditAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account or the subledger account to post the credit amount.
        /// </summary>
        /// <value>The id of the general ledger account or the subledger account to post the credit amount.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CreditAccountId")]
        public long? CreditAccountId { get { return this.CreditAccountIdOption; } set { this.CreditAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CreditContactIdOption { get; }

        /// <summary>
        /// The contact ID of the credit account, relevant if CreditAccountId is set to a sub-ledger account.
        /// </summary>
        /// <value>The contact ID of the credit account, relevant if CreditAccountId is set to a sub-ledger account.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CreditContactId")]
        public long? CreditContactId { get { return this.CreditContactIdOption; } }

        /// <summary>
        /// Used to track the state of CreditVatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CreditVatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used for the credit entry.
        /// </summary>
        /// <value>The id of the vat code used for the credit entry.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CreditVatId")]
        public int? CreditVatId { get { return this.CreditVatIdOption; } set { this.CreditVatIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.
        /// </summary>
        /// <value>The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.</value>
        /* <example>69420</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DebitAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account or the subledger account to post the debit amount.
        /// </summary>
        /// <value>The id of the general ledger account or the subledger account to post the debit amount.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DebitAccountId")]
        public long? DebitAccountId { get { return this.DebitAccountIdOption; } set { this.DebitAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DebitContactIdOption { get; }

        /// <summary>
        /// The contact ID of the debit account, relevant if DebitAccountId is set to a sub-ledger account.
        /// </summary>
        /// <value>The contact ID of the debit account, relevant if DebitAccountId is set to a sub-ledger account.</value>
        /* <example>123456</example> */
        [JsonPropertyName("DebitContactId")]
        public long? DebitContactId { get { return this.DebitContactIdOption; } }

        /// <summary>
        /// Used to track the state of DebitVatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DebitVatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used for the debit entry.
        /// </summary>
        /// <value>The id of the vat code used for the debit entry.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DebitVatId")]
        public int? DebitVatId { get { return this.DebitVatIdOption; } set { this.DebitVatIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the voucher line.
        /// </summary>
        /// <value>The description of the voucher line.</value>
        /* <example>Hello accounting world!</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.
        /// </summary>
        /// <value>A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of ItemDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemDescriptionOption { get; }

        /// <summary>
        /// The suppliers item description, as stated in the ehf xml. Only available if the voucher was received by ehf, and  the ehf coding \&quot;itemize by product\&quot; is in use.
        /// </summary>
        /// <value>The suppliers item description, as stated in the ehf xml. Only available if the voucher was received by ehf, and  the ehf coding \&quot;itemize by product\&quot; is in use.</value>
        [JsonPropertyName("ItemDescription")]
        public string? ItemDescription { get { return this.ItemDescriptionOption; } }

        /// <summary>
        /// Used to track the state of ItemName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ItemNameOption { get; }

        /// <summary>
        /// The suppliers item name, as stated in the ehf xml. Only available if the voucher was received by ehf, and the  ehf coding \&quot;itemize by product\&quot; is in use.
        /// </summary>
        /// <value>The suppliers item name, as stated in the ehf xml. Only available if the voucher was received by ehf, and the  ehf coding \&quot;itemize by product\&quot; is in use.</value>
        [JsonPropertyName("ItemName")]
        public string? ItemName { get { return this.ItemNameOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the line.
        /// </summary>
        /// <value>The timestamp of the last change of the line.</value>
        /* <example>2024-03-20T13:13:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.
        /// </summary>
        /// <value>The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; private set; }

        /// <summary>
        /// The product id associated with the line.
        /// </summary>
        /// <value>The product id associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.
        /// </summary>
        /// <value>The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.
        /// </summary>
        /// <value>The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Quantity2Option { get; private set; }

        /// <summary>
        /// The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.
        /// </summary>
        /// <value>The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</value>
        /* <example>200</example> */
        [JsonPropertyName("Quantity2")]
        public double? Quantity2 { get { return this.Quantity2Option; } set { this.Quantity2Option = new(value); } }

        /// <summary>
        /// Used to track the state of SellersItemIdentification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SellersItemIdentificationOption { get; }

        /// <summary>
        /// The suppliers item identification, as stated in the ehf xml. Only available if the voucher was received by ehf,  and the ehf coding \&quot;itemize by product\&quot; is in use.
        /// </summary>
        /// <value>The suppliers item identification, as stated in the ehf xml. Only available if the voucher was received by ehf,  and the ehf coding \&quot;itemize by product\&quot; is in use.</value>
        [JsonPropertyName("SellersItemIdentification")]
        public string? SellersItemIdentification { get { return this.SellersItemIdentificationOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierVoucherLineDto {\n");
            sb.Append("  Accrual: ").Append(Accrual).Append("\n");
            sb.Append("  AgricultureDetails: ").Append(AgricultureDetails).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreditAccountAgricultureDepartment: ").Append(CreditAccountAgricultureDepartment).Append("\n");
            sb.Append("  CreditAccountId: ").Append(CreditAccountId).Append("\n");
            sb.Append("  CreditAccountType: ").Append(CreditAccountType).Append("\n");
            sb.Append("  CreditContactId: ").Append(CreditContactId).Append("\n");
            sb.Append("  CreditVatId: ").Append(CreditVatId).Append("\n");
            sb.Append("  CreditVatReturnSpecification: ").Append(CreditVatReturnSpecification).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  DebitAccountAgricultureDepartment: ").Append(DebitAccountAgricultureDepartment).Append("\n");
            sb.Append("  DebitAccountId: ").Append(DebitAccountId).Append("\n");
            sb.Append("  DebitAccountType: ").Append(DebitAccountType).Append("\n");
            sb.Append("  DebitContactId: ").Append(DebitContactId).Append("\n");
            sb.Append("  DebitVatId: ").Append(DebitVatId).Append("\n");
            sb.Append("  DebitVatReturnSpecification: ").Append(DebitVatReturnSpecification).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemDescription: ").Append(ItemDescription).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Quantity2: ").Append(Quantity2).Append("\n");
            sb.Append("  SellersItemIdentification: ").Append(SellersItemIdentification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ItemDescription (string) maxLength
            if (this.ItemDescription != null && this.ItemDescription.Length > 200)
            {
                yield return new ValidationResult("Invalid value for ItemDescription, length must be less than 200.", new [] { "ItemDescription" });
            }

            // ItemName (string) maxLength
            if (this.ItemName != null && this.ItemName.Length > 200)
            {
                yield return new ValidationResult("Invalid value for ItemName, length must be less than 200.", new [] { "ItemName" });
            }

            // SellersItemIdentification (string) maxLength
            if (this.SellersItemIdentification != null && this.SellersItemIdentification.Length > 40)
            {
                yield return new ValidationResult("Invalid value for SellersItemIdentification, length must be less than 40.", new [] { "SellersItemIdentification" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SupplierVoucherLineDto" />
    /// </summary>
    public class SupplierVoucherLineDtoJsonConverter : JsonConverter<SupplierVoucherLineDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SupplierVoucherLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SupplierVoucherLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AccrualBase?> accrual = default;
            Option<AgricultureDetails?> agricultureDetails = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<AgricultureDepartment?> creditAccountAgricultureDepartment = default;
            Option<long?> creditAccountId = default;
            Option<AccountType?> creditAccountType = default;
            Option<long?> creditContactId = default;
            Option<int?> creditVatId = default;
            Option<VatReturnSpecification?> creditVatReturnSpecification = default;
            Option<double?> currencyAmount = default;
            Option<AgricultureDepartment?> debitAccountAgricultureDepartment = default;
            Option<long?> debitAccountId = default;
            Option<AccountType?> debitAccountType = default;
            Option<long?> debitContactId = default;
            Option<int?> debitVatId = default;
            Option<VatReturnSpecification?> debitVatReturnSpecification = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<long?> id = default;
            Option<string?> itemDescription = default;
            Option<string?> itemName = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<long?> locationId = default;
            Option<long?> productId = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> quantity2 = default;
            Option<string?> sellersItemIdentification = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Accrual":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrual = new Option<AccrualBase?>(JsonSerializer.Deserialize<AccrualBase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "AgricultureDetails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agricultureDetails = new Option<AgricultureDetails?>(JsonSerializer.Deserialize<AgricultureDetails>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreditAccountAgricultureDepartment":
                            string? creditAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (creditAccountAgricultureDepartmentRawValue != null)
                                creditAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(creditAccountAgricultureDepartmentRawValue));
                            break;
                        case "CreditAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreditAccountType":
                            string? creditAccountTypeRawValue = utf8JsonReader.GetString();
                            if (creditAccountTypeRawValue != null)
                                creditAccountType = new Option<AccountType?>(AccountTypeValueConverter.FromStringOrDefault(creditAccountTypeRawValue));
                            break;
                        case "CreditContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditContactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreditVatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditVatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CreditVatReturnSpecification":
                            string? creditVatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (creditVatReturnSpecificationRawValue != null)
                                creditVatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(creditVatReturnSpecificationRawValue));
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "DebitAccountAgricultureDepartment":
                            string? debitAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (debitAccountAgricultureDepartmentRawValue != null)
                                debitAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(debitAccountAgricultureDepartmentRawValue));
                            break;
                        case "DebitAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debitAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DebitAccountType":
                            string? debitAccountTypeRawValue = utf8JsonReader.GetString();
                            if (debitAccountTypeRawValue != null)
                                debitAccountType = new Option<AccountType?>(AccountTypeValueConverter.FromStringOrDefault(debitAccountTypeRawValue));
                            break;
                        case "DebitContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debitContactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DebitVatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debitVatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "DebitVatReturnSpecification":
                            string? debitVatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (debitVatReturnSpecificationRawValue != null)
                                debitVatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(debitVatReturnSpecificationRawValue));
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ItemDescription":
                            itemDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ItemName":
                            itemName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Quantity2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity2 = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "SellersItemIdentification":
                            sellersItemIdentification = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accrual.IsSet && accrual.Value == null)
                throw new ArgumentNullException(nameof(accrual), "Property is not nullable for class SupplierVoucherLineDto.");

            if (agricultureDetails.IsSet && agricultureDetails.Value == null)
                throw new ArgumentNullException(nameof(agricultureDetails), "Property is not nullable for class SupplierVoucherLineDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class SupplierVoucherLineDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class SupplierVoucherLineDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SupplierVoucherLineDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class SupplierVoucherLineDto.");

            return new SupplierVoucherLineDto(accrual, agricultureDetails, createdDateTimeOffset, creditAccountAgricultureDepartment, creditAccountId, creditAccountType, creditContactId, creditVatId, creditVatReturnSpecification, currencyAmount, debitAccountAgricultureDepartment, debitAccountId, debitAccountType, debitContactId, debitVatId, debitVatReturnSpecification, departmentId, description, dim1Id, dim2Id, dim3Id, id, itemDescription, itemName, lastChangedDateTimeOffset, locationId, productId, projectId, quantity, quantity2, sellersItemIdentification);
        }

        /// <summary>
        /// Serializes a <see cref="SupplierVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SupplierVoucherLineDto supplierVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supplierVoucherLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SupplierVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SupplierVoucherLineDto supplierVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supplierVoucherLineDto.AccrualOption.IsSet && supplierVoucherLineDto.Accrual == null)
                throw new ArgumentNullException(nameof(supplierVoucherLineDto.Accrual), "Property is required for class SupplierVoucherLineDto.");

            if (supplierVoucherLineDto.AgricultureDetailsOption.IsSet && supplierVoucherLineDto.AgricultureDetails == null)
                throw new ArgumentNullException(nameof(supplierVoucherLineDto.AgricultureDetails), "Property is required for class SupplierVoucherLineDto.");

            if (supplierVoucherLineDto.AccrualOption.IsSet)
            {
                writer.WritePropertyName("Accrual");
                JsonSerializer.Serialize(writer, supplierVoucherLineDto.Accrual, jsonSerializerOptions);
            }
            if (supplierVoucherLineDto.AgricultureDetailsOption.IsSet)
            {
                writer.WritePropertyName("AgricultureDetails");
                JsonSerializer.Serialize(writer, supplierVoucherLineDto.AgricultureDetails, jsonSerializerOptions);
            }
            if (supplierVoucherLineDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", supplierVoucherLineDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (supplierVoucherLineDto.CreditAccountAgricultureDepartmentOption.IsSet)
                if (supplierVoucherLineDto.CreditAccountAgricultureDepartmentOption!.Value != null)
                {
                    var creditAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(supplierVoucherLineDto.CreditAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("CreditAccountAgricultureDepartment", creditAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("CreditAccountAgricultureDepartment");
            if (supplierVoucherLineDto.CreditAccountIdOption.IsSet)
                if (supplierVoucherLineDto.CreditAccountIdOption.Value != null)
                    writer.WriteNumber("CreditAccountId", supplierVoucherLineDto.CreditAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("CreditAccountId");

            if (supplierVoucherLineDto.CreditAccountTypeOption.IsSet)
                if (supplierVoucherLineDto.CreditAccountTypeOption!.Value != null)
                {
                    var creditAccountTypeRawValue = AccountTypeValueConverter.ToJsonValue(supplierVoucherLineDto.CreditAccountTypeOption.Value!.Value);
                    writer.WriteString("CreditAccountType", creditAccountTypeRawValue);
                }
                else
                    writer.WriteNull("CreditAccountType");
            if (supplierVoucherLineDto.CreditContactIdOption.IsSet)
                if (supplierVoucherLineDto.CreditContactIdOption.Value != null)
                    writer.WriteNumber("CreditContactId", supplierVoucherLineDto.CreditContactIdOption.Value!.Value);
                else
                    writer.WriteNull("CreditContactId");

            if (supplierVoucherLineDto.CreditVatIdOption.IsSet)
                if (supplierVoucherLineDto.CreditVatIdOption.Value != null)
                    writer.WriteNumber("CreditVatId", supplierVoucherLineDto.CreditVatIdOption.Value!.Value);
                else
                    writer.WriteNull("CreditVatId");

            if (supplierVoucherLineDto.CreditVatReturnSpecificationOption.IsSet)
                if (supplierVoucherLineDto.CreditVatReturnSpecificationOption!.Value != null)
                {
                    var creditVatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(supplierVoucherLineDto.CreditVatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("CreditVatReturnSpecification", creditVatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("CreditVatReturnSpecification");
            if (supplierVoucherLineDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", supplierVoucherLineDto.CurrencyAmountOption.Value!.Value);

            if (supplierVoucherLineDto.DebitAccountAgricultureDepartmentOption.IsSet)
                if (supplierVoucherLineDto.DebitAccountAgricultureDepartmentOption!.Value != null)
                {
                    var debitAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(supplierVoucherLineDto.DebitAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("DebitAccountAgricultureDepartment", debitAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("DebitAccountAgricultureDepartment");
            if (supplierVoucherLineDto.DebitAccountIdOption.IsSet)
                if (supplierVoucherLineDto.DebitAccountIdOption.Value != null)
                    writer.WriteNumber("DebitAccountId", supplierVoucherLineDto.DebitAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("DebitAccountId");

            if (supplierVoucherLineDto.DebitAccountTypeOption.IsSet)
                if (supplierVoucherLineDto.DebitAccountTypeOption!.Value != null)
                {
                    var debitAccountTypeRawValue = AccountTypeValueConverter.ToJsonValue(supplierVoucherLineDto.DebitAccountTypeOption.Value!.Value);
                    writer.WriteString("DebitAccountType", debitAccountTypeRawValue);
                }
                else
                    writer.WriteNull("DebitAccountType");
            if (supplierVoucherLineDto.DebitContactIdOption.IsSet)
                if (supplierVoucherLineDto.DebitContactIdOption.Value != null)
                    writer.WriteNumber("DebitContactId", supplierVoucherLineDto.DebitContactIdOption.Value!.Value);
                else
                    writer.WriteNull("DebitContactId");

            if (supplierVoucherLineDto.DebitVatIdOption.IsSet)
                if (supplierVoucherLineDto.DebitVatIdOption.Value != null)
                    writer.WriteNumber("DebitVatId", supplierVoucherLineDto.DebitVatIdOption.Value!.Value);
                else
                    writer.WriteNull("DebitVatId");

            if (supplierVoucherLineDto.DebitVatReturnSpecificationOption.IsSet)
                if (supplierVoucherLineDto.DebitVatReturnSpecificationOption!.Value != null)
                {
                    var debitVatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(supplierVoucherLineDto.DebitVatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("DebitVatReturnSpecification", debitVatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("DebitVatReturnSpecification");
            if (supplierVoucherLineDto.DepartmentIdOption.IsSet)
                if (supplierVoucherLineDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", supplierVoucherLineDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (supplierVoucherLineDto.DescriptionOption.IsSet)
                if (supplierVoucherLineDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", supplierVoucherLineDto.Description);
                else
                    writer.WriteNull("Description");

            if (supplierVoucherLineDto.Dim1IdOption.IsSet)
                if (supplierVoucherLineDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", supplierVoucherLineDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (supplierVoucherLineDto.Dim2IdOption.IsSet)
                if (supplierVoucherLineDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", supplierVoucherLineDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (supplierVoucherLineDto.Dim3IdOption.IsSet)
                if (supplierVoucherLineDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", supplierVoucherLineDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (supplierVoucherLineDto.IdOption.IsSet)
                writer.WriteNumber("Id", supplierVoucherLineDto.IdOption.Value!.Value);

            if (supplierVoucherLineDto.ItemDescriptionOption.IsSet)
                if (supplierVoucherLineDto.ItemDescriptionOption.Value != null)
                    writer.WriteString("ItemDescription", supplierVoucherLineDto.ItemDescription);
                else
                    writer.WriteNull("ItemDescription");

            if (supplierVoucherLineDto.ItemNameOption.IsSet)
                if (supplierVoucherLineDto.ItemNameOption.Value != null)
                    writer.WriteString("ItemName", supplierVoucherLineDto.ItemName);
                else
                    writer.WriteNull("ItemName");

            if (supplierVoucherLineDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", supplierVoucherLineDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (supplierVoucherLineDto.LocationIdOption.IsSet)
                if (supplierVoucherLineDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", supplierVoucherLineDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (supplierVoucherLineDto.ProductIdOption.IsSet)
                if (supplierVoucherLineDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", supplierVoucherLineDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (supplierVoucherLineDto.ProjectIdOption.IsSet)
                if (supplierVoucherLineDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", supplierVoucherLineDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (supplierVoucherLineDto.QuantityOption.IsSet)
                if (supplierVoucherLineDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", supplierVoucherLineDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (supplierVoucherLineDto.Quantity2Option.IsSet)
                if (supplierVoucherLineDto.Quantity2Option.Value != null)
                    writer.WriteNumber("Quantity2", supplierVoucherLineDto.Quantity2Option.Value!.Value);
                else
                    writer.WriteNull("Quantity2");

            if (supplierVoucherLineDto.SellersItemIdentificationOption.IsSet)
                if (supplierVoucherLineDto.SellersItemIdentificationOption.Value != null)
                    writer.WriteString("SellersItemIdentification", supplierVoucherLineDto.SellersItemIdentification);
                else
                    writer.WriteNull("SellersItemIdentification");
        }
    }
}
