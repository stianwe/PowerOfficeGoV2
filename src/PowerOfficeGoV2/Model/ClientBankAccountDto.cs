// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Data transfer object for the client bank account.
    /// </summary>
    public partial class ClientBankAccountDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientBankAccountDto" /> class.
        /// </summary>
        /// <param name="bankAccountNumber">The bank account number.</param>
        /// <param name="bicSwift">The BIC Swift code of the bank.</param>
        /// <param name="countryCode">The ISO 3166-1 alfa-2 country code (two characters).</param>
        /// <param name="activeIncomingPaymentService">A value indicating whether an incoming payment service integration is active on this bank account (typically an OCR service).</param>
        /// <param name="activeOutgoingPaymentServices">A value indicating whether an outgoing payment service (remittance service) integration is active on this bank account.</param>
        /// <param name="agricultureDepartment">agricultureDepartment</param>
        /// <param name="allowOverdraft">A value indicating whether this bank account can be overdrawn (Norwegian: Kassekreditt).</param>
        /// <param name="bankName">The name of the bank.</param>
        /// <param name="createdDateTimeOffset">The timestamp of the created date of the client bank account. UTC time.</param>
        /// <param name="currencyCode">The standard code of the currency associated with the client bank account.</param>
        /// <param name="generalLedgerAccountId">The identifier of the general ledger account this bank account is associated with.</param>
        /// <param name="generalLedgerAccountNo">The general ledger account this bank account is associated with.</param>
        /// <param name="id">The identifier of the client bank account. This identifier is unique and assigned by PowerOffice Go when a new entity is saved.</param>
        /// <param name="isActive">A value indicating whether this bank account is active. Inactive bank accounts disable the usage of that bank account in the GUI.</param>
        /// <param name="isClientTrustAccount">A value indicating whether this is a bank account containing client trust funds (example use cases: real estate brokers, lawyers).</param>
        /// <param name="isPrimaryAccount">A value indicating whether this is the primary account for the clients day to day operations (Norwegian: Driftskonto).</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the client bank account. UTC time.</param>
        /// <param name="overdraftLimit">The overdraft limit for the bank account, if set. Available only for bank accounts with overdraft enabled.</param>
        [JsonConstructor]
        public ClientBankAccountDto(string bankAccountNumber, string bicSwift, string countryCode, Option<bool?> activeIncomingPaymentService = default, Option<bool?> activeOutgoingPaymentServices = default, Option<AgricultureDepartment?> agricultureDepartment = default, Option<bool?> allowOverdraft = default, Option<string?> bankName = default, Option<DateTime?> createdDateTimeOffset = default, Option<string?> currencyCode = default, Option<long?> generalLedgerAccountId = default, Option<long?> generalLedgerAccountNo = default, Option<long?> id = default, Option<bool?> isActive = default, Option<bool?> isClientTrustAccount = default, Option<bool?> isPrimaryAccount = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<double?> overdraftLimit = default)
        {
            BankAccountNumber = bankAccountNumber;
            BicSwift = bicSwift;
            CountryCode = countryCode;
            ActiveIncomingPaymentServiceOption = activeIncomingPaymentService;
            ActiveOutgoingPaymentServicesOption = activeOutgoingPaymentServices;
            AgricultureDepartmentOption = agricultureDepartment;
            AllowOverdraftOption = allowOverdraft;
            BankNameOption = bankName;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CurrencyCodeOption = currencyCode;
            GeneralLedgerAccountIdOption = generalLedgerAccountId;
            GeneralLedgerAccountNoOption = generalLedgerAccountNo;
            IdOption = id;
            IsActiveOption = isActive;
            IsClientTrustAccountOption = isClientTrustAccount;
            IsPrimaryAccountOption = isPrimaryAccount;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            OverdraftLimitOption = overdraftLimit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> AgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDepartment
        /// </summary>
        [JsonPropertyName("AgricultureDepartment")]
        public AgricultureDepartment? AgricultureDepartment { get { return this.AgricultureDepartmentOption; } set { this.AgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// The bank account number.
        /// </summary>
        /// <value>The bank account number.</value>
        /* <example>12345678903</example> */
        [JsonPropertyName("BankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// The BIC Swift code of the bank.
        /// </summary>
        /// <value>The BIC Swift code of the bank.</value>
        /* <example>DNBANOKK</example> */
        [JsonPropertyName("BicSwift")]
        public string BicSwift { get; set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code (two characters).
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code (two characters).</value>
        /* <example>NO</example> */
        [JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Used to track the state of ActiveIncomingPaymentService
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveIncomingPaymentServiceOption { get; }

        /// <summary>
        /// A value indicating whether an incoming payment service integration is active on this bank account (typically an OCR service).
        /// </summary>
        /// <value>A value indicating whether an incoming payment service integration is active on this bank account (typically an OCR service).</value>
        /* <example>true</example> */
        [JsonPropertyName("ActiveIncomingPaymentService")]
        public bool? ActiveIncomingPaymentService { get { return this.ActiveIncomingPaymentServiceOption; } }

        /// <summary>
        /// Used to track the state of ActiveOutgoingPaymentServices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOutgoingPaymentServicesOption { get; }

        /// <summary>
        /// A value indicating whether an outgoing payment service (remittance service) integration is active on this bank account.
        /// </summary>
        /// <value>A value indicating whether an outgoing payment service (remittance service) integration is active on this bank account.</value>
        /* <example>true</example> */
        [JsonPropertyName("ActiveOutgoingPaymentServices")]
        public bool? ActiveOutgoingPaymentServices { get { return this.ActiveOutgoingPaymentServicesOption; } }

        /// <summary>
        /// Used to track the state of AllowOverdraft
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowOverdraftOption { get; private set; }

        /// <summary>
        /// A value indicating whether this bank account can be overdrawn (Norwegian: Kassekreditt).
        /// </summary>
        /// <value>A value indicating whether this bank account can be overdrawn (Norwegian: Kassekreditt).</value>
        /* <example>true</example> */
        [JsonPropertyName("AllowOverdraft")]
        public bool? AllowOverdraft { get { return this.AllowOverdraftOption; } set { this.AllowOverdraftOption = new(value); } }

        /// <summary>
        /// Used to track the state of BankName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BankNameOption { get; private set; }

        /// <summary>
        /// The name of the bank.
        /// </summary>
        /// <value>The name of the bank.</value>
        /* <example>DNB</example> */
        [JsonPropertyName("BankName")]
        public string? BankName { get { return this.BankNameOption; } set { this.BankNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the created date of the client bank account. UTC time.
        /// </summary>
        /// <value>The timestamp of the created date of the client bank account. UTC time.</value>
        /* <example>2024-03-04T11:11:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTime? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The standard code of the currency associated with the client bank account.
        /// </summary>
        /// <value>The standard code of the currency associated with the client bank account.</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeneralLedgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GeneralLedgerAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the general ledger account this bank account is associated with.
        /// </summary>
        /// <value>The identifier of the general ledger account this bank account is associated with.</value>
        /* <example>123456</example> */
        [JsonPropertyName("GeneralLedgerAccountId")]
        public long? GeneralLedgerAccountId { get { return this.GeneralLedgerAccountIdOption; } set { this.GeneralLedgerAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of GeneralLedgerAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> GeneralLedgerAccountNoOption { get; }

        /// <summary>
        /// The general ledger account this bank account is associated with.
        /// </summary>
        /// <value>The general ledger account this bank account is associated with.</value>
        /* <example>1920</example> */
        [JsonPropertyName("GeneralLedgerAccountNo")]
        public long? GeneralLedgerAccountNo { get { return this.GeneralLedgerAccountNoOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the client bank account. This identifier is unique and assigned by PowerOffice Go when a new entity is saved.
        /// </summary>
        /// <value>The identifier of the client bank account. This identifier is unique and assigned by PowerOffice Go when a new entity is saved.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// A value indicating whether this bank account is active. Inactive bank accounts disable the usage of that bank account in the GUI.
        /// </summary>
        /// <value>A value indicating whether this bank account is active. Inactive bank accounts disable the usage of that bank account in the GUI.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsClientTrustAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsClientTrustAccountOption { get; private set; }

        /// <summary>
        /// A value indicating whether this is a bank account containing client trust funds (example use cases: real estate brokers, lawyers).
        /// </summary>
        /// <value>A value indicating whether this is a bank account containing client trust funds (example use cases: real estate brokers, lawyers).</value>
        /* <example>false</example> */
        [JsonPropertyName("IsClientTrustAccount")]
        public bool? IsClientTrustAccount { get { return this.IsClientTrustAccountOption; } set { this.IsClientTrustAccountOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsPrimaryAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPrimaryAccountOption { get; }

        /// <summary>
        /// A value indicating whether this is the primary account for the clients day to day operations (Norwegian: Driftskonto).
        /// </summary>
        /// <value>A value indicating whether this is the primary account for the clients day to day operations (Norwegian: Driftskonto).</value>
        /* <example>true</example> */
        [JsonPropertyName("IsPrimaryAccount")]
        public bool? IsPrimaryAccount { get { return this.IsPrimaryAccountOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the client bank account. UTC time.
        /// </summary>
        /// <value>The timestamp of the last change of the client bank account. UTC time.</value>
        /* <example>2024-03-04T11:11:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of OverdraftLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> OverdraftLimitOption { get; private set; }

        /// <summary>
        /// The overdraft limit for the bank account, if set. Available only for bank accounts with overdraft enabled.
        /// </summary>
        /// <value>The overdraft limit for the bank account, if set. Available only for bank accounts with overdraft enabled.</value>
        /* <example>12500</example> */
        [JsonPropertyName("OverdraftLimit")]
        public double? OverdraftLimit { get { return this.OverdraftLimitOption; } set { this.OverdraftLimitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientBankAccountDto {\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BicSwift: ").Append(BicSwift).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  ActiveIncomingPaymentService: ").Append(ActiveIncomingPaymentService).Append("\n");
            sb.Append("  ActiveOutgoingPaymentServices: ").Append(ActiveOutgoingPaymentServices).Append("\n");
            sb.Append("  AgricultureDepartment: ").Append(AgricultureDepartment).Append("\n");
            sb.Append("  AllowOverdraft: ").Append(AllowOverdraft).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  GeneralLedgerAccountId: ").Append(GeneralLedgerAccountId).Append("\n");
            sb.Append("  GeneralLedgerAccountNo: ").Append(GeneralLedgerAccountNo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsClientTrustAccount: ").Append(IsClientTrustAccount).Append("\n");
            sb.Append("  IsPrimaryAccount: ").Append(IsPrimaryAccount).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  OverdraftLimit: ").Append(OverdraftLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BankAccountNumber (string) maxLength
            if (this.BankAccountNumber != null && this.BankAccountNumber.Length > 50)
            {
                yield return new ValidationResult("Invalid value for BankAccountNumber, length must be less than 50.", new [] { "BankAccountNumber" });
            }

            // BankAccountNumber (string) minLength
            if (this.BankAccountNumber != null && this.BankAccountNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BankAccountNumber, length must be greater than 1.", new [] { "BankAccountNumber" });
            }

            // BicSwift (string) maxLength
            if (this.BicSwift != null && this.BicSwift.Length > 50)
            {
                yield return new ValidationResult("Invalid value for BicSwift, length must be less than 50.", new [] { "BicSwift" });
            }

            // BicSwift (string) minLength
            if (this.BicSwift != null && this.BicSwift.Length < 1)
            {
                yield return new ValidationResult("Invalid value for BicSwift, length must be greater than 1.", new [] { "BicSwift" });
            }

            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length > 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be less than 2.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if (this.CountryCode != null && this.CountryCode.Length < 2)
            {
                yield return new ValidationResult("Invalid value for CountryCode, length must be greater than 2.", new [] { "CountryCode" });
            }

            // BankName (string) maxLength
            if (this.BankName != null && this.BankName.Length > 400)
            {
                yield return new ValidationResult("Invalid value for BankName, length must be less than 400.", new [] { "BankName" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientBankAccountDto" />
    /// </summary>
    public class ClientBankAccountDtoJsonConverter : JsonConverter<ClientBankAccountDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ClientBankAccountDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClientBankAccountDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> bankAccountNumber = default;
            Option<string?> bicSwift = default;
            Option<string?> countryCode = default;
            Option<bool?> activeIncomingPaymentService = default;
            Option<bool?> activeOutgoingPaymentServices = default;
            Option<AgricultureDepartment?> agricultureDepartment = default;
            Option<bool?> allowOverdraft = default;
            Option<string?> bankName = default;
            Option<DateTime?> createdDateTimeOffset = default;
            Option<string?> currencyCode = default;
            Option<long?> generalLedgerAccountId = default;
            Option<long?> generalLedgerAccountNo = default;
            Option<long?> id = default;
            Option<bool?> isActive = default;
            Option<bool?> isClientTrustAccount = default;
            Option<bool?> isPrimaryAccount = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<double?> overdraftLimit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "BankAccountNumber":
                            bankAccountNumber = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "BicSwift":
                            bicSwift = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "CountryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ActiveIncomingPaymentService":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                activeIncomingPaymentService = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ActiveOutgoingPaymentServices":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                activeOutgoingPaymentServices = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AgricultureDepartment":
                            string? agricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (agricultureDepartmentRawValue != null)
                                agricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(agricultureDepartmentRawValue));
                            break;
                        case "AllowOverdraft":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowOverdraft = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "BankName":
                            bankName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "GeneralLedgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                generalLedgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "GeneralLedgerAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                generalLedgerAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsClientTrustAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isClientTrustAccount = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsPrimaryAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isPrimaryAccount = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "OverdraftLimit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                overdraftLimit = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bankAccountNumber.IsSet)
                throw new ArgumentException("Property is required for class ClientBankAccountDto.", nameof(bankAccountNumber));

            if (!bicSwift.IsSet)
                throw new ArgumentException("Property is required for class ClientBankAccountDto.", nameof(bicSwift));

            if (!countryCode.IsSet)
                throw new ArgumentException("Property is required for class ClientBankAccountDto.", nameof(countryCode));

            if (bankAccountNumber.IsSet && bankAccountNumber.Value == null)
                throw new ArgumentNullException(nameof(bankAccountNumber), "Property is not nullable for class ClientBankAccountDto.");

            if (bicSwift.IsSet && bicSwift.Value == null)
                throw new ArgumentNullException(nameof(bicSwift), "Property is not nullable for class ClientBankAccountDto.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class ClientBankAccountDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class ClientBankAccountDto.");

            if (generalLedgerAccountId.IsSet && generalLedgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(generalLedgerAccountId), "Property is not nullable for class ClientBankAccountDto.");

            if (generalLedgerAccountNo.IsSet && generalLedgerAccountNo.Value == null)
                throw new ArgumentNullException(nameof(generalLedgerAccountNo), "Property is not nullable for class ClientBankAccountDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ClientBankAccountDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class ClientBankAccountDto.");

            return new ClientBankAccountDto(bankAccountNumber.Value!, bicSwift.Value!, countryCode.Value!, activeIncomingPaymentService, activeOutgoingPaymentServices, agricultureDepartment, allowOverdraft, bankName, createdDateTimeOffset, currencyCode, generalLedgerAccountId, generalLedgerAccountNo, id, isActive, isClientTrustAccount, isPrimaryAccount, lastChangedDateTimeOffset, overdraftLimit);
        }

        /// <summary>
        /// Serializes a <see cref="ClientBankAccountDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientBankAccountDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClientBankAccountDto clientBankAccountDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clientBankAccountDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClientBankAccountDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientBankAccountDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClientBankAccountDto clientBankAccountDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clientBankAccountDto.BankAccountNumber == null)
                throw new ArgumentNullException(nameof(clientBankAccountDto.BankAccountNumber), "Property is required for class ClientBankAccountDto.");

            if (clientBankAccountDto.BicSwift == null)
                throw new ArgumentNullException(nameof(clientBankAccountDto.BicSwift), "Property is required for class ClientBankAccountDto.");

            if (clientBankAccountDto.CountryCode == null)
                throw new ArgumentNullException(nameof(clientBankAccountDto.CountryCode), "Property is required for class ClientBankAccountDto.");

            writer.WriteString("BankAccountNumber", clientBankAccountDto.BankAccountNumber);

            writer.WriteString("BicSwift", clientBankAccountDto.BicSwift);

            writer.WriteString("CountryCode", clientBankAccountDto.CountryCode);

            if (clientBankAccountDto.ActiveIncomingPaymentServiceOption.IsSet)
                if (clientBankAccountDto.ActiveIncomingPaymentServiceOption.Value != null)
                    writer.WriteBoolean("ActiveIncomingPaymentService", clientBankAccountDto.ActiveIncomingPaymentServiceOption.Value!.Value);
                else
                    writer.WriteNull("ActiveIncomingPaymentService");

            if (clientBankAccountDto.ActiveOutgoingPaymentServicesOption.IsSet)
                if (clientBankAccountDto.ActiveOutgoingPaymentServicesOption.Value != null)
                    writer.WriteBoolean("ActiveOutgoingPaymentServices", clientBankAccountDto.ActiveOutgoingPaymentServicesOption.Value!.Value);
                else
                    writer.WriteNull("ActiveOutgoingPaymentServices");

            if (clientBankAccountDto.AgricultureDepartmentOption.IsSet)
                if (clientBankAccountDto.AgricultureDepartmentOption!.Value != null)
                {
                    var agricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(clientBankAccountDto.AgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("AgricultureDepartment", agricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("AgricultureDepartment");
            if (clientBankAccountDto.AllowOverdraftOption.IsSet)
                if (clientBankAccountDto.AllowOverdraftOption.Value != null)
                    writer.WriteBoolean("AllowOverdraft", clientBankAccountDto.AllowOverdraftOption.Value!.Value);
                else
                    writer.WriteNull("AllowOverdraft");

            if (clientBankAccountDto.BankNameOption.IsSet)
                if (clientBankAccountDto.BankNameOption.Value != null)
                    writer.WriteString("BankName", clientBankAccountDto.BankName);
                else
                    writer.WriteNull("BankName");

            if (clientBankAccountDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", clientBankAccountDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (clientBankAccountDto.CurrencyCodeOption.IsSet)
                if (clientBankAccountDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", clientBankAccountDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (clientBankAccountDto.GeneralLedgerAccountIdOption.IsSet)
                writer.WriteNumber("GeneralLedgerAccountId", clientBankAccountDto.GeneralLedgerAccountIdOption.Value!.Value);

            if (clientBankAccountDto.GeneralLedgerAccountNoOption.IsSet)
                writer.WriteNumber("GeneralLedgerAccountNo", clientBankAccountDto.GeneralLedgerAccountNoOption.Value!.Value);

            if (clientBankAccountDto.IdOption.IsSet)
                writer.WriteNumber("Id", clientBankAccountDto.IdOption.Value!.Value);

            if (clientBankAccountDto.IsActiveOption.IsSet)
                if (clientBankAccountDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", clientBankAccountDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (clientBankAccountDto.IsClientTrustAccountOption.IsSet)
                if (clientBankAccountDto.IsClientTrustAccountOption.Value != null)
                    writer.WriteBoolean("IsClientTrustAccount", clientBankAccountDto.IsClientTrustAccountOption.Value!.Value);
                else
                    writer.WriteNull("IsClientTrustAccount");

            if (clientBankAccountDto.IsPrimaryAccountOption.IsSet)
                if (clientBankAccountDto.IsPrimaryAccountOption.Value != null)
                    writer.WriteBoolean("IsPrimaryAccount", clientBankAccountDto.IsPrimaryAccountOption.Value!.Value);
                else
                    writer.WriteNull("IsPrimaryAccount");

            if (clientBankAccountDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", clientBankAccountDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (clientBankAccountDto.OverdraftLimitOption.IsSet)
                if (clientBankAccountDto.OverdraftLimitOption.Value != null)
                    writer.WriteNumber("OverdraftLimit", clientBankAccountDto.OverdraftLimitOption.Value!.Value);
                else
                    writer.WriteNull("OverdraftLimit");
        }
    }
}
