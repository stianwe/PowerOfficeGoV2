// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// A dto represening a bank journal entry voucher line.
    /// </summary>
    public partial class BankJournalEntryVoucherLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankJournalEntryVoucherLineDto" /> class.
        /// </summary>
        /// <param name="accrual">accrual</param>
        /// <param name="agricultureDetails">agricultureDetails</param>
        /// <param name="createdDateTimeOffset">The timestamp of when the line was created.</param>
        /// <param name="creditAccountAgricultureDepartment">creditAccountAgricultureDepartment</param>
        /// <param name="creditAccountId">The id of the general ledger account or the subledger account to post the credit amount.</param>
        /// <param name="creditVatId">The id of the vat code used for the credit entry.</param>
        /// <param name="creditVatReturnSpecification">creditVatReturnSpecification</param>
        /// <param name="currencyAmount">The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.</param>
        /// <param name="currencyCode">The currency code of the voucher line. Will inherit the currency code of the voucher head if not set. The line amounts be determined in the currency specified on the line.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate. Always base 1. Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set.  The rates in Go are retrieved from ECB.</param>
        /// <param name="debitAccountAgricultureDepartment">debitAccountAgricultureDepartment</param>
        /// <param name="debitAccountId">The id of the general ledger account or the subledger account to post the debit amount.</param>
        /// <param name="debitVatId">The id of the vat code used for the debit entry.</param>
        /// <param name="debitVatReturnSpecification">debitVatReturnSpecification</param>
        /// <param name="departmentId">The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.</param>
        /// <param name="description">The description of the voucher line.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.</param>
        /// <param name="id">A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.</param>
        /// <param name="invoiceNo">The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of the last change of the line.</param>
        /// <param name="locationId">The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.</param>
        /// <param name="postingDate">The posting date and transaction date of the line. This is the date of effect in the accounting system for the Amount when the voucher is posted.  If not set, the posting date will inherit the voucher date set in the header.  The posting date is also the currency conversion date used by Go if the currency rate is not set explicit.</param>
        /// <param name="productId">The product id associated with the line.</param>
        /// <param name="projectId">The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.</param>
        /// <param name="quantity">The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</param>
        /// <param name="quantity2">The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</param>
        [JsonConstructor]
        public BankJournalEntryVoucherLineDto(Option<AccrualBase?> accrual = default, Option<AgricultureDetails?> agricultureDetails = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<AgricultureDepartment?> creditAccountAgricultureDepartment = default, Option<long?> creditAccountId = default, Option<int?> creditVatId = default, Option<VatReturnSpecification?> creditVatReturnSpecification = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<AgricultureDepartment?> debitAccountAgricultureDepartment = default, Option<long?> debitAccountId = default, Option<int?> debitVatId = default, Option<VatReturnSpecification?> debitVatReturnSpecification = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<long?> id = default, Option<string?> invoiceNo = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<long?> locationId = default, Option<DateTimeOffset?> postingDate = default, Option<long?> productId = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> quantity2 = default)
        {
            AccrualOption = accrual;
            AgricultureDetailsOption = agricultureDetails;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreditAccountAgricultureDepartmentOption = creditAccountAgricultureDepartment;
            CreditAccountIdOption = creditAccountId;
            CreditVatIdOption = creditVatId;
            CreditVatReturnSpecificationOption = creditVatReturnSpecification;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            DebitAccountAgricultureDepartmentOption = debitAccountAgricultureDepartment;
            DebitAccountIdOption = debitAccountId;
            DebitVatIdOption = debitVatId;
            DebitVatReturnSpecificationOption = debitVatReturnSpecification;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            IdOption = id;
            InvoiceNoOption = invoiceNo;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationIdOption = locationId;
            PostingDateOption = postingDate;
            ProductIdOption = productId;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            Quantity2Option = quantity2;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreditAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> CreditAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("CreditAccountAgricultureDepartment")]
        public AgricultureDepartment? CreditAccountAgricultureDepartment { get { return this.CreditAccountAgricultureDepartmentOption; } set { this.CreditAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditVatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> CreditVatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreditVatReturnSpecification
        /// </summary>
        [JsonPropertyName("CreditVatReturnSpecification")]
        public VatReturnSpecification? CreditVatReturnSpecification { get { return this.CreditVatReturnSpecificationOption; } set { this.CreditVatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> DebitAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebitAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("DebitAccountAgricultureDepartment")]
        public AgricultureDepartment? DebitAccountAgricultureDepartment { get { return this.DebitAccountAgricultureDepartmentOption; } set { this.DebitAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitVatReturnSpecification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VatReturnSpecification?> DebitVatReturnSpecificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebitVatReturnSpecification
        /// </summary>
        [JsonPropertyName("DebitVatReturnSpecification")]
        public VatReturnSpecification? DebitVatReturnSpecification { get { return this.DebitVatReturnSpecificationOption; } set { this.DebitVatReturnSpecificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Accrual
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AccrualBase?> AccrualOption { get; private set; }

        /// <summary>
        /// Gets or Sets Accrual
        /// </summary>
        [JsonPropertyName("Accrual")]
        public AccrualBase? Accrual { get { return this.AccrualOption; } set { this.AccrualOption = new(value); } }

        /// <summary>
        /// Used to track the state of AgricultureDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDetails?> AgricultureDetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDetails
        /// </summary>
        [JsonPropertyName("AgricultureDetails")]
        public AgricultureDetails? AgricultureDetails { get { return this.AgricultureDetailsOption; } set { this.AgricultureDetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the line was created.
        /// </summary>
        /// <value>The timestamp of when the line was created.</value>
        /* <example>2024-03-20T12:52:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreditAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CreditAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account or the subledger account to post the credit amount.
        /// </summary>
        /// <value>The id of the general ledger account or the subledger account to post the credit amount.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CreditAccountId")]
        public long? CreditAccountId { get { return this.CreditAccountIdOption; } set { this.CreditAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreditVatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CreditVatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used for the credit entry.
        /// </summary>
        /// <value>The id of the vat code used for the credit entry.</value>
        /* <example>12345</example> */
        [JsonPropertyName("CreditVatId")]
        public int? CreditVatId { get { return this.CreditVatIdOption; } set { this.CreditVatIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.
        /// </summary>
        /// <value>The amount on the line, in the currency specified by the currency code of the voucher or the currency of the voucher line if available.  Gross amounts should be provided, along with the relevant vat code.</value>
        /* <example>69420</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the voucher line. Will inherit the currency code of the voucher head if not set. The line amounts be determined in the currency specified on the line.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code of the voucher line. Will inherit the currency code of the voucher head if not set. The line amounts be determined in the currency specified on the line.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; private set; }

        /// <summary>
        /// The normalized currency exchange rate. Always base 1. Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set.  The rates in Go are retrieved from ECB.
        /// </summary>
        /// <value>The normalized currency exchange rate. Always base 1. Relevant to set if the voucher line have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the posting date set.  The rates in Go are retrieved from ECB.</value>
        /* <example>10.78</example> */
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } set { this.CurrencyExchangeRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DebitAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the general ledger account or the subledger account to post the debit amount.
        /// </summary>
        /// <value>The id of the general ledger account or the subledger account to post the debit amount.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DebitAccountId")]
        public long? DebitAccountId { get { return this.DebitAccountIdOption; } set { this.DebitAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebitVatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DebitVatIdOption { get; private set; }

        /// <summary>
        /// The id of the vat code used for the debit entry.
        /// </summary>
        /// <value>The id of the vat code used for the debit entry.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DebitVatId")]
        public int? DebitVatId { get { return this.DebitVatIdOption; } set { this.DebitVatIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department Id. Will inherit department id from the voucher head if not specifically set on the line.  Department Id &#x3D; -1 means no department.  Departments can be queried and identified using the Department service.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the voucher line.
        /// </summary>
        /// <value>The description of the voucher line.</value>
        /* <example>Hello accounting world!</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim1Id &#x3D; -1 means no dimension 1.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the line.  Will inherit dim2Id from the voucher head if not specifically set on the line.  Dim2Id &#x3D; -1 means no dimension 2.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the line.  Will inherit dim1Id from the voucher head if not specifically set on the line.  Dim3Id &#x3D; -1 means no dimension 3.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.
        /// </summary>
        /// <value>A value that uniquely identifies this journal entry voucher line.  The Id is assigned by Go when the entry is created.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of InvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InvoiceNoOption { get; private set; }

        /// <summary>
        /// The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.
        /// </summary>
        /// <value>The invoice number this payment transaction relate to.  If provided, and the account number set on the line is a subledger account, the system will try to match the payment line with the accounting entry of the invoice referenced.</value>
        /* <example>753159</example> */
        [JsonPropertyName("InvoiceNo")]
        public string? InvoiceNo { get { return this.InvoiceNoOption; } set { this.InvoiceNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of the last change of the line.
        /// </summary>
        /// <value>The timestamp of the last change of the line.</value>
        /* <example>2024-03-20T13:13:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.
        /// </summary>
        /// <value>The id of the location dimension associated with the line.  Will inherit locationId from the voucher head if not specifically set on the line.  LocationId &#x3D; -1 means no location.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PostingDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> PostingDateOption { get; private set; }

        /// <summary>
        /// The posting date and transaction date of the line. This is the date of effect in the accounting system for the Amount when the voucher is posted.  If not set, the posting date will inherit the voucher date set in the header.  The posting date is also the currency conversion date used by Go if the currency rate is not set explicit.
        /// </summary>
        /// <value>The posting date and transaction date of the line. This is the date of effect in the accounting system for the Amount when the voucher is posted.  If not set, the posting date will inherit the voucher date set in the header.  The posting date is also the currency conversion date used by Go if the currency rate is not set explicit.</value>
        /* <example>Wed Sep 18 02:00:00 CEST 2024</example> */
        [JsonPropertyName("PostingDate")]
        public DateTimeOffset? PostingDate { get { return this.PostingDateOption; } set { this.PostingDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductIdOption { get; private set; }

        /// <summary>
        /// The product id associated with the line.
        /// </summary>
        /// <value>The product id associated with the line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProductId")]
        public long? ProductId { get { return this.ProductIdOption; } set { this.ProductIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.
        /// </summary>
        /// <value>The id of the project associated with the line.  Will inherit projectId from the voucher head if not specifically set on the line.  ProjectId &#x3D; -1 means no project.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.
        /// </summary>
        /// <value>The quantity dimension set on the line.  Usually associated with the product set on the line.  If the client is an agriculture client, the quantity is associated with the unit1 of the general ledger account.</value>
        /* <example>100</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> Quantity2Option { get; private set; }

        /// <summary>
        /// The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.
        /// </summary>
        /// <value>The quantity2 dimension set on the line.  Relevant only for agriculture clients, where the quantity2 is associated with the unit2 of the general ledger account.</value>
        /* <example>200</example> */
        [JsonPropertyName("Quantity2")]
        public double? Quantity2 { get { return this.Quantity2Option; } set { this.Quantity2Option = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankJournalEntryVoucherLineDto {\n");
            sb.Append("  Accrual: ").Append(Accrual).Append("\n");
            sb.Append("  AgricultureDetails: ").Append(AgricultureDetails).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreditAccountAgricultureDepartment: ").Append(CreditAccountAgricultureDepartment).Append("\n");
            sb.Append("  CreditAccountId: ").Append(CreditAccountId).Append("\n");
            sb.Append("  CreditVatId: ").Append(CreditVatId).Append("\n");
            sb.Append("  CreditVatReturnSpecification: ").Append(CreditVatReturnSpecification).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  DebitAccountAgricultureDepartment: ").Append(DebitAccountAgricultureDepartment).Append("\n");
            sb.Append("  DebitAccountId: ").Append(DebitAccountId).Append("\n");
            sb.Append("  DebitVatId: ").Append(DebitVatId).Append("\n");
            sb.Append("  DebitVatReturnSpecification: ").Append(DebitVatReturnSpecification).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceNo: ").Append(InvoiceNo).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  PostingDate: ").Append(PostingDate).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Quantity2: ").Append(Quantity2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BankJournalEntryVoucherLineDto" />
    /// </summary>
    public class BankJournalEntryVoucherLineDtoJsonConverter : JsonConverter<BankJournalEntryVoucherLineDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PostingDate
        /// </summary>
        public static string PostingDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="BankJournalEntryVoucherLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BankJournalEntryVoucherLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AccrualBase?> accrual = default;
            Option<AgricultureDetails?> agricultureDetails = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<AgricultureDepartment?> creditAccountAgricultureDepartment = default;
            Option<long?> creditAccountId = default;
            Option<int?> creditVatId = default;
            Option<VatReturnSpecification?> creditVatReturnSpecification = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<AgricultureDepartment?> debitAccountAgricultureDepartment = default;
            Option<long?> debitAccountId = default;
            Option<int?> debitVatId = default;
            Option<VatReturnSpecification?> debitVatReturnSpecification = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<long?> id = default;
            Option<string?> invoiceNo = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<long?> locationId = default;
            Option<DateTimeOffset?> postingDate = default;
            Option<long?> productId = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> quantity2 = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Accrual":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrual = new Option<AccrualBase?>(JsonSerializer.Deserialize<AccrualBase>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "AgricultureDetails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agricultureDetails = new Option<AgricultureDetails?>(JsonSerializer.Deserialize<AgricultureDetails>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreditAccountAgricultureDepartment":
                            string? creditAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (creditAccountAgricultureDepartmentRawValue != null)
                                creditAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(creditAccountAgricultureDepartmentRawValue));
                            break;
                        case "CreditAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreditVatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creditVatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "CreditVatReturnSpecification":
                            string? creditVatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (creditVatReturnSpecificationRawValue != null)
                                creditVatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(creditVatReturnSpecificationRawValue));
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "DebitAccountAgricultureDepartment":
                            string? debitAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (debitAccountAgricultureDepartmentRawValue != null)
                                debitAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(debitAccountAgricultureDepartmentRawValue));
                            break;
                        case "DebitAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debitAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DebitVatId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debitVatId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "DebitVatReturnSpecification":
                            string? debitVatReturnSpecificationRawValue = utf8JsonReader.GetString();
                            if (debitVatReturnSpecificationRawValue != null)
                                debitVatReturnSpecification = new Option<VatReturnSpecification?>(VatReturnSpecificationValueConverter.FromStringOrDefault(debitVatReturnSpecificationRawValue));
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "InvoiceNo":
                            invoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PostingDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postingDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ProductId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Quantity2":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity2 = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accrual.IsSet && accrual.Value == null)
                throw new ArgumentNullException(nameof(accrual), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            if (agricultureDetails.IsSet && agricultureDetails.Value == null)
                throw new ArgumentNullException(nameof(agricultureDetails), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class BankJournalEntryVoucherLineDto.");

            return new BankJournalEntryVoucherLineDto(accrual, agricultureDetails, createdDateTimeOffset, creditAccountAgricultureDepartment, creditAccountId, creditVatId, creditVatReturnSpecification, currencyAmount, currencyCode, currencyExchangeRate, debitAccountAgricultureDepartment, debitAccountId, debitVatId, debitVatReturnSpecification, departmentId, description, dim1Id, dim2Id, dim3Id, id, invoiceNo, lastChangedDateTimeOffset, locationId, postingDate, productId, projectId, quantity, quantity2);
        }

        /// <summary>
        /// Serializes a <see cref="BankJournalEntryVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankJournalEntryVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BankJournalEntryVoucherLineDto bankJournalEntryVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bankJournalEntryVoucherLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BankJournalEntryVoucherLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bankJournalEntryVoucherLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BankJournalEntryVoucherLineDto bankJournalEntryVoucherLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bankJournalEntryVoucherLineDto.AccrualOption.IsSet && bankJournalEntryVoucherLineDto.Accrual == null)
                throw new ArgumentNullException(nameof(bankJournalEntryVoucherLineDto.Accrual), "Property is required for class BankJournalEntryVoucherLineDto.");

            if (bankJournalEntryVoucherLineDto.AgricultureDetailsOption.IsSet && bankJournalEntryVoucherLineDto.AgricultureDetails == null)
                throw new ArgumentNullException(nameof(bankJournalEntryVoucherLineDto.AgricultureDetails), "Property is required for class BankJournalEntryVoucherLineDto.");

            if (bankJournalEntryVoucherLineDto.AccrualOption.IsSet)
            {
                writer.WritePropertyName("Accrual");
                JsonSerializer.Serialize(writer, bankJournalEntryVoucherLineDto.Accrual, jsonSerializerOptions);
            }
            if (bankJournalEntryVoucherLineDto.AgricultureDetailsOption.IsSet)
            {
                writer.WritePropertyName("AgricultureDetails");
                JsonSerializer.Serialize(writer, bankJournalEntryVoucherLineDto.AgricultureDetails, jsonSerializerOptions);
            }
            if (bankJournalEntryVoucherLineDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", bankJournalEntryVoucherLineDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (bankJournalEntryVoucherLineDto.CreditAccountAgricultureDepartmentOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CreditAccountAgricultureDepartmentOption!.Value != null)
                {
                    var creditAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(bankJournalEntryVoucherLineDto.CreditAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("CreditAccountAgricultureDepartment", creditAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("CreditAccountAgricultureDepartment");
            if (bankJournalEntryVoucherLineDto.CreditAccountIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CreditAccountIdOption.Value != null)
                    writer.WriteNumber("CreditAccountId", bankJournalEntryVoucherLineDto.CreditAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("CreditAccountId");

            if (bankJournalEntryVoucherLineDto.CreditVatIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CreditVatIdOption.Value != null)
                    writer.WriteNumber("CreditVatId", bankJournalEntryVoucherLineDto.CreditVatIdOption.Value!.Value);
                else
                    writer.WriteNull("CreditVatId");

            if (bankJournalEntryVoucherLineDto.CreditVatReturnSpecificationOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CreditVatReturnSpecificationOption!.Value != null)
                {
                    var creditVatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(bankJournalEntryVoucherLineDto.CreditVatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("CreditVatReturnSpecification", creditVatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("CreditVatReturnSpecification");
            if (bankJournalEntryVoucherLineDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", bankJournalEntryVoucherLineDto.CurrencyAmountOption.Value!.Value);

            if (bankJournalEntryVoucherLineDto.CurrencyCodeOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", bankJournalEntryVoucherLineDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (bankJournalEntryVoucherLineDto.CurrencyExchangeRateOption.IsSet)
                if (bankJournalEntryVoucherLineDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", bankJournalEntryVoucherLineDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (bankJournalEntryVoucherLineDto.DebitAccountAgricultureDepartmentOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DebitAccountAgricultureDepartmentOption!.Value != null)
                {
                    var debitAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(bankJournalEntryVoucherLineDto.DebitAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("DebitAccountAgricultureDepartment", debitAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("DebitAccountAgricultureDepartment");
            if (bankJournalEntryVoucherLineDto.DebitAccountIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DebitAccountIdOption.Value != null)
                    writer.WriteNumber("DebitAccountId", bankJournalEntryVoucherLineDto.DebitAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("DebitAccountId");

            if (bankJournalEntryVoucherLineDto.DebitVatIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DebitVatIdOption.Value != null)
                    writer.WriteNumber("DebitVatId", bankJournalEntryVoucherLineDto.DebitVatIdOption.Value!.Value);
                else
                    writer.WriteNull("DebitVatId");

            if (bankJournalEntryVoucherLineDto.DebitVatReturnSpecificationOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DebitVatReturnSpecificationOption!.Value != null)
                {
                    var debitVatReturnSpecificationRawValue = VatReturnSpecificationValueConverter.ToJsonValue(bankJournalEntryVoucherLineDto.DebitVatReturnSpecificationOption.Value!.Value);
                    writer.WriteString("DebitVatReturnSpecification", debitVatReturnSpecificationRawValue);
                }
                else
                    writer.WriteNull("DebitVatReturnSpecification");
            if (bankJournalEntryVoucherLineDto.DepartmentIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", bankJournalEntryVoucherLineDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (bankJournalEntryVoucherLineDto.DescriptionOption.IsSet)
                if (bankJournalEntryVoucherLineDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", bankJournalEntryVoucherLineDto.Description);
                else
                    writer.WriteNull("Description");

            if (bankJournalEntryVoucherLineDto.Dim1IdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", bankJournalEntryVoucherLineDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (bankJournalEntryVoucherLineDto.Dim2IdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", bankJournalEntryVoucherLineDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (bankJournalEntryVoucherLineDto.Dim3IdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", bankJournalEntryVoucherLineDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (bankJournalEntryVoucherLineDto.IdOption.IsSet)
                writer.WriteNumber("Id", bankJournalEntryVoucherLineDto.IdOption.Value!.Value);

            if (bankJournalEntryVoucherLineDto.InvoiceNoOption.IsSet)
                if (bankJournalEntryVoucherLineDto.InvoiceNoOption.Value != null)
                    writer.WriteString("InvoiceNo", bankJournalEntryVoucherLineDto.InvoiceNo);
                else
                    writer.WriteNull("InvoiceNo");

            if (bankJournalEntryVoucherLineDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", bankJournalEntryVoucherLineDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (bankJournalEntryVoucherLineDto.LocationIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", bankJournalEntryVoucherLineDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (bankJournalEntryVoucherLineDto.PostingDateOption.IsSet)
                if (bankJournalEntryVoucherLineDto.PostingDateOption.Value != null)
                    writer.WriteString("PostingDate", bankJournalEntryVoucherLineDto.PostingDateOption.Value!.Value.ToString(PostingDateFormat));
                else
                    writer.WriteNull("PostingDate");

            if (bankJournalEntryVoucherLineDto.ProductIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.ProductIdOption.Value != null)
                    writer.WriteNumber("ProductId", bankJournalEntryVoucherLineDto.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductId");

            if (bankJournalEntryVoucherLineDto.ProjectIdOption.IsSet)
                if (bankJournalEntryVoucherLineDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", bankJournalEntryVoucherLineDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (bankJournalEntryVoucherLineDto.QuantityOption.IsSet)
                if (bankJournalEntryVoucherLineDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", bankJournalEntryVoucherLineDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (bankJournalEntryVoucherLineDto.Quantity2Option.IsSet)
                if (bankJournalEntryVoucherLineDto.Quantity2Option.Value != null)
                    writer.WriteNumber("Quantity2", bankJournalEntryVoucherLineDto.Quantity2Option.Value!.Value);
                else
                    writer.WriteNull("Quantity2");
        }
    }
}
