// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Contains information about the onboarded client.
    /// </summary>
    public partial class OnboardedClientInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardedClientInformation" /> class.
        /// </summary>
        /// <param name="clientKey">The clientkey for the specific client.  This key is a secret, and must be stored and handled as such.  The clientkey is unique per instance of a client integration - i.e. unique per client.  Please refer to our documentation for all the details on the client credentials grant flow.</param>
        /// <param name="clientName">The name of the client that onboarded the integrated application.</param>
        /// <param name="clientOrganizationNumber">The organization number of the client that onboarded the integrated application and the related clientkey.</param>
        [JsonConstructor]
        internal OnboardedClientInformation(Option<Guid?> clientKey = default, Option<string?> clientName = default, Option<string?> clientOrganizationNumber = default)
        {
            ClientKeyOption = clientKey;
            ClientNameOption = clientName;
            ClientOrganizationNumberOption = clientOrganizationNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ClientKeyOption { get; }

        /// <summary>
        /// The clientkey for the specific client.  This key is a secret, and must be stored and handled as such.  The clientkey is unique per instance of a client integration - i.e. unique per client.  Please refer to our documentation for all the details on the client credentials grant flow.
        /// </summary>
        /// <value>The clientkey for the specific client.  This key is a secret, and must be stored and handled as such.  The clientkey is unique per instance of a client integration - i.e. unique per client.  Please refer to our documentation for all the details on the client credentials grant flow.</value>
        /* <example>f1ba4158-7bbc-4ecc-a68d-1a8ac42c5480</example> */
        [JsonPropertyName("ClientKey")]
        public Guid? ClientKey { get { return this.ClientKeyOption; } }

        /// <summary>
        /// Used to track the state of ClientName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientNameOption { get; }

        /// <summary>
        /// The name of the client that onboarded the integrated application.
        /// </summary>
        /// <value>The name of the client that onboarded the integrated application.</value>
        /* <example>ABC AS</example> */
        [JsonPropertyName("ClientName")]
        public string? ClientName { get { return this.ClientNameOption; } }

        /// <summary>
        /// Used to track the state of ClientOrganizationNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientOrganizationNumberOption { get; }

        /// <summary>
        /// The organization number of the client that onboarded the integrated application and the related clientkey.
        /// </summary>
        /// <value>The organization number of the client that onboarded the integrated application and the related clientkey.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("ClientOrganizationNumber")]
        public string? ClientOrganizationNumber { get { return this.ClientOrganizationNumberOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OnboardedClientInformation {\n");
            sb.Append("  ClientKey: ").Append(ClientKey).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ClientOrganizationNumber: ").Append(ClientOrganizationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OnboardedClientInformation" />
    /// </summary>
    public class OnboardedClientInformationJsonConverter : JsonConverter<OnboardedClientInformation>
    {
        /// <summary>
        /// Deserializes json to <see cref="OnboardedClientInformation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OnboardedClientInformation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> clientKey = default;
            Option<string?> clientName = default;
            Option<string?> clientOrganizationNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ClientKey":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clientKey = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ClientName":
                            clientName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ClientOrganizationNumber":
                            clientOrganizationNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientKey.IsSet && clientKey.Value == null)
                throw new ArgumentNullException(nameof(clientKey), "Property is not nullable for class OnboardedClientInformation.");

            return new OnboardedClientInformation(clientKey, clientName, clientOrganizationNumber);
        }

        /// <summary>
        /// Serializes a <see cref="OnboardedClientInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="onboardedClientInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OnboardedClientInformation onboardedClientInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, onboardedClientInformation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OnboardedClientInformation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="onboardedClientInformation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OnboardedClientInformation onboardedClientInformation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (onboardedClientInformation.ClientKeyOption.IsSet)
                writer.WriteString("ClientKey", onboardedClientInformation.ClientKeyOption.Value!.Value);

            if (onboardedClientInformation.ClientNameOption.IsSet)
                if (onboardedClientInformation.ClientNameOption.Value != null)
                    writer.WriteString("ClientName", onboardedClientInformation.ClientName);
                else
                    writer.WriteNull("ClientName");

            if (onboardedClientInformation.ClientOrganizationNumberOption.IsSet)
                if (onboardedClientInformation.ClientOrganizationNumberOption.Value != null)
                    writer.WriteString("ClientOrganizationNumber", onboardedClientInformation.ClientOrganizationNumber);
                else
                    writer.WriteNull("ClientOrganizationNumber");
        }
    }
}
