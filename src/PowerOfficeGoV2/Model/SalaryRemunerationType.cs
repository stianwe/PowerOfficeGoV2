// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The remuneration-type of an employment salary.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Commission&lt;/i&gt; - Paid on commission, by percentage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedWage&lt;/i&gt; - Fixed wage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HourlyWage&lt;/i&gt; - Hourly wage.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The remuneration-type of an employment salary.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Commission&lt;/i&gt; - Paid on commission, by percentage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedWage&lt;/i&gt; - Fixed wage.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HourlyWage&lt;/i&gt; - Hourly wage.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum SalaryRemunerationType
    {
        /// <summary>
        /// Enum Commission for value: Commission
        /// </summary>
        Commission = 1,

        /// <summary>
        /// Enum FixedWage for value: FixedWage
        /// </summary>
        FixedWage = 2,

        /// <summary>
        /// Enum HourlyWage for value: HourlyWage
        /// </summary>
        HourlyWage = 3
    }

    /// <summary>
    /// Converts <see cref="SalaryRemunerationType"/> to and from the JSON value
    /// </summary>
    public static class SalaryRemunerationTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SalaryRemunerationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SalaryRemunerationType FromString(string value)
        {
            if (value.Equals("Commission"))
                return SalaryRemunerationType.Commission;

            if (value.Equals("FixedWage"))
                return SalaryRemunerationType.FixedWage;

            if (value.Equals("HourlyWage"))
                return SalaryRemunerationType.HourlyWage;

            throw new NotImplementedException($"Could not convert value to type SalaryRemunerationType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SalaryRemunerationType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SalaryRemunerationType? FromStringOrDefault(string value)
        {
            if (value.Equals("Commission"))
                return SalaryRemunerationType.Commission;

            if (value.Equals("FixedWage"))
                return SalaryRemunerationType.FixedWage;

            if (value.Equals("HourlyWage"))
                return SalaryRemunerationType.HourlyWage;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SalaryRemunerationType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SalaryRemunerationType value)
        {
            if (value == SalaryRemunerationType.Commission)
                return "Commission";

            if (value == SalaryRemunerationType.FixedWage)
                return "FixedWage";

            if (value == SalaryRemunerationType.HourlyWage)
                return "HourlyWage";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalaryRemunerationType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SalaryRemunerationTypeJsonConverter : JsonConverter<SalaryRemunerationType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SalaryRemunerationType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SalaryRemunerationType? result = rawValue == null
                ? null
                : SalaryRemunerationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SalaryRemunerationType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salaryRemunerationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SalaryRemunerationType salaryRemunerationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(salaryRemunerationType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalaryRemunerationType"/>
    /// </summary>
    public class SalaryRemunerationTypeNullableJsonConverter : JsonConverter<SalaryRemunerationType?>
    {
        /// <summary>
        /// Returns a SalaryRemunerationType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SalaryRemunerationType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SalaryRemunerationType? result = rawValue == null
                ? null
                : SalaryRemunerationTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salaryRemunerationType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SalaryRemunerationType? salaryRemunerationType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(salaryRemunerationType?.ToString() ?? "null");
        }
    }
}
