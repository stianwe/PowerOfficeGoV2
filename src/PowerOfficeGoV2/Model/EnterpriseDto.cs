// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enterprises available on the client.
    /// </summary>
    public partial class EnterpriseDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnterpriseDto" /> class.
        /// </summary>
        /// <param name="createdDateTimeOffset">Gets the timestamp the enterprise entity was created.</param>
        /// <param name="employerContributionRule">employerContributionRule</param>
        /// <param name="employerContributionZone">employerContributionZone</param>
        /// <param name="enterpriseNo">The enterprise number.</param>
        /// <param name="id">The identifier of the enterprise.</param>
        /// <param name="isDefault">Indicates if this is the default enterprise.  New employments will be assigned to the default enterprise if not set when employments are created</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp the enterprise was last changed.</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="municipality">The number of the municipality this enterprise belong to.</param>
        /// <param name="name">The name of the enterprise.</param>
        [JsonConstructor]
        public EnterpriseDto(Option<DateTimeOffset?> createdDateTimeOffset = default, Option<EmployerContributionRule?> employerContributionRule = default, Option<EmployerContributionZone?> employerContributionZone = default, Option<string?> enterpriseNo = default, Option<long?> id = default, Option<bool?> isDefault = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<AddressDto?> mailAddress = default, Option<string?> municipality = default, Option<string?> name = default)
        {
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            EmployerContributionRuleOption = employerContributionRule;
            EmployerContributionZoneOption = employerContributionZone;
            EnterpriseNoOption = enterpriseNo;
            IdOption = id;
            IsDefaultOption = isDefault;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            MailAddressOption = mailAddress;
            MunicipalityOption = municipality;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EmployerContributionRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmployerContributionRule?> EmployerContributionRuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmployerContributionRule
        /// </summary>
        [JsonPropertyName("EmployerContributionRule")]
        public EmployerContributionRule? EmployerContributionRule { get { return this.EmployerContributionRuleOption; } set { this.EmployerContributionRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmployerContributionZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmployerContributionZone?> EmployerContributionZoneOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmployerContributionZone
        /// </summary>
        [JsonPropertyName("EmployerContributionZone")]
        public EmployerContributionZone? EmployerContributionZone { get { return this.EmployerContributionZoneOption; } set { this.EmployerContributionZoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// Gets the timestamp the enterprise entity was created.
        /// </summary>
        /// <value>Gets the timestamp the enterprise entity was created.</value>
        /* <example>2021-09-30T08:03:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of EnterpriseNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnterpriseNoOption { get; }

        /// <summary>
        /// The enterprise number.
        /// </summary>
        /// <value>The enterprise number.</value>
        /* <example>973021028</example> */
        [JsonPropertyName("EnterpriseNo")]
        public string? EnterpriseNo { get { return this.EnterpriseNoOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the enterprise.
        /// </summary>
        /// <value>The identifier of the enterprise.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsDefault
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsDefaultOption { get; }

        /// <summary>
        /// Indicates if this is the default enterprise.  New employments will be assigned to the default enterprise if not set when employments are created
        /// </summary>
        /// <value>Indicates if this is the default enterprise.  New employments will be assigned to the default enterprise if not set when employments are created</value>
        /* <example>true</example> */
        [JsonPropertyName("IsDefault")]
        public bool? IsDefault { get { return this.IsDefaultOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp the enterprise was last changed.
        /// </summary>
        /// <value>The timestamp the enterprise was last changed.</value>
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of MailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AddressDto?> MailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public AddressDto? MailAddress { get { return this.MailAddressOption; } set { this.MailAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Municipality
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MunicipalityOption { get; }

        /// <summary>
        /// The number of the municipality this enterprise belong to.
        /// </summary>
        /// <value>The number of the municipality this enterprise belong to.</value>
        /* <example>1804</example> */
        [JsonPropertyName("Municipality")]
        public string? Municipality { get { return this.MunicipalityOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; }

        /// <summary>
        /// The name of the enterprise.
        /// </summary>
        /// <value>The name of the enterprise.</value>
        /* <example>PowerOffice Software</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnterpriseDto {\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  EmployerContributionRule: ").Append(EmployerContributionRule).Append("\n");
            sb.Append("  EmployerContributionZone: ").Append(EmployerContributionZone).Append("\n");
            sb.Append("  EnterpriseNo: ").Append(EnterpriseNo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  Municipality: ").Append(Municipality).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EnterpriseDto" />
    /// </summary>
    public class EnterpriseDtoJsonConverter : JsonConverter<EnterpriseDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EnterpriseDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<EmployerContributionRule?> employerContributionRule = default;
            Option<EmployerContributionZone?> employerContributionZone = default;
            Option<string?> enterpriseNo = default;
            Option<long?> id = default;
            Option<bool?> isDefault = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<AddressDto?> mailAddress = default;
            Option<string?> municipality = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "EmployerContributionRule":
                            string? employerContributionRuleRawValue = utf8JsonReader.GetString();
                            if (employerContributionRuleRawValue != null)
                                employerContributionRule = new Option<EmployerContributionRule?>(EmployerContributionRuleValueConverter.FromStringOrDefault(employerContributionRuleRawValue));
                            break;
                        case "EmployerContributionZone":
                            string? employerContributionZoneRawValue = utf8JsonReader.GetString();
                            if (employerContributionZoneRawValue != null)
                                employerContributionZone = new Option<EmployerContributionZone?>(EmployerContributionZoneValueConverter.FromStringOrDefault(employerContributionZoneRawValue));
                            break;
                        case "EnterpriseNo":
                            enterpriseNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsDefault":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isDefault = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<AddressDto?>(JsonSerializer.Deserialize<AddressDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "Municipality":
                            municipality = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class EnterpriseDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class EnterpriseDto.");

            if (isDefault.IsSet && isDefault.Value == null)
                throw new ArgumentNullException(nameof(isDefault), "Property is not nullable for class EnterpriseDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class EnterpriseDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class EnterpriseDto.");

            return new EnterpriseDto(createdDateTimeOffset, employerContributionRule, employerContributionZone, enterpriseNo, id, isDefault, lastChangedDateTimeOffset, mailAddress, municipality, name);
        }

        /// <summary>
        /// Serializes a <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterpriseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EnterpriseDto enterpriseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, enterpriseDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EnterpriseDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="enterpriseDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EnterpriseDto enterpriseDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (enterpriseDto.MailAddressOption.IsSet && enterpriseDto.MailAddress == null)
                throw new ArgumentNullException(nameof(enterpriseDto.MailAddress), "Property is required for class EnterpriseDto.");

            if (enterpriseDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", enterpriseDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (enterpriseDto.EmployerContributionRuleOption.IsSet)
                if (enterpriseDto.EmployerContributionRuleOption!.Value != null)
                {
                    var employerContributionRuleRawValue = EmployerContributionRuleValueConverter.ToJsonValue(enterpriseDto.EmployerContributionRuleOption.Value!.Value);
                    writer.WriteString("EmployerContributionRule", employerContributionRuleRawValue);
                }
                else
                    writer.WriteNull("EmployerContributionRule");
            if (enterpriseDto.EmployerContributionZoneOption.IsSet)
                if (enterpriseDto.EmployerContributionZoneOption!.Value != null)
                {
                    var employerContributionZoneRawValue = EmployerContributionZoneValueConverter.ToJsonValue(enterpriseDto.EmployerContributionZoneOption.Value!.Value);
                    writer.WriteString("EmployerContributionZone", employerContributionZoneRawValue);
                }
                else
                    writer.WriteNull("EmployerContributionZone");
            if (enterpriseDto.EnterpriseNoOption.IsSet)
                if (enterpriseDto.EnterpriseNoOption.Value != null)
                    writer.WriteString("EnterpriseNo", enterpriseDto.EnterpriseNo);
                else
                    writer.WriteNull("EnterpriseNo");

            if (enterpriseDto.IdOption.IsSet)
                writer.WriteNumber("Id", enterpriseDto.IdOption.Value!.Value);

            if (enterpriseDto.IsDefaultOption.IsSet)
                writer.WriteBoolean("IsDefault", enterpriseDto.IsDefaultOption.Value!.Value);

            if (enterpriseDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", enterpriseDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (enterpriseDto.MailAddressOption.IsSet)
            {
                writer.WritePropertyName("MailAddress");
                JsonSerializer.Serialize(writer, enterpriseDto.MailAddress, jsonSerializerOptions);
            }
            if (enterpriseDto.MunicipalityOption.IsSet)
                if (enterpriseDto.MunicipalityOption.Value != null)
                    writer.WriteString("Municipality", enterpriseDto.Municipality);
                else
                    writer.WriteNull("Municipality");

            if (enterpriseDto.NameOption.IsSet)
                if (enterpriseDto.NameOption.Value != null)
                    writer.WriteString("Name", enterpriseDto.Name);
                else
                    writer.WriteNull("Name");
        }
    }
}
