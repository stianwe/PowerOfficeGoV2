// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining what kind of voucher the (outgoing) voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OutgoingInvoice&lt;/i&gt; - Outgoing invoice sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingCreditNote&lt;/i&gt; - Outgoing credit note sent from the client to a customer.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining what kind of voucher the (outgoing) voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;OutgoingInvoice&lt;/i&gt; - Outgoing invoice sent from the client to a customer.&lt;/li&gt;&lt;li&gt;&lt;i&gt;OutgoingCreditNote&lt;/i&gt; - Outgoing credit note sent from the client to a customer.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum OutgoingInvoiceVoucherType
    {
        /// <summary>
        /// Enum OutgoingInvoice for value: OutgoingInvoice
        /// </summary>
        OutgoingInvoice = 1,

        /// <summary>
        /// Enum OutgoingCreditNote for value: OutgoingCreditNote
        /// </summary>
        OutgoingCreditNote = 2
    }

    /// <summary>
    /// Converts <see cref="OutgoingInvoiceVoucherType"/> to and from the JSON value
    /// </summary>
    public static class OutgoingInvoiceVoucherTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OutgoingInvoiceVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OutgoingInvoiceVoucherType FromString(string value)
        {
            if (value.Equals("OutgoingInvoice"))
                return OutgoingInvoiceVoucherType.OutgoingInvoice;

            if (value.Equals("OutgoingCreditNote"))
                return OutgoingInvoiceVoucherType.OutgoingCreditNote;

            throw new NotImplementedException($"Could not convert value to type OutgoingInvoiceVoucherType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="OutgoingInvoiceVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OutgoingInvoiceVoucherType? FromStringOrDefault(string value)
        {
            if (value.Equals("OutgoingInvoice"))
                return OutgoingInvoiceVoucherType.OutgoingInvoice;

            if (value.Equals("OutgoingCreditNote"))
                return OutgoingInvoiceVoucherType.OutgoingCreditNote;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OutgoingInvoiceVoucherType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(OutgoingInvoiceVoucherType value)
        {
            if (value == OutgoingInvoiceVoucherType.OutgoingInvoice)
                return "OutgoingInvoice";

            if (value == OutgoingInvoiceVoucherType.OutgoingCreditNote)
                return "OutgoingCreditNote";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceVoucherType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OutgoingInvoiceVoucherTypeJsonConverter : JsonConverter<OutgoingInvoiceVoucherType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OutgoingInvoiceVoucherType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OutgoingInvoiceVoucherType? result = rawValue == null
                ? null
                : OutgoingInvoiceVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OutgoingInvoiceVoucherType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceVoucherType outgoingInvoiceVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(outgoingInvoiceVoucherType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OutgoingInvoiceVoucherType"/>
    /// </summary>
    public class OutgoingInvoiceVoucherTypeNullableJsonConverter : JsonConverter<OutgoingInvoiceVoucherType?>
    {
        /// <summary>
        /// Returns a OutgoingInvoiceVoucherType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OutgoingInvoiceVoucherType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OutgoingInvoiceVoucherType? result = rawValue == null
                ? null
                : OutgoingInvoiceVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="outgoingInvoiceVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OutgoingInvoiceVoucherType? outgoingInvoiceVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(outgoingInvoiceVoucherType?.ToString() ?? "null");
        }
    }
}
