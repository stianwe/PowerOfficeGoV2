// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Type of FNO status.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - Active (Norwegian: Aktiv)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AgreedLeave&lt;/i&gt; - Agreed Leave (Norwegian: Avtalt permisjon)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LaidOff&lt;/i&gt; - Laid Off (Norwegian: Permittert)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Sick&lt;/i&gt; - Sick (Norwegian: Syk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;StatutoryLeave&lt;/i&gt; - Statutory Leave (Norwegian: Lovfestet permisjon)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Type of FNO status.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Active&lt;/i&gt; - Active (Norwegian: Aktiv)&lt;/li&gt;&lt;li&gt;&lt;i&gt;AgreedLeave&lt;/i&gt; - Agreed Leave (Norwegian: Avtalt permisjon)&lt;/li&gt;&lt;li&gt;&lt;i&gt;LaidOff&lt;/i&gt; - Laid Off (Norwegian: Permittert)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Sick&lt;/i&gt; - Sick (Norwegian: Syk)&lt;/li&gt;&lt;li&gt;&lt;i&gt;StatutoryLeave&lt;/i&gt; - Statutory Leave (Norwegian: Lovfestet permisjon)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum FnoStatusType
    {
        /// <summary>
        /// Enum Active for value: Active
        /// </summary>
        Active = 1,

        /// <summary>
        /// Enum AgreedLeave for value: AgreedLeave
        /// </summary>
        AgreedLeave = 2,

        /// <summary>
        /// Enum LaidOff for value: LaidOff
        /// </summary>
        LaidOff = 3,

        /// <summary>
        /// Enum Sick for value: Sick
        /// </summary>
        Sick = 4,

        /// <summary>
        /// Enum StatutoryLeave for value: StatutoryLeave
        /// </summary>
        StatutoryLeave = 5
    }

    /// <summary>
    /// Converts <see cref="FnoStatusType"/> to and from the JSON value
    /// </summary>
    public static class FnoStatusTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="FnoStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FnoStatusType FromString(string value)
        {
            if (value.Equals("Active"))
                return FnoStatusType.Active;

            if (value.Equals("AgreedLeave"))
                return FnoStatusType.AgreedLeave;

            if (value.Equals("LaidOff"))
                return FnoStatusType.LaidOff;

            if (value.Equals("Sick"))
                return FnoStatusType.Sick;

            if (value.Equals("StatutoryLeave"))
                return FnoStatusType.StatutoryLeave;

            throw new NotImplementedException($"Could not convert value to type FnoStatusType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="FnoStatusType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FnoStatusType? FromStringOrDefault(string value)
        {
            if (value.Equals("Active"))
                return FnoStatusType.Active;

            if (value.Equals("AgreedLeave"))
                return FnoStatusType.AgreedLeave;

            if (value.Equals("LaidOff"))
                return FnoStatusType.LaidOff;

            if (value.Equals("Sick"))
                return FnoStatusType.Sick;

            if (value.Equals("StatutoryLeave"))
                return FnoStatusType.StatutoryLeave;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FnoStatusType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(FnoStatusType value)
        {
            if (value == FnoStatusType.Active)
                return "Active";

            if (value == FnoStatusType.AgreedLeave)
                return "AgreedLeave";

            if (value == FnoStatusType.LaidOff)
                return "LaidOff";

            if (value == FnoStatusType.Sick)
                return "Sick";

            if (value == FnoStatusType.StatutoryLeave)
                return "StatutoryLeave";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FnoStatusType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class FnoStatusTypeJsonConverter : JsonConverter<FnoStatusType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FnoStatusType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FnoStatusType? result = rawValue == null
                ? null
                : FnoStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the FnoStatusType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fnoStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FnoStatusType fnoStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(fnoStatusType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FnoStatusType"/>
    /// </summary>
    public class FnoStatusTypeNullableJsonConverter : JsonConverter<FnoStatusType?>
    {
        /// <summary>
        /// Returns a FnoStatusType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override FnoStatusType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            FnoStatusType? result = rawValue == null
                ? null
                : FnoStatusTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fnoStatusType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, FnoStatusType? fnoStatusType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(fnoStatusType?.ToString() ?? "null");
        }
    }
}
