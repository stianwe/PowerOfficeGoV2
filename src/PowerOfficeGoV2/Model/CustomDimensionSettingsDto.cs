// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for CustomDimensionSettings, used for getting the client settings of the custom dimensions.
    /// </summary>
    public partial class CustomDimensionSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDimensionSettingsDto" /> class.
        /// </summary>
        /// <param name="isActive">A value indicating whether this dimension ordinal is active and in use. Inactive sets disable the usage of that custom dimension set in the GUI.</param>
        /// <param name="name">The the name of the custom dimension set of the given ordinal.  Provide information that indicate what the dimension set is used for. An example could be a client that has defined Dim1 to be \&quot;Machines\&quot;, where custom dimension values of Dim1 are the machine registration codes.</param>
        /// <param name="ordinal">The custom dimension set ordinal (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).</param>
        [JsonConstructor]
        internal CustomDimensionSettingsDto(Option<bool?> isActive = default, Option<string?> name = default, Option<int?> ordinal = default)
        {
            IsActiveOption = isActive;
            NameOption = name;
            OrdinalOption = ordinal;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; }

        /// <summary>
        /// A value indicating whether this dimension ordinal is active and in use. Inactive sets disable the usage of that custom dimension set in the GUI.
        /// </summary>
        /// <value>A value indicating whether this dimension ordinal is active and in use. Inactive sets disable the usage of that custom dimension set in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; }

        /// <summary>
        /// The the name of the custom dimension set of the given ordinal.  Provide information that indicate what the dimension set is used for. An example could be a client that has defined Dim1 to be \&quot;Machines\&quot;, where custom dimension values of Dim1 are the machine registration codes.
        /// </summary>
        /// <value>The the name of the custom dimension set of the given ordinal.  Provide information that indicate what the dimension set is used for. An example could be a client that has defined Dim1 to be \&quot;Machines\&quot;, where custom dimension values of Dim1 are the machine registration codes.</value>
        /* <example>Machines</example> */
        [JsonPropertyName("Name")]
        public string? Name { get { return this.NameOption; } }

        /// <summary>
        /// Used to track the state of Ordinal
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrdinalOption { get; }

        /// <summary>
        /// The custom dimension set ordinal (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).
        /// </summary>
        /// <value>The custom dimension set ordinal (1&#x3D;Dim1, 2&#x3D;Dim3, 3&#x3D;Dim3).</value>
        /* <example>1</example> */
        [JsonPropertyName("Ordinal")]
        public int? Ordinal { get { return this.OrdinalOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDimensionSettingsDto {\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CustomDimensionSettingsDto" />
    /// </summary>
    public class CustomDimensionSettingsDtoJsonConverter : JsonConverter<CustomDimensionSettingsDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="CustomDimensionSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CustomDimensionSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isActive = default;
            Option<string?> name = default;
            Option<int?> ordinal = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Ordinal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ordinal = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ordinal.IsSet && ordinal.Value == null)
                throw new ArgumentNullException(nameof(ordinal), "Property is not nullable for class CustomDimensionSettingsDto.");

            return new CustomDimensionSettingsDto(isActive, name, ordinal);
        }

        /// <summary>
        /// Serializes a <see cref="CustomDimensionSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customDimensionSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CustomDimensionSettingsDto customDimensionSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, customDimensionSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CustomDimensionSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="customDimensionSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CustomDimensionSettingsDto customDimensionSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (customDimensionSettingsDto.IsActiveOption.IsSet)
                if (customDimensionSettingsDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", customDimensionSettingsDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (customDimensionSettingsDto.NameOption.IsSet)
                if (customDimensionSettingsDto.NameOption.Value != null)
                    writer.WriteString("Name", customDimensionSettingsDto.Name);
                else
                    writer.WriteNull("Name");

            if (customDimensionSettingsDto.OrdinalOption.IsSet)
                writer.WriteNumber("Ordinal", customDimensionSettingsDto.OrdinalOption.Value!.Value);
        }
    }
}
