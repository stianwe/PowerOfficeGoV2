// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The Employment full-time equivalent (FTE) percentage post DTO contains all properties relevant to creating a new full-time equivalent (FTE) percentage (line) on an employment relationship object in Go.
    /// </summary>
    public partial class EmploymentFtePercentagePostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentFtePercentagePostDto" /> class.
        /// </summary>
        /// <param name="fromDate">The from-date for the effect of the employment full-time equivalent (FTE) percentage.</param>
        /// <param name="ftePercentage">The percentage of full-time equivalent (FTE) employment.  The value should be between 0 and 100 (reflects as 0% or 100% in the GUI).</param>
        [JsonConstructor]
        public EmploymentFtePercentagePostDto(DateOnly? fromDate = default, double? ftePercentage = default)
        {
            FromDate = fromDate;
            FtePercentage = ftePercentage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The from-date for the effect of the employment full-time equivalent (FTE) percentage.
        /// </summary>
        /// <value>The from-date for the effect of the employment full-time equivalent (FTE) percentage.</value>
        /* <example>Fri Jan 01 01:00:00 CET 2021</example> */
        [JsonPropertyName("FromDate")]
        public DateOnly? FromDate { get; set; }

        /// <summary>
        /// The percentage of full-time equivalent (FTE) employment.  The value should be between 0 and 100 (reflects as 0% or 100% in the GUI).
        /// </summary>
        /// <value>The percentage of full-time equivalent (FTE) employment.  The value should be between 0 and 100 (reflects as 0% or 100% in the GUI).</value>
        /* <example>52.45</example> */
        [JsonPropertyName("FtePercentage")]
        public double? FtePercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmploymentFtePercentagePostDto {\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  FtePercentage: ").Append(FtePercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmploymentFtePercentagePostDto" />
    /// </summary>
    public class EmploymentFtePercentagePostDtoJsonConverter : JsonConverter<EmploymentFtePercentagePostDto>
    {
        /// <summary>
        /// The format to use to serialize FromDate
        /// </summary>
        public static string FromDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="EmploymentFtePercentagePostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmploymentFtePercentagePostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> fromDate = default;
            Option<double?> ftePercentage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "FromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "FtePercentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ftePercentage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fromDate.IsSet)
                throw new ArgumentException("Property is required for class EmploymentFtePercentagePostDto.", nameof(fromDate));

            if (!ftePercentage.IsSet)
                throw new ArgumentException("Property is required for class EmploymentFtePercentagePostDto.", nameof(ftePercentage));

            return new EmploymentFtePercentagePostDto(fromDate.Value!, ftePercentage.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="EmploymentFtePercentagePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmploymentFtePercentagePostDto employmentFtePercentagePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, employmentFtePercentagePostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmploymentFtePercentagePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmploymentFtePercentagePostDto employmentFtePercentagePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (employmentFtePercentagePostDto.FromDate != null)
                writer.WriteString("FromDate", employmentFtePercentagePostDto.FromDate.Value.ToString(FromDateFormat));
            else
                writer.WriteNull("FromDate");

            if (employmentFtePercentagePostDto.FtePercentage != null)
                writer.WriteNumber("FtePercentage", employmentFtePercentagePostDto.FtePercentage.Value);
            else
                writer.WriteNull("FtePercentage");
        }
    }
}
