// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The payroll settings DTO contains all properties relevant to the payroll settings in Go.
    /// </summary>
    public partial class PayrollSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollSettingsDto" /> class.
        /// </summary>
        /// <param name="accrualOfEmployerContributionBalanceAccountId">The identifier of the general ledger balance account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="accrualOfEmployerContributionResultAccountId">The identifier of the general ledger result account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="accrualOfHolidayPayBalanceAccountId">The identifier of the general ledger balance account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="accrualOfHolidayPayResultAccountId">The identifier of the general ledger result account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="accrualOfWagesBalanceAccountId">The identifier of the general ledger balance account used for accrual of wages.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="accrualOfWagesResultAccountId">The identifier of the general ledger result account used for accrual of wages.   Only relevant if allow accrual of wages is set true.</param>
        /// <param name="addFinancialActivityTax">Property indicating whether to add financial activity tax for this client.   If true, several other properties can be set (related to financial activity tax).</param>
        /// <param name="allowAccrualOfWages">Property indicating whether accrual of wages can be set up and used.</param>
        /// <param name="allowDifferentRemunerationPeriodPerEmployee">Property indicating whether different remuneration periods can be set per employee.</param>
        /// <param name="attachmentOfEarningsBalanceAccountId">The identifier of the general ledger balance account used for attachment of earnings.</param>
        /// <param name="daysInWeekHolidayPay">daysInWeekHolidayPay</param>
        /// <param name="employerContributionAllottedHolidayPayBalanceAccountId">The identifier of the general ledger balance account used for the employer&#39;s contribution of allotted holiday pay.</param>
        /// <param name="employerContributionAllottedHolidayPayResultAccountId">The identifier of the general ledger result account used for the cost of employer&#39;s contribution of allotted holiday pay.</param>
        /// <param name="employerContributionBalanceAccountId">The identifier of the general ledger balance account used for the employer&#39;s contribution.</param>
        /// <param name="employerContributionFreeAllowanceAvailable">The free allowance amount for employer contribution.  If null, the field will inherit the official free allowance amount of the current year based on the employer contribution rule for general industries.</param>
        /// <param name="employerContributionPaymentOfHolidayPayAccountId">The identifier of the general ledger account used for the cost of employer&#39;s contribution upon payment of holiday pay.</param>
        /// <param name="employerContributionPaymentOfHolidayPayBalanceAccountId">The identifier of the general ledger balance account used for the employer&#39;s contribution upon payment of holiday pay.</param>
        /// <param name="employerContributionResultAccountId">The identifier of the general ledger result account used for the cost of employer&#39;s contribution.</param>
        /// <param name="employerContributionRule">employerContributionRule</param>
        /// <param name="employmentType">employmentType</param>
        /// <param name="enableFlexTimePayout">Property indicating whether payout of flextime hours is allowed.</param>
        /// <param name="financialActivityAllottedHolidayPayBalanceAccountId">The identifier of the general ledger balance account used for the financial activity allotted holiday pay.</param>
        /// <param name="financialActivityAllottedHolidayPayResultAccountId">The identifier of the general ledger result account used for the financial activity allotted holiday pay.</param>
        /// <param name="financialActivityPaymentOfHolidayPayAccountId">The identifier of the general ledger account used for the financial activity payment of holiday pay.</param>
        /// <param name="financialActivityPaymentOfHolidayPayBalanceAccountId">The identifier of the general ledger balance account used for the financial activity payment of holiday pay.</param>
        /// <param name="financialActivityTaxBalanceAccountId">The identifier of the general ledger balance account used for the financial activity tax.</param>
        /// <param name="financialActivityTaxResultAccountId">The identifier of the general ledger result account used for the financial activity tax.</param>
        /// <param name="fullTimeHoursPerWeek">The number of hours that would represent full time week of employment.</param>
        /// <param name="holidayPayAbove60BalanceAccountId">The identifier of the general ledger balance account used the holiday pay above 60 years.</param>
        /// <param name="holidayPayAbove60Percentage">The holiday pay percentage above 60 years.</param>
        /// <param name="holidayPayAbove60ResultAccountId">The identifier of the general ledger result account used for the cost of holiday pay above 60 years.</param>
        /// <param name="holidayPayBalanceAccountId">The identifier of the general ledger balance account used for the holiday pay.</param>
        /// <param name="holidayPayPercentage">The holiday pay percentage.</param>
        /// <param name="holidayPayResultAccountId">The identifier of the general ledger result account used for the cost of holiday pay.</param>
        /// <param name="hoursPerYearFno">The number of hours per year for a full time employment, in terms of FNO reporting.</param>
        /// <param name="includeTimeTransactionsFromDate">The date define which time transactions from the time tracking module in PowerOffice that can be included in payrolls.</param>
        /// <param name="limitHolidayPayAbove60To6G">Property indicating whether holiday pay above 60 years is limited to 6G.</param>
        /// <param name="mergeImportedSalaryLines">Property indicating whether imported salary lines will be merged (if the lines have similar attributes)  when payrolls are created and imported salary lines included in the payroll.</param>
        /// <param name="monthlyPayDay">The day in a month for the salary pay.  Relevant if monthly remuneration is used.  Must be an integer between 1 and 31.  If 31 is used, the salary will always be paid on the last day of the month.</param>
        /// <param name="negativeFlextimePayItemId">The identifier of the pay item used for deduction of negative flextime.  Relevant only if enableFlextimePayout is true.</param>
        /// <param name="numberOfHolidays">The number of holidays.</param>
        /// <param name="numberOfHolidaysAbove60">The number of holidays above 60 years.</param>
        /// <param name="outstandingSalaryBalanceAccountId">The identifier of the general ledger balance account used for the outstanding salary (salary owed/to be paid).</param>
        /// <param name="owedTaxedBalanceAccountId">The identifier of the general ledger balance account used for owed taxes.</param>
        /// <param name="payslipDeliveryType">payslipDeliveryType</param>
        /// <param name="payslipLanguageType">payslipLanguageType</param>
        /// <param name="payslipPasswordType">payslipPasswordType</param>
        /// <param name="payslipSendScheduleType">payslipSendScheduleType</param>
        /// <param name="pensionAgeFno">The pension age in terms of FNO reporting.</param>
        /// <param name="pensionSchemesCount">The pension schemes count.  Use pension scheme GET endpoint to get the pension schemes.</param>
        /// <param name="positiveFlextimePayItemId">The identifier of the pay item used for payout of positive flextime.  Relevant only if enableFlextimePayout is true.</param>
        /// <param name="postVoucherOnK27ImportFromNav">Property indicating whether a voucher should be posted when importing K27 (sick-pay related) from NAV.</param>
        /// <param name="postVoucherOnK27ImportFromNavAccountId">The identifier of general ledger account used to post the voucher when importing K27 from NAV.   Relevant only if post voucher on K27 import from NAV is set true.</param>
        /// <param name="remunerationPeriod">remunerationPeriod</param>
        /// <param name="remunerationType">remunerationType</param>
        /// <param name="salaryPaymentBankAccountId">The identifier of client bank account used for payment of salary.  If null, the primary client bank account is used.</param>
        /// <param name="showCommentsOnPayslip">Property indicating whether salary line comments will be available on the payslip.</param>
        /// <param name="showHolidayPayEarnedCurrentYearOnPayslip">Property indicating whether the holiday pay earned the current year will be available on the payslip.</param>
        /// <param name="showHolidayPayEarnedLastYearOnPayslip">Property indicating whether the holiday pay earned last year will be available on the payslip.</param>
        /// <param name="showLogoOnPayslip">Property indicating whether the company logo will be visible on the payslip.</param>
        /// <param name="showPayItemsOnPayslip">Property indicating whether the pay item code will be displayed on the lines of the payslip.</param>
        /// <param name="showProjectOnPayslip">Property indicating whether the project name will be displayed on the lines of the payslip.</param>
        /// <param name="sickPayRefundPayItemId">The identifier of the pay item used for sick-pay refunds.</param>
        /// <param name="suggestedAccrualDate">suggestedAccrualDate</param>
        /// <param name="taxDeductionBankAccountId">The identifier of client bank account used for payment of tax deduction.  Must have a value if tax deduction bank guarantee (TaxDeductionBankGuarantee) is false.</param>
        /// <param name="taxDeductionBankGuarantee">Property indicating whether bank guarantee for tax deduction should be used.  If property is false, the property &#39;TaxDeductionBankAccountId&#39; should have value.</param>
        /// <param name="taxRule">taxRule</param>
        /// <param name="workingHoursArrangement">workingHoursArrangement</param>
        [JsonConstructor]
        public PayrollSettingsDto(Option<long?> accrualOfEmployerContributionBalanceAccountId = default, Option<long?> accrualOfEmployerContributionResultAccountId = default, Option<long?> accrualOfHolidayPayBalanceAccountId = default, Option<long?> accrualOfHolidayPayResultAccountId = default, Option<long?> accrualOfWagesBalanceAccountId = default, Option<long?> accrualOfWagesResultAccountId = default, Option<bool?> addFinancialActivityTax = default, Option<bool?> allowAccrualOfWages = default, Option<bool?> allowDifferentRemunerationPeriodPerEmployee = default, Option<long?> attachmentOfEarningsBalanceAccountId = default, Option<DaysInWeekHolidayPay?> daysInWeekHolidayPay = default, Option<long?> employerContributionAllottedHolidayPayBalanceAccountId = default, Option<long?> employerContributionAllottedHolidayPayResultAccountId = default, Option<long?> employerContributionBalanceAccountId = default, Option<double?> employerContributionFreeAllowanceAvailable = default, Option<long?> employerContributionPaymentOfHolidayPayAccountId = default, Option<long?> employerContributionPaymentOfHolidayPayBalanceAccountId = default, Option<long?> employerContributionResultAccountId = default, Option<EmployerContributionRule?> employerContributionRule = default, Option<EmploymentType?> employmentType = default, Option<bool?> enableFlexTimePayout = default, Option<long?> financialActivityAllottedHolidayPayBalanceAccountId = default, Option<long?> financialActivityAllottedHolidayPayResultAccountId = default, Option<long?> financialActivityPaymentOfHolidayPayAccountId = default, Option<long?> financialActivityPaymentOfHolidayPayBalanceAccountId = default, Option<long?> financialActivityTaxBalanceAccountId = default, Option<long?> financialActivityTaxResultAccountId = default, Option<double?> fullTimeHoursPerWeek = default, Option<long?> holidayPayAbove60BalanceAccountId = default, Option<double?> holidayPayAbove60Percentage = default, Option<long?> holidayPayAbove60ResultAccountId = default, Option<long?> holidayPayBalanceAccountId = default, Option<double?> holidayPayPercentage = default, Option<long?> holidayPayResultAccountId = default, Option<long?> hoursPerYearFno = default, Option<DateTimeOffset?> includeTimeTransactionsFromDate = default, Option<bool?> limitHolidayPayAbove60To6G = default, Option<bool?> mergeImportedSalaryLines = default, Option<long?> monthlyPayDay = default, Option<Guid?> negativeFlextimePayItemId = default, Option<long?> numberOfHolidays = default, Option<long?> numberOfHolidaysAbove60 = default, Option<long?> outstandingSalaryBalanceAccountId = default, Option<long?> owedTaxedBalanceAccountId = default, Option<PayslipDeliveryType?> payslipDeliveryType = default, Option<PayslipLanguageType?> payslipLanguageType = default, Option<PayslipPasswordType?> payslipPasswordType = default, Option<PayslipSendScheduleType?> payslipSendScheduleType = default, Option<long?> pensionAgeFno = default, Option<long?> pensionSchemesCount = default, Option<Guid?> positiveFlextimePayItemId = default, Option<bool?> postVoucherOnK27ImportFromNav = default, Option<long?> postVoucherOnK27ImportFromNavAccountId = default, Option<RemunerationPeriodType?> remunerationPeriod = default, Option<SalaryRemunerationType?> remunerationType = default, Option<long?> salaryPaymentBankAccountId = default, Option<bool?> showCommentsOnPayslip = default, Option<bool?> showHolidayPayEarnedCurrentYearOnPayslip = default, Option<bool?> showHolidayPayEarnedLastYearOnPayslip = default, Option<bool?> showLogoOnPayslip = default, Option<bool?> showPayItemsOnPayslip = default, Option<bool?> showProjectOnPayslip = default, Option<Guid?> sickPayRefundPayItemId = default, Option<PayrollAccrualModeType?> suggestedAccrualDate = default, Option<long?> taxDeductionBankAccountId = default, Option<bool?> taxDeductionBankGuarantee = default, Option<TaxRuleType?> taxRule = default, Option<WorkingHoursArrangementType?> workingHoursArrangement = default)
        {
            AccrualOfEmployerContributionBalanceAccountIdOption = accrualOfEmployerContributionBalanceAccountId;
            AccrualOfEmployerContributionResultAccountIdOption = accrualOfEmployerContributionResultAccountId;
            AccrualOfHolidayPayBalanceAccountIdOption = accrualOfHolidayPayBalanceAccountId;
            AccrualOfHolidayPayResultAccountIdOption = accrualOfHolidayPayResultAccountId;
            AccrualOfWagesBalanceAccountIdOption = accrualOfWagesBalanceAccountId;
            AccrualOfWagesResultAccountIdOption = accrualOfWagesResultAccountId;
            AddFinancialActivityTaxOption = addFinancialActivityTax;
            AllowAccrualOfWagesOption = allowAccrualOfWages;
            AllowDifferentRemunerationPeriodPerEmployeeOption = allowDifferentRemunerationPeriodPerEmployee;
            AttachmentOfEarningsBalanceAccountIdOption = attachmentOfEarningsBalanceAccountId;
            DaysInWeekHolidayPayOption = daysInWeekHolidayPay;
            EmployerContributionAllottedHolidayPayBalanceAccountIdOption = employerContributionAllottedHolidayPayBalanceAccountId;
            EmployerContributionAllottedHolidayPayResultAccountIdOption = employerContributionAllottedHolidayPayResultAccountId;
            EmployerContributionBalanceAccountIdOption = employerContributionBalanceAccountId;
            EmployerContributionFreeAllowanceAvailableOption = employerContributionFreeAllowanceAvailable;
            EmployerContributionPaymentOfHolidayPayAccountIdOption = employerContributionPaymentOfHolidayPayAccountId;
            EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption = employerContributionPaymentOfHolidayPayBalanceAccountId;
            EmployerContributionResultAccountIdOption = employerContributionResultAccountId;
            EmployerContributionRuleOption = employerContributionRule;
            EmploymentTypeOption = employmentType;
            EnableFlexTimePayoutOption = enableFlexTimePayout;
            FinancialActivityAllottedHolidayPayBalanceAccountIdOption = financialActivityAllottedHolidayPayBalanceAccountId;
            FinancialActivityAllottedHolidayPayResultAccountIdOption = financialActivityAllottedHolidayPayResultAccountId;
            FinancialActivityPaymentOfHolidayPayAccountIdOption = financialActivityPaymentOfHolidayPayAccountId;
            FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption = financialActivityPaymentOfHolidayPayBalanceAccountId;
            FinancialActivityTaxBalanceAccountIdOption = financialActivityTaxBalanceAccountId;
            FinancialActivityTaxResultAccountIdOption = financialActivityTaxResultAccountId;
            FullTimeHoursPerWeekOption = fullTimeHoursPerWeek;
            HolidayPayAbove60BalanceAccountIdOption = holidayPayAbove60BalanceAccountId;
            HolidayPayAbove60PercentageOption = holidayPayAbove60Percentage;
            HolidayPayAbove60ResultAccountIdOption = holidayPayAbove60ResultAccountId;
            HolidayPayBalanceAccountIdOption = holidayPayBalanceAccountId;
            HolidayPayPercentageOption = holidayPayPercentage;
            HolidayPayResultAccountIdOption = holidayPayResultAccountId;
            HoursPerYearFnoOption = hoursPerYearFno;
            IncludeTimeTransactionsFromDateOption = includeTimeTransactionsFromDate;
            LimitHolidayPayAbove60To6GOption = limitHolidayPayAbove60To6G;
            MergeImportedSalaryLinesOption = mergeImportedSalaryLines;
            MonthlyPayDayOption = monthlyPayDay;
            NegativeFlextimePayItemIdOption = negativeFlextimePayItemId;
            NumberOfHolidaysOption = numberOfHolidays;
            NumberOfHolidaysAbove60Option = numberOfHolidaysAbove60;
            OutstandingSalaryBalanceAccountIdOption = outstandingSalaryBalanceAccountId;
            OwedTaxedBalanceAccountIdOption = owedTaxedBalanceAccountId;
            PayslipDeliveryTypeOption = payslipDeliveryType;
            PayslipLanguageTypeOption = payslipLanguageType;
            PayslipPasswordTypeOption = payslipPasswordType;
            PayslipSendScheduleTypeOption = payslipSendScheduleType;
            PensionAgeFnoOption = pensionAgeFno;
            PensionSchemesCountOption = pensionSchemesCount;
            PositiveFlextimePayItemIdOption = positiveFlextimePayItemId;
            PostVoucherOnK27ImportFromNavOption = postVoucherOnK27ImportFromNav;
            PostVoucherOnK27ImportFromNavAccountIdOption = postVoucherOnK27ImportFromNavAccountId;
            RemunerationPeriodOption = remunerationPeriod;
            RemunerationTypeOption = remunerationType;
            SalaryPaymentBankAccountIdOption = salaryPaymentBankAccountId;
            ShowCommentsOnPayslipOption = showCommentsOnPayslip;
            ShowHolidayPayEarnedCurrentYearOnPayslipOption = showHolidayPayEarnedCurrentYearOnPayslip;
            ShowHolidayPayEarnedLastYearOnPayslipOption = showHolidayPayEarnedLastYearOnPayslip;
            ShowLogoOnPayslipOption = showLogoOnPayslip;
            ShowPayItemsOnPayslipOption = showPayItemsOnPayslip;
            ShowProjectOnPayslipOption = showProjectOnPayslip;
            SickPayRefundPayItemIdOption = sickPayRefundPayItemId;
            SuggestedAccrualDateOption = suggestedAccrualDate;
            TaxDeductionBankAccountIdOption = taxDeductionBankAccountId;
            TaxDeductionBankGuaranteeOption = taxDeductionBankGuarantee;
            TaxRuleOption = taxRule;
            WorkingHoursArrangementOption = workingHoursArrangement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DaysInWeekHolidayPay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DaysInWeekHolidayPay?> DaysInWeekHolidayPayOption { get; private set; }

        /// <summary>
        /// Gets or Sets DaysInWeekHolidayPay
        /// </summary>
        [JsonPropertyName("DaysInWeekHolidayPay")]
        public DaysInWeekHolidayPay? DaysInWeekHolidayPay { get { return this.DaysInWeekHolidayPayOption; } set { this.DaysInWeekHolidayPayOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmployerContributionRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmployerContributionRule?> EmployerContributionRuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmployerContributionRule
        /// </summary>
        [JsonPropertyName("EmployerContributionRule")]
        public EmployerContributionRule? EmployerContributionRule { get { return this.EmployerContributionRuleOption; } set { this.EmployerContributionRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmploymentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmploymentType?> EmploymentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmploymentType
        /// </summary>
        [JsonPropertyName("EmploymentType")]
        public EmploymentType? EmploymentType { get { return this.EmploymentTypeOption; } set { this.EmploymentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PayslipDeliveryType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PayslipDeliveryType?> PayslipDeliveryTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayslipDeliveryType
        /// </summary>
        [JsonPropertyName("PayslipDeliveryType")]
        public PayslipDeliveryType? PayslipDeliveryType { get { return this.PayslipDeliveryTypeOption; } set { this.PayslipDeliveryTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PayslipLanguageType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PayslipLanguageType?> PayslipLanguageTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayslipLanguageType
        /// </summary>
        [JsonPropertyName("PayslipLanguageType")]
        public PayslipLanguageType? PayslipLanguageType { get { return this.PayslipLanguageTypeOption; } set { this.PayslipLanguageTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PayslipPasswordType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PayslipPasswordType?> PayslipPasswordTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayslipPasswordType
        /// </summary>
        [JsonPropertyName("PayslipPasswordType")]
        public PayslipPasswordType? PayslipPasswordType { get { return this.PayslipPasswordTypeOption; } set { this.PayslipPasswordTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PayslipSendScheduleType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PayslipSendScheduleType?> PayslipSendScheduleTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PayslipSendScheduleType
        /// </summary>
        [JsonPropertyName("PayslipSendScheduleType")]
        public PayslipSendScheduleType? PayslipSendScheduleType { get { return this.PayslipSendScheduleTypeOption; } set { this.PayslipSendScheduleTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemunerationPeriod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RemunerationPeriodType?> RemunerationPeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemunerationPeriod
        /// </summary>
        [JsonPropertyName("RemunerationPeriod")]
        public RemunerationPeriodType? RemunerationPeriod { get { return this.RemunerationPeriodOption; } set { this.RemunerationPeriodOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemunerationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SalaryRemunerationType?> RemunerationTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemunerationType
        /// </summary>
        [JsonPropertyName("RemunerationType")]
        public SalaryRemunerationType? RemunerationType { get { return this.RemunerationTypeOption; } set { this.RemunerationTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SuggestedAccrualDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PayrollAccrualModeType?> SuggestedAccrualDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuggestedAccrualDate
        /// </summary>
        [JsonPropertyName("SuggestedAccrualDate")]
        public PayrollAccrualModeType? SuggestedAccrualDate { get { return this.SuggestedAccrualDateOption; } set { this.SuggestedAccrualDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxRuleType?> TaxRuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxRule
        /// </summary>
        [JsonPropertyName("TaxRule")]
        public TaxRuleType? TaxRule { get { return this.TaxRuleOption; } set { this.TaxRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of WorkingHoursArrangement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WorkingHoursArrangementType?> WorkingHoursArrangementOption { get; private set; }

        /// <summary>
        /// Gets or Sets WorkingHoursArrangement
        /// </summary>
        [JsonPropertyName("WorkingHoursArrangement")]
        public WorkingHoursArrangementType? WorkingHoursArrangement { get { return this.WorkingHoursArrangementOption; } set { this.WorkingHoursArrangementOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccrualOfEmployerContributionBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfEmployerContributionBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfEmployerContributionBalanceAccountId")]
        public long? AccrualOfEmployerContributionBalanceAccountId { get { return this.AccrualOfEmployerContributionBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccrualOfEmployerContributionResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfEmployerContributionResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for accrual of employer&#39;s contribution.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfEmployerContributionResultAccountId")]
        public long? AccrualOfEmployerContributionResultAccountId { get { return this.AccrualOfEmployerContributionResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccrualOfHolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfHolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfHolidayPayBalanceAccountId")]
        public long? AccrualOfHolidayPayBalanceAccountId { get { return this.AccrualOfHolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccrualOfHolidayPayResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfHolidayPayResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for accrual of holiday pay.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfHolidayPayResultAccountId")]
        public long? AccrualOfHolidayPayResultAccountId { get { return this.AccrualOfHolidayPayResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccrualOfWagesBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfWagesBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for accrual of wages.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for accrual of wages.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfWagesBalanceAccountId")]
        public long? AccrualOfWagesBalanceAccountId { get { return this.AccrualOfWagesBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccrualOfWagesResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccrualOfWagesResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for accrual of wages.   Only relevant if allow accrual of wages is set true.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for accrual of wages.   Only relevant if allow accrual of wages is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccrualOfWagesResultAccountId")]
        public long? AccrualOfWagesResultAccountId { get { return this.AccrualOfWagesResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of AddFinancialActivityTax
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AddFinancialActivityTaxOption { get; }

        /// <summary>
        /// Property indicating whether to add financial activity tax for this client.   If true, several other properties can be set (related to financial activity tax).
        /// </summary>
        /// <value>Property indicating whether to add financial activity tax for this client.   If true, several other properties can be set (related to financial activity tax).</value>
        /* <example>true</example> */
        [JsonPropertyName("AddFinancialActivityTax")]
        public bool? AddFinancialActivityTax { get { return this.AddFinancialActivityTaxOption; } }

        /// <summary>
        /// Used to track the state of AllowAccrualOfWages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowAccrualOfWagesOption { get; }

        /// <summary>
        /// Property indicating whether accrual of wages can be set up and used.
        /// </summary>
        /// <value>Property indicating whether accrual of wages can be set up and used.</value>
        /* <example>true</example> */
        [JsonPropertyName("AllowAccrualOfWages")]
        public bool? AllowAccrualOfWages { get { return this.AllowAccrualOfWagesOption; } }

        /// <summary>
        /// Used to track the state of AllowDifferentRemunerationPeriodPerEmployee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowDifferentRemunerationPeriodPerEmployeeOption { get; }

        /// <summary>
        /// Property indicating whether different remuneration periods can be set per employee.
        /// </summary>
        /// <value>Property indicating whether different remuneration periods can be set per employee.</value>
        /* <example>true</example> */
        [JsonPropertyName("AllowDifferentRemunerationPeriodPerEmployee")]
        public bool? AllowDifferentRemunerationPeriodPerEmployee { get { return this.AllowDifferentRemunerationPeriodPerEmployeeOption; } }

        /// <summary>
        /// Used to track the state of AttachmentOfEarningsBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AttachmentOfEarningsBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for attachment of earnings.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for attachment of earnings.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AttachmentOfEarningsBalanceAccountId")]
        public long? AttachmentOfEarningsBalanceAccountId { get { return this.AttachmentOfEarningsBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionAllottedHolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionAllottedHolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the employer&#39;s contribution of allotted holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the employer&#39;s contribution of allotted holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionAllottedHolidayPayBalanceAccountId")]
        public long? EmployerContributionAllottedHolidayPayBalanceAccountId { get { return this.EmployerContributionAllottedHolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionAllottedHolidayPayResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionAllottedHolidayPayResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the cost of employer&#39;s contribution of allotted holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the cost of employer&#39;s contribution of allotted holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionAllottedHolidayPayResultAccountId")]
        public long? EmployerContributionAllottedHolidayPayResultAccountId { get { return this.EmployerContributionAllottedHolidayPayResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the employer&#39;s contribution.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the employer&#39;s contribution.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionBalanceAccountId")]
        public long? EmployerContributionBalanceAccountId { get { return this.EmployerContributionBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionFreeAllowanceAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> EmployerContributionFreeAllowanceAvailableOption { get; }

        /// <summary>
        /// The free allowance amount for employer contribution.  If null, the field will inherit the official free allowance amount of the current year based on the employer contribution rule for general industries.
        /// </summary>
        /// <value>The free allowance amount for employer contribution.  If null, the field will inherit the official free allowance amount of the current year based on the employer contribution rule for general industries.</value>
        /* <example>123.56</example> */
        [JsonPropertyName("EmployerContributionFreeAllowanceAvailable")]
        public double? EmployerContributionFreeAllowanceAvailable { get { return this.EmployerContributionFreeAllowanceAvailableOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionPaymentOfHolidayPayAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionPaymentOfHolidayPayAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger account used for the cost of employer&#39;s contribution upon payment of holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger account used for the cost of employer&#39;s contribution upon payment of holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionPaymentOfHolidayPayAccountId")]
        public long? EmployerContributionPaymentOfHolidayPayAccountId { get { return this.EmployerContributionPaymentOfHolidayPayAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionPaymentOfHolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the employer&#39;s contribution upon payment of holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the employer&#39;s contribution upon payment of holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionPaymentOfHolidayPayBalanceAccountId")]
        public long? EmployerContributionPaymentOfHolidayPayBalanceAccountId { get { return this.EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EmployerContributionResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EmployerContributionResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the cost of employer&#39;s contribution.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the cost of employer&#39;s contribution.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployerContributionResultAccountId")]
        public long? EmployerContributionResultAccountId { get { return this.EmployerContributionResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of EnableFlexTimePayout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableFlexTimePayoutOption { get; }

        /// <summary>
        /// Property indicating whether payout of flextime hours is allowed.
        /// </summary>
        /// <value>Property indicating whether payout of flextime hours is allowed.</value>
        /* <example>true</example> */
        [JsonPropertyName("EnableFlexTimePayout")]
        public bool? EnableFlexTimePayout { get { return this.EnableFlexTimePayoutOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityAllottedHolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityAllottedHolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the financial activity allotted holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the financial activity allotted holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityAllottedHolidayPayBalanceAccountId")]
        public long? FinancialActivityAllottedHolidayPayBalanceAccountId { get { return this.FinancialActivityAllottedHolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityAllottedHolidayPayResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityAllottedHolidayPayResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the financial activity allotted holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the financial activity allotted holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityAllottedHolidayPayResultAccountId")]
        public long? FinancialActivityAllottedHolidayPayResultAccountId { get { return this.FinancialActivityAllottedHolidayPayResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityPaymentOfHolidayPayAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityPaymentOfHolidayPayAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger account used for the financial activity payment of holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger account used for the financial activity payment of holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityPaymentOfHolidayPayAccountId")]
        public long? FinancialActivityPaymentOfHolidayPayAccountId { get { return this.FinancialActivityPaymentOfHolidayPayAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityPaymentOfHolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the financial activity payment of holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the financial activity payment of holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityPaymentOfHolidayPayBalanceAccountId")]
        public long? FinancialActivityPaymentOfHolidayPayBalanceAccountId { get { return this.FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityTaxBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityTaxBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the financial activity tax.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the financial activity tax.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityTaxBalanceAccountId")]
        public long? FinancialActivityTaxBalanceAccountId { get { return this.FinancialActivityTaxBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FinancialActivityTaxResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FinancialActivityTaxResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the financial activity tax.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the financial activity tax.</value>
        /* <example>12345</example> */
        [JsonPropertyName("FinancialActivityTaxResultAccountId")]
        public long? FinancialActivityTaxResultAccountId { get { return this.FinancialActivityTaxResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of FullTimeHoursPerWeek
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> FullTimeHoursPerWeekOption { get; }

        /// <summary>
        /// The number of hours that would represent full time week of employment.
        /// </summary>
        /// <value>The number of hours that would represent full time week of employment.</value>
        /* <example>37.5</example> */
        [JsonPropertyName("FullTimeHoursPerWeek")]
        public double? FullTimeHoursPerWeek { get { return this.FullTimeHoursPerWeekOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayAbove60BalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> HolidayPayAbove60BalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used the holiday pay above 60 years.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used the holiday pay above 60 years.</value>
        /* <example>12345</example> */
        [JsonPropertyName("HolidayPayAbove60BalanceAccountId")]
        public long? HolidayPayAbove60BalanceAccountId { get { return this.HolidayPayAbove60BalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayAbove60Percentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HolidayPayAbove60PercentageOption { get; }

        /// <summary>
        /// The holiday pay percentage above 60 years.
        /// </summary>
        /// <value>The holiday pay percentage above 60 years.</value>
        /* <example>2.3</example> */
        [JsonPropertyName("HolidayPayAbove60Percentage")]
        public double? HolidayPayAbove60Percentage { get { return this.HolidayPayAbove60PercentageOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayAbove60ResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> HolidayPayAbove60ResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the cost of holiday pay above 60 years.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the cost of holiday pay above 60 years.</value>
        /* <example>12345</example> */
        [JsonPropertyName("HolidayPayAbove60ResultAccountId")]
        public long? HolidayPayAbove60ResultAccountId { get { return this.HolidayPayAbove60ResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> HolidayPayBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("HolidayPayBalanceAccountId")]
        public long? HolidayPayBalanceAccountId { get { return this.HolidayPayBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayPercentage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HolidayPayPercentageOption { get; }

        /// <summary>
        /// The holiday pay percentage.
        /// </summary>
        /// <value>The holiday pay percentage.</value>
        /* <example>10.2</example> */
        [JsonPropertyName("HolidayPayPercentage")]
        public double? HolidayPayPercentage { get { return this.HolidayPayPercentageOption; } }

        /// <summary>
        /// Used to track the state of HolidayPayResultAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> HolidayPayResultAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger result account used for the cost of holiday pay.
        /// </summary>
        /// <value>The identifier of the general ledger result account used for the cost of holiday pay.</value>
        /* <example>12345</example> */
        [JsonPropertyName("HolidayPayResultAccountId")]
        public long? HolidayPayResultAccountId { get { return this.HolidayPayResultAccountIdOption; } }

        /// <summary>
        /// Used to track the state of HoursPerYearFno
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> HoursPerYearFnoOption { get; }

        /// <summary>
        /// The number of hours per year for a full time employment, in terms of FNO reporting.
        /// </summary>
        /// <value>The number of hours per year for a full time employment, in terms of FNO reporting.</value>
        /* <example>1750</example> */
        [JsonPropertyName("HoursPerYearFno")]
        public long? HoursPerYearFno { get { return this.HoursPerYearFnoOption; } }

        /// <summary>
        /// Used to track the state of IncludeTimeTransactionsFromDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> IncludeTimeTransactionsFromDateOption { get; }

        /// <summary>
        /// The date define which time transactions from the time tracking module in PowerOffice that can be included in payrolls.
        /// </summary>
        /// <value>The date define which time transactions from the time tracking module in PowerOffice that can be included in payrolls.</value>
        [JsonPropertyName("IncludeTimeTransactionsFromDate")]
        public DateTimeOffset? IncludeTimeTransactionsFromDate { get { return this.IncludeTimeTransactionsFromDateOption; } }

        /// <summary>
        /// Used to track the state of LimitHolidayPayAbove60To6G
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LimitHolidayPayAbove60To6GOption { get; }

        /// <summary>
        /// Property indicating whether holiday pay above 60 years is limited to 6G.
        /// </summary>
        /// <value>Property indicating whether holiday pay above 60 years is limited to 6G.</value>
        /* <example>true</example> */
        [JsonPropertyName("LimitHolidayPayAbove60To6G")]
        public bool? LimitHolidayPayAbove60To6G { get { return this.LimitHolidayPayAbove60To6GOption; } }

        /// <summary>
        /// Used to track the state of MergeImportedSalaryLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MergeImportedSalaryLinesOption { get; }

        /// <summary>
        /// Property indicating whether imported salary lines will be merged (if the lines have similar attributes)  when payrolls are created and imported salary lines included in the payroll.
        /// </summary>
        /// <value>Property indicating whether imported salary lines will be merged (if the lines have similar attributes)  when payrolls are created and imported salary lines included in the payroll.</value>
        /* <example>true</example> */
        [JsonPropertyName("MergeImportedSalaryLines")]
        public bool? MergeImportedSalaryLines { get { return this.MergeImportedSalaryLinesOption; } }

        /// <summary>
        /// Used to track the state of MonthlyPayDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MonthlyPayDayOption { get; }

        /// <summary>
        /// The day in a month for the salary pay.  Relevant if monthly remuneration is used.  Must be an integer between 1 and 31.  If 31 is used, the salary will always be paid on the last day of the month.
        /// </summary>
        /// <value>The day in a month for the salary pay.  Relevant if monthly remuneration is used.  Must be an integer between 1 and 31.  If 31 is used, the salary will always be paid on the last day of the month.</value>
        /* <example>31</example> */
        [JsonPropertyName("MonthlyPayDay")]
        public long? MonthlyPayDay { get { return this.MonthlyPayDayOption; } }

        /// <summary>
        /// Used to track the state of NegativeFlextimePayItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> NegativeFlextimePayItemIdOption { get; }

        /// <summary>
        /// The identifier of the pay item used for deduction of negative flextime.  Relevant only if enableFlextimePayout is true.
        /// </summary>
        /// <value>The identifier of the pay item used for deduction of negative flextime.  Relevant only if enableFlextimePayout is true.</value>
        /* <example>595af05a-ed03-4fa3-a4be-672e72531af4</example> */
        [JsonPropertyName("NegativeFlextimePayItemId")]
        public Guid? NegativeFlextimePayItemId { get { return this.NegativeFlextimePayItemIdOption; } }

        /// <summary>
        /// Used to track the state of NumberOfHolidays
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NumberOfHolidaysOption { get; }

        /// <summary>
        /// The number of holidays.
        /// </summary>
        /// <value>The number of holidays.</value>
        /* <example>25</example> */
        [JsonPropertyName("NumberOfHolidays")]
        public long? NumberOfHolidays { get { return this.NumberOfHolidaysOption; } }

        /// <summary>
        /// Used to track the state of NumberOfHolidaysAbove60
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> NumberOfHolidaysAbove60Option { get; }

        /// <summary>
        /// The number of holidays above 60 years.
        /// </summary>
        /// <value>The number of holidays above 60 years.</value>
        /* <example>5</example> */
        [JsonPropertyName("NumberOfHolidaysAbove60")]
        public long? NumberOfHolidaysAbove60 { get { return this.NumberOfHolidaysAbove60Option; } }

        /// <summary>
        /// Used to track the state of OutstandingSalaryBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OutstandingSalaryBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for the outstanding salary (salary owed/to be paid).
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for the outstanding salary (salary owed/to be paid).</value>
        /* <example>12345</example> */
        [JsonPropertyName("OutstandingSalaryBalanceAccountId")]
        public long? OutstandingSalaryBalanceAccountId { get { return this.OutstandingSalaryBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of OwedTaxedBalanceAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OwedTaxedBalanceAccountIdOption { get; }

        /// <summary>
        /// The identifier of the general ledger balance account used for owed taxes.
        /// </summary>
        /// <value>The identifier of the general ledger balance account used for owed taxes.</value>
        /* <example>12345</example> */
        [JsonPropertyName("OwedTaxedBalanceAccountId")]
        public long? OwedTaxedBalanceAccountId { get { return this.OwedTaxedBalanceAccountIdOption; } }

        /// <summary>
        /// Used to track the state of PensionAgeFno
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PensionAgeFnoOption { get; }

        /// <summary>
        /// The pension age in terms of FNO reporting.
        /// </summary>
        /// <value>The pension age in terms of FNO reporting.</value>
        /* <example>67</example> */
        [JsonPropertyName("PensionAgeFno")]
        public long? PensionAgeFno { get { return this.PensionAgeFnoOption; } }

        /// <summary>
        /// Used to track the state of PensionSchemesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PensionSchemesCountOption { get; }

        /// <summary>
        /// The pension schemes count.  Use pension scheme GET endpoint to get the pension schemes.
        /// </summary>
        /// <value>The pension schemes count.  Use pension scheme GET endpoint to get the pension schemes.</value>
        /* <example>2</example> */
        [JsonPropertyName("PensionSchemesCount")]
        public long? PensionSchemesCount { get { return this.PensionSchemesCountOption; } }

        /// <summary>
        /// Used to track the state of PositiveFlextimePayItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> PositiveFlextimePayItemIdOption { get; }

        /// <summary>
        /// The identifier of the pay item used for payout of positive flextime.  Relevant only if enableFlextimePayout is true.
        /// </summary>
        /// <value>The identifier of the pay item used for payout of positive flextime.  Relevant only if enableFlextimePayout is true.</value>
        /* <example>595af05a-ed03-4fa3-a4be-672e72531af4</example> */
        [JsonPropertyName("PositiveFlextimePayItemId")]
        public Guid? PositiveFlextimePayItemId { get { return this.PositiveFlextimePayItemIdOption; } }

        /// <summary>
        /// Used to track the state of PostVoucherOnK27ImportFromNav
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PostVoucherOnK27ImportFromNavOption { get; }

        /// <summary>
        /// Property indicating whether a voucher should be posted when importing K27 (sick-pay related) from NAV.
        /// </summary>
        /// <value>Property indicating whether a voucher should be posted when importing K27 (sick-pay related) from NAV.</value>
        /* <example>true</example> */
        [JsonPropertyName("PostVoucherOnK27ImportFromNav")]
        public bool? PostVoucherOnK27ImportFromNav { get { return this.PostVoucherOnK27ImportFromNavOption; } }

        /// <summary>
        /// Used to track the state of PostVoucherOnK27ImportFromNavAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PostVoucherOnK27ImportFromNavAccountIdOption { get; }

        /// <summary>
        /// The identifier of general ledger account used to post the voucher when importing K27 from NAV.   Relevant only if post voucher on K27 import from NAV is set true.
        /// </summary>
        /// <value>The identifier of general ledger account used to post the voucher when importing K27 from NAV.   Relevant only if post voucher on K27 import from NAV is set true.</value>
        /* <example>12345</example> */
        [JsonPropertyName("PostVoucherOnK27ImportFromNavAccountId")]
        public long? PostVoucherOnK27ImportFromNavAccountId { get { return this.PostVoucherOnK27ImportFromNavAccountIdOption; } }

        /// <summary>
        /// Used to track the state of SalaryPaymentBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SalaryPaymentBankAccountIdOption { get; }

        /// <summary>
        /// The identifier of client bank account used for payment of salary.  If null, the primary client bank account is used.
        /// </summary>
        /// <value>The identifier of client bank account used for payment of salary.  If null, the primary client bank account is used.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SalaryPaymentBankAccountId")]
        public long? SalaryPaymentBankAccountId { get { return this.SalaryPaymentBankAccountIdOption; } }

        /// <summary>
        /// Used to track the state of ShowCommentsOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowCommentsOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether salary line comments will be available on the payslip.
        /// </summary>
        /// <value>Property indicating whether salary line comments will be available on the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowCommentsOnPayslip")]
        public bool? ShowCommentsOnPayslip { get { return this.ShowCommentsOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of ShowHolidayPayEarnedCurrentYearOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowHolidayPayEarnedCurrentYearOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether the holiday pay earned the current year will be available on the payslip.
        /// </summary>
        /// <value>Property indicating whether the holiday pay earned the current year will be available on the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowHolidayPayEarnedCurrentYearOnPayslip")]
        public bool? ShowHolidayPayEarnedCurrentYearOnPayslip { get { return this.ShowHolidayPayEarnedCurrentYearOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of ShowHolidayPayEarnedLastYearOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowHolidayPayEarnedLastYearOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether the holiday pay earned last year will be available on the payslip.
        /// </summary>
        /// <value>Property indicating whether the holiday pay earned last year will be available on the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowHolidayPayEarnedLastYearOnPayslip")]
        public bool? ShowHolidayPayEarnedLastYearOnPayslip { get { return this.ShowHolidayPayEarnedLastYearOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of ShowLogoOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowLogoOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether the company logo will be visible on the payslip.
        /// </summary>
        /// <value>Property indicating whether the company logo will be visible on the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowLogoOnPayslip")]
        public bool? ShowLogoOnPayslip { get { return this.ShowLogoOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of ShowPayItemsOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowPayItemsOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether the pay item code will be displayed on the lines of the payslip.
        /// </summary>
        /// <value>Property indicating whether the pay item code will be displayed on the lines of the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowPayItemsOnPayslip")]
        public bool? ShowPayItemsOnPayslip { get { return this.ShowPayItemsOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of ShowProjectOnPayslip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShowProjectOnPayslipOption { get; }

        /// <summary>
        /// Property indicating whether the project name will be displayed on the lines of the payslip.
        /// </summary>
        /// <value>Property indicating whether the project name will be displayed on the lines of the payslip.</value>
        /* <example>true</example> */
        [JsonPropertyName("ShowProjectOnPayslip")]
        public bool? ShowProjectOnPayslip { get { return this.ShowProjectOnPayslipOption; } }

        /// <summary>
        /// Used to track the state of SickPayRefundPayItemId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> SickPayRefundPayItemIdOption { get; }

        /// <summary>
        /// The identifier of the pay item used for sick-pay refunds.
        /// </summary>
        /// <value>The identifier of the pay item used for sick-pay refunds.</value>
        /* <example>595af05a-ed03-4fa3-a4be-672e72531af4</example> */
        [JsonPropertyName("SickPayRefundPayItemId")]
        public Guid? SickPayRefundPayItemId { get { return this.SickPayRefundPayItemIdOption; } }

        /// <summary>
        /// Used to track the state of TaxDeductionBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TaxDeductionBankAccountIdOption { get; }

        /// <summary>
        /// The identifier of client bank account used for payment of tax deduction.  Must have a value if tax deduction bank guarantee (TaxDeductionBankGuarantee) is false.
        /// </summary>
        /// <value>The identifier of client bank account used for payment of tax deduction.  Must have a value if tax deduction bank guarantee (TaxDeductionBankGuarantee) is false.</value>
        /* <example>12345</example> */
        [JsonPropertyName("TaxDeductionBankAccountId")]
        public long? TaxDeductionBankAccountId { get { return this.TaxDeductionBankAccountIdOption; } }

        /// <summary>
        /// Used to track the state of TaxDeductionBankGuarantee
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TaxDeductionBankGuaranteeOption { get; }

        /// <summary>
        /// Property indicating whether bank guarantee for tax deduction should be used.  If property is false, the property &#39;TaxDeductionBankAccountId&#39; should have value.
        /// </summary>
        /// <value>Property indicating whether bank guarantee for tax deduction should be used.  If property is false, the property &#39;TaxDeductionBankAccountId&#39; should have value.</value>
        /* <example>true</example> */
        [JsonPropertyName("TaxDeductionBankGuarantee")]
        public bool? TaxDeductionBankGuarantee { get { return this.TaxDeductionBankGuaranteeOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PayrollSettingsDto {\n");
            sb.Append("  AccrualOfEmployerContributionBalanceAccountId: ").Append(AccrualOfEmployerContributionBalanceAccountId).Append("\n");
            sb.Append("  AccrualOfEmployerContributionResultAccountId: ").Append(AccrualOfEmployerContributionResultAccountId).Append("\n");
            sb.Append("  AccrualOfHolidayPayBalanceAccountId: ").Append(AccrualOfHolidayPayBalanceAccountId).Append("\n");
            sb.Append("  AccrualOfHolidayPayResultAccountId: ").Append(AccrualOfHolidayPayResultAccountId).Append("\n");
            sb.Append("  AccrualOfWagesBalanceAccountId: ").Append(AccrualOfWagesBalanceAccountId).Append("\n");
            sb.Append("  AccrualOfWagesResultAccountId: ").Append(AccrualOfWagesResultAccountId).Append("\n");
            sb.Append("  AddFinancialActivityTax: ").Append(AddFinancialActivityTax).Append("\n");
            sb.Append("  AllowAccrualOfWages: ").Append(AllowAccrualOfWages).Append("\n");
            sb.Append("  AllowDifferentRemunerationPeriodPerEmployee: ").Append(AllowDifferentRemunerationPeriodPerEmployee).Append("\n");
            sb.Append("  AttachmentOfEarningsBalanceAccountId: ").Append(AttachmentOfEarningsBalanceAccountId).Append("\n");
            sb.Append("  DaysInWeekHolidayPay: ").Append(DaysInWeekHolidayPay).Append("\n");
            sb.Append("  EmployerContributionAllottedHolidayPayBalanceAccountId: ").Append(EmployerContributionAllottedHolidayPayBalanceAccountId).Append("\n");
            sb.Append("  EmployerContributionAllottedHolidayPayResultAccountId: ").Append(EmployerContributionAllottedHolidayPayResultAccountId).Append("\n");
            sb.Append("  EmployerContributionBalanceAccountId: ").Append(EmployerContributionBalanceAccountId).Append("\n");
            sb.Append("  EmployerContributionFreeAllowanceAvailable: ").Append(EmployerContributionFreeAllowanceAvailable).Append("\n");
            sb.Append("  EmployerContributionPaymentOfHolidayPayAccountId: ").Append(EmployerContributionPaymentOfHolidayPayAccountId).Append("\n");
            sb.Append("  EmployerContributionPaymentOfHolidayPayBalanceAccountId: ").Append(EmployerContributionPaymentOfHolidayPayBalanceAccountId).Append("\n");
            sb.Append("  EmployerContributionResultAccountId: ").Append(EmployerContributionResultAccountId).Append("\n");
            sb.Append("  EmployerContributionRule: ").Append(EmployerContributionRule).Append("\n");
            sb.Append("  EmploymentType: ").Append(EmploymentType).Append("\n");
            sb.Append("  EnableFlexTimePayout: ").Append(EnableFlexTimePayout).Append("\n");
            sb.Append("  FinancialActivityAllottedHolidayPayBalanceAccountId: ").Append(FinancialActivityAllottedHolidayPayBalanceAccountId).Append("\n");
            sb.Append("  FinancialActivityAllottedHolidayPayResultAccountId: ").Append(FinancialActivityAllottedHolidayPayResultAccountId).Append("\n");
            sb.Append("  FinancialActivityPaymentOfHolidayPayAccountId: ").Append(FinancialActivityPaymentOfHolidayPayAccountId).Append("\n");
            sb.Append("  FinancialActivityPaymentOfHolidayPayBalanceAccountId: ").Append(FinancialActivityPaymentOfHolidayPayBalanceAccountId).Append("\n");
            sb.Append("  FinancialActivityTaxBalanceAccountId: ").Append(FinancialActivityTaxBalanceAccountId).Append("\n");
            sb.Append("  FinancialActivityTaxResultAccountId: ").Append(FinancialActivityTaxResultAccountId).Append("\n");
            sb.Append("  FullTimeHoursPerWeek: ").Append(FullTimeHoursPerWeek).Append("\n");
            sb.Append("  HolidayPayAbove60BalanceAccountId: ").Append(HolidayPayAbove60BalanceAccountId).Append("\n");
            sb.Append("  HolidayPayAbove60Percentage: ").Append(HolidayPayAbove60Percentage).Append("\n");
            sb.Append("  HolidayPayAbove60ResultAccountId: ").Append(HolidayPayAbove60ResultAccountId).Append("\n");
            sb.Append("  HolidayPayBalanceAccountId: ").Append(HolidayPayBalanceAccountId).Append("\n");
            sb.Append("  HolidayPayPercentage: ").Append(HolidayPayPercentage).Append("\n");
            sb.Append("  HolidayPayResultAccountId: ").Append(HolidayPayResultAccountId).Append("\n");
            sb.Append("  HoursPerYearFno: ").Append(HoursPerYearFno).Append("\n");
            sb.Append("  IncludeTimeTransactionsFromDate: ").Append(IncludeTimeTransactionsFromDate).Append("\n");
            sb.Append("  LimitHolidayPayAbove60To6G: ").Append(LimitHolidayPayAbove60To6G).Append("\n");
            sb.Append("  MergeImportedSalaryLines: ").Append(MergeImportedSalaryLines).Append("\n");
            sb.Append("  MonthlyPayDay: ").Append(MonthlyPayDay).Append("\n");
            sb.Append("  NegativeFlextimePayItemId: ").Append(NegativeFlextimePayItemId).Append("\n");
            sb.Append("  NumberOfHolidays: ").Append(NumberOfHolidays).Append("\n");
            sb.Append("  NumberOfHolidaysAbove60: ").Append(NumberOfHolidaysAbove60).Append("\n");
            sb.Append("  OutstandingSalaryBalanceAccountId: ").Append(OutstandingSalaryBalanceAccountId).Append("\n");
            sb.Append("  OwedTaxedBalanceAccountId: ").Append(OwedTaxedBalanceAccountId).Append("\n");
            sb.Append("  PayslipDeliveryType: ").Append(PayslipDeliveryType).Append("\n");
            sb.Append("  PayslipLanguageType: ").Append(PayslipLanguageType).Append("\n");
            sb.Append("  PayslipPasswordType: ").Append(PayslipPasswordType).Append("\n");
            sb.Append("  PayslipSendScheduleType: ").Append(PayslipSendScheduleType).Append("\n");
            sb.Append("  PensionAgeFno: ").Append(PensionAgeFno).Append("\n");
            sb.Append("  PensionSchemesCount: ").Append(PensionSchemesCount).Append("\n");
            sb.Append("  PositiveFlextimePayItemId: ").Append(PositiveFlextimePayItemId).Append("\n");
            sb.Append("  PostVoucherOnK27ImportFromNav: ").Append(PostVoucherOnK27ImportFromNav).Append("\n");
            sb.Append("  PostVoucherOnK27ImportFromNavAccountId: ").Append(PostVoucherOnK27ImportFromNavAccountId).Append("\n");
            sb.Append("  RemunerationPeriod: ").Append(RemunerationPeriod).Append("\n");
            sb.Append("  RemunerationType: ").Append(RemunerationType).Append("\n");
            sb.Append("  SalaryPaymentBankAccountId: ").Append(SalaryPaymentBankAccountId).Append("\n");
            sb.Append("  ShowCommentsOnPayslip: ").Append(ShowCommentsOnPayslip).Append("\n");
            sb.Append("  ShowHolidayPayEarnedCurrentYearOnPayslip: ").Append(ShowHolidayPayEarnedCurrentYearOnPayslip).Append("\n");
            sb.Append("  ShowHolidayPayEarnedLastYearOnPayslip: ").Append(ShowHolidayPayEarnedLastYearOnPayslip).Append("\n");
            sb.Append("  ShowLogoOnPayslip: ").Append(ShowLogoOnPayslip).Append("\n");
            sb.Append("  ShowPayItemsOnPayslip: ").Append(ShowPayItemsOnPayslip).Append("\n");
            sb.Append("  ShowProjectOnPayslip: ").Append(ShowProjectOnPayslip).Append("\n");
            sb.Append("  SickPayRefundPayItemId: ").Append(SickPayRefundPayItemId).Append("\n");
            sb.Append("  SuggestedAccrualDate: ").Append(SuggestedAccrualDate).Append("\n");
            sb.Append("  TaxDeductionBankAccountId: ").Append(TaxDeductionBankAccountId).Append("\n");
            sb.Append("  TaxDeductionBankGuarantee: ").Append(TaxDeductionBankGuarantee).Append("\n");
            sb.Append("  TaxRule: ").Append(TaxRule).Append("\n");
            sb.Append("  WorkingHoursArrangement: ").Append(WorkingHoursArrangement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayrollSettingsDto" />
    /// </summary>
    public class PayrollSettingsDtoJsonConverter : JsonConverter<PayrollSettingsDto>
    {
        /// <summary>
        /// The format to use to serialize IncludeTimeTransactionsFromDate
        /// </summary>
        public static string IncludeTimeTransactionsFromDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PayrollSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PayrollSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accrualOfEmployerContributionBalanceAccountId = default;
            Option<long?> accrualOfEmployerContributionResultAccountId = default;
            Option<long?> accrualOfHolidayPayBalanceAccountId = default;
            Option<long?> accrualOfHolidayPayResultAccountId = default;
            Option<long?> accrualOfWagesBalanceAccountId = default;
            Option<long?> accrualOfWagesResultAccountId = default;
            Option<bool?> addFinancialActivityTax = default;
            Option<bool?> allowAccrualOfWages = default;
            Option<bool?> allowDifferentRemunerationPeriodPerEmployee = default;
            Option<long?> attachmentOfEarningsBalanceAccountId = default;
            Option<DaysInWeekHolidayPay?> daysInWeekHolidayPay = default;
            Option<long?> employerContributionAllottedHolidayPayBalanceAccountId = default;
            Option<long?> employerContributionAllottedHolidayPayResultAccountId = default;
            Option<long?> employerContributionBalanceAccountId = default;
            Option<double?> employerContributionFreeAllowanceAvailable = default;
            Option<long?> employerContributionPaymentOfHolidayPayAccountId = default;
            Option<long?> employerContributionPaymentOfHolidayPayBalanceAccountId = default;
            Option<long?> employerContributionResultAccountId = default;
            Option<EmployerContributionRule?> employerContributionRule = default;
            Option<EmploymentType?> employmentType = default;
            Option<bool?> enableFlexTimePayout = default;
            Option<long?> financialActivityAllottedHolidayPayBalanceAccountId = default;
            Option<long?> financialActivityAllottedHolidayPayResultAccountId = default;
            Option<long?> financialActivityPaymentOfHolidayPayAccountId = default;
            Option<long?> financialActivityPaymentOfHolidayPayBalanceAccountId = default;
            Option<long?> financialActivityTaxBalanceAccountId = default;
            Option<long?> financialActivityTaxResultAccountId = default;
            Option<double?> fullTimeHoursPerWeek = default;
            Option<long?> holidayPayAbove60BalanceAccountId = default;
            Option<double?> holidayPayAbove60Percentage = default;
            Option<long?> holidayPayAbove60ResultAccountId = default;
            Option<long?> holidayPayBalanceAccountId = default;
            Option<double?> holidayPayPercentage = default;
            Option<long?> holidayPayResultAccountId = default;
            Option<long?> hoursPerYearFno = default;
            Option<DateTimeOffset?> includeTimeTransactionsFromDate = default;
            Option<bool?> limitHolidayPayAbove60To6G = default;
            Option<bool?> mergeImportedSalaryLines = default;
            Option<long?> monthlyPayDay = default;
            Option<Guid?> negativeFlextimePayItemId = default;
            Option<long?> numberOfHolidays = default;
            Option<long?> numberOfHolidaysAbove60 = default;
            Option<long?> outstandingSalaryBalanceAccountId = default;
            Option<long?> owedTaxedBalanceAccountId = default;
            Option<PayslipDeliveryType?> payslipDeliveryType = default;
            Option<PayslipLanguageType?> payslipLanguageType = default;
            Option<PayslipPasswordType?> payslipPasswordType = default;
            Option<PayslipSendScheduleType?> payslipSendScheduleType = default;
            Option<long?> pensionAgeFno = default;
            Option<long?> pensionSchemesCount = default;
            Option<Guid?> positiveFlextimePayItemId = default;
            Option<bool?> postVoucherOnK27ImportFromNav = default;
            Option<long?> postVoucherOnK27ImportFromNavAccountId = default;
            Option<RemunerationPeriodType?> remunerationPeriod = default;
            Option<SalaryRemunerationType?> remunerationType = default;
            Option<long?> salaryPaymentBankAccountId = default;
            Option<bool?> showCommentsOnPayslip = default;
            Option<bool?> showHolidayPayEarnedCurrentYearOnPayslip = default;
            Option<bool?> showHolidayPayEarnedLastYearOnPayslip = default;
            Option<bool?> showLogoOnPayslip = default;
            Option<bool?> showPayItemsOnPayslip = default;
            Option<bool?> showProjectOnPayslip = default;
            Option<Guid?> sickPayRefundPayItemId = default;
            Option<PayrollAccrualModeType?> suggestedAccrualDate = default;
            Option<long?> taxDeductionBankAccountId = default;
            Option<bool?> taxDeductionBankGuarantee = default;
            Option<TaxRuleType?> taxRule = default;
            Option<WorkingHoursArrangementType?> workingHoursArrangement = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccrualOfEmployerContributionBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfEmployerContributionBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccrualOfEmployerContributionResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfEmployerContributionResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccrualOfHolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfHolidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccrualOfHolidayPayResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfHolidayPayResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccrualOfWagesBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfWagesBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccrualOfWagesResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accrualOfWagesResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AddFinancialActivityTax":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addFinancialActivityTax = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AllowAccrualOfWages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowAccrualOfWages = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AllowDifferentRemunerationPeriodPerEmployee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allowDifferentRemunerationPeriodPerEmployee = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "AttachmentOfEarningsBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachmentOfEarningsBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "DaysInWeekHolidayPay":
                            string? daysInWeekHolidayPayRawValue = utf8JsonReader.GetString();
                            if (daysInWeekHolidayPayRawValue != null)
                                daysInWeekHolidayPay = new Option<DaysInWeekHolidayPay?>(DaysInWeekHolidayPayValueConverter.FromStringOrDefault(daysInWeekHolidayPayRawValue));
                            break;
                        case "EmployerContributionAllottedHolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionAllottedHolidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionAllottedHolidayPayResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionAllottedHolidayPayResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionFreeAllowanceAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionFreeAllowanceAvailable = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "EmployerContributionPaymentOfHolidayPayAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionPaymentOfHolidayPayAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionPaymentOfHolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionPaymentOfHolidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employerContributionResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployerContributionRule":
                            string? employerContributionRuleRawValue = utf8JsonReader.GetString();
                            if (employerContributionRuleRawValue != null)
                                employerContributionRule = new Option<EmployerContributionRule?>(EmployerContributionRuleValueConverter.FromStringOrDefault(employerContributionRuleRawValue));
                            break;
                        case "EmploymentType":
                            string? employmentTypeRawValue = utf8JsonReader.GetString();
                            if (employmentTypeRawValue != null)
                                employmentType = new Option<EmploymentType?>(EmploymentTypeValueConverter.FromStringOrDefault(employmentTypeRawValue));
                            break;
                        case "EnableFlexTimePayout":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableFlexTimePayout = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "FinancialActivityAllottedHolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityAllottedHolidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialActivityAllottedHolidayPayResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityAllottedHolidayPayResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialActivityPaymentOfHolidayPayAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityPaymentOfHolidayPayAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialActivityPaymentOfHolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityPaymentOfHolidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialActivityTaxBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityTaxBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialActivityTaxResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                financialActivityTaxResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FullTimeHoursPerWeek":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fullTimeHoursPerWeek = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "HolidayPayAbove60BalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayAbove60BalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "HolidayPayAbove60Percentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayAbove60Percentage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "HolidayPayAbove60ResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayAbove60ResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "HolidayPayBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "HolidayPayPercentage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayPercentage = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "HolidayPayResultAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                holidayPayResultAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "HoursPerYearFno":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hoursPerYearFno = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IncludeTimeTransactionsFromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                includeTimeTransactionsFromDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LimitHolidayPayAbove60To6G":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limitHolidayPayAbove60To6G = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "MergeImportedSalaryLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mergeImportedSalaryLines = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "MonthlyPayDay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                monthlyPayDay = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NegativeFlextimePayItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                negativeFlextimePayItemId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "NumberOfHolidays":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfHolidays = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "NumberOfHolidaysAbove60":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfHolidaysAbove60 = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OutstandingSalaryBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outstandingSalaryBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OwedTaxedBalanceAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                owedTaxedBalanceAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PayslipDeliveryType":
                            string? payslipDeliveryTypeRawValue = utf8JsonReader.GetString();
                            if (payslipDeliveryTypeRawValue != null)
                                payslipDeliveryType = new Option<PayslipDeliveryType?>(PayslipDeliveryTypeValueConverter.FromStringOrDefault(payslipDeliveryTypeRawValue));
                            break;
                        case "PayslipLanguageType":
                            string? payslipLanguageTypeRawValue = utf8JsonReader.GetString();
                            if (payslipLanguageTypeRawValue != null)
                                payslipLanguageType = new Option<PayslipLanguageType?>(PayslipLanguageTypeValueConverter.FromStringOrDefault(payslipLanguageTypeRawValue));
                            break;
                        case "PayslipPasswordType":
                            string? payslipPasswordTypeRawValue = utf8JsonReader.GetString();
                            if (payslipPasswordTypeRawValue != null)
                                payslipPasswordType = new Option<PayslipPasswordType?>(PayslipPasswordTypeValueConverter.FromStringOrDefault(payslipPasswordTypeRawValue));
                            break;
                        case "PayslipSendScheduleType":
                            string? payslipSendScheduleTypeRawValue = utf8JsonReader.GetString();
                            if (payslipSendScheduleTypeRawValue != null)
                                payslipSendScheduleType = new Option<PayslipSendScheduleType?>(PayslipSendScheduleTypeValueConverter.FromStringOrDefault(payslipSendScheduleTypeRawValue));
                            break;
                        case "PensionAgeFno":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pensionAgeFno = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PensionSchemesCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pensionSchemesCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PositiveFlextimePayItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                positiveFlextimePayItemId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "PostVoucherOnK27ImportFromNav":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postVoucherOnK27ImportFromNav = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "PostVoucherOnK27ImportFromNavAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postVoucherOnK27ImportFromNavAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "RemunerationPeriod":
                            string? remunerationPeriodRawValue = utf8JsonReader.GetString();
                            if (remunerationPeriodRawValue != null)
                                remunerationPeriod = new Option<RemunerationPeriodType?>(RemunerationPeriodTypeValueConverter.FromStringOrDefault(remunerationPeriodRawValue));
                            break;
                        case "RemunerationType":
                            string? remunerationTypeRawValue = utf8JsonReader.GetString();
                            if (remunerationTypeRawValue != null)
                                remunerationType = new Option<SalaryRemunerationType?>(SalaryRemunerationTypeValueConverter.FromStringOrDefault(remunerationTypeRawValue));
                            break;
                        case "SalaryPaymentBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                salaryPaymentBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ShowCommentsOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showCommentsOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ShowHolidayPayEarnedCurrentYearOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showHolidayPayEarnedCurrentYearOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ShowHolidayPayEarnedLastYearOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showHolidayPayEarnedLastYearOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ShowLogoOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showLogoOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ShowPayItemsOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showPayItemsOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ShowProjectOnPayslip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                showProjectOnPayslip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "SickPayRefundPayItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sickPayRefundPayItemId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "SuggestedAccrualDate":
                            string? suggestedAccrualDateRawValue = utf8JsonReader.GetString();
                            if (suggestedAccrualDateRawValue != null)
                                suggestedAccrualDate = new Option<PayrollAccrualModeType?>(PayrollAccrualModeTypeValueConverter.FromStringOrDefault(suggestedAccrualDateRawValue));
                            break;
                        case "TaxDeductionBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxDeductionBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TaxDeductionBankGuarantee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taxDeductionBankGuarantee = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "TaxRule":
                            string? taxRuleRawValue = utf8JsonReader.GetString();
                            if (taxRuleRawValue != null)
                                taxRule = new Option<TaxRuleType?>(TaxRuleTypeValueConverter.FromStringOrDefault(taxRuleRawValue));
                            break;
                        case "WorkingHoursArrangement":
                            string? workingHoursArrangementRawValue = utf8JsonReader.GetString();
                            if (workingHoursArrangementRawValue != null)
                                workingHoursArrangement = new Option<WorkingHoursArrangementType?>(WorkingHoursArrangementTypeValueConverter.FromStringOrDefault(workingHoursArrangementRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (addFinancialActivityTax.IsSet && addFinancialActivityTax.Value == null)
                throw new ArgumentNullException(nameof(addFinancialActivityTax), "Property is not nullable for class PayrollSettingsDto.");

            if (allowAccrualOfWages.IsSet && allowAccrualOfWages.Value == null)
                throw new ArgumentNullException(nameof(allowAccrualOfWages), "Property is not nullable for class PayrollSettingsDto.");

            if (allowDifferentRemunerationPeriodPerEmployee.IsSet && allowDifferentRemunerationPeriodPerEmployee.Value == null)
                throw new ArgumentNullException(nameof(allowDifferentRemunerationPeriodPerEmployee), "Property is not nullable for class PayrollSettingsDto.");

            if (enableFlexTimePayout.IsSet && enableFlexTimePayout.Value == null)
                throw new ArgumentNullException(nameof(enableFlexTimePayout), "Property is not nullable for class PayrollSettingsDto.");

            if (fullTimeHoursPerWeek.IsSet && fullTimeHoursPerWeek.Value == null)
                throw new ArgumentNullException(nameof(fullTimeHoursPerWeek), "Property is not nullable for class PayrollSettingsDto.");

            if (holidayPayAbove60Percentage.IsSet && holidayPayAbove60Percentage.Value == null)
                throw new ArgumentNullException(nameof(holidayPayAbove60Percentage), "Property is not nullable for class PayrollSettingsDto.");

            if (holidayPayPercentage.IsSet && holidayPayPercentage.Value == null)
                throw new ArgumentNullException(nameof(holidayPayPercentage), "Property is not nullable for class PayrollSettingsDto.");

            if (hoursPerYearFno.IsSet && hoursPerYearFno.Value == null)
                throw new ArgumentNullException(nameof(hoursPerYearFno), "Property is not nullable for class PayrollSettingsDto.");

            if (limitHolidayPayAbove60To6G.IsSet && limitHolidayPayAbove60To6G.Value == null)
                throw new ArgumentNullException(nameof(limitHolidayPayAbove60To6G), "Property is not nullable for class PayrollSettingsDto.");

            if (mergeImportedSalaryLines.IsSet && mergeImportedSalaryLines.Value == null)
                throw new ArgumentNullException(nameof(mergeImportedSalaryLines), "Property is not nullable for class PayrollSettingsDto.");

            if (monthlyPayDay.IsSet && monthlyPayDay.Value == null)
                throw new ArgumentNullException(nameof(monthlyPayDay), "Property is not nullable for class PayrollSettingsDto.");

            if (numberOfHolidays.IsSet && numberOfHolidays.Value == null)
                throw new ArgumentNullException(nameof(numberOfHolidays), "Property is not nullable for class PayrollSettingsDto.");

            if (numberOfHolidaysAbove60.IsSet && numberOfHolidaysAbove60.Value == null)
                throw new ArgumentNullException(nameof(numberOfHolidaysAbove60), "Property is not nullable for class PayrollSettingsDto.");

            if (pensionAgeFno.IsSet && pensionAgeFno.Value == null)
                throw new ArgumentNullException(nameof(pensionAgeFno), "Property is not nullable for class PayrollSettingsDto.");

            if (pensionSchemesCount.IsSet && pensionSchemesCount.Value == null)
                throw new ArgumentNullException(nameof(pensionSchemesCount), "Property is not nullable for class PayrollSettingsDto.");

            if (postVoucherOnK27ImportFromNav.IsSet && postVoucherOnK27ImportFromNav.Value == null)
                throw new ArgumentNullException(nameof(postVoucherOnK27ImportFromNav), "Property is not nullable for class PayrollSettingsDto.");

            if (showCommentsOnPayslip.IsSet && showCommentsOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showCommentsOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (showHolidayPayEarnedCurrentYearOnPayslip.IsSet && showHolidayPayEarnedCurrentYearOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showHolidayPayEarnedCurrentYearOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (showHolidayPayEarnedLastYearOnPayslip.IsSet && showHolidayPayEarnedLastYearOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showHolidayPayEarnedLastYearOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (showLogoOnPayslip.IsSet && showLogoOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showLogoOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (showPayItemsOnPayslip.IsSet && showPayItemsOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showPayItemsOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (showProjectOnPayslip.IsSet && showProjectOnPayslip.Value == null)
                throw new ArgumentNullException(nameof(showProjectOnPayslip), "Property is not nullable for class PayrollSettingsDto.");

            if (taxDeductionBankGuarantee.IsSet && taxDeductionBankGuarantee.Value == null)
                throw new ArgumentNullException(nameof(taxDeductionBankGuarantee), "Property is not nullable for class PayrollSettingsDto.");

            return new PayrollSettingsDto(accrualOfEmployerContributionBalanceAccountId, accrualOfEmployerContributionResultAccountId, accrualOfHolidayPayBalanceAccountId, accrualOfHolidayPayResultAccountId, accrualOfWagesBalanceAccountId, accrualOfWagesResultAccountId, addFinancialActivityTax, allowAccrualOfWages, allowDifferentRemunerationPeriodPerEmployee, attachmentOfEarningsBalanceAccountId, daysInWeekHolidayPay, employerContributionAllottedHolidayPayBalanceAccountId, employerContributionAllottedHolidayPayResultAccountId, employerContributionBalanceAccountId, employerContributionFreeAllowanceAvailable, employerContributionPaymentOfHolidayPayAccountId, employerContributionPaymentOfHolidayPayBalanceAccountId, employerContributionResultAccountId, employerContributionRule, employmentType, enableFlexTimePayout, financialActivityAllottedHolidayPayBalanceAccountId, financialActivityAllottedHolidayPayResultAccountId, financialActivityPaymentOfHolidayPayAccountId, financialActivityPaymentOfHolidayPayBalanceAccountId, financialActivityTaxBalanceAccountId, financialActivityTaxResultAccountId, fullTimeHoursPerWeek, holidayPayAbove60BalanceAccountId, holidayPayAbove60Percentage, holidayPayAbove60ResultAccountId, holidayPayBalanceAccountId, holidayPayPercentage, holidayPayResultAccountId, hoursPerYearFno, includeTimeTransactionsFromDate, limitHolidayPayAbove60To6G, mergeImportedSalaryLines, monthlyPayDay, negativeFlextimePayItemId, numberOfHolidays, numberOfHolidaysAbove60, outstandingSalaryBalanceAccountId, owedTaxedBalanceAccountId, payslipDeliveryType, payslipLanguageType, payslipPasswordType, payslipSendScheduleType, pensionAgeFno, pensionSchemesCount, positiveFlextimePayItemId, postVoucherOnK27ImportFromNav, postVoucherOnK27ImportFromNavAccountId, remunerationPeriod, remunerationType, salaryPaymentBankAccountId, showCommentsOnPayslip, showHolidayPayEarnedCurrentYearOnPayslip, showHolidayPayEarnedLastYearOnPayslip, showLogoOnPayslip, showPayItemsOnPayslip, showProjectOnPayslip, sickPayRefundPayItemId, suggestedAccrualDate, taxDeductionBankAccountId, taxDeductionBankGuarantee, taxRule, workingHoursArrangement);
        }

        /// <summary>
        /// Serializes a <see cref="PayrollSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payrollSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PayrollSettingsDto payrollSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, payrollSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PayrollSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payrollSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PayrollSettingsDto payrollSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (payrollSettingsDto.AccrualOfEmployerContributionBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfEmployerContributionBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfEmployerContributionBalanceAccountId", payrollSettingsDto.AccrualOfEmployerContributionBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfEmployerContributionBalanceAccountId");

            if (payrollSettingsDto.AccrualOfEmployerContributionResultAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfEmployerContributionResultAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfEmployerContributionResultAccountId", payrollSettingsDto.AccrualOfEmployerContributionResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfEmployerContributionResultAccountId");

            if (payrollSettingsDto.AccrualOfHolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfHolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfHolidayPayBalanceAccountId", payrollSettingsDto.AccrualOfHolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfHolidayPayBalanceAccountId");

            if (payrollSettingsDto.AccrualOfHolidayPayResultAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfHolidayPayResultAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfHolidayPayResultAccountId", payrollSettingsDto.AccrualOfHolidayPayResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfHolidayPayResultAccountId");

            if (payrollSettingsDto.AccrualOfWagesBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfWagesBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfWagesBalanceAccountId", payrollSettingsDto.AccrualOfWagesBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfWagesBalanceAccountId");

            if (payrollSettingsDto.AccrualOfWagesResultAccountIdOption.IsSet)
                if (payrollSettingsDto.AccrualOfWagesResultAccountIdOption.Value != null)
                    writer.WriteNumber("AccrualOfWagesResultAccountId", payrollSettingsDto.AccrualOfWagesResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccrualOfWagesResultAccountId");

            if (payrollSettingsDto.AddFinancialActivityTaxOption.IsSet)
                writer.WriteBoolean("AddFinancialActivityTax", payrollSettingsDto.AddFinancialActivityTaxOption.Value!.Value);

            if (payrollSettingsDto.AllowAccrualOfWagesOption.IsSet)
                writer.WriteBoolean("AllowAccrualOfWages", payrollSettingsDto.AllowAccrualOfWagesOption.Value!.Value);

            if (payrollSettingsDto.AllowDifferentRemunerationPeriodPerEmployeeOption.IsSet)
                writer.WriteBoolean("AllowDifferentRemunerationPeriodPerEmployee", payrollSettingsDto.AllowDifferentRemunerationPeriodPerEmployeeOption.Value!.Value);

            if (payrollSettingsDto.AttachmentOfEarningsBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.AttachmentOfEarningsBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("AttachmentOfEarningsBalanceAccountId", payrollSettingsDto.AttachmentOfEarningsBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AttachmentOfEarningsBalanceAccountId");

            if (payrollSettingsDto.DaysInWeekHolidayPayOption.IsSet)
                if (payrollSettingsDto.DaysInWeekHolidayPayOption!.Value != null)
                {
                    var daysInWeekHolidayPayRawValue = DaysInWeekHolidayPayValueConverter.ToJsonValue(payrollSettingsDto.DaysInWeekHolidayPayOption.Value!.Value);
                    writer.WriteString("DaysInWeekHolidayPay", daysInWeekHolidayPayRawValue);
                }
                else
                    writer.WriteNull("DaysInWeekHolidayPay");
            if (payrollSettingsDto.EmployerContributionAllottedHolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionAllottedHolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionAllottedHolidayPayBalanceAccountId", payrollSettingsDto.EmployerContributionAllottedHolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionAllottedHolidayPayBalanceAccountId");

            if (payrollSettingsDto.EmployerContributionAllottedHolidayPayResultAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionAllottedHolidayPayResultAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionAllottedHolidayPayResultAccountId", payrollSettingsDto.EmployerContributionAllottedHolidayPayResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionAllottedHolidayPayResultAccountId");

            if (payrollSettingsDto.EmployerContributionBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionBalanceAccountId", payrollSettingsDto.EmployerContributionBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionBalanceAccountId");

            if (payrollSettingsDto.EmployerContributionFreeAllowanceAvailableOption.IsSet)
                if (payrollSettingsDto.EmployerContributionFreeAllowanceAvailableOption.Value != null)
                    writer.WriteNumber("EmployerContributionFreeAllowanceAvailable", payrollSettingsDto.EmployerContributionFreeAllowanceAvailableOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionFreeAllowanceAvailable");

            if (payrollSettingsDto.EmployerContributionPaymentOfHolidayPayAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionPaymentOfHolidayPayAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionPaymentOfHolidayPayAccountId", payrollSettingsDto.EmployerContributionPaymentOfHolidayPayAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionPaymentOfHolidayPayAccountId");

            if (payrollSettingsDto.EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionPaymentOfHolidayPayBalanceAccountId", payrollSettingsDto.EmployerContributionPaymentOfHolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionPaymentOfHolidayPayBalanceAccountId");

            if (payrollSettingsDto.EmployerContributionResultAccountIdOption.IsSet)
                if (payrollSettingsDto.EmployerContributionResultAccountIdOption.Value != null)
                    writer.WriteNumber("EmployerContributionResultAccountId", payrollSettingsDto.EmployerContributionResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("EmployerContributionResultAccountId");

            if (payrollSettingsDto.EmployerContributionRuleOption.IsSet)
                if (payrollSettingsDto.EmployerContributionRuleOption!.Value != null)
                {
                    var employerContributionRuleRawValue = EmployerContributionRuleValueConverter.ToJsonValue(payrollSettingsDto.EmployerContributionRuleOption.Value!.Value);
                    writer.WriteString("EmployerContributionRule", employerContributionRuleRawValue);
                }
                else
                    writer.WriteNull("EmployerContributionRule");
            if (payrollSettingsDto.EmploymentTypeOption.IsSet)
                if (payrollSettingsDto.EmploymentTypeOption!.Value != null)
                {
                    var employmentTypeRawValue = EmploymentTypeValueConverter.ToJsonValue(payrollSettingsDto.EmploymentTypeOption.Value!.Value);
                    writer.WriteString("EmploymentType", employmentTypeRawValue);
                }
                else
                    writer.WriteNull("EmploymentType");
            if (payrollSettingsDto.EnableFlexTimePayoutOption.IsSet)
                writer.WriteBoolean("EnableFlexTimePayout", payrollSettingsDto.EnableFlexTimePayoutOption.Value!.Value);

            if (payrollSettingsDto.FinancialActivityAllottedHolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityAllottedHolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityAllottedHolidayPayBalanceAccountId", payrollSettingsDto.FinancialActivityAllottedHolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityAllottedHolidayPayBalanceAccountId");

            if (payrollSettingsDto.FinancialActivityAllottedHolidayPayResultAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityAllottedHolidayPayResultAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityAllottedHolidayPayResultAccountId", payrollSettingsDto.FinancialActivityAllottedHolidayPayResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityAllottedHolidayPayResultAccountId");

            if (payrollSettingsDto.FinancialActivityPaymentOfHolidayPayAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityPaymentOfHolidayPayAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityPaymentOfHolidayPayAccountId", payrollSettingsDto.FinancialActivityPaymentOfHolidayPayAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityPaymentOfHolidayPayAccountId");

            if (payrollSettingsDto.FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityPaymentOfHolidayPayBalanceAccountId", payrollSettingsDto.FinancialActivityPaymentOfHolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityPaymentOfHolidayPayBalanceAccountId");

            if (payrollSettingsDto.FinancialActivityTaxBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityTaxBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityTaxBalanceAccountId", payrollSettingsDto.FinancialActivityTaxBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityTaxBalanceAccountId");

            if (payrollSettingsDto.FinancialActivityTaxResultAccountIdOption.IsSet)
                if (payrollSettingsDto.FinancialActivityTaxResultAccountIdOption.Value != null)
                    writer.WriteNumber("FinancialActivityTaxResultAccountId", payrollSettingsDto.FinancialActivityTaxResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("FinancialActivityTaxResultAccountId");

            if (payrollSettingsDto.FullTimeHoursPerWeekOption.IsSet)
                writer.WriteNumber("FullTimeHoursPerWeek", payrollSettingsDto.FullTimeHoursPerWeekOption.Value!.Value);

            if (payrollSettingsDto.HolidayPayAbove60BalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.HolidayPayAbove60BalanceAccountIdOption.Value != null)
                    writer.WriteNumber("HolidayPayAbove60BalanceAccountId", payrollSettingsDto.HolidayPayAbove60BalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("HolidayPayAbove60BalanceAccountId");

            if (payrollSettingsDto.HolidayPayAbove60PercentageOption.IsSet)
                writer.WriteNumber("HolidayPayAbove60Percentage", payrollSettingsDto.HolidayPayAbove60PercentageOption.Value!.Value);

            if (payrollSettingsDto.HolidayPayAbove60ResultAccountIdOption.IsSet)
                if (payrollSettingsDto.HolidayPayAbove60ResultAccountIdOption.Value != null)
                    writer.WriteNumber("HolidayPayAbove60ResultAccountId", payrollSettingsDto.HolidayPayAbove60ResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("HolidayPayAbove60ResultAccountId");

            if (payrollSettingsDto.HolidayPayBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.HolidayPayBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("HolidayPayBalanceAccountId", payrollSettingsDto.HolidayPayBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("HolidayPayBalanceAccountId");

            if (payrollSettingsDto.HolidayPayPercentageOption.IsSet)
                writer.WriteNumber("HolidayPayPercentage", payrollSettingsDto.HolidayPayPercentageOption.Value!.Value);

            if (payrollSettingsDto.HolidayPayResultAccountIdOption.IsSet)
                if (payrollSettingsDto.HolidayPayResultAccountIdOption.Value != null)
                    writer.WriteNumber("HolidayPayResultAccountId", payrollSettingsDto.HolidayPayResultAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("HolidayPayResultAccountId");

            if (payrollSettingsDto.HoursPerYearFnoOption.IsSet)
                writer.WriteNumber("HoursPerYearFno", payrollSettingsDto.HoursPerYearFnoOption.Value!.Value);

            if (payrollSettingsDto.IncludeTimeTransactionsFromDateOption.IsSet)
                if (payrollSettingsDto.IncludeTimeTransactionsFromDateOption.Value != null)
                    writer.WriteString("IncludeTimeTransactionsFromDate", payrollSettingsDto.IncludeTimeTransactionsFromDateOption.Value!.Value.ToString(IncludeTimeTransactionsFromDateFormat));
                else
                    writer.WriteNull("IncludeTimeTransactionsFromDate");

            if (payrollSettingsDto.LimitHolidayPayAbove60To6GOption.IsSet)
                writer.WriteBoolean("LimitHolidayPayAbove60To6G", payrollSettingsDto.LimitHolidayPayAbove60To6GOption.Value!.Value);

            if (payrollSettingsDto.MergeImportedSalaryLinesOption.IsSet)
                writer.WriteBoolean("MergeImportedSalaryLines", payrollSettingsDto.MergeImportedSalaryLinesOption.Value!.Value);

            if (payrollSettingsDto.MonthlyPayDayOption.IsSet)
                writer.WriteNumber("MonthlyPayDay", payrollSettingsDto.MonthlyPayDayOption.Value!.Value);

            if (payrollSettingsDto.NegativeFlextimePayItemIdOption.IsSet)
                if (payrollSettingsDto.NegativeFlextimePayItemIdOption.Value != null)
                    writer.WriteString("NegativeFlextimePayItemId", payrollSettingsDto.NegativeFlextimePayItemIdOption.Value!.Value);
                else
                    writer.WriteNull("NegativeFlextimePayItemId");

            if (payrollSettingsDto.NumberOfHolidaysOption.IsSet)
                writer.WriteNumber("NumberOfHolidays", payrollSettingsDto.NumberOfHolidaysOption.Value!.Value);

            if (payrollSettingsDto.NumberOfHolidaysAbove60Option.IsSet)
                writer.WriteNumber("NumberOfHolidaysAbove60", payrollSettingsDto.NumberOfHolidaysAbove60Option.Value!.Value);

            if (payrollSettingsDto.OutstandingSalaryBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.OutstandingSalaryBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("OutstandingSalaryBalanceAccountId", payrollSettingsDto.OutstandingSalaryBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OutstandingSalaryBalanceAccountId");

            if (payrollSettingsDto.OwedTaxedBalanceAccountIdOption.IsSet)
                if (payrollSettingsDto.OwedTaxedBalanceAccountIdOption.Value != null)
                    writer.WriteNumber("OwedTaxedBalanceAccountId", payrollSettingsDto.OwedTaxedBalanceAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OwedTaxedBalanceAccountId");

            if (payrollSettingsDto.PayslipDeliveryTypeOption.IsSet)
                if (payrollSettingsDto.PayslipDeliveryTypeOption!.Value != null)
                {
                    var payslipDeliveryTypeRawValue = PayslipDeliveryTypeValueConverter.ToJsonValue(payrollSettingsDto.PayslipDeliveryTypeOption.Value!.Value);
                    writer.WriteString("PayslipDeliveryType", payslipDeliveryTypeRawValue);
                }
                else
                    writer.WriteNull("PayslipDeliveryType");
            if (payrollSettingsDto.PayslipLanguageTypeOption.IsSet)
                if (payrollSettingsDto.PayslipLanguageTypeOption!.Value != null)
                {
                    var payslipLanguageTypeRawValue = PayslipLanguageTypeValueConverter.ToJsonValue(payrollSettingsDto.PayslipLanguageTypeOption.Value!.Value);
                    writer.WriteString("PayslipLanguageType", payslipLanguageTypeRawValue);
                }
                else
                    writer.WriteNull("PayslipLanguageType");
            if (payrollSettingsDto.PayslipPasswordTypeOption.IsSet)
                if (payrollSettingsDto.PayslipPasswordTypeOption!.Value != null)
                {
                    var payslipPasswordTypeRawValue = PayslipPasswordTypeValueConverter.ToJsonValue(payrollSettingsDto.PayslipPasswordTypeOption.Value!.Value);
                    writer.WriteString("PayslipPasswordType", payslipPasswordTypeRawValue);
                }
                else
                    writer.WriteNull("PayslipPasswordType");
            if (payrollSettingsDto.PayslipSendScheduleTypeOption.IsSet)
                if (payrollSettingsDto.PayslipSendScheduleTypeOption!.Value != null)
                {
                    var payslipSendScheduleTypeRawValue = PayslipSendScheduleTypeValueConverter.ToJsonValue(payrollSettingsDto.PayslipSendScheduleTypeOption.Value!.Value);
                    writer.WriteString("PayslipSendScheduleType", payslipSendScheduleTypeRawValue);
                }
                else
                    writer.WriteNull("PayslipSendScheduleType");
            if (payrollSettingsDto.PensionAgeFnoOption.IsSet)
                writer.WriteNumber("PensionAgeFno", payrollSettingsDto.PensionAgeFnoOption.Value!.Value);

            if (payrollSettingsDto.PensionSchemesCountOption.IsSet)
                writer.WriteNumber("PensionSchemesCount", payrollSettingsDto.PensionSchemesCountOption.Value!.Value);

            if (payrollSettingsDto.PositiveFlextimePayItemIdOption.IsSet)
                if (payrollSettingsDto.PositiveFlextimePayItemIdOption.Value != null)
                    writer.WriteString("PositiveFlextimePayItemId", payrollSettingsDto.PositiveFlextimePayItemIdOption.Value!.Value);
                else
                    writer.WriteNull("PositiveFlextimePayItemId");

            if (payrollSettingsDto.PostVoucherOnK27ImportFromNavOption.IsSet)
                writer.WriteBoolean("PostVoucherOnK27ImportFromNav", payrollSettingsDto.PostVoucherOnK27ImportFromNavOption.Value!.Value);

            if (payrollSettingsDto.PostVoucherOnK27ImportFromNavAccountIdOption.IsSet)
                if (payrollSettingsDto.PostVoucherOnK27ImportFromNavAccountIdOption.Value != null)
                    writer.WriteNumber("PostVoucherOnK27ImportFromNavAccountId", payrollSettingsDto.PostVoucherOnK27ImportFromNavAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("PostVoucherOnK27ImportFromNavAccountId");

            if (payrollSettingsDto.RemunerationPeriodOption.IsSet)
                if (payrollSettingsDto.RemunerationPeriodOption!.Value != null)
                {
                    var remunerationPeriodRawValue = RemunerationPeriodTypeValueConverter.ToJsonValue(payrollSettingsDto.RemunerationPeriodOption.Value!.Value);
                    writer.WriteString("RemunerationPeriod", remunerationPeriodRawValue);
                }
                else
                    writer.WriteNull("RemunerationPeriod");
            if (payrollSettingsDto.RemunerationTypeOption.IsSet)
                if (payrollSettingsDto.RemunerationTypeOption!.Value != null)
                {
                    var remunerationTypeRawValue = SalaryRemunerationTypeValueConverter.ToJsonValue(payrollSettingsDto.RemunerationTypeOption.Value!.Value);
                    writer.WriteString("RemunerationType", remunerationTypeRawValue);
                }
                else
                    writer.WriteNull("RemunerationType");
            if (payrollSettingsDto.SalaryPaymentBankAccountIdOption.IsSet)
                if (payrollSettingsDto.SalaryPaymentBankAccountIdOption.Value != null)
                    writer.WriteNumber("SalaryPaymentBankAccountId", payrollSettingsDto.SalaryPaymentBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SalaryPaymentBankAccountId");

            if (payrollSettingsDto.ShowCommentsOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowCommentsOnPayslip", payrollSettingsDto.ShowCommentsOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.ShowHolidayPayEarnedCurrentYearOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowHolidayPayEarnedCurrentYearOnPayslip", payrollSettingsDto.ShowHolidayPayEarnedCurrentYearOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.ShowHolidayPayEarnedLastYearOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowHolidayPayEarnedLastYearOnPayslip", payrollSettingsDto.ShowHolidayPayEarnedLastYearOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.ShowLogoOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowLogoOnPayslip", payrollSettingsDto.ShowLogoOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.ShowPayItemsOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowPayItemsOnPayslip", payrollSettingsDto.ShowPayItemsOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.ShowProjectOnPayslipOption.IsSet)
                writer.WriteBoolean("ShowProjectOnPayslip", payrollSettingsDto.ShowProjectOnPayslipOption.Value!.Value);

            if (payrollSettingsDto.SickPayRefundPayItemIdOption.IsSet)
                if (payrollSettingsDto.SickPayRefundPayItemIdOption.Value != null)
                    writer.WriteString("SickPayRefundPayItemId", payrollSettingsDto.SickPayRefundPayItemIdOption.Value!.Value);
                else
                    writer.WriteNull("SickPayRefundPayItemId");

            if (payrollSettingsDto.SuggestedAccrualDateOption.IsSet)
                if (payrollSettingsDto.SuggestedAccrualDateOption!.Value != null)
                {
                    var suggestedAccrualDateRawValue = PayrollAccrualModeTypeValueConverter.ToJsonValue(payrollSettingsDto.SuggestedAccrualDateOption.Value!.Value);
                    writer.WriteString("SuggestedAccrualDate", suggestedAccrualDateRawValue);
                }
                else
                    writer.WriteNull("SuggestedAccrualDate");
            if (payrollSettingsDto.TaxDeductionBankAccountIdOption.IsSet)
                if (payrollSettingsDto.TaxDeductionBankAccountIdOption.Value != null)
                    writer.WriteNumber("TaxDeductionBankAccountId", payrollSettingsDto.TaxDeductionBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("TaxDeductionBankAccountId");

            if (payrollSettingsDto.TaxDeductionBankGuaranteeOption.IsSet)
                writer.WriteBoolean("TaxDeductionBankGuarantee", payrollSettingsDto.TaxDeductionBankGuaranteeOption.Value!.Value);

            if (payrollSettingsDto.TaxRuleOption.IsSet)
                if (payrollSettingsDto.TaxRuleOption!.Value != null)
                {
                    var taxRuleRawValue = TaxRuleTypeValueConverter.ToJsonValue(payrollSettingsDto.TaxRuleOption.Value!.Value);
                    writer.WriteString("TaxRule", taxRuleRawValue);
                }
                else
                    writer.WriteNull("TaxRule");
            if (payrollSettingsDto.WorkingHoursArrangementOption.IsSet)
                if (payrollSettingsDto.WorkingHoursArrangementOption!.Value != null)
                {
                    var workingHoursArrangementRawValue = WorkingHoursArrangementTypeValueConverter.ToJsonValue(payrollSettingsDto.WorkingHoursArrangementOption.Value!.Value);
                    writer.WriteString("WorkingHoursArrangement", workingHoursArrangementRawValue);
                }
                else
                    writer.WriteNull("WorkingHoursArrangement");
        }
    }
}
