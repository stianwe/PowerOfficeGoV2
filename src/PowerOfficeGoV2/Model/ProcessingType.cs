// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining the processing type of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;AttachmentOfEarnings&lt;/i&gt; - Attachment of earnings.                  This processing type require the deduction type field and the supplier id field to be set on a salary line.                  Allows for setting the amount or the rate on salary lines depending on the deduction type.                  Also allow for setting the following fields on salary lines - the start amount, supplier bank account, from and to date, use remittance and cid.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AttachmentOfEarningsTax&lt;/i&gt; - Attachment of earnings to cover taxes.                 Note that this processing type needs to be done after trade union and pension deduction.                 This processing type require the deduction type field and the income year field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type.                 Also allow for setting the following fields on salary lines - the start amount, from date and to date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;BackPaymentOfPensionAndAnnuities&lt;/i&gt; - Post-payment of pension and annuity. Requires from / until date.                 (Norwegian - Etterbetaling av pensjon og livrente).                 This processing type require the amount field to be set on a salary line, and allows for the from and to date fields to be set.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithNumberOfJourneys&lt;/i&gt; - Travel cost and lodging (often commuters) that will report number of journeys.                 This processing type require the amount field and number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonType&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter.                 This processing type require the amount field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonTypeAndQuantity&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter and quantity.                 This processing type require the amount field, the quantity field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonTypeQuantityAndRate&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter, quantity and calculate with a rate.                 This processing type require the quantity field and the person type field to be set on a salary line, and allows for setting the rate field on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionOfAdditionalEmployersContribution&lt;/i&gt; - Correction of additional employer&#39;s contribution.                 This processing type require the amount field to be set on salary lines, and the amount should be considered as the bases amount, not the direct employer contribution amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionOfEmployersContribution&lt;/i&gt; - Correction of employer&#39;s contribution.                 This processing type require the amount field to be set on salary lines, and the amount should be considered as the bases amount, not the direct employer contribution amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;DeductionWithBalance&lt;/i&gt; - Deduction that has a start balance that should be reduced each payroll.                 This processing type require setting the field deduction type on salary lines, and the deduction type allows for either amount or rate to be set.                 Also allows for setting the fields from date and to date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ElectronicCommunications&lt;/i&gt; - The electronic communications.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ExpenseRefund&lt;/i&gt; - An expense refund.                 This processing type require the amount field on a salary line, and allows for the vatcode id to be set on the salary line.                 Vatcode will default to the vatcode of the account used, if not set.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmount&lt;/i&gt; - Fixed amount.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmountWithQuantity&lt;/i&gt; - Fixed amount with variable quantity.                 This processing type require both the amount field and the quantity field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmountWithQuantitySubjectToWithholdingTax&lt;/i&gt; - Fixed amount with quantity subject to withholding tax.                 Link to another pay item. This processing type require both the amount field and the quantity field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedSalary&lt;/i&gt; - Fixed salary.                 This processing type allows for the amount field to be set on salary lines.                 For employees with employments that have fixed pay as the remuneration type, the amount field will default inherit the monthly pay calculated from the annal salary, unless overriden in the amount field on salary lines.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FiveDayWeek&lt;/i&gt; - Daily wage, 5 day week.                 This processing type require the quantity field to be set on salary lines.                 Allow for the rate field to be set on salary lines.                 The system will calculate a rate if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarOther&lt;/i&gt; - Used when the car is very expensive and the benefit becomes unreasonably high.                 This processing type require the car list price field to be set on a salary line, and either car registration number or car pool need to be set.                 Also allows for setting the amount field.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarOutsideStandardRule&lt;/i&gt; - Used on larger vehicles (more than 7500kg) or buses with more than 15 passenger seats.                 This processing type require both the car registration date field and the car list price field to be set on a salary line,                 and also allows for setting the fields for amount, home to work kilometers, and private driven kilometers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarStandardRule&lt;/i&gt; - The free car standard rule.                 This processing type require both the car registration date field and the car list price field to be set on a salary line,                 and either car registration number or car pool need to be set.                 Also allows for setting the field work drive exceeds kilometer limit.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPay&lt;/i&gt; - Holiday pay.                 No tax should be calculated from this amount.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayCorrection&lt;/i&gt; - Correction of holiday pay under 60.                 This processing type require the amount field on a salary line, and allows for the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayCorrectionOver60&lt;/i&gt; - Correction of holiday pay over 60.                 This processing type require the amount field on a salary line, and allows for the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayFinalSettlement&lt;/i&gt; - The holiday pay final settlement.                 Used when an employee quits their job and want all of this years holiday pay paid.                 Taxes should be calculated from this amount.                 This must be calculated after all pay items that have IncludeInHolidayPay set to true.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayForSpecifiedYear&lt;/i&gt; - Same as Holiday Pay, except the user is allowed to select the holiday pay year.                 This processing type allow for the amount field and the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayOver60Years&lt;/i&gt; - The holiday pay for employees that are 60 years or older.                 Taxes should be calculated from this amount.                 This processing type allow for the amount field and the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HomeVisitsForCommuters&lt;/i&gt; - Home visits for commuters.                 This processing type require the amount field, the number field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HourlyWage&lt;/i&gt; - Hourly wage.                 This processing type require the quantity field to be set on a salary line, and allows for the rate field to be set on a salary line.                 If the rate is not set/overridden on a salary line, the rate will inherit the hourly wage set or calculated from the current active employment salary of the employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Lott&lt;/i&gt; - Lott that will report number of days.                 This processing type require the amount field and the number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionDeduction&lt;/i&gt; - Pension deduction limited to 2% of 1G.                 This processing type require the deduction type field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type, as well as the member number.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionDeductionUnlimited&lt;/i&gt; - Pension deduction not limited to 2% of 1G.                 This processing type require the deduction type field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type, as well as the member number.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PercentOfFixedSalary&lt;/i&gt; - Percent of fixed salary.                 This processing type allows for the fields amount and rate to be set on a salary line.                 The amount field is calculated by the system if not set/overriden on the salary line.                 The rate will be given by the pay item, if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PercentOfHourlyWage&lt;/i&gt; - Percent of hourly wage (overtime).                 Allows the percentage property to be set on the pay item.                 This processing type require the quantity field to be set on a salary line, and allows for the rate field to be set on a salary line.                 If the rate is not set/overridden on a salary line, the rate will inherit the hourly wage set or calculated from the current active employment salary of the employee.                 The percentage of the pay item will increase/decrease the rate accordingly.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndFixedRate&lt;/i&gt; - Rate based with quantity and a fixed rate specified on pay item level.                 This processing type require the quantity field to be set on a salary line, the rate will be given by the pay item.                 If rate is set on the salary line, it will override the rate set on the pay item.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndFixedRateReportingZeroAsQuantity&lt;/i&gt; - Rate based with quantity and a fixed rate specified on pay item level, that always reports 0 as quantity in A-melding (A02).                 This processing type require the quantity field to be set on a salary line, the rate will be given by the pay item.                 If rate is set on the salary line, it will override the rate set on the pay item.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRate&lt;/i&gt; - Based on quantity and rate.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRateReportingZeroAsQuantity&lt;/i&gt; - Rate based with quantity and rate, that always reports 0 as quantity in A02.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRateSubjectToWithholdingTax&lt;/i&gt; - Pay items with this processing type is the same as \&quot;quantity and rate\&quot; but have a link to another pay item where extra tax should be withheld.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentFixedSalary&lt;/i&gt; - Retroactive payment fixed salary.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentHourlyRate&lt;/i&gt; - Retroactive payment hourly rate.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentOvertime&lt;/i&gt; - Retroactive payment overtime.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentDeductionForHoliday&lt;/i&gt; - Retroactive payment deduction for holiday.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SalaryAdvance&lt;/i&gt; - Used when giving an employee a salary advance.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SeafarersAllowanceDaysAtSea&lt;/i&gt; - Special allowance for seafarers, based on the number of days at sea.                 This processing type require the number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SeafarersAllowanceDeduction&lt;/i&gt; - Special allowance for seafarers, with tax deduction.                 Note that this processing type needs to be done after trade union and pension deduction.                 No variables needed on a salary line with a pay item using this processing type.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SixDayWeek&lt;/i&gt; - Daily wage, 6 day week.                 This processing type require the quantity field to be set on salary lines.                 Allow for the rate field to be set on salary lines.                 The system will calculate a rate if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TradeUnionDeduction&lt;/i&gt; - Trade union deduction.                 This processing type require the supplier field to be set on a salary line.                 Also allows for setting the following fields on a salary line - the amount, the rate, the minimum amount, the member number, the maximum amount, the supplier bank account id, the use remittance, and the cid.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WageDeductionForHoliday&lt;/i&gt; - Deduction in fixed pay for taking a holiday.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WageDeductionForHolidayOver60Years&lt;/i&gt; - Deduction in fixed pay for taking a holiday.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WorkCarKilometers&lt;/i&gt; - Used for small commercial trucks less than 7501kg based on the number of km driven privately by the employee.                 This processing type require both the car list price field and the private driven kilometers field to be set on a salary line, and also allows for setting the field amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WorkCarListPrice&lt;/i&gt; - Used for small commercial trucks less than 7501kg based on the list price.                 This processing type require setting the fields for car registration date, car list price and car registration number on a salary line.Also allows for setting the field amount.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining the processing type of a pay item.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;AttachmentOfEarnings&lt;/i&gt; - Attachment of earnings.                  This processing type require the deduction type field and the supplier id field to be set on a salary line.                  Allows for setting the amount or the rate on salary lines depending on the deduction type.                  Also allow for setting the following fields on salary lines - the start amount, supplier bank account, from and to date, use remittance and cid.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AttachmentOfEarningsTax&lt;/i&gt; - Attachment of earnings to cover taxes.                 Note that this processing type needs to be done after trade union and pension deduction.                 This processing type require the deduction type field and the income year field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type.                 Also allow for setting the following fields on salary lines - the start amount, from date and to date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;BackPaymentOfPensionAndAnnuities&lt;/i&gt; - Post-payment of pension and annuity. Requires from / until date.                 (Norwegian - Etterbetaling av pensjon og livrente).                 This processing type require the amount field to be set on a salary line, and allows for the from and to date fields to be set.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithNumberOfJourneys&lt;/i&gt; - Travel cost and lodging (often commuters) that will report number of journeys.                 This processing type require the amount field and number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonType&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter.                 This processing type require the amount field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonTypeAndQuantity&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter and quantity.                 This processing type require the amount field, the quantity field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CommuterWithPersonTypeQuantityAndRate&lt;/i&gt; - Travel cost and lodging (often commuters) that will report type of commuter, quantity and calculate with a rate.                 This processing type require the quantity field and the person type field to be set on a salary line, and allows for setting the rate field on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionOfAdditionalEmployersContribution&lt;/i&gt; - Correction of additional employer&#39;s contribution.                 This processing type require the amount field to be set on salary lines, and the amount should be considered as the bases amount, not the direct employer contribution amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;CorrectionOfEmployersContribution&lt;/i&gt; - Correction of employer&#39;s contribution.                 This processing type require the amount field to be set on salary lines, and the amount should be considered as the bases amount, not the direct employer contribution amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;DeductionWithBalance&lt;/i&gt; - Deduction that has a start balance that should be reduced each payroll.                 This processing type require setting the field deduction type on salary lines, and the deduction type allows for either amount or rate to be set.                 Also allows for setting the fields from date and to date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ElectronicCommunications&lt;/i&gt; - The electronic communications.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ExpenseRefund&lt;/i&gt; - An expense refund.                 This processing type require the amount field on a salary line, and allows for the vatcode id to be set on the salary line.                 Vatcode will default to the vatcode of the account used, if not set.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmount&lt;/i&gt; - Fixed amount.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmountWithQuantity&lt;/i&gt; - Fixed amount with variable quantity.                 This processing type require both the amount field and the quantity field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedAmountWithQuantitySubjectToWithholdingTax&lt;/i&gt; - Fixed amount with quantity subject to withholding tax.                 Link to another pay item. This processing type require both the amount field and the quantity field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FixedSalary&lt;/i&gt; - Fixed salary.                 This processing type allows for the amount field to be set on salary lines.                 For employees with employments that have fixed pay as the remuneration type, the amount field will default inherit the monthly pay calculated from the annal salary, unless overriden in the amount field on salary lines.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FiveDayWeek&lt;/i&gt; - Daily wage, 5 day week.                 This processing type require the quantity field to be set on salary lines.                 Allow for the rate field to be set on salary lines.                 The system will calculate a rate if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarOther&lt;/i&gt; - Used when the car is very expensive and the benefit becomes unreasonably high.                 This processing type require the car list price field to be set on a salary line, and either car registration number or car pool need to be set.                 Also allows for setting the amount field.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarOutsideStandardRule&lt;/i&gt; - Used on larger vehicles (more than 7500kg) or buses with more than 15 passenger seats.                 This processing type require both the car registration date field and the car list price field to be set on a salary line,                 and also allows for setting the fields for amount, home to work kilometers, and private driven kilometers.&lt;/li&gt;&lt;li&gt;&lt;i&gt;FreeCarStandardRule&lt;/i&gt; - The free car standard rule.                 This processing type require both the car registration date field and the car list price field to be set on a salary line,                 and either car registration number or car pool need to be set.                 Also allows for setting the field work drive exceeds kilometer limit.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPay&lt;/i&gt; - Holiday pay.                 No tax should be calculated from this amount.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayCorrection&lt;/i&gt; - Correction of holiday pay under 60.                 This processing type require the amount field on a salary line, and allows for the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayCorrectionOver60&lt;/i&gt; - Correction of holiday pay over 60.                 This processing type require the amount field on a salary line, and allows for the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayFinalSettlement&lt;/i&gt; - The holiday pay final settlement.                 Used when an employee quits their job and want all of this years holiday pay paid.                 Taxes should be calculated from this amount.                 This must be calculated after all pay items that have IncludeInHolidayPay set to true.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayForSpecifiedYear&lt;/i&gt; - Same as Holiday Pay, except the user is allowed to select the holiday pay year.                 This processing type allow for the amount field and the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HolidayPayOver60Years&lt;/i&gt; - The holiday pay for employees that are 60 years or older.                 Taxes should be calculated from this amount.                 This processing type allow for the amount field and the income year field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HomeVisitsForCommuters&lt;/i&gt; - Home visits for commuters.                 This processing type require the amount field, the number field and the person type field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;HourlyWage&lt;/i&gt; - Hourly wage.                 This processing type require the quantity field to be set on a salary line, and allows for the rate field to be set on a salary line.                 If the rate is not set/overridden on a salary line, the rate will inherit the hourly wage set or calculated from the current active employment salary of the employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Lott&lt;/i&gt; - Lott that will report number of days.                 This processing type require the amount field and the number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionDeduction&lt;/i&gt; - Pension deduction limited to 2% of 1G.                 This processing type require the deduction type field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type, as well as the member number.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PensionDeductionUnlimited&lt;/i&gt; - Pension deduction not limited to 2% of 1G.                 This processing type require the deduction type field to be set on a salary line.                 Allows for setting the amount or the rate on salary lines depending on the deduction type, as well as the member number.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PercentOfFixedSalary&lt;/i&gt; - Percent of fixed salary.                 This processing type allows for the fields amount and rate to be set on a salary line.                 The amount field is calculated by the system if not set/overriden on the salary line.                 The rate will be given by the pay item, if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;PercentOfHourlyWage&lt;/i&gt; - Percent of hourly wage (overtime).                 Allows the percentage property to be set on the pay item.                 This processing type require the quantity field to be set on a salary line, and allows for the rate field to be set on a salary line.                 If the rate is not set/overridden on a salary line, the rate will inherit the hourly wage set or calculated from the current active employment salary of the employee.                 The percentage of the pay item will increase/decrease the rate accordingly.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndFixedRate&lt;/i&gt; - Rate based with quantity and a fixed rate specified on pay item level.                 This processing type require the quantity field to be set on a salary line, the rate will be given by the pay item.                 If rate is set on the salary line, it will override the rate set on the pay item.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndFixedRateReportingZeroAsQuantity&lt;/i&gt; - Rate based with quantity and a fixed rate specified on pay item level, that always reports 0 as quantity in A-melding (A02).                 This processing type require the quantity field to be set on a salary line, the rate will be given by the pay item.                 If rate is set on the salary line, it will override the rate set on the pay item.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRate&lt;/i&gt; - Based on quantity and rate.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRateReportingZeroAsQuantity&lt;/i&gt; - Rate based with quantity and rate, that always reports 0 as quantity in A02.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;QuantityAndRateSubjectToWithholdingTax&lt;/i&gt; - Pay items with this processing type is the same as \&quot;quantity and rate\&quot; but have a link to another pay item where extra tax should be withheld.                 This processing type require both the quantity field and the rate field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentFixedSalary&lt;/i&gt; - Retroactive payment fixed salary.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentHourlyRate&lt;/i&gt; - Retroactive payment hourly rate.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentOvertime&lt;/i&gt; - Retroactive payment overtime.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;RetroactivePaymentDeductionForHoliday&lt;/i&gt; - Retroactive payment deduction for holiday.             This processing type calculates the difference between the expected amount and the amount given for each month in the payroll year.             It requires the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SalaryAdvance&lt;/i&gt; - Used when giving an employee a salary advance.                 This processing type require the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SeafarersAllowanceDaysAtSea&lt;/i&gt; - Special allowance for seafarers, based on the number of days at sea.                 This processing type require the number field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SeafarersAllowanceDeduction&lt;/i&gt; - Special allowance for seafarers, with tax deduction.                 Note that this processing type needs to be done after trade union and pension deduction.                 No variables needed on a salary line with a pay item using this processing type.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SixDayWeek&lt;/i&gt; - Daily wage, 6 day week.                 This processing type require the quantity field to be set on salary lines.                 Allow for the rate field to be set on salary lines.                 The system will calculate a rate if not set/overridden on the salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;TradeUnionDeduction&lt;/i&gt; - Trade union deduction.                 This processing type require the supplier field to be set on a salary line.                 Also allows for setting the following fields on a salary line - the amount, the rate, the minimum amount, the member number, the maximum amount, the supplier bank account id, the use remittance, and the cid.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WageDeductionForHoliday&lt;/i&gt; - Deduction in fixed pay for taking a holiday.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WageDeductionForHolidayOver60Years&lt;/i&gt; - Deduction in fixed pay for taking a holiday.                 This processing type allow for the amount field to be set on a salary line.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WorkCarKilometers&lt;/i&gt; - Used for small commercial trucks less than 7501kg based on the number of km driven privately by the employee.                 This processing type require both the car list price field and the private driven kilometers field to be set on a salary line, and also allows for setting the field amount.&lt;/li&gt;&lt;li&gt;&lt;i&gt;WorkCarListPrice&lt;/i&gt; - Used for small commercial trucks less than 7501kg based on the list price.                 This processing type require setting the fields for car registration date, car list price and car registration number on a salary line.Also allows for setting the field amount.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ProcessingType
    {
        /// <summary>
        /// Enum AttachmentOfEarnings for value: AttachmentOfEarnings
        /// </summary>
        AttachmentOfEarnings = 1,

        /// <summary>
        /// Enum AttachmentOfEarningsTax for value: AttachmentOfEarningsTax
        /// </summary>
        AttachmentOfEarningsTax = 2,

        /// <summary>
        /// Enum BackPaymentOfPensionAndAnnuities for value: BackPaymentOfPensionAndAnnuities
        /// </summary>
        BackPaymentOfPensionAndAnnuities = 3,

        /// <summary>
        /// Enum CommuterWithNumberOfJourneys for value: CommuterWithNumberOfJourneys
        /// </summary>
        CommuterWithNumberOfJourneys = 4,

        /// <summary>
        /// Enum CommuterWithPersonType for value: CommuterWithPersonType
        /// </summary>
        CommuterWithPersonType = 5,

        /// <summary>
        /// Enum CommuterWithPersonTypeAndQuantity for value: CommuterWithPersonTypeAndQuantity
        /// </summary>
        CommuterWithPersonTypeAndQuantity = 6,

        /// <summary>
        /// Enum CommuterWithPersonTypeQuantityAndRate for value: CommuterWithPersonTypeQuantityAndRate
        /// </summary>
        CommuterWithPersonTypeQuantityAndRate = 7,

        /// <summary>
        /// Enum CorrectionOfAdditionalEmployersContribution for value: CorrectionOfAdditionalEmployersContribution
        /// </summary>
        CorrectionOfAdditionalEmployersContribution = 8,

        /// <summary>
        /// Enum CorrectionOfEmployersContribution for value: CorrectionOfEmployersContribution
        /// </summary>
        CorrectionOfEmployersContribution = 9,

        /// <summary>
        /// Enum DeductionWithBalance for value: DeductionWithBalance
        /// </summary>
        DeductionWithBalance = 10,

        /// <summary>
        /// Enum ElectronicCommunications for value: ElectronicCommunications
        /// </summary>
        ElectronicCommunications = 11,

        /// <summary>
        /// Enum ExpenseRefund for value: ExpenseRefund
        /// </summary>
        ExpenseRefund = 12,

        /// <summary>
        /// Enum FixedAmount for value: FixedAmount
        /// </summary>
        FixedAmount = 13,

        /// <summary>
        /// Enum FixedAmountWithQuantity for value: FixedAmountWithQuantity
        /// </summary>
        FixedAmountWithQuantity = 14,

        /// <summary>
        /// Enum FixedAmountWithQuantitySubjectToWithholdingTax for value: FixedAmountWithQuantitySubjectToWithholdingTax
        /// </summary>
        FixedAmountWithQuantitySubjectToWithholdingTax = 15,

        /// <summary>
        /// Enum FixedSalary for value: FixedSalary
        /// </summary>
        FixedSalary = 16,

        /// <summary>
        /// Enum FiveDayWeek for value: FiveDayWeek
        /// </summary>
        FiveDayWeek = 17,

        /// <summary>
        /// Enum FreeCarOther for value: FreeCarOther
        /// </summary>
        FreeCarOther = 18,

        /// <summary>
        /// Enum FreeCarOutsideStandardRule for value: FreeCarOutsideStandardRule
        /// </summary>
        FreeCarOutsideStandardRule = 19,

        /// <summary>
        /// Enum FreeCarStandardRule for value: FreeCarStandardRule
        /// </summary>
        FreeCarStandardRule = 20,

        /// <summary>
        /// Enum HolidayPay for value: HolidayPay
        /// </summary>
        HolidayPay = 21,

        /// <summary>
        /// Enum HolidayPayCorrection for value: HolidayPayCorrection
        /// </summary>
        HolidayPayCorrection = 22,

        /// <summary>
        /// Enum HolidayPayCorrectionOver60 for value: HolidayPayCorrectionOver60
        /// </summary>
        HolidayPayCorrectionOver60 = 23,

        /// <summary>
        /// Enum HolidayPayFinalSettlement for value: HolidayPayFinalSettlement
        /// </summary>
        HolidayPayFinalSettlement = 24,

        /// <summary>
        /// Enum HolidayPayForSpecifiedYear for value: HolidayPayForSpecifiedYear
        /// </summary>
        HolidayPayForSpecifiedYear = 25,

        /// <summary>
        /// Enum HolidayPayOver60Years for value: HolidayPayOver60Years
        /// </summary>
        HolidayPayOver60Years = 26,

        /// <summary>
        /// Enum HomeVisitsForCommuters for value: HomeVisitsForCommuters
        /// </summary>
        HomeVisitsForCommuters = 27,

        /// <summary>
        /// Enum HourlyWage for value: HourlyWage
        /// </summary>
        HourlyWage = 28,

        /// <summary>
        /// Enum Lott for value: Lott
        /// </summary>
        Lott = 29,

        /// <summary>
        /// Enum PensionDeduction for value: PensionDeduction
        /// </summary>
        PensionDeduction = 30,

        /// <summary>
        /// Enum PensionDeductionUnlimited for value: PensionDeductionUnlimited
        /// </summary>
        PensionDeductionUnlimited = 31,

        /// <summary>
        /// Enum PercentOfFixedSalary for value: PercentOfFixedSalary
        /// </summary>
        PercentOfFixedSalary = 32,

        /// <summary>
        /// Enum PercentOfHourlyWage for value: PercentOfHourlyWage
        /// </summary>
        PercentOfHourlyWage = 33,

        /// <summary>
        /// Enum QuantityAndFixedRate for value: QuantityAndFixedRate
        /// </summary>
        QuantityAndFixedRate = 34,

        /// <summary>
        /// Enum QuantityAndFixedRateReportingZeroAsQuantity for value: QuantityAndFixedRateReportingZeroAsQuantity
        /// </summary>
        QuantityAndFixedRateReportingZeroAsQuantity = 35,

        /// <summary>
        /// Enum QuantityAndRate for value: QuantityAndRate
        /// </summary>
        QuantityAndRate = 36,

        /// <summary>
        /// Enum QuantityAndRateReportingZeroAsQuantity for value: QuantityAndRateReportingZeroAsQuantity
        /// </summary>
        QuantityAndRateReportingZeroAsQuantity = 37,

        /// <summary>
        /// Enum QuantityAndRateSubjectToWithholdingTax for value: QuantityAndRateSubjectToWithholdingTax
        /// </summary>
        QuantityAndRateSubjectToWithholdingTax = 38,

        /// <summary>
        /// Enum RetroactivePaymentFixedSalary for value: RetroactivePaymentFixedSalary
        /// </summary>
        RetroactivePaymentFixedSalary = 39,

        /// <summary>
        /// Enum RetroactivePaymentHourlyRate for value: RetroactivePaymentHourlyRate
        /// </summary>
        RetroactivePaymentHourlyRate = 40,

        /// <summary>
        /// Enum RetroactivePaymentOvertime for value: RetroactivePaymentOvertime
        /// </summary>
        RetroactivePaymentOvertime = 41,

        /// <summary>
        /// Enum RetroactivePaymentDeductionForHoliday for value: RetroactivePaymentDeductionForHoliday
        /// </summary>
        RetroactivePaymentDeductionForHoliday = 42,

        /// <summary>
        /// Enum SalaryAdvance for value: SalaryAdvance
        /// </summary>
        SalaryAdvance = 43,

        /// <summary>
        /// Enum SeafarersAllowanceDaysAtSea for value: SeafarersAllowanceDaysAtSea
        /// </summary>
        SeafarersAllowanceDaysAtSea = 44,

        /// <summary>
        /// Enum SeafarersAllowanceDeduction for value: SeafarersAllowanceDeduction
        /// </summary>
        SeafarersAllowanceDeduction = 45,

        /// <summary>
        /// Enum SixDayWeek for value: SixDayWeek
        /// </summary>
        SixDayWeek = 46,

        /// <summary>
        /// Enum TradeUnionDeduction for value: TradeUnionDeduction
        /// </summary>
        TradeUnionDeduction = 47,

        /// <summary>
        /// Enum WageDeductionForHoliday for value: WageDeductionForHoliday
        /// </summary>
        WageDeductionForHoliday = 48,

        /// <summary>
        /// Enum WageDeductionForHolidayOver60Years for value: WageDeductionForHolidayOver60Years
        /// </summary>
        WageDeductionForHolidayOver60Years = 49,

        /// <summary>
        /// Enum WorkCarKilometers for value: WorkCarKilometers
        /// </summary>
        WorkCarKilometers = 50,

        /// <summary>
        /// Enum WorkCarListPrice for value: WorkCarListPrice
        /// </summary>
        WorkCarListPrice = 51
    }

    /// <summary>
    /// Converts <see cref="ProcessingType"/> to and from the JSON value
    /// </summary>
    public static class ProcessingTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProcessingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProcessingType FromString(string value)
        {
            if (value.Equals("AttachmentOfEarnings"))
                return ProcessingType.AttachmentOfEarnings;

            if (value.Equals("AttachmentOfEarningsTax"))
                return ProcessingType.AttachmentOfEarningsTax;

            if (value.Equals("BackPaymentOfPensionAndAnnuities"))
                return ProcessingType.BackPaymentOfPensionAndAnnuities;

            if (value.Equals("CommuterWithNumberOfJourneys"))
                return ProcessingType.CommuterWithNumberOfJourneys;

            if (value.Equals("CommuterWithPersonType"))
                return ProcessingType.CommuterWithPersonType;

            if (value.Equals("CommuterWithPersonTypeAndQuantity"))
                return ProcessingType.CommuterWithPersonTypeAndQuantity;

            if (value.Equals("CommuterWithPersonTypeQuantityAndRate"))
                return ProcessingType.CommuterWithPersonTypeQuantityAndRate;

            if (value.Equals("CorrectionOfAdditionalEmployersContribution"))
                return ProcessingType.CorrectionOfAdditionalEmployersContribution;

            if (value.Equals("CorrectionOfEmployersContribution"))
                return ProcessingType.CorrectionOfEmployersContribution;

            if (value.Equals("DeductionWithBalance"))
                return ProcessingType.DeductionWithBalance;

            if (value.Equals("ElectronicCommunications"))
                return ProcessingType.ElectronicCommunications;

            if (value.Equals("ExpenseRefund"))
                return ProcessingType.ExpenseRefund;

            if (value.Equals("FixedAmount"))
                return ProcessingType.FixedAmount;

            if (value.Equals("FixedAmountWithQuantity"))
                return ProcessingType.FixedAmountWithQuantity;

            if (value.Equals("FixedAmountWithQuantitySubjectToWithholdingTax"))
                return ProcessingType.FixedAmountWithQuantitySubjectToWithholdingTax;

            if (value.Equals("FixedSalary"))
                return ProcessingType.FixedSalary;

            if (value.Equals("FiveDayWeek"))
                return ProcessingType.FiveDayWeek;

            if (value.Equals("FreeCarOther"))
                return ProcessingType.FreeCarOther;

            if (value.Equals("FreeCarOutsideStandardRule"))
                return ProcessingType.FreeCarOutsideStandardRule;

            if (value.Equals("FreeCarStandardRule"))
                return ProcessingType.FreeCarStandardRule;

            if (value.Equals("HolidayPay"))
                return ProcessingType.HolidayPay;

            if (value.Equals("HolidayPayCorrection"))
                return ProcessingType.HolidayPayCorrection;

            if (value.Equals("HolidayPayCorrectionOver60"))
                return ProcessingType.HolidayPayCorrectionOver60;

            if (value.Equals("HolidayPayFinalSettlement"))
                return ProcessingType.HolidayPayFinalSettlement;

            if (value.Equals("HolidayPayForSpecifiedYear"))
                return ProcessingType.HolidayPayForSpecifiedYear;

            if (value.Equals("HolidayPayOver60Years"))
                return ProcessingType.HolidayPayOver60Years;

            if (value.Equals("HomeVisitsForCommuters"))
                return ProcessingType.HomeVisitsForCommuters;

            if (value.Equals("HourlyWage"))
                return ProcessingType.HourlyWage;

            if (value.Equals("Lott"))
                return ProcessingType.Lott;

            if (value.Equals("PensionDeduction"))
                return ProcessingType.PensionDeduction;

            if (value.Equals("PensionDeductionUnlimited"))
                return ProcessingType.PensionDeductionUnlimited;

            if (value.Equals("PercentOfFixedSalary"))
                return ProcessingType.PercentOfFixedSalary;

            if (value.Equals("PercentOfHourlyWage"))
                return ProcessingType.PercentOfHourlyWage;

            if (value.Equals("QuantityAndFixedRate"))
                return ProcessingType.QuantityAndFixedRate;

            if (value.Equals("QuantityAndFixedRateReportingZeroAsQuantity"))
                return ProcessingType.QuantityAndFixedRateReportingZeroAsQuantity;

            if (value.Equals("QuantityAndRate"))
                return ProcessingType.QuantityAndRate;

            if (value.Equals("QuantityAndRateReportingZeroAsQuantity"))
                return ProcessingType.QuantityAndRateReportingZeroAsQuantity;

            if (value.Equals("QuantityAndRateSubjectToWithholdingTax"))
                return ProcessingType.QuantityAndRateSubjectToWithholdingTax;

            if (value.Equals("RetroactivePaymentFixedSalary"))
                return ProcessingType.RetroactivePaymentFixedSalary;

            if (value.Equals("RetroactivePaymentHourlyRate"))
                return ProcessingType.RetroactivePaymentHourlyRate;

            if (value.Equals("RetroactivePaymentOvertime"))
                return ProcessingType.RetroactivePaymentOvertime;

            if (value.Equals("RetroactivePaymentDeductionForHoliday"))
                return ProcessingType.RetroactivePaymentDeductionForHoliday;

            if (value.Equals("SalaryAdvance"))
                return ProcessingType.SalaryAdvance;

            if (value.Equals("SeafarersAllowanceDaysAtSea"))
                return ProcessingType.SeafarersAllowanceDaysAtSea;

            if (value.Equals("SeafarersAllowanceDeduction"))
                return ProcessingType.SeafarersAllowanceDeduction;

            if (value.Equals("SixDayWeek"))
                return ProcessingType.SixDayWeek;

            if (value.Equals("TradeUnionDeduction"))
                return ProcessingType.TradeUnionDeduction;

            if (value.Equals("WageDeductionForHoliday"))
                return ProcessingType.WageDeductionForHoliday;

            if (value.Equals("WageDeductionForHolidayOver60Years"))
                return ProcessingType.WageDeductionForHolidayOver60Years;

            if (value.Equals("WorkCarKilometers"))
                return ProcessingType.WorkCarKilometers;

            if (value.Equals("WorkCarListPrice"))
                return ProcessingType.WorkCarListPrice;

            throw new NotImplementedException($"Could not convert value to type ProcessingType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProcessingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProcessingType? FromStringOrDefault(string value)
        {
            if (value.Equals("AttachmentOfEarnings"))
                return ProcessingType.AttachmentOfEarnings;

            if (value.Equals("AttachmentOfEarningsTax"))
                return ProcessingType.AttachmentOfEarningsTax;

            if (value.Equals("BackPaymentOfPensionAndAnnuities"))
                return ProcessingType.BackPaymentOfPensionAndAnnuities;

            if (value.Equals("CommuterWithNumberOfJourneys"))
                return ProcessingType.CommuterWithNumberOfJourneys;

            if (value.Equals("CommuterWithPersonType"))
                return ProcessingType.CommuterWithPersonType;

            if (value.Equals("CommuterWithPersonTypeAndQuantity"))
                return ProcessingType.CommuterWithPersonTypeAndQuantity;

            if (value.Equals("CommuterWithPersonTypeQuantityAndRate"))
                return ProcessingType.CommuterWithPersonTypeQuantityAndRate;

            if (value.Equals("CorrectionOfAdditionalEmployersContribution"))
                return ProcessingType.CorrectionOfAdditionalEmployersContribution;

            if (value.Equals("CorrectionOfEmployersContribution"))
                return ProcessingType.CorrectionOfEmployersContribution;

            if (value.Equals("DeductionWithBalance"))
                return ProcessingType.DeductionWithBalance;

            if (value.Equals("ElectronicCommunications"))
                return ProcessingType.ElectronicCommunications;

            if (value.Equals("ExpenseRefund"))
                return ProcessingType.ExpenseRefund;

            if (value.Equals("FixedAmount"))
                return ProcessingType.FixedAmount;

            if (value.Equals("FixedAmountWithQuantity"))
                return ProcessingType.FixedAmountWithQuantity;

            if (value.Equals("FixedAmountWithQuantitySubjectToWithholdingTax"))
                return ProcessingType.FixedAmountWithQuantitySubjectToWithholdingTax;

            if (value.Equals("FixedSalary"))
                return ProcessingType.FixedSalary;

            if (value.Equals("FiveDayWeek"))
                return ProcessingType.FiveDayWeek;

            if (value.Equals("FreeCarOther"))
                return ProcessingType.FreeCarOther;

            if (value.Equals("FreeCarOutsideStandardRule"))
                return ProcessingType.FreeCarOutsideStandardRule;

            if (value.Equals("FreeCarStandardRule"))
                return ProcessingType.FreeCarStandardRule;

            if (value.Equals("HolidayPay"))
                return ProcessingType.HolidayPay;

            if (value.Equals("HolidayPayCorrection"))
                return ProcessingType.HolidayPayCorrection;

            if (value.Equals("HolidayPayCorrectionOver60"))
                return ProcessingType.HolidayPayCorrectionOver60;

            if (value.Equals("HolidayPayFinalSettlement"))
                return ProcessingType.HolidayPayFinalSettlement;

            if (value.Equals("HolidayPayForSpecifiedYear"))
                return ProcessingType.HolidayPayForSpecifiedYear;

            if (value.Equals("HolidayPayOver60Years"))
                return ProcessingType.HolidayPayOver60Years;

            if (value.Equals("HomeVisitsForCommuters"))
                return ProcessingType.HomeVisitsForCommuters;

            if (value.Equals("HourlyWage"))
                return ProcessingType.HourlyWage;

            if (value.Equals("Lott"))
                return ProcessingType.Lott;

            if (value.Equals("PensionDeduction"))
                return ProcessingType.PensionDeduction;

            if (value.Equals("PensionDeductionUnlimited"))
                return ProcessingType.PensionDeductionUnlimited;

            if (value.Equals("PercentOfFixedSalary"))
                return ProcessingType.PercentOfFixedSalary;

            if (value.Equals("PercentOfHourlyWage"))
                return ProcessingType.PercentOfHourlyWage;

            if (value.Equals("QuantityAndFixedRate"))
                return ProcessingType.QuantityAndFixedRate;

            if (value.Equals("QuantityAndFixedRateReportingZeroAsQuantity"))
                return ProcessingType.QuantityAndFixedRateReportingZeroAsQuantity;

            if (value.Equals("QuantityAndRate"))
                return ProcessingType.QuantityAndRate;

            if (value.Equals("QuantityAndRateReportingZeroAsQuantity"))
                return ProcessingType.QuantityAndRateReportingZeroAsQuantity;

            if (value.Equals("QuantityAndRateSubjectToWithholdingTax"))
                return ProcessingType.QuantityAndRateSubjectToWithholdingTax;

            if (value.Equals("RetroactivePaymentFixedSalary"))
                return ProcessingType.RetroactivePaymentFixedSalary;

            if (value.Equals("RetroactivePaymentHourlyRate"))
                return ProcessingType.RetroactivePaymentHourlyRate;

            if (value.Equals("RetroactivePaymentOvertime"))
                return ProcessingType.RetroactivePaymentOvertime;

            if (value.Equals("RetroactivePaymentDeductionForHoliday"))
                return ProcessingType.RetroactivePaymentDeductionForHoliday;

            if (value.Equals("SalaryAdvance"))
                return ProcessingType.SalaryAdvance;

            if (value.Equals("SeafarersAllowanceDaysAtSea"))
                return ProcessingType.SeafarersAllowanceDaysAtSea;

            if (value.Equals("SeafarersAllowanceDeduction"))
                return ProcessingType.SeafarersAllowanceDeduction;

            if (value.Equals("SixDayWeek"))
                return ProcessingType.SixDayWeek;

            if (value.Equals("TradeUnionDeduction"))
                return ProcessingType.TradeUnionDeduction;

            if (value.Equals("WageDeductionForHoliday"))
                return ProcessingType.WageDeductionForHoliday;

            if (value.Equals("WageDeductionForHolidayOver60Years"))
                return ProcessingType.WageDeductionForHolidayOver60Years;

            if (value.Equals("WorkCarKilometers"))
                return ProcessingType.WorkCarKilometers;

            if (value.Equals("WorkCarListPrice"))
                return ProcessingType.WorkCarListPrice;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProcessingType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProcessingType value)
        {
            if (value == ProcessingType.AttachmentOfEarnings)
                return "AttachmentOfEarnings";

            if (value == ProcessingType.AttachmentOfEarningsTax)
                return "AttachmentOfEarningsTax";

            if (value == ProcessingType.BackPaymentOfPensionAndAnnuities)
                return "BackPaymentOfPensionAndAnnuities";

            if (value == ProcessingType.CommuterWithNumberOfJourneys)
                return "CommuterWithNumberOfJourneys";

            if (value == ProcessingType.CommuterWithPersonType)
                return "CommuterWithPersonType";

            if (value == ProcessingType.CommuterWithPersonTypeAndQuantity)
                return "CommuterWithPersonTypeAndQuantity";

            if (value == ProcessingType.CommuterWithPersonTypeQuantityAndRate)
                return "CommuterWithPersonTypeQuantityAndRate";

            if (value == ProcessingType.CorrectionOfAdditionalEmployersContribution)
                return "CorrectionOfAdditionalEmployersContribution";

            if (value == ProcessingType.CorrectionOfEmployersContribution)
                return "CorrectionOfEmployersContribution";

            if (value == ProcessingType.DeductionWithBalance)
                return "DeductionWithBalance";

            if (value == ProcessingType.ElectronicCommunications)
                return "ElectronicCommunications";

            if (value == ProcessingType.ExpenseRefund)
                return "ExpenseRefund";

            if (value == ProcessingType.FixedAmount)
                return "FixedAmount";

            if (value == ProcessingType.FixedAmountWithQuantity)
                return "FixedAmountWithQuantity";

            if (value == ProcessingType.FixedAmountWithQuantitySubjectToWithholdingTax)
                return "FixedAmountWithQuantitySubjectToWithholdingTax";

            if (value == ProcessingType.FixedSalary)
                return "FixedSalary";

            if (value == ProcessingType.FiveDayWeek)
                return "FiveDayWeek";

            if (value == ProcessingType.FreeCarOther)
                return "FreeCarOther";

            if (value == ProcessingType.FreeCarOutsideStandardRule)
                return "FreeCarOutsideStandardRule";

            if (value == ProcessingType.FreeCarStandardRule)
                return "FreeCarStandardRule";

            if (value == ProcessingType.HolidayPay)
                return "HolidayPay";

            if (value == ProcessingType.HolidayPayCorrection)
                return "HolidayPayCorrection";

            if (value == ProcessingType.HolidayPayCorrectionOver60)
                return "HolidayPayCorrectionOver60";

            if (value == ProcessingType.HolidayPayFinalSettlement)
                return "HolidayPayFinalSettlement";

            if (value == ProcessingType.HolidayPayForSpecifiedYear)
                return "HolidayPayForSpecifiedYear";

            if (value == ProcessingType.HolidayPayOver60Years)
                return "HolidayPayOver60Years";

            if (value == ProcessingType.HomeVisitsForCommuters)
                return "HomeVisitsForCommuters";

            if (value == ProcessingType.HourlyWage)
                return "HourlyWage";

            if (value == ProcessingType.Lott)
                return "Lott";

            if (value == ProcessingType.PensionDeduction)
                return "PensionDeduction";

            if (value == ProcessingType.PensionDeductionUnlimited)
                return "PensionDeductionUnlimited";

            if (value == ProcessingType.PercentOfFixedSalary)
                return "PercentOfFixedSalary";

            if (value == ProcessingType.PercentOfHourlyWage)
                return "PercentOfHourlyWage";

            if (value == ProcessingType.QuantityAndFixedRate)
                return "QuantityAndFixedRate";

            if (value == ProcessingType.QuantityAndFixedRateReportingZeroAsQuantity)
                return "QuantityAndFixedRateReportingZeroAsQuantity";

            if (value == ProcessingType.QuantityAndRate)
                return "QuantityAndRate";

            if (value == ProcessingType.QuantityAndRateReportingZeroAsQuantity)
                return "QuantityAndRateReportingZeroAsQuantity";

            if (value == ProcessingType.QuantityAndRateSubjectToWithholdingTax)
                return "QuantityAndRateSubjectToWithholdingTax";

            if (value == ProcessingType.RetroactivePaymentFixedSalary)
                return "RetroactivePaymentFixedSalary";

            if (value == ProcessingType.RetroactivePaymentHourlyRate)
                return "RetroactivePaymentHourlyRate";

            if (value == ProcessingType.RetroactivePaymentOvertime)
                return "RetroactivePaymentOvertime";

            if (value == ProcessingType.RetroactivePaymentDeductionForHoliday)
                return "RetroactivePaymentDeductionForHoliday";

            if (value == ProcessingType.SalaryAdvance)
                return "SalaryAdvance";

            if (value == ProcessingType.SeafarersAllowanceDaysAtSea)
                return "SeafarersAllowanceDaysAtSea";

            if (value == ProcessingType.SeafarersAllowanceDeduction)
                return "SeafarersAllowanceDeduction";

            if (value == ProcessingType.SixDayWeek)
                return "SixDayWeek";

            if (value == ProcessingType.TradeUnionDeduction)
                return "TradeUnionDeduction";

            if (value == ProcessingType.WageDeductionForHoliday)
                return "WageDeductionForHoliday";

            if (value == ProcessingType.WageDeductionForHolidayOver60Years)
                return "WageDeductionForHolidayOver60Years";

            if (value == ProcessingType.WorkCarKilometers)
                return "WorkCarKilometers";

            if (value == ProcessingType.WorkCarListPrice)
                return "WorkCarListPrice";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessingType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProcessingTypeJsonConverter : JsonConverter<ProcessingType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProcessingType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProcessingType? result = rawValue == null
                ? null
                : ProcessingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProcessingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProcessingType processingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(processingType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessingType"/>
    /// </summary>
    public class ProcessingTypeNullableJsonConverter : JsonConverter<ProcessingType?>
    {
        /// <summary>
        /// Returns a ProcessingType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProcessingType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProcessingType? result = rawValue == null
                ? null
                : ProcessingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProcessingType? processingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(processingType?.ToString() ?? "null");
        }
    }
}
