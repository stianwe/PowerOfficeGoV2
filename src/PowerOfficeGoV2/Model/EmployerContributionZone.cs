// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The geographical zones for differentiated employer contribution.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Zone1&lt;/i&gt; - The zone 1&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone1a&lt;/i&gt; - The zone 1a&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone2&lt;/i&gt; - The zone 2&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone3&lt;/i&gt; - The zone 3&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone4&lt;/i&gt; - The zone 4&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone4a&lt;/i&gt; - The zone 4a&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone5&lt;/i&gt; - The zone 5&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The geographical zones for differentiated employer contribution.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Zone1&lt;/i&gt; - The zone 1&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone1a&lt;/i&gt; - The zone 1a&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone2&lt;/i&gt; - The zone 2&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone3&lt;/i&gt; - The zone 3&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone4&lt;/i&gt; - The zone 4&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone4a&lt;/i&gt; - The zone 4a&lt;/li&gt;&lt;li&gt;&lt;i&gt;Zone5&lt;/i&gt; - The zone 5&lt;/li&gt;&lt;/ul&gt;</value>
    public enum EmployerContributionZone
    {
        /// <summary>
        /// Enum Zone1 for value: Zone1
        /// </summary>
        Zone1 = 1,

        /// <summary>
        /// Enum Zone1a for value: Zone1a
        /// </summary>
        Zone1a = 2,

        /// <summary>
        /// Enum Zone2 for value: Zone2
        /// </summary>
        Zone2 = 3,

        /// <summary>
        /// Enum Zone3 for value: Zone3
        /// </summary>
        Zone3 = 4,

        /// <summary>
        /// Enum Zone4 for value: Zone4
        /// </summary>
        Zone4 = 5,

        /// <summary>
        /// Enum Zone4a for value: Zone4a
        /// </summary>
        Zone4a = 6,

        /// <summary>
        /// Enum Zone5 for value: Zone5
        /// </summary>
        Zone5 = 7
    }

    /// <summary>
    /// Converts <see cref="EmployerContributionZone"/> to and from the JSON value
    /// </summary>
    public static class EmployerContributionZoneValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmployerContributionZone"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmployerContributionZone FromString(string value)
        {
            if (value.Equals("Zone1"))
                return EmployerContributionZone.Zone1;

            if (value.Equals("Zone1a"))
                return EmployerContributionZone.Zone1a;

            if (value.Equals("Zone2"))
                return EmployerContributionZone.Zone2;

            if (value.Equals("Zone3"))
                return EmployerContributionZone.Zone3;

            if (value.Equals("Zone4"))
                return EmployerContributionZone.Zone4;

            if (value.Equals("Zone4a"))
                return EmployerContributionZone.Zone4a;

            if (value.Equals("Zone5"))
                return EmployerContributionZone.Zone5;

            throw new NotImplementedException($"Could not convert value to type EmployerContributionZone: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmployerContributionZone"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmployerContributionZone? FromStringOrDefault(string value)
        {
            if (value.Equals("Zone1"))
                return EmployerContributionZone.Zone1;

            if (value.Equals("Zone1a"))
                return EmployerContributionZone.Zone1a;

            if (value.Equals("Zone2"))
                return EmployerContributionZone.Zone2;

            if (value.Equals("Zone3"))
                return EmployerContributionZone.Zone3;

            if (value.Equals("Zone4"))
                return EmployerContributionZone.Zone4;

            if (value.Equals("Zone4a"))
                return EmployerContributionZone.Zone4a;

            if (value.Equals("Zone5"))
                return EmployerContributionZone.Zone5;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmployerContributionZone"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmployerContributionZone value)
        {
            if (value == EmployerContributionZone.Zone1)
                return "Zone1";

            if (value == EmployerContributionZone.Zone1a)
                return "Zone1a";

            if (value == EmployerContributionZone.Zone2)
                return "Zone2";

            if (value == EmployerContributionZone.Zone3)
                return "Zone3";

            if (value == EmployerContributionZone.Zone4)
                return "Zone4";

            if (value == EmployerContributionZone.Zone4a)
                return "Zone4a";

            if (value == EmployerContributionZone.Zone5)
                return "Zone5";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployerContributionZone"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmployerContributionZoneJsonConverter : JsonConverter<EmployerContributionZone>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmployerContributionZone Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmployerContributionZone? result = rawValue == null
                ? null
                : EmployerContributionZoneValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmployerContributionZone to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employerContributionZone"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmployerContributionZone employerContributionZone, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employerContributionZone.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmployerContributionZone"/>
    /// </summary>
    public class EmployerContributionZoneNullableJsonConverter : JsonConverter<EmployerContributionZone?>
    {
        /// <summary>
        /// Returns a EmployerContributionZone from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmployerContributionZone? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmployerContributionZone? result = rawValue == null
                ? null
                : EmployerContributionZoneValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="employerContributionZone"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmployerContributionZone? employerContributionZone, JsonSerializerOptions options)
        {
            writer.WriteStringValue(employerContributionZone?.ToString() ?? "null");
        }
    }
}
