// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Financial settings on a client.
    /// </summary>
    public partial class FinancialSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialSettingsDto" /> class.
        /// </summary>
        /// <param name="conversionDate">The start date of processing in Go. This is the date the client started using Go. Transactions can only be posted on or after this date. The date can also be used to identify the date of the startbalance in Go, which will be this date -1 day</param>
        /// <param name="currencyCode">The standard code of the currency the client use. As of now, only NOK is supported and this property will allways return NOK</param>
        /// <param name="currencyGainsAccountId">The general ledger account id of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</param>
        /// <param name="currencyGainsAccountNo">The general ledger account code of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</param>
        /// <param name="currencyLossAccountId">The general ledger account id of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</param>
        /// <param name="currencyLossAccountNo">The general ledger account code of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</param>
        /// <param name="financialYearEndMonth">financialYearEndMonth</param>
        /// <param name="lastChangedDateTimeOffset">The last changed timestamp. Last changed will update when the settings are created, or whenever the settings are changed.</param>
        /// <param name="useTrustAccountManagement">A value indication whether the client use the trust account management functionality in Go.  Default to false, as the funcionality is optional for law firms, brokers and other firms subject of trust accounts.  If true, the client have dedicated trust bank accounts, and use projects in account transactions.</param>
        [JsonConstructor]
        public FinancialSettingsDto(Option<DateOnly?> conversionDate = default, Option<string?> currencyCode = default, Option<long?> currencyGainsAccountId = default, Option<long?> currencyGainsAccountNo = default, Option<long?> currencyLossAccountId = default, Option<long?> currencyLossAccountNo = default, Option<Months?> financialYearEndMonth = default, Option<DateTime?> lastChangedDateTimeOffset = default, Option<bool?> useTrustAccountManagement = default)
        {
            ConversionDateOption = conversionDate;
            CurrencyCodeOption = currencyCode;
            CurrencyGainsAccountIdOption = currencyGainsAccountId;
            CurrencyGainsAccountNoOption = currencyGainsAccountNo;
            CurrencyLossAccountIdOption = currencyLossAccountId;
            CurrencyLossAccountNoOption = currencyLossAccountNo;
            FinancialYearEndMonthOption = financialYearEndMonth;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            UseTrustAccountManagementOption = useTrustAccountManagement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FinancialYearEndMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Months?> FinancialYearEndMonthOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialYearEndMonth
        /// </summary>
        [JsonPropertyName("FinancialYearEndMonth")]
        public Months? FinancialYearEndMonth { get { return this.FinancialYearEndMonthOption; } set { this.FinancialYearEndMonthOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConversionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ConversionDateOption { get; }

        /// <summary>
        /// The start date of processing in Go. This is the date the client started using Go. Transactions can only be posted on or after this date. The date can also be used to identify the date of the startbalance in Go, which will be this date -1 day
        /// </summary>
        /// <value>The start date of processing in Go. This is the date the client started using Go. Transactions can only be posted on or after this date. The date can also be used to identify the date of the startbalance in Go, which will be this date -1 day</value>
        /* <example>Sat Jan 01 01:00:00 CET 2022</example> */
        [JsonPropertyName("ConversionDate")]
        public DateOnly? ConversionDate { get { return this.ConversionDateOption; } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; }

        /// <summary>
        /// The standard code of the currency the client use. As of now, only NOK is supported and this property will allways return NOK
        /// </summary>
        /// <value>The standard code of the currency the client use. As of now, only NOK is supported and this property will allways return NOK</value>
        /* <example>NOK</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } }

        /// <summary>
        /// Used to track the state of CurrencyGainsAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CurrencyGainsAccountIdOption { get; }

        /// <summary>
        /// The general ledger account id of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.
        /// </summary>
        /// <value>The general ledger account id of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CurrencyGainsAccountId")]
        public long? CurrencyGainsAccountId { get { return this.CurrencyGainsAccountIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyGainsAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CurrencyGainsAccountNoOption { get; }

        /// <summary>
        /// The general ledger account code of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.
        /// </summary>
        /// <value>The general ledger account code of the account used for posting currency gains (agio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</value>
        /* <example>8060</example> */
        [JsonPropertyName("CurrencyGainsAccountNo")]
        public long? CurrencyGainsAccountNo { get { return this.CurrencyGainsAccountNoOption; } }

        /// <summary>
        /// Used to track the state of CurrencyLossAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CurrencyLossAccountIdOption { get; }

        /// <summary>
        /// The general ledger account id of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.
        /// </summary>
        /// <value>The general ledger account id of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CurrencyLossAccountId")]
        public long? CurrencyLossAccountId { get { return this.CurrencyLossAccountIdOption; } }

        /// <summary>
        /// Used to track the state of CurrencyLossAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CurrencyLossAccountNoOption { get; }

        /// <summary>
        /// The general ledger account code of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.
        /// </summary>
        /// <value>The general ledger account code of the account used for posting currency losses (disagio). More information of accounts can be retrieved using the GeneralLedgerAccounts endpoint.</value>
        /* <example>8160</example> */
        [JsonPropertyName("CurrencyLossAccountNo")]
        public long? CurrencyLossAccountNo { get { return this.CurrencyLossAccountNoOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The last changed timestamp. Last changed will update when the settings are created, or whenever the settings are changed.
        /// </summary>
        /// <value>The last changed timestamp. Last changed will update when the settings are created, or whenever the settings are changed.</value>
        /* <example>2022-06-01T11:34:56.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTime? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of UseTrustAccountManagement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseTrustAccountManagementOption { get; }

        /// <summary>
        /// A value indication whether the client use the trust account management functionality in Go.  Default to false, as the funcionality is optional for law firms, brokers and other firms subject of trust accounts.  If true, the client have dedicated trust bank accounts, and use projects in account transactions.
        /// </summary>
        /// <value>A value indication whether the client use the trust account management functionality in Go.  Default to false, as the funcionality is optional for law firms, brokers and other firms subject of trust accounts.  If true, the client have dedicated trust bank accounts, and use projects in account transactions.</value>
        [JsonPropertyName("UseTrustAccountManagement")]
        public bool? UseTrustAccountManagement { get { return this.UseTrustAccountManagementOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialSettingsDto {\n");
            sb.Append("  ConversionDate: ").Append(ConversionDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyGainsAccountId: ").Append(CurrencyGainsAccountId).Append("\n");
            sb.Append("  CurrencyGainsAccountNo: ").Append(CurrencyGainsAccountNo).Append("\n");
            sb.Append("  CurrencyLossAccountId: ").Append(CurrencyLossAccountId).Append("\n");
            sb.Append("  CurrencyLossAccountNo: ").Append(CurrencyLossAccountNo).Append("\n");
            sb.Append("  FinancialYearEndMonth: ").Append(FinancialYearEndMonth).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  UseTrustAccountManagement: ").Append(UseTrustAccountManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FinancialSettingsDto" />
    /// </summary>
    public class FinancialSettingsDtoJsonConverter : JsonConverter<FinancialSettingsDto>
    {
        /// <summary>
        /// The format to use to serialize ConversionDate
        /// </summary>
        public static string ConversionDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FinancialSettingsDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FinancialSettingsDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateOnly?> conversionDate = default;
            Option<string?> currencyCode = default;
            Option<long?> currencyGainsAccountId = default;
            Option<long?> currencyGainsAccountNo = default;
            Option<long?> currencyLossAccountId = default;
            Option<long?> currencyLossAccountNo = default;
            Option<Months?> financialYearEndMonth = default;
            Option<DateTime?> lastChangedDateTimeOffset = default;
            Option<bool?> useTrustAccountManagement = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ConversionDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                conversionDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyGainsAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyGainsAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CurrencyGainsAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyGainsAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CurrencyLossAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyLossAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CurrencyLossAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyLossAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "FinancialYearEndMonth":
                            string? financialYearEndMonthRawValue = utf8JsonReader.GetString();
                            if (financialYearEndMonthRawValue != null)
                                financialYearEndMonth = new Option<Months?>(MonthsValueConverter.FromStringOrDefault(financialYearEndMonthRawValue));
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "UseTrustAccountManagement":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useTrustAccountManagement = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (conversionDate.IsSet && conversionDate.Value == null)
                throw new ArgumentNullException(nameof(conversionDate), "Property is not nullable for class FinancialSettingsDto.");

            if (currencyGainsAccountId.IsSet && currencyGainsAccountId.Value == null)
                throw new ArgumentNullException(nameof(currencyGainsAccountId), "Property is not nullable for class FinancialSettingsDto.");

            if (currencyGainsAccountNo.IsSet && currencyGainsAccountNo.Value == null)
                throw new ArgumentNullException(nameof(currencyGainsAccountNo), "Property is not nullable for class FinancialSettingsDto.");

            if (currencyLossAccountId.IsSet && currencyLossAccountId.Value == null)
                throw new ArgumentNullException(nameof(currencyLossAccountId), "Property is not nullable for class FinancialSettingsDto.");

            if (currencyLossAccountNo.IsSet && currencyLossAccountNo.Value == null)
                throw new ArgumentNullException(nameof(currencyLossAccountNo), "Property is not nullable for class FinancialSettingsDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class FinancialSettingsDto.");

            return new FinancialSettingsDto(conversionDate, currencyCode, currencyGainsAccountId, currencyGainsAccountNo, currencyLossAccountId, currencyLossAccountNo, financialYearEndMonth, lastChangedDateTimeOffset, useTrustAccountManagement);
        }

        /// <summary>
        /// Serializes a <see cref="FinancialSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="financialSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FinancialSettingsDto financialSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, financialSettingsDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FinancialSettingsDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="financialSettingsDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FinancialSettingsDto financialSettingsDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (financialSettingsDto.ConversionDateOption.IsSet)
                writer.WriteString("ConversionDate", financialSettingsDto.ConversionDateOption.Value!.Value.ToString(ConversionDateFormat));

            if (financialSettingsDto.CurrencyCodeOption.IsSet)
                if (financialSettingsDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", financialSettingsDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (financialSettingsDto.CurrencyGainsAccountIdOption.IsSet)
                writer.WriteNumber("CurrencyGainsAccountId", financialSettingsDto.CurrencyGainsAccountIdOption.Value!.Value);

            if (financialSettingsDto.CurrencyGainsAccountNoOption.IsSet)
                writer.WriteNumber("CurrencyGainsAccountNo", financialSettingsDto.CurrencyGainsAccountNoOption.Value!.Value);

            if (financialSettingsDto.CurrencyLossAccountIdOption.IsSet)
                writer.WriteNumber("CurrencyLossAccountId", financialSettingsDto.CurrencyLossAccountIdOption.Value!.Value);

            if (financialSettingsDto.CurrencyLossAccountNoOption.IsSet)
                writer.WriteNumber("CurrencyLossAccountNo", financialSettingsDto.CurrencyLossAccountNoOption.Value!.Value);

            if (financialSettingsDto.FinancialYearEndMonthOption.IsSet)
                if (financialSettingsDto.FinancialYearEndMonthOption!.Value != null)
                {
                    var financialYearEndMonthRawValue = MonthsValueConverter.ToJsonValue(financialSettingsDto.FinancialYearEndMonthOption.Value!.Value);
                    writer.WriteString("FinancialYearEndMonth", financialYearEndMonthRawValue);
                }
                else
                    writer.WriteNull("FinancialYearEndMonth");
            if (financialSettingsDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", financialSettingsDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (financialSettingsDto.UseTrustAccountManagementOption.IsSet)
                if (financialSettingsDto.UseTrustAccountManagementOption.Value != null)
                    writer.WriteBoolean("UseTrustAccountManagement", financialSettingsDto.UseTrustAccountManagementOption.Value!.Value);
                else
                    writer.WriteNull("UseTrustAccountManagement");
        }
    }
}
