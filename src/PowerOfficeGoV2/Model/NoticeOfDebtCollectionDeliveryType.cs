// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Specifies how debt collection notice (norwegian: inkassovarsel) should be delivered to a customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - The notice of debt collection (PDF) will be delivered by email.                 Can only be used if the customer have an e-mail address registered (either eMailAddress or paymentReminderEmailAddress).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Print&lt;/i&gt; - The notice of debt collection (PDF) will be printed and delivered physically.                 \&quot;Sending\&quot; the notice in Go will generate a PDF for download and print.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Specifies how debt collection notice (norwegian: inkassovarsel) should be delivered to a customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - The notice of debt collection (PDF) will be delivered by email.                 Can only be used if the customer have an e-mail address registered (either eMailAddress or paymentReminderEmailAddress).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Print&lt;/i&gt; - The notice of debt collection (PDF) will be printed and delivered physically.                 \&quot;Sending\&quot; the notice in Go will generate a PDF for download and print.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum NoticeOfDebtCollectionDeliveryType
    {
        /// <summary>
        /// Enum PdfByEmail for value: PdfByEmail
        /// </summary>
        PdfByEmail = 1,

        /// <summary>
        /// Enum Print for value: Print
        /// </summary>
        Print = 2
    }

    /// <summary>
    /// Converts <see cref="NoticeOfDebtCollectionDeliveryType"/> to and from the JSON value
    /// </summary>
    public static class NoticeOfDebtCollectionDeliveryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="NoticeOfDebtCollectionDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NoticeOfDebtCollectionDeliveryType FromString(string value)
        {
            if (value.Equals("PdfByEmail"))
                return NoticeOfDebtCollectionDeliveryType.PdfByEmail;

            if (value.Equals("Print"))
                return NoticeOfDebtCollectionDeliveryType.Print;

            throw new NotImplementedException($"Could not convert value to type NoticeOfDebtCollectionDeliveryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="NoticeOfDebtCollectionDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NoticeOfDebtCollectionDeliveryType? FromStringOrDefault(string value)
        {
            if (value.Equals("PdfByEmail"))
                return NoticeOfDebtCollectionDeliveryType.PdfByEmail;

            if (value.Equals("Print"))
                return NoticeOfDebtCollectionDeliveryType.Print;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NoticeOfDebtCollectionDeliveryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(NoticeOfDebtCollectionDeliveryType value)
        {
            if (value == NoticeOfDebtCollectionDeliveryType.PdfByEmail)
                return "PdfByEmail";

            if (value == NoticeOfDebtCollectionDeliveryType.Print)
                return "Print";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NoticeOfDebtCollectionDeliveryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class NoticeOfDebtCollectionDeliveryTypeJsonConverter : JsonConverter<NoticeOfDebtCollectionDeliveryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NoticeOfDebtCollectionDeliveryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NoticeOfDebtCollectionDeliveryType? result = rawValue == null
                ? null
                : NoticeOfDebtCollectionDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NoticeOfDebtCollectionDeliveryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="noticeOfDebtCollectionDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NoticeOfDebtCollectionDeliveryType noticeOfDebtCollectionDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(noticeOfDebtCollectionDeliveryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NoticeOfDebtCollectionDeliveryType"/>
    /// </summary>
    public class NoticeOfDebtCollectionDeliveryTypeNullableJsonConverter : JsonConverter<NoticeOfDebtCollectionDeliveryType?>
    {
        /// <summary>
        /// Returns a NoticeOfDebtCollectionDeliveryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NoticeOfDebtCollectionDeliveryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NoticeOfDebtCollectionDeliveryType? result = rawValue == null
                ? null
                : NoticeOfDebtCollectionDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="noticeOfDebtCollectionDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NoticeOfDebtCollectionDeliveryType? noticeOfDebtCollectionDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(noticeOfDebtCollectionDeliveryType?.ToString() ?? "null");
        }
    }
}
