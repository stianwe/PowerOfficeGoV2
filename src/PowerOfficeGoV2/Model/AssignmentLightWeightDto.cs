// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The available properties for the Quality Assignment Light DTO
    /// </summary>
    public partial class AssignmentLightWeightDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssignmentLightWeightDto" /> class.
        /// </summary>
        /// <param name="managerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="agreementSignedDate">The date the assignment agreement was signed.</param>
        /// <param name="associateSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="currentAgreementDate">The current date of the quality assignment agreement.</param>
        /// <param name="customerContactPersonId">The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.</param>
        /// <param name="customerSubledgerAccountId">The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.</param>
        /// <param name="description">The description of the quality assignment.</param>
        /// <param name="endDate">The start date of the quality assignment. Date is inclusive.</param>
        /// <param name="id">The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.</param>
        /// <param name="keyAccountManagerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="payrollManagerSubledgerAccountId">The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</param>
        /// <param name="projectId">The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.</param>
        /// <param name="revisionDate">The date of the last revision of the assignment.</param>
        /// <param name="startDate">The start date of the quality assignment. Date is inclusive.</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public AssignmentLightWeightDto(long managerSubledgerAccountId, Option<DateTime?> agreementSignedDate = default, Option<long?> associateSubledgerAccountId = default, Option<DateTime?> currentAgreementDate = default, Option<long?> customerContactPersonId = default, Option<long?> customerSubledgerAccountId = default, Option<string?> description = default, Option<DateTime?> endDate = default, Option<long?> id = default, Option<long?> keyAccountManagerSubledgerAccountId = default, Option<long?> payrollManagerSubledgerAccountId = default, Option<long?> projectId = default, Option<DateTime?> revisionDate = default, Option<DateTime?> startDate = default, Option<AssignmentAgreementStatus?> status = default)
        {
            ManagerSubledgerAccountId = managerSubledgerAccountId;
            AgreementSignedDateOption = agreementSignedDate;
            AssociateSubledgerAccountIdOption = associateSubledgerAccountId;
            CurrentAgreementDateOption = currentAgreementDate;
            CustomerContactPersonIdOption = customerContactPersonId;
            CustomerSubledgerAccountIdOption = customerSubledgerAccountId;
            DescriptionOption = description;
            EndDateOption = endDate;
            IdOption = id;
            KeyAccountManagerSubledgerAccountIdOption = keyAccountManagerSubledgerAccountId;
            PayrollManagerSubledgerAccountIdOption = payrollManagerSubledgerAccountId;
            ProjectIdOption = projectId;
            RevisionDateOption = revisionDate;
            StartDateOption = startDate;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AssignmentAgreementStatus?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("Status")]
        public AssignmentAgreementStatus? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment manager for this quality assignment. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("ManagerSubledgerAccountId")]
        public long ManagerSubledgerAccountId { get; set; }

        /// <summary>
        /// Used to track the state of AgreementSignedDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AgreementSignedDateOption { get; }

        /// <summary>
        /// The date the assignment agreement was signed.
        /// </summary>
        /// <value>The date the assignment agreement was signed.</value>
        [JsonPropertyName("AgreementSignedDate")]
        public DateTime? AgreementSignedDate { get { return this.AgreementSignedDateOption; } }

        /// <summary>
        /// Used to track the state of AssociateSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AssociateSubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment associate for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("AssociateSubledgerAccountId")]
        public long? AssociateSubledgerAccountId { get { return this.AssociateSubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of CurrentAgreementDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CurrentAgreementDateOption { get; }

        /// <summary>
        /// The current date of the quality assignment agreement.
        /// </summary>
        /// <value>The current date of the quality assignment agreement.</value>
        [JsonPropertyName("CurrentAgreementDate")]
        public DateTime? CurrentAgreementDate { get { return this.CurrentAgreementDateOption; } }

        /// <summary>
        /// Used to track the state of CustomerContactPersonId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerContactPersonIdOption { get; }

        /// <summary>
        /// The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.
        /// </summary>
        /// <value>The id of the customer&#39;s contact person associated with the quality assignment. Contact persons can be queried and identified using the ContactPersons endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerContactPersonId")]
        public long? CustomerContactPersonId { get { return this.CustomerContactPersonIdOption; } }

        /// <summary>
        /// Used to track the state of CustomerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CustomerSubledgerAccountIdOption { get; }

        /// <summary>
        /// The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.
        /// </summary>
        /// <value>The id of the customer subledger account, identifying the customer associated with the quality assignment. Customers can be queried and identified using the Customers endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("CustomerSubledgerAccountId")]
        public long? CustomerSubledgerAccountId { get { return this.CustomerSubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; }

        /// <summary>
        /// The description of the quality assignment.
        /// </summary>
        /// <value>The description of the quality assignment.</value>
        /* <example>The very best accounting assignment</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndDateOption { get; }

        /// <summary>
        /// The start date of the quality assignment. Date is inclusive.
        /// </summary>
        /// <value>The start date of the quality assignment. Date is inclusive.</value>
        [JsonPropertyName("EndDate")]
        public DateTime? EndDate { get { return this.EndDateOption; } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.
        /// </summary>
        /// <value>The identifier of the quality assignment entity. The id is assigned by Go when the assignment entity is created.</value>
        /* <example>123456</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of KeyAccountManagerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> KeyAccountManagerSubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the key account manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("KeyAccountManagerSubledgerAccountId")]
        public long? KeyAccountManagerSubledgerAccountId { get { return this.KeyAccountManagerSubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of PayrollManagerSubledgerAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PayrollManagerSubledgerAccountIdOption { get; }

        /// <summary>
        /// The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint
        /// </summary>
        /// <value>The identifier of the employee subledger account, identifying the employee set as the assignment payroll manager for this quality assignment. If null, this property inherit from the assignment manager property. Employees can be queried and identified using the Employees endpoint</value>
        /* <example>123456</example> */
        [JsonPropertyName("PayrollManagerSubledgerAccountId")]
        public long? PayrollManagerSubledgerAccountId { get { return this.PayrollManagerSubledgerAccountIdOption; } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; }

        /// <summary>
        /// The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.
        /// </summary>
        /// <value>The id of the project associated with the quality assignment. Projects can be queried and identified using the Project endpoint.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } }

        /// <summary>
        /// Used to track the state of RevisionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> RevisionDateOption { get; }

        /// <summary>
        /// The date of the last revision of the assignment.
        /// </summary>
        /// <value>The date of the last revision of the assignment.</value>
        [JsonPropertyName("RevisionDate")]
        public DateTime? RevisionDate { get { return this.RevisionDateOption; } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartDateOption { get; }

        /// <summary>
        /// The start date of the quality assignment. Date is inclusive.
        /// </summary>
        /// <value>The start date of the quality assignment. Date is inclusive.</value>
        [JsonPropertyName("StartDate")]
        public DateTime? StartDate { get { return this.StartDateOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssignmentLightWeightDto {\n");
            sb.Append("  ManagerSubledgerAccountId: ").Append(ManagerSubledgerAccountId).Append("\n");
            sb.Append("  AgreementSignedDate: ").Append(AgreementSignedDate).Append("\n");
            sb.Append("  AssociateSubledgerAccountId: ").Append(AssociateSubledgerAccountId).Append("\n");
            sb.Append("  CurrentAgreementDate: ").Append(CurrentAgreementDate).Append("\n");
            sb.Append("  CustomerContactPersonId: ").Append(CustomerContactPersonId).Append("\n");
            sb.Append("  CustomerSubledgerAccountId: ").Append(CustomerSubledgerAccountId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeyAccountManagerSubledgerAccountId: ").Append(KeyAccountManagerSubledgerAccountId).Append("\n");
            sb.Append("  PayrollManagerSubledgerAccountId: ").Append(PayrollManagerSubledgerAccountId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  RevisionDate: ").Append(RevisionDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AssignmentLightWeightDto" />
    /// </summary>
    public class AssignmentLightWeightDtoJsonConverter : JsonConverter<AssignmentLightWeightDto>
    {
        /// <summary>
        /// The format to use to serialize AgreementSignedDate
        /// </summary>
        public static string AgreementSignedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CurrentAgreementDate
        /// </summary>
        public static string CurrentAgreementDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RevisionDate
        /// </summary>
        public static string RevisionDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDate
        /// </summary>
        public static string StartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AssignmentLightWeightDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AssignmentLightWeightDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> managerSubledgerAccountId = default;
            Option<DateTime?> agreementSignedDate = default;
            Option<long?> associateSubledgerAccountId = default;
            Option<DateTime?> currentAgreementDate = default;
            Option<long?> customerContactPersonId = default;
            Option<long?> customerSubledgerAccountId = default;
            Option<string?> description = default;
            Option<DateTime?> endDate = default;
            Option<long?> id = default;
            Option<long?> keyAccountManagerSubledgerAccountId = default;
            Option<long?> payrollManagerSubledgerAccountId = default;
            Option<long?> projectId = default;
            Option<DateTime?> revisionDate = default;
            Option<DateTime?> startDate = default;
            Option<AssignmentAgreementStatus?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                managerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AgreementSignedDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                agreementSignedDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "AssociateSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                associateSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CurrentAgreementDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentAgreementDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CustomerContactPersonId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerContactPersonId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CustomerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                customerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "KeyAccountManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                keyAccountManagerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PayrollManagerSubledgerAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payrollManagerSubledgerAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "RevisionDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                revisionDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "StartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "Status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<AssignmentAgreementStatus?>(AssignmentAgreementStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!managerSubledgerAccountId.IsSet)
                throw new ArgumentException("Property is required for class AssignmentLightWeightDto.", nameof(managerSubledgerAccountId));

            if (managerSubledgerAccountId.IsSet && managerSubledgerAccountId.Value == null)
                throw new ArgumentNullException(nameof(managerSubledgerAccountId), "Property is not nullable for class AssignmentLightWeightDto.");

            return new AssignmentLightWeightDto(managerSubledgerAccountId.Value!.Value!, agreementSignedDate, associateSubledgerAccountId, currentAgreementDate, customerContactPersonId, customerSubledgerAccountId, description, endDate, id, keyAccountManagerSubledgerAccountId, payrollManagerSubledgerAccountId, projectId, revisionDate, startDate, status);
        }

        /// <summary>
        /// Serializes a <see cref="AssignmentLightWeightDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentLightWeightDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AssignmentLightWeightDto assignmentLightWeightDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, assignmentLightWeightDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AssignmentLightWeightDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="assignmentLightWeightDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AssignmentLightWeightDto assignmentLightWeightDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("ManagerSubledgerAccountId", assignmentLightWeightDto.ManagerSubledgerAccountId);

            if (assignmentLightWeightDto.AgreementSignedDateOption.IsSet)
                if (assignmentLightWeightDto.AgreementSignedDateOption.Value != null)
                    writer.WriteString("AgreementSignedDate", assignmentLightWeightDto.AgreementSignedDateOption.Value!.Value.ToString(AgreementSignedDateFormat));
                else
                    writer.WriteNull("AgreementSignedDate");

            if (assignmentLightWeightDto.AssociateSubledgerAccountIdOption.IsSet)
                if (assignmentLightWeightDto.AssociateSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("AssociateSubledgerAccountId", assignmentLightWeightDto.AssociateSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AssociateSubledgerAccountId");

            if (assignmentLightWeightDto.CurrentAgreementDateOption.IsSet)
                if (assignmentLightWeightDto.CurrentAgreementDateOption.Value != null)
                    writer.WriteString("CurrentAgreementDate", assignmentLightWeightDto.CurrentAgreementDateOption.Value!.Value.ToString(CurrentAgreementDateFormat));
                else
                    writer.WriteNull("CurrentAgreementDate");

            if (assignmentLightWeightDto.CustomerContactPersonIdOption.IsSet)
                if (assignmentLightWeightDto.CustomerContactPersonIdOption.Value != null)
                    writer.WriteNumber("CustomerContactPersonId", assignmentLightWeightDto.CustomerContactPersonIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerContactPersonId");

            if (assignmentLightWeightDto.CustomerSubledgerAccountIdOption.IsSet)
                if (assignmentLightWeightDto.CustomerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("CustomerSubledgerAccountId", assignmentLightWeightDto.CustomerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("CustomerSubledgerAccountId");

            if (assignmentLightWeightDto.DescriptionOption.IsSet)
                if (assignmentLightWeightDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", assignmentLightWeightDto.Description);
                else
                    writer.WriteNull("Description");

            if (assignmentLightWeightDto.EndDateOption.IsSet)
                if (assignmentLightWeightDto.EndDateOption.Value != null)
                    writer.WriteString("EndDate", assignmentLightWeightDto.EndDateOption.Value!.Value.ToString(EndDateFormat));
                else
                    writer.WriteNull("EndDate");

            if (assignmentLightWeightDto.IdOption.IsSet)
                if (assignmentLightWeightDto.IdOption.Value != null)
                    writer.WriteNumber("Id", assignmentLightWeightDto.IdOption.Value!.Value);
                else
                    writer.WriteNull("Id");

            if (assignmentLightWeightDto.KeyAccountManagerSubledgerAccountIdOption.IsSet)
                if (assignmentLightWeightDto.KeyAccountManagerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("KeyAccountManagerSubledgerAccountId", assignmentLightWeightDto.KeyAccountManagerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("KeyAccountManagerSubledgerAccountId");

            if (assignmentLightWeightDto.PayrollManagerSubledgerAccountIdOption.IsSet)
                if (assignmentLightWeightDto.PayrollManagerSubledgerAccountIdOption.Value != null)
                    writer.WriteNumber("PayrollManagerSubledgerAccountId", assignmentLightWeightDto.PayrollManagerSubledgerAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("PayrollManagerSubledgerAccountId");

            if (assignmentLightWeightDto.ProjectIdOption.IsSet)
                if (assignmentLightWeightDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", assignmentLightWeightDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (assignmentLightWeightDto.RevisionDateOption.IsSet)
                if (assignmentLightWeightDto.RevisionDateOption.Value != null)
                    writer.WriteString("RevisionDate", assignmentLightWeightDto.RevisionDateOption.Value!.Value.ToString(RevisionDateFormat));
                else
                    writer.WriteNull("RevisionDate");

            if (assignmentLightWeightDto.StartDateOption.IsSet)
                if (assignmentLightWeightDto.StartDateOption.Value != null)
                    writer.WriteString("StartDate", assignmentLightWeightDto.StartDateOption.Value!.Value.ToString(StartDateFormat));
                else
                    writer.WriteNull("StartDate");

            if (assignmentLightWeightDto.StatusOption.IsSet)
                if (assignmentLightWeightDto.StatusOption!.Value != null)
                {
                    var statusRawValue = AssignmentAgreementStatusValueConverter.ToJsonValue(assignmentLightWeightDto.StatusOption.Value!.Value);
                    writer.WriteString("Status", statusRawValue);
                }
                else
                    writer.WriteNull("Status");
        }
    }
}
