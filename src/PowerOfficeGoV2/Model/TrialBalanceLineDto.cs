// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// TrialBalanceLine representing the balance on a General Ledger Account/&gt; (Norwegian: Saldobalanse).
    /// </summary>
    public partial class TrialBalanceLineDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrialBalanceLineDto" /> class.
        /// </summary>
        /// <param name="accountId">The general ledger account id. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</param>
        /// <param name="accountName">The name of the general ledger account. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</param>
        /// <param name="accountNo">The general ledger account number. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</param>
        /// <param name="agricultureDepartment">agricultureDepartment</param>
        /// <param name="balance">The balance amount for the Date provided. The balance includes transactions on that date. This amount is in the clients local currency.</param>
        [JsonConstructor]
        public TrialBalanceLineDto(Option<long?> accountId = default, Option<string?> accountName = default, Option<long?> accountNo = default, Option<AgricultureDepartment?> agricultureDepartment = default, Option<double?> balance = default)
        {
            AccountIdOption = accountId;
            AccountNameOption = accountName;
            AccountNoOption = accountNo;
            AgricultureDepartmentOption = agricultureDepartment;
            BalanceOption = balance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> AgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets AgricultureDepartment
        /// </summary>
        [JsonPropertyName("AgricultureDepartment")]
        public AgricultureDepartment? AgricultureDepartment { get { return this.AgricultureDepartmentOption; } set { this.AgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; }

        /// <summary>
        /// The general ledger account id. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.
        /// </summary>
        /// <value>The general ledger account id. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</value>
        /* <example>123456</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } }

        /// <summary>
        /// Used to track the state of AccountName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AccountNameOption { get; }

        /// <summary>
        /// The name of the general ledger account. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.
        /// </summary>
        /// <value>The name of the general ledger account. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</value>
        /* <example>Bankinnskudd</example> */
        [JsonPropertyName("AccountName")]
        public string? AccountName { get { return this.AccountNameOption; } }

        /// <summary>
        /// Used to track the state of AccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountNoOption { get; }

        /// <summary>
        /// The general ledger account number. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.
        /// </summary>
        /// <value>The general ledger account number. The chart of accounts used on the client can be queried using the service GeneralLedgerAccount.</value>
        /* <example>1920</example> */
        [JsonPropertyName("AccountNo")]
        public long? AccountNo { get { return this.AccountNoOption; } }

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The balance amount for the Date provided. The balance includes transactions on that date. This amount is in the clients local currency.
        /// </summary>
        /// <value>The balance amount for the Date provided. The balance includes transactions on that date. This amount is in the clients local currency.</value>
        /* <example>502.25</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrialBalanceLineDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNo: ").Append(AccountNo).Append("\n");
            sb.Append("  AgricultureDepartment: ").Append(AgricultureDepartment).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrialBalanceLineDto" />
    /// </summary>
    public class TrialBalanceLineDtoJsonConverter : JsonConverter<TrialBalanceLineDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrialBalanceLineDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrialBalanceLineDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<string?> accountName = default;
            Option<long?> accountNo = default;
            Option<AgricultureDepartment?> agricultureDepartment = default;
            Option<double?> balance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AccountName":
                            accountName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "AccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "AgricultureDepartment":
                            string? agricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (agricultureDepartmentRawValue != null)
                                agricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(agricultureDepartmentRawValue));
                            break;
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class TrialBalanceLineDto.");

            if (accountNo.IsSet && accountNo.Value == null)
                throw new ArgumentNullException(nameof(accountNo), "Property is not nullable for class TrialBalanceLineDto.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class TrialBalanceLineDto.");

            return new TrialBalanceLineDto(accountId, accountName, accountNo, agricultureDepartment, balance);
        }

        /// <summary>
        /// Serializes a <see cref="TrialBalanceLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trialBalanceLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrialBalanceLineDto trialBalanceLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trialBalanceLineDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrialBalanceLineDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trialBalanceLineDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrialBalanceLineDto trialBalanceLineDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trialBalanceLineDto.AccountIdOption.IsSet)
                writer.WriteNumber("AccountId", trialBalanceLineDto.AccountIdOption.Value!.Value);

            if (trialBalanceLineDto.AccountNameOption.IsSet)
                if (trialBalanceLineDto.AccountNameOption.Value != null)
                    writer.WriteString("AccountName", trialBalanceLineDto.AccountName);
                else
                    writer.WriteNull("AccountName");

            if (trialBalanceLineDto.AccountNoOption.IsSet)
                writer.WriteNumber("AccountNo", trialBalanceLineDto.AccountNoOption.Value!.Value);

            if (trialBalanceLineDto.AgricultureDepartmentOption.IsSet)
                if (trialBalanceLineDto.AgricultureDepartmentOption!.Value != null)
                {
                    var agricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(trialBalanceLineDto.AgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("AgricultureDepartment", agricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("AgricultureDepartment");
            if (trialBalanceLineDto.BalanceOption.IsSet)
                writer.WriteNumber("Balance", trialBalanceLineDto.BalanceOption.Value!.Value);
        }
    }
}
