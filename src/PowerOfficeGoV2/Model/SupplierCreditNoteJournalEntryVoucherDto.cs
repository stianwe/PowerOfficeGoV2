// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Supplier credit note DTO
    /// </summary>
    public partial class SupplierCreditNoteJournalEntryVoucherDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierCreditNoteJournalEntryVoucherDto" /> class.
        /// </summary>
        /// <param name="appliesInvoiceId">Identifier of the supplier invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.</param>
        /// <param name="appliesInvoiceNo">Reference to the invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.</param>
        /// <param name="approvalState">approvalState</param>
        /// <param name="cid">The cid number (norwegian: KID), if applicable to the voucher.</param>
        /// <param name="clientBankAccountId">The identifier of the client bank account used for payment/remittance.  Relevant if payout is true. If not set, the default client bank account will be used for any remittance.</param>
        /// <param name="createdDateTimeOffset">The timestamp of when the voucher object was created.</param>
        /// <param name="creditNoteNo">The credit note number of the supplier credit note.</param>
        /// <param name="currencyAmount">The total amount of the supplier voucher, in the currency specified by the currency code of the voucher.</param>
        /// <param name="currencyCode">The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</param>
        /// <param name="currencyExchangeRate">The normalized currency exchange rate.  Always base 1.  Relevant to set if the voucher have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the voucher date set.  The rates in Go are retrieved from ECB via API.</param>
        /// <param name="currencyRegistryCode">currencyRegistryCode</param>
        /// <param name="currencyRegistryText">The currency registry text of the supplier invoice.</param>
        /// <param name="departmentId">The department Id of the voucher header.  The lines will inherit the department from the voucher head if not specified on the lines.  Departments can be queried and identified using the Department service.</param>
        /// <param name="description">The description field of the voucher header.</param>
        /// <param name="dim1Id">The id of the dimension 1 associated with the voucher header.  The lines will inherit the dim1 from the voucher head if not specified on the lines.</param>
        /// <param name="dim2Id">The id of the dimension 2 associated with the voucher header.  The lines will inherit the dim2 from the voucher head if not specified on the lines.</param>
        /// <param name="dim3Id">The id of the dimension 3 associated with the voucher header.  The lines will inherit the dim3 from the voucher head if not specified on the lines.</param>
        /// <param name="id">A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</param>
        /// <param name="lastChangedDateTimeOffset">The timestamp of when the voucher object was last changed.</param>
        /// <param name="locationId">The id of the location dimension associated with the voucher header.  The lines will inherit the location from the voucher head if not specified on the lines.</param>
        /// <param name="originatedFromEhf">Property indicating whether the journal entry voucher was received by EHF. If true, the journal entry voucher have an EHF XML file.</param>
        /// <param name="pages">A collection of voucher pages associated with this voucher.</param>
        /// <param name="paymentDate">The suggested payment date if this voucher is to be subject of remittance.  Relevant if payout is set true.  If not set in POST or PATCH operations, the field will default to the due date of supplier invoices and the voucher date of supplier credit notes.  To remove any value from PaymentDate in PATCH, both PaymentDate and DueDate must be removed.</param>
        /// <param name="paymentOnHold">Property indicating whether the voucher remittance should be on hold.  Default false, and if true a remittance draft will be created when the voucher is posted, but with no payment date suggested - rather the state &#39;on hold&#39;.</param>
        /// <param name="payout">Property indicating whether the voucher should be paid using remittance.  Default true, and if true a remittance draft will be created when the voucher is posted.</param>
        /// <param name="projectId">The id of the project associated with the voucher header.  The lines will inherit the project from the voucher head if not specified on the lines.</param>
        /// <param name="supplierAccountId">The id of the supplier subledger account.</param>
        /// <param name="supplierBankAccountId">The identifier of the supplier bank account associated with the voucher.</param>
        /// <param name="supplierContactId">The contact ID of the supplier.</param>
        /// <param name="supplierVoucherLines">The lines of the supplier credit note.</param>
        /// <param name="voucherDate">The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.</param>
        /// <param name="voucherState">voucherState</param>
        [JsonConstructor]
        public SupplierCreditNoteJournalEntryVoucherDto(Option<Guid?> appliesInvoiceId = default, Option<string?> appliesInvoiceNo = default, Option<ApprovalState?> approvalState = default, Option<string?> cid = default, Option<long?> clientBankAccountId = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<string?> creditNoteNo = default, Option<double?> currencyAmount = default, Option<string?> currencyCode = default, Option<double?> currencyExchangeRate = default, Option<CurrencyRegistryCode?> currencyRegistryCode = default, Option<string?> currencyRegistryText = default, Option<long?> departmentId = default, Option<string?> description = default, Option<long?> dim1Id = default, Option<long?> dim2Id = default, Option<long?> dim3Id = default, Option<Guid?> id = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<long?> locationId = default, Option<bool?> originatedFromEhf = default, Option<List<VoucherPage>?> pages = default, Option<DateTimeOffset?> paymentDate = default, Option<bool?> paymentOnHold = default, Option<bool?> payout = default, Option<long?> projectId = default, Option<long?> supplierAccountId = default, Option<long?> supplierBankAccountId = default, Option<long?> supplierContactId = default, Option<List<SupplierVoucherLineDto>?> supplierVoucherLines = default, Option<DateTimeOffset?> voucherDate = default, Option<VoucherState?> voucherState = default)
        {
            AppliesInvoiceIdOption = appliesInvoiceId;
            AppliesInvoiceNoOption = appliesInvoiceNo;
            ApprovalStateOption = approvalState;
            CidOption = cid;
            ClientBankAccountIdOption = clientBankAccountId;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            CreditNoteNoOption = creditNoteNo;
            CurrencyAmountOption = currencyAmount;
            CurrencyCodeOption = currencyCode;
            CurrencyExchangeRateOption = currencyExchangeRate;
            CurrencyRegistryCodeOption = currencyRegistryCode;
            CurrencyRegistryTextOption = currencyRegistryText;
            DepartmentIdOption = departmentId;
            DescriptionOption = description;
            Dim1IdOption = dim1Id;
            Dim2IdOption = dim2Id;
            Dim3IdOption = dim3Id;
            IdOption = id;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            LocationIdOption = locationId;
            OriginatedFromEhfOption = originatedFromEhf;
            PagesOption = pages;
            PaymentDateOption = paymentDate;
            PaymentOnHoldOption = paymentOnHold;
            PayoutOption = payout;
            ProjectIdOption = projectId;
            SupplierAccountIdOption = supplierAccountId;
            SupplierBankAccountIdOption = supplierBankAccountId;
            SupplierContactIdOption = supplierContactId;
            SupplierVoucherLinesOption = supplierVoucherLines;
            VoucherDateOption = voucherDate;
            VoucherStateOption = voucherState;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ApprovalState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApprovalState?> ApprovalStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApprovalState
        /// </summary>
        [JsonPropertyName("ApprovalState")]
        public ApprovalState? ApprovalState { get { return this.ApprovalStateOption; } set { this.ApprovalStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyRegistryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CurrencyRegistryCode?> CurrencyRegistryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyRegistryCode
        /// </summary>
        [JsonPropertyName("CurrencyRegistryCode")]
        public CurrencyRegistryCode? CurrencyRegistryCode { get { return this.CurrencyRegistryCodeOption; } set { this.CurrencyRegistryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherState?> VoucherStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherState
        /// </summary>
        [JsonPropertyName("VoucherState")]
        public VoucherState? VoucherState { get { return this.VoucherStateOption; } set { this.VoucherStateOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppliesInvoiceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> AppliesInvoiceIdOption { get; private set; }

        /// <summary>
        /// Identifier of the supplier invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.
        /// </summary>
        /// <value>Identifier of the supplier invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.</value>
        /* <example>032fbead-2c9b-4521-9ff8-158a0baefdd8</example> */
        [JsonPropertyName("AppliesInvoiceId")]
        public Guid? AppliesInvoiceId { get { return this.AppliesInvoiceIdOption; } set { this.AppliesInvoiceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AppliesInvoiceNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AppliesInvoiceNoOption { get; private set; }

        /// <summary>
        /// Reference to the invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.
        /// </summary>
        /// <value>Reference to the invoice being credited by the credit note.  The supplierAccountId must be the same as the supplierAccountId of the invoice that is being credited.</value>
        /* <example>SI-1234</example> */
        [JsonPropertyName("AppliesInvoiceNo")]
        public string? AppliesInvoiceNo { get { return this.AppliesInvoiceNoOption; } set { this.AppliesInvoiceNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; private set; }

        /// <summary>
        /// The cid number (norwegian: KID), if applicable to the voucher.
        /// </summary>
        /// <value>The cid number (norwegian: KID), if applicable to the voucher.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } set { this.CidOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ClientBankAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the client bank account used for payment/remittance.  Relevant if payout is true. If not set, the default client bank account will be used for any remittance.
        /// </summary>
        /// <value>The identifier of the client bank account used for payment/remittance.  Relevant if payout is true. If not set, the default client bank account will be used for any remittance.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ClientBankAccountId")]
        public long? ClientBankAccountId { get { return this.ClientBankAccountIdOption; } set { this.ClientBankAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the voucher object was created.
        /// </summary>
        /// <value>The timestamp of when the voucher object was created.</value>
        /* <example>2024-03-20T13:57:00.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of CreditNoteNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CreditNoteNoOption { get; private set; }

        /// <summary>
        /// The credit note number of the supplier credit note.
        /// </summary>
        /// <value>The credit note number of the supplier credit note.</value>
        /* <example>CN-1234</example> */
        [JsonPropertyName("CreditNoteNo")]
        public string? CreditNoteNo { get { return this.CreditNoteNoOption; } set { this.CreditNoteNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyAmountOption { get; private set; }

        /// <summary>
        /// The total amount of the supplier voucher, in the currency specified by the currency code of the voucher.
        /// </summary>
        /// <value>The total amount of the supplier voucher, in the currency specified by the currency code of the voucher.</value>
        /* <example>69420</example> */
        [JsonPropertyName("CurrencyAmount")]
        public double? CurrencyAmount { get { return this.CurrencyAmountOption; } set { this.CurrencyAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyCodeOption { get; private set; }

        /// <summary>
        /// The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.
        /// </summary>
        /// <value>The currency code of the voucher header.  The line amounts will default be determined in the currency specified in the header.  For some voucher types, different currency codes can be set on the line level, thus overriding the currency of the head.  Currencies active on the client can be queried using the AccountingSettings service. Currency codes follow the ISO4217 standard.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyCode")]
        public string? CurrencyCode { get { return this.CurrencyCodeOption; } set { this.CurrencyCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyExchangeRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CurrencyExchangeRateOption { get; private set; }

        /// <summary>
        /// The normalized currency exchange rate.  Always base 1.  Relevant to set if the voucher have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the voucher date set.  The rates in Go are retrieved from ECB via API.
        /// </summary>
        /// <value>The normalized currency exchange rate.  Always base 1.  Relevant to set if the voucher have a foreign currency with a specific currency exchange rate.  If not set, the field will inherit the rate in Go for the voucher date set.  The rates in Go are retrieved from ECB via API.</value>
        /* <example>10.78</example> */
        [JsonPropertyName("CurrencyExchangeRate")]
        public double? CurrencyExchangeRate { get { return this.CurrencyExchangeRateOption; } set { this.CurrencyExchangeRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrencyRegistryText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrencyRegistryTextOption { get; private set; }

        /// <summary>
        /// The currency registry text of the supplier invoice.
        /// </summary>
        /// <value>The currency registry text of the supplier invoice.</value>
        /* <example>EUR</example> */
        [JsonPropertyName("CurrencyRegistryText")]
        public string? CurrencyRegistryText { get { return this.CurrencyRegistryTextOption; } set { this.CurrencyRegistryTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department Id of the voucher header.  The lines will inherit the department from the voucher head if not specified on the lines.  Departments can be queried and identified using the Department service.
        /// </summary>
        /// <value>The department Id of the voucher header.  The lines will inherit the department from the voucher head if not specified on the lines.  Departments can be queried and identified using the Department service.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description field of the voucher header.
        /// </summary>
        /// <value>The description field of the voucher header.</value>
        /* <example>My first voucher description</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim1Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim1IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 1 associated with the voucher header.  The lines will inherit the dim1 from the voucher head if not specified on the lines.
        /// </summary>
        /// <value>The id of the dimension 1 associated with the voucher header.  The lines will inherit the dim1 from the voucher head if not specified on the lines.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim1Id")]
        public long? Dim1Id { get { return this.Dim1IdOption; } set { this.Dim1IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim2Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim2IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 2 associated with the voucher header.  The lines will inherit the dim2 from the voucher head if not specified on the lines.
        /// </summary>
        /// <value>The id of the dimension 2 associated with the voucher header.  The lines will inherit the dim2 from the voucher head if not specified on the lines.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim2Id")]
        public long? Dim2Id { get { return this.Dim2IdOption; } set { this.Dim2IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dim3Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> Dim3IdOption { get; private set; }

        /// <summary>
        /// The id of the dimension 3 associated with the voucher header.  The lines will inherit the dim3 from the voucher head if not specified on the lines.
        /// </summary>
        /// <value>The id of the dimension 3 associated with the voucher header.  The lines will inherit the dim3 from the voucher head if not specified on the lines.</value>
        /* <example>12345</example> */
        [JsonPropertyName("Dim3Id")]
        public long? Dim3Id { get { return this.Dim3IdOption; } set { this.Dim3IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> IdOption { get; }

        /// <summary>
        /// A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.
        /// </summary>
        /// <value>A value that uniquely identifies this voucher.  The Id is assigned by Go when the entry is created, and will persist when/if the voucher is posted.</value>
        /* <example>38ecfc1a-bf51-448f-99a8-a61bc5771109</example> */
        [JsonPropertyName("Id")]
        public Guid? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when the voucher object was last changed.
        /// </summary>
        /// <value>The timestamp of when the voucher object was last changed.</value>
        /* <example>2024-03-20T14:08:00.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of LocationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LocationIdOption { get; private set; }

        /// <summary>
        /// The id of the location dimension associated with the voucher header.  The lines will inherit the location from the voucher head if not specified on the lines.
        /// </summary>
        /// <value>The id of the location dimension associated with the voucher header.  The lines will inherit the location from the voucher head if not specified on the lines.</value>
        /* <example>12345</example> */
        [JsonPropertyName("LocationId")]
        public long? LocationId { get { return this.LocationIdOption; } set { this.LocationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginatedFromEhf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OriginatedFromEhfOption { get; }

        /// <summary>
        /// Property indicating whether the journal entry voucher was received by EHF. If true, the journal entry voucher have an EHF XML file.
        /// </summary>
        /// <value>Property indicating whether the journal entry voucher was received by EHF. If true, the journal entry voucher have an EHF XML file.</value>
        /* <example>true</example> */
        [JsonPropertyName("OriginatedFromEhf")]
        public bool? OriginatedFromEhf { get { return this.OriginatedFromEhfOption; } }

        /// <summary>
        /// Used to track the state of Pages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VoucherPage>?> PagesOption { get; }

        /// <summary>
        /// A collection of voucher pages associated with this voucher.
        /// </summary>
        /// <value>A collection of voucher pages associated with this voucher.</value>
        [JsonPropertyName("Pages")]
        public List<VoucherPage>? Pages { get { return this.PagesOption; } }

        /// <summary>
        /// Used to track the state of PaymentDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> PaymentDateOption { get; private set; }

        /// <summary>
        /// The suggested payment date if this voucher is to be subject of remittance.  Relevant if payout is set true.  If not set in POST or PATCH operations, the field will default to the due date of supplier invoices and the voucher date of supplier credit notes.  To remove any value from PaymentDate in PATCH, both PaymentDate and DueDate must be removed.
        /// </summary>
        /// <value>The suggested payment date if this voucher is to be subject of remittance.  Relevant if payout is set true.  If not set in POST or PATCH operations, the field will default to the due date of supplier invoices and the voucher date of supplier credit notes.  To remove any value from PaymentDate in PATCH, both PaymentDate and DueDate must be removed.</value>
        /* <example>Sun Mar 31 01:00:00 CET 2024</example> */
        [JsonPropertyName("PaymentDate")]
        public DateTimeOffset? PaymentDate { get { return this.PaymentDateOption; } set { this.PaymentDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of PaymentOnHold
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PaymentOnHoldOption { get; private set; }

        /// <summary>
        /// Property indicating whether the voucher remittance should be on hold.  Default false, and if true a remittance draft will be created when the voucher is posted, but with no payment date suggested - rather the state &#39;on hold&#39;.
        /// </summary>
        /// <value>Property indicating whether the voucher remittance should be on hold.  Default false, and if true a remittance draft will be created when the voucher is posted, but with no payment date suggested - rather the state &#39;on hold&#39;.</value>
        /* <example>false</example> */
        [JsonPropertyName("PaymentOnHold")]
        public bool? PaymentOnHold { get { return this.PaymentOnHoldOption; } set { this.PaymentOnHoldOption = new(value); } }

        /// <summary>
        /// Used to track the state of Payout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PayoutOption { get; private set; }

        /// <summary>
        /// Property indicating whether the voucher should be paid using remittance.  Default true, and if true a remittance draft will be created when the voucher is posted.
        /// </summary>
        /// <value>Property indicating whether the voucher should be paid using remittance.  Default true, and if true a remittance draft will be created when the voucher is posted.</value>
        /* <example>false</example> */
        [JsonPropertyName("Payout")]
        public bool? Payout { get { return this.PayoutOption; } set { this.PayoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The id of the project associated with the voucher header.  The lines will inherit the project from the voucher head if not specified on the lines.
        /// </summary>
        /// <value>The id of the project associated with the voucher header.  The lines will inherit the project from the voucher head if not specified on the lines.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplierAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the supplier subledger account.
        /// </summary>
        /// <value>The id of the supplier subledger account.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SupplierAccountId")]
        public long? SupplierAccountId { get { return this.SupplierAccountIdOption; } set { this.SupplierAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplierBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierBankAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the supplier bank account associated with the voucher.
        /// </summary>
        /// <value>The identifier of the supplier bank account associated with the voucher.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SupplierBankAccountId")]
        public long? SupplierBankAccountId { get { return this.SupplierBankAccountIdOption; } set { this.SupplierBankAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplierContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierContactIdOption { get; }

        /// <summary>
        /// The contact ID of the supplier.
        /// </summary>
        /// <value>The contact ID of the supplier.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SupplierContactId")]
        public long? SupplierContactId { get { return this.SupplierContactIdOption; } }

        /// <summary>
        /// Used to track the state of SupplierVoucherLines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SupplierVoucherLineDto>?> SupplierVoucherLinesOption { get; private set; }

        /// <summary>
        /// The lines of the supplier credit note.
        /// </summary>
        /// <value>The lines of the supplier credit note.</value>
        [JsonPropertyName("SupplierVoucherLines")]
        public List<SupplierVoucherLineDto>? SupplierVoucherLines { get { return this.SupplierVoucherLinesOption; } set { this.SupplierVoucherLinesOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> VoucherDateOption { get; private set; }

        /// <summary>
        /// The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.
        /// </summary>
        /// <value>The voucher date.  This represents the date of the voucher, the document date of an invoice for instance,  and may differ from the transaction dates for lines the voucher, depending on the type of voucher.</value>
        /* <example>Wed Mar 20 01:00:00 CET 2024</example> */
        [JsonPropertyName("VoucherDate")]
        public DateTimeOffset? VoucherDate { get { return this.VoucherDateOption; } set { this.VoucherDateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierCreditNoteJournalEntryVoucherDto {\n");
            sb.Append("  AppliesInvoiceId: ").Append(AppliesInvoiceId).Append("\n");
            sb.Append("  AppliesInvoiceNo: ").Append(AppliesInvoiceNo).Append("\n");
            sb.Append("  ApprovalState: ").Append(ApprovalState).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  ClientBankAccountId: ").Append(ClientBankAccountId).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  CreditNoteNo: ").Append(CreditNoteNo).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyExchangeRate: ").Append(CurrencyExchangeRate).Append("\n");
            sb.Append("  CurrencyRegistryCode: ").Append(CurrencyRegistryCode).Append("\n");
            sb.Append("  CurrencyRegistryText: ").Append(CurrencyRegistryText).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Dim1Id: ").Append(Dim1Id).Append("\n");
            sb.Append("  Dim2Id: ").Append(Dim2Id).Append("\n");
            sb.Append("  Dim3Id: ").Append(Dim3Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  OriginatedFromEhf: ").Append(OriginatedFromEhf).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentOnHold: ").Append(PaymentOnHold).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SupplierAccountId: ").Append(SupplierAccountId).Append("\n");
            sb.Append("  SupplierBankAccountId: ").Append(SupplierBankAccountId).Append("\n");
            sb.Append("  SupplierContactId: ").Append(SupplierContactId).Append("\n");
            sb.Append("  SupplierVoucherLines: ").Append(SupplierVoucherLines).Append("\n");
            sb.Append("  VoucherDate: ").Append(VoucherDate).Append("\n");
            sb.Append("  VoucherState: ").Append(VoucherState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreditNoteNo (string) maxLength
            if (this.CreditNoteNo != null && this.CreditNoteNo.Length > 40)
            {
                yield return new ValidationResult("Invalid value for CreditNoteNo, length must be less than 40.", new [] { "CreditNoteNo" });
            }

            // CurrencyCode (string) maxLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be less than 3.", new [] { "CurrencyCode" });
            }

            // CurrencyCode (string) minLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length < 0)
            {
                yield return new ValidationResult("Invalid value for CurrencyCode, length must be greater than 0.", new [] { "CurrencyCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SupplierCreditNoteJournalEntryVoucherDto" />
    /// </summary>
    public class SupplierCreditNoteJournalEntryVoucherDtoJsonConverter : JsonConverter<SupplierCreditNoteJournalEntryVoucherDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize PaymentDate
        /// </summary>
        public static string PaymentDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize VoucherDate
        /// </summary>
        public static string VoucherDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="SupplierCreditNoteJournalEntryVoucherDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SupplierCreditNoteJournalEntryVoucherDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> appliesInvoiceId = default;
            Option<string?> appliesInvoiceNo = default;
            Option<ApprovalState?> approvalState = default;
            Option<string?> cid = default;
            Option<long?> clientBankAccountId = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<string?> creditNoteNo = default;
            Option<double?> currencyAmount = default;
            Option<string?> currencyCode = default;
            Option<double?> currencyExchangeRate = default;
            Option<CurrencyRegistryCode?> currencyRegistryCode = default;
            Option<string?> currencyRegistryText = default;
            Option<long?> departmentId = default;
            Option<string?> description = default;
            Option<long?> dim1Id = default;
            Option<long?> dim2Id = default;
            Option<long?> dim3Id = default;
            Option<Guid?> id = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<long?> locationId = default;
            Option<bool?> originatedFromEhf = default;
            Option<List<VoucherPage>?> pages = default;
            Option<DateTimeOffset?> paymentDate = default;
            Option<bool?> paymentOnHold = default;
            Option<bool?> payout = default;
            Option<long?> projectId = default;
            Option<long?> supplierAccountId = default;
            Option<long?> supplierBankAccountId = default;
            Option<long?> supplierContactId = default;
            Option<List<SupplierVoucherLineDto>?> supplierVoucherLines = default;
            Option<DateTimeOffset?> voucherDate = default;
            Option<VoucherState?> voucherState = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AppliesInvoiceId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                appliesInvoiceId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "AppliesInvoiceNo":
                            appliesInvoiceNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ApprovalState":
                            string? approvalStateRawValue = utf8JsonReader.GetString();
                            if (approvalStateRawValue != null)
                                approvalState = new Option<ApprovalState?>(ApprovalStateValueConverter.FromStringOrDefault(approvalStateRawValue));
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ClientBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clientBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CreditNoteNo":
                            creditNoteNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyCode":
                            currencyCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CurrencyExchangeRate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currencyExchangeRate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CurrencyRegistryCode":
                            string? currencyRegistryCodeRawValue = utf8JsonReader.GetString();
                            if (currencyRegistryCodeRawValue != null)
                                currencyRegistryCode = new Option<CurrencyRegistryCode?>(CurrencyRegistryCodeValueConverter.FromStringOrDefault(currencyRegistryCodeRawValue));
                            break;
                        case "CurrencyRegistryText":
                            currencyRegistryText = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Dim1Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim1Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim2Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim2Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Dim3Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dim3Id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "LocationId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                locationId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OriginatedFromEhf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                originatedFromEhf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Pages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pages = new Option<List<VoucherPage>?>(JsonSerializer.Deserialize<List<VoucherPage>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "PaymentDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "PaymentOnHold":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                paymentOnHold = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Payout":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payout = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierContactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierVoucherLines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierVoucherLines = new Option<List<SupplierVoucherLineDto>?>(JsonSerializer.Deserialize<List<SupplierVoucherLineDto>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "VoucherState":
                            string? voucherStateRawValue = utf8JsonReader.GetString();
                            if (voucherStateRawValue != null)
                                voucherState = new Option<VoucherState?>(VoucherStateValueConverter.FromStringOrDefault(voucherStateRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class SupplierCreditNoteJournalEntryVoucherDto.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class SupplierCreditNoteJournalEntryVoucherDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SupplierCreditNoteJournalEntryVoucherDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class SupplierCreditNoteJournalEntryVoucherDto.");

            return new SupplierCreditNoteJournalEntryVoucherDto(appliesInvoiceId, appliesInvoiceNo, approvalState, cid, clientBankAccountId, createdDateTimeOffset, creditNoteNo, currencyAmount, currencyCode, currencyExchangeRate, currencyRegistryCode, currencyRegistryText, departmentId, description, dim1Id, dim2Id, dim3Id, id, lastChangedDateTimeOffset, locationId, originatedFromEhf, pages, paymentDate, paymentOnHold, payout, projectId, supplierAccountId, supplierBankAccountId, supplierContactId, supplierVoucherLines, voucherDate, voucherState);
        }

        /// <summary>
        /// Serializes a <see cref="SupplierCreditNoteJournalEntryVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierCreditNoteJournalEntryVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SupplierCreditNoteJournalEntryVoucherDto supplierCreditNoteJournalEntryVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supplierCreditNoteJournalEntryVoucherDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SupplierCreditNoteJournalEntryVoucherDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierCreditNoteJournalEntryVoucherDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SupplierCreditNoteJournalEntryVoucherDto supplierCreditNoteJournalEntryVoucherDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceIdOption.Value != null)
                    writer.WriteString("AppliesInvoiceId", supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceIdOption.Value!.Value);
                else
                    writer.WriteNull("AppliesInvoiceId");

            if (supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceNoOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceNoOption.Value != null)
                    writer.WriteString("AppliesInvoiceNo", supplierCreditNoteJournalEntryVoucherDto.AppliesInvoiceNo);
                else
                    writer.WriteNull("AppliesInvoiceNo");

            if (supplierCreditNoteJournalEntryVoucherDto.ApprovalStateOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.ApprovalStateOption!.Value != null)
                {
                    var approvalStateRawValue = ApprovalStateValueConverter.ToJsonValue(supplierCreditNoteJournalEntryVoucherDto.ApprovalStateOption.Value!.Value);
                    writer.WriteString("ApprovalState", approvalStateRawValue);
                }
                else
                    writer.WriteNull("ApprovalState");
            if (supplierCreditNoteJournalEntryVoucherDto.CidOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CidOption.Value != null)
                    writer.WriteString("Cid", supplierCreditNoteJournalEntryVoucherDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (supplierCreditNoteJournalEntryVoucherDto.ClientBankAccountIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.ClientBankAccountIdOption.Value != null)
                    writer.WriteNumber("ClientBankAccountId", supplierCreditNoteJournalEntryVoucherDto.ClientBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("ClientBankAccountId");

            if (supplierCreditNoteJournalEntryVoucherDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", supplierCreditNoteJournalEntryVoucherDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (supplierCreditNoteJournalEntryVoucherDto.CreditNoteNoOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CreditNoteNoOption.Value != null)
                    writer.WriteString("CreditNoteNo", supplierCreditNoteJournalEntryVoucherDto.CreditNoteNo);
                else
                    writer.WriteNull("CreditNoteNo");

            if (supplierCreditNoteJournalEntryVoucherDto.CurrencyAmountOption.IsSet)
                writer.WriteNumber("CurrencyAmount", supplierCreditNoteJournalEntryVoucherDto.CurrencyAmountOption.Value!.Value);

            if (supplierCreditNoteJournalEntryVoucherDto.CurrencyCodeOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CurrencyCodeOption.Value != null)
                    writer.WriteString("CurrencyCode", supplierCreditNoteJournalEntryVoucherDto.CurrencyCode);
                else
                    writer.WriteNull("CurrencyCode");

            if (supplierCreditNoteJournalEntryVoucherDto.CurrencyExchangeRateOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CurrencyExchangeRateOption.Value != null)
                    writer.WriteNumber("CurrencyExchangeRate", supplierCreditNoteJournalEntryVoucherDto.CurrencyExchangeRateOption.Value!.Value);
                else
                    writer.WriteNull("CurrencyExchangeRate");

            if (supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryCodeOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryCodeOption!.Value != null)
                {
                    var currencyRegistryCodeRawValue = CurrencyRegistryCodeValueConverter.ToJsonValue(supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryCodeOption.Value!.Value);
                    writer.WriteString("CurrencyRegistryCode", currencyRegistryCodeRawValue);
                }
                else
                    writer.WriteNull("CurrencyRegistryCode");
            if (supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryTextOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryTextOption.Value != null)
                    writer.WriteString("CurrencyRegistryText", supplierCreditNoteJournalEntryVoucherDto.CurrencyRegistryText);
                else
                    writer.WriteNull("CurrencyRegistryText");

            if (supplierCreditNoteJournalEntryVoucherDto.DepartmentIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", supplierCreditNoteJournalEntryVoucherDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (supplierCreditNoteJournalEntryVoucherDto.DescriptionOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", supplierCreditNoteJournalEntryVoucherDto.Description);
                else
                    writer.WriteNull("Description");

            if (supplierCreditNoteJournalEntryVoucherDto.Dim1IdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.Dim1IdOption.Value != null)
                    writer.WriteNumber("Dim1Id", supplierCreditNoteJournalEntryVoucherDto.Dim1IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim1Id");

            if (supplierCreditNoteJournalEntryVoucherDto.Dim2IdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.Dim2IdOption.Value != null)
                    writer.WriteNumber("Dim2Id", supplierCreditNoteJournalEntryVoucherDto.Dim2IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim2Id");

            if (supplierCreditNoteJournalEntryVoucherDto.Dim3IdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.Dim3IdOption.Value != null)
                    writer.WriteNumber("Dim3Id", supplierCreditNoteJournalEntryVoucherDto.Dim3IdOption.Value!.Value);
                else
                    writer.WriteNull("Dim3Id");

            if (supplierCreditNoteJournalEntryVoucherDto.IdOption.IsSet)
                writer.WriteString("Id", supplierCreditNoteJournalEntryVoucherDto.IdOption.Value!.Value);

            if (supplierCreditNoteJournalEntryVoucherDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", supplierCreditNoteJournalEntryVoucherDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (supplierCreditNoteJournalEntryVoucherDto.LocationIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.LocationIdOption.Value != null)
                    writer.WriteNumber("LocationId", supplierCreditNoteJournalEntryVoucherDto.LocationIdOption.Value!.Value);
                else
                    writer.WriteNull("LocationId");

            if (supplierCreditNoteJournalEntryVoucherDto.OriginatedFromEhfOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.OriginatedFromEhfOption.Value != null)
                    writer.WriteBoolean("OriginatedFromEhf", supplierCreditNoteJournalEntryVoucherDto.OriginatedFromEhfOption.Value!.Value);
                else
                    writer.WriteNull("OriginatedFromEhf");

            if (supplierCreditNoteJournalEntryVoucherDto.PagesOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.PagesOption.Value != null)
                {
                    writer.WritePropertyName("Pages");
                    JsonSerializer.Serialize(writer, supplierCreditNoteJournalEntryVoucherDto.Pages, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("Pages");
            if (supplierCreditNoteJournalEntryVoucherDto.PaymentDateOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.PaymentDateOption.Value != null)
                    writer.WriteString("PaymentDate", supplierCreditNoteJournalEntryVoucherDto.PaymentDateOption.Value!.Value.ToString(PaymentDateFormat));
                else
                    writer.WriteNull("PaymentDate");

            if (supplierCreditNoteJournalEntryVoucherDto.PaymentOnHoldOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.PaymentOnHoldOption.Value != null)
                    writer.WriteBoolean("PaymentOnHold", supplierCreditNoteJournalEntryVoucherDto.PaymentOnHoldOption.Value!.Value);
                else
                    writer.WriteNull("PaymentOnHold");

            if (supplierCreditNoteJournalEntryVoucherDto.PayoutOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.PayoutOption.Value != null)
                    writer.WriteBoolean("Payout", supplierCreditNoteJournalEntryVoucherDto.PayoutOption.Value!.Value);
                else
                    writer.WriteNull("Payout");

            if (supplierCreditNoteJournalEntryVoucherDto.ProjectIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", supplierCreditNoteJournalEntryVoucherDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (supplierCreditNoteJournalEntryVoucherDto.SupplierAccountIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.SupplierAccountIdOption.Value != null)
                    writer.WriteNumber("SupplierAccountId", supplierCreditNoteJournalEntryVoucherDto.SupplierAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierAccountId");

            if (supplierCreditNoteJournalEntryVoucherDto.SupplierBankAccountIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.SupplierBankAccountIdOption.Value != null)
                    writer.WriteNumber("SupplierBankAccountId", supplierCreditNoteJournalEntryVoucherDto.SupplierBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierBankAccountId");

            if (supplierCreditNoteJournalEntryVoucherDto.SupplierContactIdOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.SupplierContactIdOption.Value != null)
                    writer.WriteNumber("SupplierContactId", supplierCreditNoteJournalEntryVoucherDto.SupplierContactIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierContactId");

            if (supplierCreditNoteJournalEntryVoucherDto.SupplierVoucherLinesOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.SupplierVoucherLinesOption.Value != null)
                {
                    writer.WritePropertyName("SupplierVoucherLines");
                    JsonSerializer.Serialize(writer, supplierCreditNoteJournalEntryVoucherDto.SupplierVoucherLines, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("SupplierVoucherLines");
            if (supplierCreditNoteJournalEntryVoucherDto.VoucherDateOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.VoucherDateOption.Value != null)
                    writer.WriteString("VoucherDate", supplierCreditNoteJournalEntryVoucherDto.VoucherDateOption.Value!.Value.ToString(VoucherDateFormat));
                else
                    writer.WriteNull("VoucherDate");

            if (supplierCreditNoteJournalEntryVoucherDto.VoucherStateOption.IsSet)
                if (supplierCreditNoteJournalEntryVoucherDto.VoucherStateOption!.Value != null)
                {
                    var voucherStateRawValue = VoucherStateValueConverter.ToJsonValue(supplierCreditNoteJournalEntryVoucherDto.VoucherStateOption.Value!.Value);
                    writer.WriteString("VoucherState", voucherStateRawValue);
                }
                else
                    writer.WriteNull("VoucherState");
        }
    }
}
