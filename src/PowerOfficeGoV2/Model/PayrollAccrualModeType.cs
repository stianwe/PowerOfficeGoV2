// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The payroll accrual mode.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - Does not suggest accrual date when creating payroll.&lt;/li&gt;&lt;li&gt;&lt;i&gt;LastDayOfPreviousMonth&lt;/i&gt; - Suggests the last day of the previous month as accrual date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SameDayPreviousMonth&lt;/i&gt; - Suggest the same day (as the payroll date) of the previous month as accrual date.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>The payroll accrual mode.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - Does not suggest accrual date when creating payroll.&lt;/li&gt;&lt;li&gt;&lt;i&gt;LastDayOfPreviousMonth&lt;/i&gt; - Suggests the last day of the previous month as accrual date.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SameDayPreviousMonth&lt;/i&gt; - Suggest the same day (as the payroll date) of the previous month as accrual date.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum PayrollAccrualModeType
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum LastDayOfPreviousMonth for value: LastDayOfPreviousMonth
        /// </summary>
        LastDayOfPreviousMonth = 2,

        /// <summary>
        /// Enum SameDayPreviousMonth for value: SameDayPreviousMonth
        /// </summary>
        SameDayPreviousMonth = 3
    }

    /// <summary>
    /// Converts <see cref="PayrollAccrualModeType"/> to and from the JSON value
    /// </summary>
    public static class PayrollAccrualModeTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PayrollAccrualModeType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayrollAccrualModeType FromString(string value)
        {
            if (value.Equals("None"))
                return PayrollAccrualModeType.None;

            if (value.Equals("LastDayOfPreviousMonth"))
                return PayrollAccrualModeType.LastDayOfPreviousMonth;

            if (value.Equals("SameDayPreviousMonth"))
                return PayrollAccrualModeType.SameDayPreviousMonth;

            throw new NotImplementedException($"Could not convert value to type PayrollAccrualModeType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PayrollAccrualModeType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PayrollAccrualModeType? FromStringOrDefault(string value)
        {
            if (value.Equals("None"))
                return PayrollAccrualModeType.None;

            if (value.Equals("LastDayOfPreviousMonth"))
                return PayrollAccrualModeType.LastDayOfPreviousMonth;

            if (value.Equals("SameDayPreviousMonth"))
                return PayrollAccrualModeType.SameDayPreviousMonth;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PayrollAccrualModeType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PayrollAccrualModeType value)
        {
            if (value == PayrollAccrualModeType.None)
                return "None";

            if (value == PayrollAccrualModeType.LastDayOfPreviousMonth)
                return "LastDayOfPreviousMonth";

            if (value == PayrollAccrualModeType.SameDayPreviousMonth)
                return "SameDayPreviousMonth";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayrollAccrualModeType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PayrollAccrualModeTypeJsonConverter : JsonConverter<PayrollAccrualModeType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayrollAccrualModeType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayrollAccrualModeType? result = rawValue == null
                ? null
                : PayrollAccrualModeTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PayrollAccrualModeType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payrollAccrualModeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayrollAccrualModeType payrollAccrualModeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payrollAccrualModeType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PayrollAccrualModeType"/>
    /// </summary>
    public class PayrollAccrualModeTypeNullableJsonConverter : JsonConverter<PayrollAccrualModeType?>
    {
        /// <summary>
        /// Returns a PayrollAccrualModeType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PayrollAccrualModeType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PayrollAccrualModeType? result = rawValue == null
                ? null
                : PayrollAccrualModeTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="payrollAccrualModeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PayrollAccrualModeType? payrollAccrualModeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(payrollAccrualModeType?.ToString() ?? "null");
        }
    }
}
