// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// DTO for creating location.
    /// </summary>
    public partial class LocationPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationPostDto" /> class.
        /// </summary>
        /// <param name="code">The code of the location.</param>
        /// <param name="isActive">A value indicating whether this instance is active. Inactive locations disable the usage of that locations in the GUI. Defaults to false.</param>
        /// <param name="name">The name of the location</param>
        [JsonConstructor]
        public LocationPostDto(Option<string?> code = default, Option<bool?> isActive = default, string? name = default)
        {
            CodeOption = code;
            IsActiveOption = isActive;
            Name = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the location.
        /// </summary>
        /// <value>The code of the location.</value>
        /* <example>10</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// A value indicating whether this instance is active. Inactive locations disable the usage of that locations in the GUI. Defaults to false.
        /// </summary>
        /// <value>A value indicating whether this instance is active. Inactive locations disable the usage of that locations in the GUI. Defaults to false.</value>
        /* <example>false</example> */
        [JsonPropertyName("IsActive")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// The name of the location
        /// </summary>
        /// <value>The name of the location</value>
        /* <example>Vestbyen</example> */
        [JsonPropertyName("Name")]
        public string? Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationPostDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LocationPostDto" />
    /// </summary>
    public class LocationPostDtoJsonConverter : JsonConverter<LocationPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="LocationPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LocationPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<bool?> isActive = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class LocationPostDto.", nameof(name));

            return new LocationPostDto(code, isActive, name.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LocationPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="locationPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LocationPostDto locationPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, locationPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LocationPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="locationPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LocationPostDto locationPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (locationPostDto.CodeOption.IsSet)
                if (locationPostDto.CodeOption.Value != null)
                    writer.WriteString("Code", locationPostDto.Code);
                else
                    writer.WriteNull("Code");

            if (locationPostDto.IsActiveOption.IsSet)
                if (locationPostDto.IsActiveOption.Value != null)
                    writer.WriteBoolean("IsActive", locationPostDto.IsActiveOption.Value!.Value);
                else
                    writer.WriteNull("IsActive");

            if (locationPostDto.Name != null)
                writer.WriteString("Name", locationPostDto.Name);
            else
                writer.WriteNull("Name");
        }
    }
}
