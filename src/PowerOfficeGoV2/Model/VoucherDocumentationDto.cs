// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// A lightweight object of available voucher documentation.
    /// </summary>
    public partial class VoucherDocumentationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherDocumentationDto" /> class.
        /// </summary>
        /// <param name="hasEhf">Indicates whether there is an EHF (Electronic Trade Format) attached to the voucher.</param>
        /// <param name="hasImages">Indicates whether there are images attached to the voucher.</param>
        /// <param name="hasPdf">Indicates whether there is an PDF (Portable Document Format) attached to the voucher.</param>
        /// <param name="hasSalesOrderAttachments">Indicates whether there is sales order attachments on the voucher.  Note that this is only relevant for OutgoingInvoice and OutgoingCreditNote.  Use attachments-endpoint under SalesOrders to get the attachments.</param>
        /// <param name="isImported">Indicates whether the voucher has been created by an integration via API.  We only allow adding documentation to imported vouchers.</param>
        /// <param name="voucherId">The identifier of the voucher the documentation belongs to.</param>
        /// <param name="voucherNo">The voucher number.</param>
        /// <param name="voucherType">voucherType</param>
        [JsonConstructor]
        public VoucherDocumentationDto(Option<bool?> hasEhf = default, Option<bool?> hasImages = default, Option<bool?> hasPdf = default, Option<bool?> hasSalesOrderAttachments = default, Option<bool?> isImported = default, Option<Guid?> voucherId = default, Option<long?> voucherNo = default, Option<VoucherType?> voucherType = default)
        {
            HasEhfOption = hasEhf;
            HasImagesOption = hasImages;
            HasPdfOption = hasPdf;
            HasSalesOrderAttachmentsOption = hasSalesOrderAttachments;
            IsImportedOption = isImported;
            VoucherIdOption = voucherId;
            VoucherNoOption = voucherNo;
            VoucherTypeOption = voucherType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VoucherType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VoucherType?> VoucherTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets VoucherType
        /// </summary>
        [JsonPropertyName("VoucherType")]
        public VoucherType? VoucherType { get { return this.VoucherTypeOption; } set { this.VoucherTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasEhf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasEhfOption { get; }

        /// <summary>
        /// Indicates whether there is an EHF (Electronic Trade Format) attached to the voucher.
        /// </summary>
        /// <value>Indicates whether there is an EHF (Electronic Trade Format) attached to the voucher.</value>
        /* <example>true</example> */
        [JsonPropertyName("HasEhf")]
        public bool? HasEhf { get { return this.HasEhfOption; } }

        /// <summary>
        /// Used to track the state of HasImages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasImagesOption { get; }

        /// <summary>
        /// Indicates whether there are images attached to the voucher.
        /// </summary>
        /// <value>Indicates whether there are images attached to the voucher.</value>
        /* <example>true</example> */
        [JsonPropertyName("HasImages")]
        public bool? HasImages { get { return this.HasImagesOption; } }

        /// <summary>
        /// Used to track the state of HasPdf
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasPdfOption { get; }

        /// <summary>
        /// Indicates whether there is an PDF (Portable Document Format) attached to the voucher.
        /// </summary>
        /// <value>Indicates whether there is an PDF (Portable Document Format) attached to the voucher.</value>
        /* <example>true</example> */
        [JsonPropertyName("HasPdf")]
        public bool? HasPdf { get { return this.HasPdfOption; } }

        /// <summary>
        /// Used to track the state of HasSalesOrderAttachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasSalesOrderAttachmentsOption { get; }

        /// <summary>
        /// Indicates whether there is sales order attachments on the voucher.  Note that this is only relevant for OutgoingInvoice and OutgoingCreditNote.  Use attachments-endpoint under SalesOrders to get the attachments.
        /// </summary>
        /// <value>Indicates whether there is sales order attachments on the voucher.  Note that this is only relevant for OutgoingInvoice and OutgoingCreditNote.  Use attachments-endpoint under SalesOrders to get the attachments.</value>
        /* <example>true</example> */
        [JsonPropertyName("HasSalesOrderAttachments")]
        public bool? HasSalesOrderAttachments { get { return this.HasSalesOrderAttachmentsOption; } }

        /// <summary>
        /// Used to track the state of IsImported
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsImportedOption { get; private set; }

        /// <summary>
        /// Indicates whether the voucher has been created by an integration via API.  We only allow adding documentation to imported vouchers.
        /// </summary>
        /// <value>Indicates whether the voucher has been created by an integration via API.  We only allow adding documentation to imported vouchers.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsImported")]
        public bool? IsImported { get { return this.IsImportedOption; } set { this.IsImportedOption = new(value); } }

        /// <summary>
        /// Used to track the state of VoucherId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> VoucherIdOption { get; }

        /// <summary>
        /// The identifier of the voucher the documentation belongs to.
        /// </summary>
        /// <value>The identifier of the voucher the documentation belongs to.</value>
        /* <example>1833b062-0d41-470c-80c3-46b480fd219b</example> */
        [JsonPropertyName("VoucherId")]
        public Guid? VoucherId { get { return this.VoucherIdOption; } }

        /// <summary>
        /// Used to track the state of VoucherNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VoucherNoOption { get; }

        /// <summary>
        /// The voucher number.
        /// </summary>
        /// <value>The voucher number.</value>
        /* <example>12342</example> */
        [JsonPropertyName("VoucherNo")]
        public long? VoucherNo { get { return this.VoucherNoOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherDocumentationDto {\n");
            sb.Append("  HasEhf: ").Append(HasEhf).Append("\n");
            sb.Append("  HasImages: ").Append(HasImages).Append("\n");
            sb.Append("  HasPdf: ").Append(HasPdf).Append("\n");
            sb.Append("  HasSalesOrderAttachments: ").Append(HasSalesOrderAttachments).Append("\n");
            sb.Append("  IsImported: ").Append(IsImported).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  VoucherNo: ").Append(VoucherNo).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VoucherDocumentationDto" />
    /// </summary>
    public class VoucherDocumentationDtoJsonConverter : JsonConverter<VoucherDocumentationDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="VoucherDocumentationDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VoucherDocumentationDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> hasEhf = default;
            Option<bool?> hasImages = default;
            Option<bool?> hasPdf = default;
            Option<bool?> hasSalesOrderAttachments = default;
            Option<bool?> isImported = default;
            Option<Guid?> voucherId = default;
            Option<long?> voucherNo = default;
            Option<VoucherType?> voucherType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "HasEhf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasEhf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "HasImages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasImages = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "HasPdf":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasPdf = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "HasSalesOrderAttachments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasSalesOrderAttachments = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsImported":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isImported = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "VoucherId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "VoucherNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                voucherNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "VoucherType":
                            string? voucherTypeRawValue = utf8JsonReader.GetString();
                            if (voucherTypeRawValue != null)
                                voucherType = new Option<VoucherType?>(VoucherTypeValueConverter.FromStringOrDefault(voucherTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hasEhf.IsSet && hasEhf.Value == null)
                throw new ArgumentNullException(nameof(hasEhf), "Property is not nullable for class VoucherDocumentationDto.");

            if (hasImages.IsSet && hasImages.Value == null)
                throw new ArgumentNullException(nameof(hasImages), "Property is not nullable for class VoucherDocumentationDto.");

            if (hasPdf.IsSet && hasPdf.Value == null)
                throw new ArgumentNullException(nameof(hasPdf), "Property is not nullable for class VoucherDocumentationDto.");

            if (hasSalesOrderAttachments.IsSet && hasSalesOrderAttachments.Value == null)
                throw new ArgumentNullException(nameof(hasSalesOrderAttachments), "Property is not nullable for class VoucherDocumentationDto.");

            if (isImported.IsSet && isImported.Value == null)
                throw new ArgumentNullException(nameof(isImported), "Property is not nullable for class VoucherDocumentationDto.");

            if (voucherId.IsSet && voucherId.Value == null)
                throw new ArgumentNullException(nameof(voucherId), "Property is not nullable for class VoucherDocumentationDto.");

            return new VoucherDocumentationDto(hasEhf, hasImages, hasPdf, hasSalesOrderAttachments, isImported, voucherId, voucherNo, voucherType);
        }

        /// <summary>
        /// Serializes a <see cref="VoucherDocumentationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherDocumentationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VoucherDocumentationDto voucherDocumentationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, voucherDocumentationDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VoucherDocumentationDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="voucherDocumentationDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VoucherDocumentationDto voucherDocumentationDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (voucherDocumentationDto.HasEhfOption.IsSet)
                writer.WriteBoolean("HasEhf", voucherDocumentationDto.HasEhfOption.Value!.Value);

            if (voucherDocumentationDto.HasImagesOption.IsSet)
                writer.WriteBoolean("HasImages", voucherDocumentationDto.HasImagesOption.Value!.Value);

            if (voucherDocumentationDto.HasPdfOption.IsSet)
                writer.WriteBoolean("HasPdf", voucherDocumentationDto.HasPdfOption.Value!.Value);

            if (voucherDocumentationDto.HasSalesOrderAttachmentsOption.IsSet)
                writer.WriteBoolean("HasSalesOrderAttachments", voucherDocumentationDto.HasSalesOrderAttachmentsOption.Value!.Value);

            if (voucherDocumentationDto.IsImportedOption.IsSet)
                writer.WriteBoolean("IsImported", voucherDocumentationDto.IsImportedOption.Value!.Value);

            if (voucherDocumentationDto.VoucherIdOption.IsSet)
                writer.WriteString("VoucherId", voucherDocumentationDto.VoucherIdOption.Value!.Value);

            if (voucherDocumentationDto.VoucherNoOption.IsSet)
                if (voucherDocumentationDto.VoucherNoOption.Value != null)
                    writer.WriteNumber("VoucherNo", voucherDocumentationDto.VoucherNoOption.Value!.Value);
                else
                    writer.WriteNull("VoucherNo");

            if (voucherDocumentationDto.VoucherTypeOption.IsSet)
                if (voucherDocumentationDto.VoucherTypeOption!.Value != null)
                {
                    var voucherTypeRawValue = VoucherTypeValueConverter.ToJsonValue(voucherDocumentationDto.VoucherTypeOption.Value!.Value);
                    writer.WriteString("VoucherType", voucherTypeRawValue);
                }
                else
                    writer.WriteNull("VoucherType");
        }
    }
}
