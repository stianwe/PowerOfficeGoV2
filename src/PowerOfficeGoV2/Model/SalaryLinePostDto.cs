// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The salary line Post DTO contains all properties relevant to creating a salary line in Go.
    /// </summary>
    public partial class SalaryLinePostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalaryLinePostDto" /> class.
        /// </summary>
        /// <param name="accountId">The identifier of the account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the account from the pay item will be used.  If set, any account set on the pay item will be overridden for this given salary line.</param>
        /// <param name="amount">The amount of the salary line, in the client currency.  The relevance of setting amount depend on the pay item set.  For a pay item with a quantity and rate, the quantity and rate should be provided as drivers, and the system will calculate the amount.</param>
        /// <param name="carListPrice">The list price of the car, in the client currency.  Relevant only for pay items with free car/work car processing types, where the list price is required.</param>
        /// <param name="carRegistrationDate">The registration date of the car.  Relevant to set only for certain pay items with car/work car related processing types.</param>
        /// <param name="carRegistrationNo">The registration number of the car.  Relevant to set only for certain pay items with car/work car related processing types.</param>
        /// <param name="cid">The CID number (norwegian: KID), relevant if UseRemittance and SupplierBankAccountId is set.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</param>
        /// <param name="comment">A comment to the salary line.  Will be shown on the employee payslip if set.</param>
        /// <param name="commuterPersonType">commuterPersonType</param>
        /// <param name="deductionType">deductionType</param>
        /// <param name="departmentId">The department identifier.  Relevant to set if the salary line should be posted with a given department dimension.  If not set, the department will inherit the department set on the employee if/when the salary line is included in a payroll.</param>
        /// <param name="employeeId">The identifier of the employee this salary line concerns.</param>
        /// <param name="externalImportReference">The external import reference.  This property can be set by integrations in order to reference the external system and ensure a duplicate check when posting the salary line to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check salary lines.</param>
        /// <param name="fromDate">The from-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.</param>
        /// <param name="homeWorkKilometers">The number of kilometers driven between home and work.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule.</param>
        /// <param name="incomeYear">The income year.  Relevant only for pay items with certain processing types, such as holiday pay.</param>
        /// <param name="isCarPool">Value indicating whether this his salary line relate to a car-pool or not.  Only relevant to set for pay items with the processing type FreeCarStandardRule or FreeCarOther.  With these two processing types, either car-pool or car registration number must be set.  Defaults to false if not set.</param>
        /// <param name="maxAmount">The maximum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.</param>
        /// <param name="memberNo">The member number of the trade union or pension scheme.  Relevant only for pay items with the following processing types: TradeUnionDeduction, PensionDeduction or PensionDeductionUnlimited.</param>
        /// <param name="minAmount">The minimum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.</param>
        /// <param name="number">The number field.  Only relevant for pay items with certain processing types that require an input of the number of times an event have occurred.  For example the number of journeys for a commuter, if the processing type is CommuterWithNumberOfJourneys.</param>
        /// <param name="oppositeAccountId">The identifier of the opposite account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the opposite account from the pay item will be used.  If set, any opposite account set on the pay item will be overridden for this given salary line.</param>
        /// <param name="payItemId">The identifier of the pay item.</param>
        /// <param name="privateDrivenKilometers">The number of kilometers driven with private use.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule or WorkCarKilometers.</param>
        /// <param name="projectId">The project identifier.  Relevant to set if the salary line should be posted with a given project dimension.</param>
        /// <param name="quantity">The quantity of the salary line.  The relevance of setting quantity and the interpretation of unit depend on the pay item set.  For a pay items defined with a quantity related processing types, the quantity should be provided as the driver.</param>
        /// <param name="rate">The rate of the salary line.  The relevance of setting rate depend on the pay item set.  For pay items defined with a variable rate, the rate should be provided as the driver.  For pay items with fixed rates, the rate is usually set on the pay item and will be overridden if set on a salary line.  Also note that hourly wage rates are usually calculated form the employment salary, and not needed to set on salary lines as the system automatically calculates the rate on the payroll.</param>
        /// <param name="startAmount">The start amount of the salary line deduction, in the client currency.  Relevant only for pay items with the following deduction processing types: DeductionWithBalance, AttachmentOfEarnings and AttachmentOfEarningsTax.  If not set on a salary line with a pay item of one of these processing types, the deduction will repeat until stopped.  If set, the deduction will run until the start amount is fully covered.</param>
        /// <param name="supplierAccountId">The identifier of the supplier sub-ledger account to post deductions.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</param>
        /// <param name="supplierBankAccountId">The identifier of the supplier bank account.  Relevant only if UseRemittance is true, and for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</param>
        /// <param name="taxRule">taxRule</param>
        /// <param name="toDate">The to-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.</param>
        /// <param name="useRemittance">Value indicating whether to use remittance or not.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.  Defaults to false if not set.</param>
        /// <param name="vatCodeId">The VAT code identifier.  Relevant to set if the salary line is set with a pay item that have a processing type related to expense refund subject of VAT.</param>
        /// <param name="workDriveExceedsKilometerLimit">Value indicating whether this his salary line relate to work drive that exceeds the kilometer limit or not.  Relevant only for pay items with the processing type FreeCarStandardRule.  Default to false if not set.</param>
        [JsonConstructor]
        public SalaryLinePostDto(Option<long?> accountId = default, Option<double?> amount = default, Option<double?> carListPrice = default, Option<DateTimeOffset?> carRegistrationDate = default, Option<string?> carRegistrationNo = default, Option<string?> cid = default, Option<string?> comment = default, Option<CommuterPersonType?> commuterPersonType = default, Option<DeductionType?> deductionType = default, Option<long?> departmentId = default, long? employeeId = default, Option<string?> externalImportReference = default, Option<DateTimeOffset?> fromDate = default, Option<double?> homeWorkKilometers = default, Option<int?> incomeYear = default, Option<bool?> isCarPool = default, Option<double?> maxAmount = default, Option<string?> memberNo = default, Option<double?> minAmount = default, Option<int?> number = default, Option<long?> oppositeAccountId = default, Guid? payItemId = default, Option<double?> privateDrivenKilometers = default, Option<long?> projectId = default, Option<double?> quantity = default, Option<double?> rate = default, Option<double?> startAmount = default, Option<long?> supplierAccountId = default, Option<long?> supplierBankAccountId = default, Option<TaxRuleType?> taxRule = default, Option<DateTimeOffset?> toDate = default, Option<bool?> useRemittance = default, Option<int?> vatCodeId = default, Option<bool?> workDriveExceedsKilometerLimit = default)
        {
            AccountIdOption = accountId;
            AmountOption = amount;
            CarListPriceOption = carListPrice;
            CarRegistrationDateOption = carRegistrationDate;
            CarRegistrationNoOption = carRegistrationNo;
            CidOption = cid;
            CommentOption = comment;
            CommuterPersonTypeOption = commuterPersonType;
            DeductionTypeOption = deductionType;
            DepartmentIdOption = departmentId;
            EmployeeId = employeeId;
            ExternalImportReferenceOption = externalImportReference;
            FromDateOption = fromDate;
            HomeWorkKilometersOption = homeWorkKilometers;
            IncomeYearOption = incomeYear;
            IsCarPoolOption = isCarPool;
            MaxAmountOption = maxAmount;
            MemberNoOption = memberNo;
            MinAmountOption = minAmount;
            NumberOption = number;
            OppositeAccountIdOption = oppositeAccountId;
            PayItemId = payItemId;
            PrivateDrivenKilometersOption = privateDrivenKilometers;
            ProjectIdOption = projectId;
            QuantityOption = quantity;
            RateOption = rate;
            StartAmountOption = startAmount;
            SupplierAccountIdOption = supplierAccountId;
            SupplierBankAccountIdOption = supplierBankAccountId;
            TaxRuleOption = taxRule;
            ToDateOption = toDate;
            UseRemittanceOption = useRemittance;
            VatCodeIdOption = vatCodeId;
            WorkDriveExceedsKilometerLimitOption = workDriveExceedsKilometerLimit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CommuterPersonType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CommuterPersonType?> CommuterPersonTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommuterPersonType
        /// </summary>
        [JsonPropertyName("CommuterPersonType")]
        public CommuterPersonType? CommuterPersonType { get { return this.CommuterPersonTypeOption; } set { this.CommuterPersonTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeductionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DeductionType?> DeductionTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeductionType
        /// </summary>
        [JsonPropertyName("DeductionType")]
        public DeductionType? DeductionType { get { return this.DeductionTypeOption; } set { this.DeductionTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TaxRule
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TaxRuleType?> TaxRuleOption { get; private set; }

        /// <summary>
        /// Gets or Sets TaxRule
        /// </summary>
        [JsonPropertyName("TaxRule")]
        public TaxRuleType? TaxRule { get { return this.TaxRuleOption; } set { this.TaxRuleOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> AccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the account from the pay item will be used.  If set, any account set on the pay item will be overridden for this given salary line.
        /// </summary>
        /// <value>The identifier of the account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the account from the pay item will be used.  If set, any account set on the pay item will be overridden for this given salary line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("AccountId")]
        public long? AccountId { get { return this.AccountIdOption; } set { this.AccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Amount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AmountOption { get; private set; }

        /// <summary>
        /// The amount of the salary line, in the client currency.  The relevance of setting amount depend on the pay item set.  For a pay item with a quantity and rate, the quantity and rate should be provided as drivers, and the system will calculate the amount.
        /// </summary>
        /// <value>The amount of the salary line, in the client currency.  The relevance of setting amount depend on the pay item set.  For a pay item with a quantity and rate, the quantity and rate should be provided as drivers, and the system will calculate the amount.</value>
        /* <example>99</example> */
        [JsonPropertyName("Amount")]
        public double? Amount { get { return this.AmountOption; } set { this.AmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of CarListPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> CarListPriceOption { get; private set; }

        /// <summary>
        /// The list price of the car, in the client currency.  Relevant only for pay items with free car/work car processing types, where the list price is required.
        /// </summary>
        /// <value>The list price of the car, in the client currency.  Relevant only for pay items with free car/work car processing types, where the list price is required.</value>
        /* <example>99</example> */
        [JsonPropertyName("CarListPrice")]
        public double? CarListPrice { get { return this.CarListPriceOption; } set { this.CarListPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CarRegistrationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CarRegistrationDateOption { get; private set; }

        /// <summary>
        /// The registration date of the car.  Relevant to set only for certain pay items with car/work car related processing types.
        /// </summary>
        /// <value>The registration date of the car.  Relevant to set only for certain pay items with car/work car related processing types.</value>
        /* <example>Fri Jul 01 02:00:00 CEST 2022</example> */
        [JsonPropertyName("CarRegistrationDate")]
        public DateTimeOffset? CarRegistrationDate { get { return this.CarRegistrationDateOption; } set { this.CarRegistrationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CarRegistrationNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CarRegistrationNoOption { get; private set; }

        /// <summary>
        /// The registration number of the car.  Relevant to set only for certain pay items with car/work car related processing types.
        /// </summary>
        /// <value>The registration number of the car.  Relevant to set only for certain pay items with car/work car related processing types.</value>
        /* <example>YE79309</example> */
        [JsonPropertyName("CarRegistrationNo")]
        public string? CarRegistrationNo { get { return this.CarRegistrationNoOption; } set { this.CarRegistrationNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CidOption { get; private set; }

        /// <summary>
        /// The CID number (norwegian: KID), relevant if UseRemittance and SupplierBankAccountId is set.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.
        /// </summary>
        /// <value>The CID number (norwegian: KID), relevant if UseRemittance and SupplierBankAccountId is set.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</value>
        /* <example>9235400011927001</example> */
        [JsonPropertyName("Cid")]
        public string? Cid { get { return this.CidOption; } set { this.CidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// A comment to the salary line.  Will be shown on the employee payslip if set.
        /// </summary>
        /// <value>A comment to the salary line.  Will be shown on the employee payslip if set.</value>
        /* <example>Good job!</example> */
        [JsonPropertyName("Comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of DepartmentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DepartmentIdOption { get; private set; }

        /// <summary>
        /// The department identifier.  Relevant to set if the salary line should be posted with a given department dimension.  If not set, the department will inherit the department set on the employee if/when the salary line is included in a payroll.
        /// </summary>
        /// <value>The department identifier.  Relevant to set if the salary line should be posted with a given department dimension.  If not set, the department will inherit the department set on the employee if/when the salary line is included in a payroll.</value>
        /* <example>12345</example> */
        [JsonPropertyName("DepartmentId")]
        public long? DepartmentId { get { return this.DepartmentIdOption; } set { this.DepartmentIdOption = new(value); } }

        /// <summary>
        /// The identifier of the employee this salary line concerns.
        /// </summary>
        /// <value>The identifier of the employee this salary line concerns.</value>
        /* <example>12345</example> */
        [JsonPropertyName("EmployeeId")]
        public long? EmployeeId { get; set; }

        /// <summary>
        /// Used to track the state of ExternalImportReference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalImportReferenceOption { get; private set; }

        /// <summary>
        /// The external import reference.  This property can be set by integrations in order to reference the external system and ensure a duplicate check when posting the salary line to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check salary lines.
        /// </summary>
        /// <value>The external import reference.  This property can be set by integrations in order to reference the external system and ensure a duplicate check when posting the salary line to Go (only one instance of the reference can exist).  Can be used to correlate/duplicate check salary lines.</value>
        /* <example>123abc</example> */
        [JsonPropertyName("ExternalImportReference")]
        public string? ExternalImportReference { get { return this.ExternalImportReferenceOption; } set { this.ExternalImportReferenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of FromDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> FromDateOption { get; private set; }

        /// <summary>
        /// The from-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.
        /// </summary>
        /// <value>The from-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.</value>
        /* <example>Fri Jul 01 02:00:00 CEST 2022</example> */
        [JsonPropertyName("FromDate")]
        public DateTimeOffset? FromDate { get { return this.FromDateOption; } set { this.FromDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomeWorkKilometers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> HomeWorkKilometersOption { get; private set; }

        /// <summary>
        /// The number of kilometers driven between home and work.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule.
        /// </summary>
        /// <value>The number of kilometers driven between home and work.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule.</value>
        /* <example>99</example> */
        [JsonPropertyName("HomeWorkKilometers")]
        public double? HomeWorkKilometers { get { return this.HomeWorkKilometersOption; } set { this.HomeWorkKilometersOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncomeYear
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IncomeYearOption { get; private set; }

        /// <summary>
        /// The income year.  Relevant only for pay items with certain processing types, such as holiday pay.
        /// </summary>
        /// <value>The income year.  Relevant only for pay items with certain processing types, such as holiday pay.</value>
        /* <example>2023</example> */
        [JsonPropertyName("IncomeYear")]
        public int? IncomeYear { get { return this.IncomeYearOption; } set { this.IncomeYearOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsCarPool
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsCarPoolOption { get; private set; }

        /// <summary>
        /// Value indicating whether this his salary line relate to a car-pool or not.  Only relevant to set for pay items with the processing type FreeCarStandardRule or FreeCarOther.  With these two processing types, either car-pool or car registration number must be set.  Defaults to false if not set.
        /// </summary>
        /// <value>Value indicating whether this his salary line relate to a car-pool or not.  Only relevant to set for pay items with the processing type FreeCarStandardRule or FreeCarOther.  With these two processing types, either car-pool or car registration number must be set.  Defaults to false if not set.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsCarPool")]
        public bool? IsCarPool { get { return this.IsCarPoolOption; } set { this.IsCarPoolOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MaxAmountOption { get; private set; }

        /// <summary>
        /// The maximum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.
        /// </summary>
        /// <value>The maximum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.</value>
        /* <example>150</example> */
        [JsonPropertyName("MaxAmount")]
        public double? MaxAmount { get { return this.MaxAmountOption; } set { this.MaxAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of MemberNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MemberNoOption { get; private set; }

        /// <summary>
        /// The member number of the trade union or pension scheme.  Relevant only for pay items with the following processing types: TradeUnionDeduction, PensionDeduction or PensionDeductionUnlimited.
        /// </summary>
        /// <value>The member number of the trade union or pension scheme.  Relevant only for pay items with the following processing types: TradeUnionDeduction, PensionDeduction or PensionDeductionUnlimited.</value>
        /* <example>12345</example> */
        [JsonPropertyName("MemberNo")]
        public string? MemberNo { get { return this.MemberNoOption; } set { this.MemberNoOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MinAmountOption { get; private set; }

        /// <summary>
        /// The minimum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.
        /// </summary>
        /// <value>The minimum amount when calculating trade union deduction.  Relevant only for pay items with the processing type TradeUnionDeduction.</value>
        /* <example>99</example> */
        [JsonPropertyName("MinAmount")]
        public double? MinAmount { get { return this.MinAmountOption; } set { this.MinAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// The number field.  Only relevant for pay items with certain processing types that require an input of the number of times an event have occurred.  For example the number of journeys for a commuter, if the processing type is CommuterWithNumberOfJourneys.
        /// </summary>
        /// <value>The number field.  Only relevant for pay items with certain processing types that require an input of the number of times an event have occurred.  For example the number of journeys for a commuter, if the processing type is CommuterWithNumberOfJourneys.</value>
        /* <example>12</example> */
        [JsonPropertyName("Number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of OppositeAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OppositeAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the opposite account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the opposite account from the pay item will be used.  If set, any opposite account set on the pay item will be overridden for this given salary line.
        /// </summary>
        /// <value>The identifier of the opposite account this salary line should be posted on.  Sub-ledger accounts can also be referenced in this field.  If not set, the opposite account from the pay item will be used.  If set, any opposite account set on the pay item will be overridden for this given salary line.</value>
        /* <example>12345</example> */
        [JsonPropertyName("OppositeAccountId")]
        public long? OppositeAccountId { get { return this.OppositeAccountIdOption; } set { this.OppositeAccountIdOption = new(value); } }

        /// <summary>
        /// The identifier of the pay item.
        /// </summary>
        /// <value>The identifier of the pay item.</value>
        /* <example>21d4ddf1-c8bf-4874-8879-b70468fa1032</example> */
        [JsonPropertyName("PayItemId")]
        public Guid? PayItemId { get; set; }

        /// <summary>
        /// Used to track the state of PrivateDrivenKilometers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> PrivateDrivenKilometersOption { get; private set; }

        /// <summary>
        /// The number of kilometers driven with private use.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule or WorkCarKilometers.
        /// </summary>
        /// <value>The number of kilometers driven with private use.  Relevant only for pay items with the processing type FreeCarOutsideStandardRule or WorkCarKilometers.</value>
        /* <example>99</example> */
        [JsonPropertyName("PrivateDrivenKilometers")]
        public double? PrivateDrivenKilometers { get { return this.PrivateDrivenKilometersOption; } set { this.PrivateDrivenKilometersOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The project identifier.  Relevant to set if the salary line should be posted with a given project dimension.
        /// </summary>
        /// <value>The project identifier.  Relevant to set if the salary line should be posted with a given project dimension.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ProjectId")]
        public long? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quantity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> QuantityOption { get; private set; }

        /// <summary>
        /// The quantity of the salary line.  The relevance of setting quantity and the interpretation of unit depend on the pay item set.  For a pay items defined with a quantity related processing types, the quantity should be provided as the driver.
        /// </summary>
        /// <value>The quantity of the salary line.  The relevance of setting quantity and the interpretation of unit depend on the pay item set.  For a pay items defined with a quantity related processing types, the quantity should be provided as the driver.</value>
        /* <example>12.21</example> */
        [JsonPropertyName("Quantity")]
        public double? Quantity { get { return this.QuantityOption; } set { this.QuantityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Rate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> RateOption { get; private set; }

        /// <summary>
        /// The rate of the salary line.  The relevance of setting rate depend on the pay item set.  For pay items defined with a variable rate, the rate should be provided as the driver.  For pay items with fixed rates, the rate is usually set on the pay item and will be overridden if set on a salary line.  Also note that hourly wage rates are usually calculated form the employment salary, and not needed to set on salary lines as the system automatically calculates the rate on the payroll.
        /// </summary>
        /// <value>The rate of the salary line.  The relevance of setting rate depend on the pay item set.  For pay items defined with a variable rate, the rate should be provided as the driver.  For pay items with fixed rates, the rate is usually set on the pay item and will be overridden if set on a salary line.  Also note that hourly wage rates are usually calculated form the employment salary, and not needed to set on salary lines as the system automatically calculates the rate on the payroll.</value>
        /* <example>250.99</example> */
        [JsonPropertyName("Rate")]
        public double? Rate { get { return this.RateOption; } set { this.RateOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartAmount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> StartAmountOption { get; private set; }

        /// <summary>
        /// The start amount of the salary line deduction, in the client currency.  Relevant only for pay items with the following deduction processing types: DeductionWithBalance, AttachmentOfEarnings and AttachmentOfEarningsTax.  If not set on a salary line with a pay item of one of these processing types, the deduction will repeat until stopped.  If set, the deduction will run until the start amount is fully covered.
        /// </summary>
        /// <value>The start amount of the salary line deduction, in the client currency.  Relevant only for pay items with the following deduction processing types: DeductionWithBalance, AttachmentOfEarnings and AttachmentOfEarningsTax.  If not set on a salary line with a pay item of one of these processing types, the deduction will repeat until stopped.  If set, the deduction will run until the start amount is fully covered.</value>
        /* <example>99.99</example> */
        [JsonPropertyName("StartAmount")]
        public double? StartAmount { get { return this.StartAmountOption; } set { this.StartAmountOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplierAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the supplier sub-ledger account to post deductions.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.
        /// </summary>
        /// <value>The identifier of the supplier sub-ledger account to post deductions.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SupplierAccountId")]
        public long? SupplierAccountId { get { return this.SupplierAccountIdOption; } set { this.SupplierAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SupplierBankAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierBankAccountIdOption { get; private set; }

        /// <summary>
        /// The identifier of the supplier bank account.  Relevant only if UseRemittance is true, and for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.
        /// </summary>
        /// <value>The identifier of the supplier bank account.  Relevant only if UseRemittance is true, and for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.</value>
        /* <example>12345</example> */
        [JsonPropertyName("SupplierBankAccountId")]
        public long? SupplierBankAccountId { get { return this.SupplierBankAccountIdOption; } set { this.SupplierBankAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ToDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> ToDateOption { get; private set; }

        /// <summary>
        /// The to-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.
        /// </summary>
        /// <value>The to-date.  Relevant to set only for certain pay items that have deduction processing types, and if the deduction is relevant only for a certain time period.</value>
        /* <example>Sun Jul 31 02:00:00 CEST 2022</example> */
        [JsonPropertyName("ToDate")]
        public DateTimeOffset? ToDate { get { return this.ToDateOption; } set { this.ToDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseRemittance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseRemittanceOption { get; private set; }

        /// <summary>
        /// Value indicating whether to use remittance or not.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.  Defaults to false if not set.
        /// </summary>
        /// <value>Value indicating whether to use remittance or not.  Only relevant to set for pay items with the following processing types: TradeUnionDeduction and AttachmentOfEarnings.  Defaults to false if not set.</value>
        /* <example>true</example> */
        [JsonPropertyName("UseRemittance")]
        public bool? UseRemittance { get { return this.UseRemittanceOption; } set { this.UseRemittanceOption = new(value); } }

        /// <summary>
        /// Used to track the state of VatCodeId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VatCodeIdOption { get; private set; }

        /// <summary>
        /// The VAT code identifier.  Relevant to set if the salary line is set with a pay item that have a processing type related to expense refund subject of VAT.
        /// </summary>
        /// <value>The VAT code identifier.  Relevant to set if the salary line is set with a pay item that have a processing type related to expense refund subject of VAT.</value>
        /* <example>12345</example> */
        [JsonPropertyName("VatCodeId")]
        public int? VatCodeId { get { return this.VatCodeIdOption; } set { this.VatCodeIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of WorkDriveExceedsKilometerLimit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WorkDriveExceedsKilometerLimitOption { get; private set; }

        /// <summary>
        /// Value indicating whether this his salary line relate to work drive that exceeds the kilometer limit or not.  Relevant only for pay items with the processing type FreeCarStandardRule.  Default to false if not set.
        /// </summary>
        /// <value>Value indicating whether this his salary line relate to work drive that exceeds the kilometer limit or not.  Relevant only for pay items with the processing type FreeCarStandardRule.  Default to false if not set.</value>
        /* <example>true</example> */
        [JsonPropertyName("WorkDriveExceedsKilometerLimit")]
        public bool? WorkDriveExceedsKilometerLimit { get { return this.WorkDriveExceedsKilometerLimitOption; } set { this.WorkDriveExceedsKilometerLimitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SalaryLinePostDto {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CarListPrice: ").Append(CarListPrice).Append("\n");
            sb.Append("  CarRegistrationDate: ").Append(CarRegistrationDate).Append("\n");
            sb.Append("  CarRegistrationNo: ").Append(CarRegistrationNo).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommuterPersonType: ").Append(CommuterPersonType).Append("\n");
            sb.Append("  DeductionType: ").Append(DeductionType).Append("\n");
            sb.Append("  DepartmentId: ").Append(DepartmentId).Append("\n");
            sb.Append("  EmployeeId: ").Append(EmployeeId).Append("\n");
            sb.Append("  ExternalImportReference: ").Append(ExternalImportReference).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  HomeWorkKilometers: ").Append(HomeWorkKilometers).Append("\n");
            sb.Append("  IncomeYear: ").Append(IncomeYear).Append("\n");
            sb.Append("  IsCarPool: ").Append(IsCarPool).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MemberNo: ").Append(MemberNo).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OppositeAccountId: ").Append(OppositeAccountId).Append("\n");
            sb.Append("  PayItemId: ").Append(PayItemId).Append("\n");
            sb.Append("  PrivateDrivenKilometers: ").Append(PrivateDrivenKilometers).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  StartAmount: ").Append(StartAmount).Append("\n");
            sb.Append("  SupplierAccountId: ").Append(SupplierAccountId).Append("\n");
            sb.Append("  SupplierBankAccountId: ").Append(SupplierBankAccountId).Append("\n");
            sb.Append("  TaxRule: ").Append(TaxRule).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  UseRemittance: ").Append(UseRemittance).Append("\n");
            sb.Append("  VatCodeId: ").Append(VatCodeId).Append("\n");
            sb.Append("  WorkDriveExceedsKilometerLimit: ").Append(WorkDriveExceedsKilometerLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SalaryLinePostDto" />
    /// </summary>
    public class SalaryLinePostDtoJsonConverter : JsonConverter<SalaryLinePostDto>
    {
        /// <summary>
        /// The format to use to serialize CarRegistrationDate
        /// </summary>
        public static string CarRegistrationDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize FromDate
        /// </summary>
        public static string FromDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize ToDate
        /// </summary>
        public static string ToDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="SalaryLinePostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SalaryLinePostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> accountId = default;
            Option<double?> amount = default;
            Option<double?> carListPrice = default;
            Option<DateTimeOffset?> carRegistrationDate = default;
            Option<string?> carRegistrationNo = default;
            Option<string?> cid = default;
            Option<string?> comment = default;
            Option<CommuterPersonType?> commuterPersonType = default;
            Option<DeductionType?> deductionType = default;
            Option<long?> departmentId = default;
            Option<long?> employeeId = default;
            Option<string?> externalImportReference = default;
            Option<DateTimeOffset?> fromDate = default;
            Option<double?> homeWorkKilometers = default;
            Option<int?> incomeYear = default;
            Option<bool?> isCarPool = default;
            Option<double?> maxAmount = default;
            Option<string?> memberNo = default;
            Option<double?> minAmount = default;
            Option<int?> number = default;
            Option<long?> oppositeAccountId = default;
            Option<Guid?> payItemId = default;
            Option<double?> privateDrivenKilometers = default;
            Option<long?> projectId = default;
            Option<double?> quantity = default;
            Option<double?> rate = default;
            Option<double?> startAmount = default;
            Option<long?> supplierAccountId = default;
            Option<long?> supplierBankAccountId = default;
            Option<TaxRuleType?> taxRule = default;
            Option<DateTimeOffset?> toDate = default;
            Option<bool?> useRemittance = default;
            Option<int?> vatCodeId = default;
            Option<bool?> workDriveExceedsKilometerLimit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                accountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CarListPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carListPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "CarRegistrationDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                carRegistrationDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "CarRegistrationNo":
                            carRegistrationNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Cid":
                            cid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CommuterPersonType":
                            string? commuterPersonTypeRawValue = utf8JsonReader.GetString();
                            if (commuterPersonTypeRawValue != null)
                                commuterPersonType = new Option<CommuterPersonType?>(CommuterPersonTypeValueConverter.FromStringOrDefault(commuterPersonTypeRawValue));
                            break;
                        case "DeductionType":
                            string? deductionTypeRawValue = utf8JsonReader.GetString();
                            if (deductionTypeRawValue != null)
                                deductionType = new Option<DeductionType?>(DeductionTypeValueConverter.FromStringOrDefault(deductionTypeRawValue));
                            break;
                        case "DepartmentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                departmentId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "EmployeeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                employeeId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ExternalImportReference":
                            externalImportReference = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "FromDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fromDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "HomeWorkKilometers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeWorkKilometers = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "IncomeYear":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                incomeYear = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "IsCarPool":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCarPool = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "MaxAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "MemberNo":
                            memberNo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MinAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "OppositeAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oppositeAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "PayItemId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payItemId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "PrivateDrivenKilometers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                privateDrivenKilometers = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "ProjectId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "Quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "Rate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rate = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "StartAmount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startAmount = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "SupplierAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierBankAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierBankAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "TaxRule":
                            string? taxRuleRawValue = utf8JsonReader.GetString();
                            if (taxRuleRawValue != null)
                                taxRule = new Option<TaxRuleType?>(TaxRuleTypeValueConverter.FromStringOrDefault(taxRuleRawValue));
                            break;
                        case "ToDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                toDate = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "UseRemittance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useRemittance = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "VatCodeId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                vatCodeId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "WorkDriveExceedsKilometerLimit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                workDriveExceedsKilometerLimit = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!employeeId.IsSet)
                throw new ArgumentException("Property is required for class SalaryLinePostDto.", nameof(employeeId));

            if (!payItemId.IsSet)
                throw new ArgumentException("Property is required for class SalaryLinePostDto.", nameof(payItemId));

            return new SalaryLinePostDto(accountId, amount, carListPrice, carRegistrationDate, carRegistrationNo, cid, comment, commuterPersonType, deductionType, departmentId, employeeId.Value!, externalImportReference, fromDate, homeWorkKilometers, incomeYear, isCarPool, maxAmount, memberNo, minAmount, number, oppositeAccountId, payItemId.Value!, privateDrivenKilometers, projectId, quantity, rate, startAmount, supplierAccountId, supplierBankAccountId, taxRule, toDate, useRemittance, vatCodeId, workDriveExceedsKilometerLimit);
        }

        /// <summary>
        /// Serializes a <see cref="SalaryLinePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salaryLinePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SalaryLinePostDto salaryLinePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, salaryLinePostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SalaryLinePostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="salaryLinePostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SalaryLinePostDto salaryLinePostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (salaryLinePostDto.AccountIdOption.IsSet)
                if (salaryLinePostDto.AccountIdOption.Value != null)
                    writer.WriteNumber("AccountId", salaryLinePostDto.AccountIdOption.Value!.Value);
                else
                    writer.WriteNull("AccountId");

            if (salaryLinePostDto.AmountOption.IsSet)
                if (salaryLinePostDto.AmountOption.Value != null)
                    writer.WriteNumber("Amount", salaryLinePostDto.AmountOption.Value!.Value);
                else
                    writer.WriteNull("Amount");

            if (salaryLinePostDto.CarListPriceOption.IsSet)
                if (salaryLinePostDto.CarListPriceOption.Value != null)
                    writer.WriteNumber("CarListPrice", salaryLinePostDto.CarListPriceOption.Value!.Value);
                else
                    writer.WriteNull("CarListPrice");

            if (salaryLinePostDto.CarRegistrationDateOption.IsSet)
                if (salaryLinePostDto.CarRegistrationDateOption.Value != null)
                    writer.WriteString("CarRegistrationDate", salaryLinePostDto.CarRegistrationDateOption.Value!.Value.ToString(CarRegistrationDateFormat));
                else
                    writer.WriteNull("CarRegistrationDate");

            if (salaryLinePostDto.CarRegistrationNoOption.IsSet)
                if (salaryLinePostDto.CarRegistrationNoOption.Value != null)
                    writer.WriteString("CarRegistrationNo", salaryLinePostDto.CarRegistrationNo);
                else
                    writer.WriteNull("CarRegistrationNo");

            if (salaryLinePostDto.CidOption.IsSet)
                if (salaryLinePostDto.CidOption.Value != null)
                    writer.WriteString("Cid", salaryLinePostDto.Cid);
                else
                    writer.WriteNull("Cid");

            if (salaryLinePostDto.CommentOption.IsSet)
                if (salaryLinePostDto.CommentOption.Value != null)
                    writer.WriteString("Comment", salaryLinePostDto.Comment);
                else
                    writer.WriteNull("Comment");

            if (salaryLinePostDto.CommuterPersonTypeOption.IsSet)
                if (salaryLinePostDto.CommuterPersonTypeOption!.Value != null)
                {
                    var commuterPersonTypeRawValue = CommuterPersonTypeValueConverter.ToJsonValue(salaryLinePostDto.CommuterPersonTypeOption.Value!.Value);
                    writer.WriteString("CommuterPersonType", commuterPersonTypeRawValue);
                }
                else
                    writer.WriteNull("CommuterPersonType");
            if (salaryLinePostDto.DeductionTypeOption.IsSet)
                if (salaryLinePostDto.DeductionTypeOption!.Value != null)
                {
                    var deductionTypeRawValue = DeductionTypeValueConverter.ToJsonValue(salaryLinePostDto.DeductionTypeOption.Value!.Value);
                    writer.WriteString("DeductionType", deductionTypeRawValue);
                }
                else
                    writer.WriteNull("DeductionType");
            if (salaryLinePostDto.DepartmentIdOption.IsSet)
                if (salaryLinePostDto.DepartmentIdOption.Value != null)
                    writer.WriteNumber("DepartmentId", salaryLinePostDto.DepartmentIdOption.Value!.Value);
                else
                    writer.WriteNull("DepartmentId");

            if (salaryLinePostDto.EmployeeId != null)
                writer.WriteNumber("EmployeeId", salaryLinePostDto.EmployeeId.Value);
            else
                writer.WriteNull("EmployeeId");

            if (salaryLinePostDto.ExternalImportReferenceOption.IsSet)
                if (salaryLinePostDto.ExternalImportReferenceOption.Value != null)
                    writer.WriteString("ExternalImportReference", salaryLinePostDto.ExternalImportReference);
                else
                    writer.WriteNull("ExternalImportReference");

            if (salaryLinePostDto.FromDateOption.IsSet)
                if (salaryLinePostDto.FromDateOption.Value != null)
                    writer.WriteString("FromDate", salaryLinePostDto.FromDateOption.Value!.Value.ToString(FromDateFormat));
                else
                    writer.WriteNull("FromDate");

            if (salaryLinePostDto.HomeWorkKilometersOption.IsSet)
                if (salaryLinePostDto.HomeWorkKilometersOption.Value != null)
                    writer.WriteNumber("HomeWorkKilometers", salaryLinePostDto.HomeWorkKilometersOption.Value!.Value);
                else
                    writer.WriteNull("HomeWorkKilometers");

            if (salaryLinePostDto.IncomeYearOption.IsSet)
                if (salaryLinePostDto.IncomeYearOption.Value != null)
                    writer.WriteNumber("IncomeYear", salaryLinePostDto.IncomeYearOption.Value!.Value);
                else
                    writer.WriteNull("IncomeYear");

            if (salaryLinePostDto.IsCarPoolOption.IsSet)
                if (salaryLinePostDto.IsCarPoolOption.Value != null)
                    writer.WriteBoolean("IsCarPool", salaryLinePostDto.IsCarPoolOption.Value!.Value);
                else
                    writer.WriteNull("IsCarPool");

            if (salaryLinePostDto.MaxAmountOption.IsSet)
                if (salaryLinePostDto.MaxAmountOption.Value != null)
                    writer.WriteNumber("MaxAmount", salaryLinePostDto.MaxAmountOption.Value!.Value);
                else
                    writer.WriteNull("MaxAmount");

            if (salaryLinePostDto.MemberNoOption.IsSet)
                if (salaryLinePostDto.MemberNoOption.Value != null)
                    writer.WriteString("MemberNo", salaryLinePostDto.MemberNo);
                else
                    writer.WriteNull("MemberNo");

            if (salaryLinePostDto.MinAmountOption.IsSet)
                if (salaryLinePostDto.MinAmountOption.Value != null)
                    writer.WriteNumber("MinAmount", salaryLinePostDto.MinAmountOption.Value!.Value);
                else
                    writer.WriteNull("MinAmount");

            if (salaryLinePostDto.NumberOption.IsSet)
                if (salaryLinePostDto.NumberOption.Value != null)
                    writer.WriteNumber("Number", salaryLinePostDto.NumberOption.Value!.Value);
                else
                    writer.WriteNull("Number");

            if (salaryLinePostDto.OppositeAccountIdOption.IsSet)
                if (salaryLinePostDto.OppositeAccountIdOption.Value != null)
                    writer.WriteNumber("OppositeAccountId", salaryLinePostDto.OppositeAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OppositeAccountId");

            if (salaryLinePostDto.PayItemId != null)
                writer.WriteString("PayItemId", salaryLinePostDto.PayItemId.Value);
            else
                writer.WriteNull("PayItemId");

            if (salaryLinePostDto.PrivateDrivenKilometersOption.IsSet)
                if (salaryLinePostDto.PrivateDrivenKilometersOption.Value != null)
                    writer.WriteNumber("PrivateDrivenKilometers", salaryLinePostDto.PrivateDrivenKilometersOption.Value!.Value);
                else
                    writer.WriteNull("PrivateDrivenKilometers");

            if (salaryLinePostDto.ProjectIdOption.IsSet)
                if (salaryLinePostDto.ProjectIdOption.Value != null)
                    writer.WriteNumber("ProjectId", salaryLinePostDto.ProjectIdOption.Value!.Value);
                else
                    writer.WriteNull("ProjectId");

            if (salaryLinePostDto.QuantityOption.IsSet)
                if (salaryLinePostDto.QuantityOption.Value != null)
                    writer.WriteNumber("Quantity", salaryLinePostDto.QuantityOption.Value!.Value);
                else
                    writer.WriteNull("Quantity");

            if (salaryLinePostDto.RateOption.IsSet)
                if (salaryLinePostDto.RateOption.Value != null)
                    writer.WriteNumber("Rate", salaryLinePostDto.RateOption.Value!.Value);
                else
                    writer.WriteNull("Rate");

            if (salaryLinePostDto.StartAmountOption.IsSet)
                if (salaryLinePostDto.StartAmountOption.Value != null)
                    writer.WriteNumber("StartAmount", salaryLinePostDto.StartAmountOption.Value!.Value);
                else
                    writer.WriteNull("StartAmount");

            if (salaryLinePostDto.SupplierAccountIdOption.IsSet)
                if (salaryLinePostDto.SupplierAccountIdOption.Value != null)
                    writer.WriteNumber("SupplierAccountId", salaryLinePostDto.SupplierAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierAccountId");

            if (salaryLinePostDto.SupplierBankAccountIdOption.IsSet)
                if (salaryLinePostDto.SupplierBankAccountIdOption.Value != null)
                    writer.WriteNumber("SupplierBankAccountId", salaryLinePostDto.SupplierBankAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierBankAccountId");

            if (salaryLinePostDto.TaxRuleOption.IsSet)
                if (salaryLinePostDto.TaxRuleOption!.Value != null)
                {
                    var taxRuleRawValue = TaxRuleTypeValueConverter.ToJsonValue(salaryLinePostDto.TaxRuleOption.Value!.Value);
                    writer.WriteString("TaxRule", taxRuleRawValue);
                }
                else
                    writer.WriteNull("TaxRule");
            if (salaryLinePostDto.ToDateOption.IsSet)
                if (salaryLinePostDto.ToDateOption.Value != null)
                    writer.WriteString("ToDate", salaryLinePostDto.ToDateOption.Value!.Value.ToString(ToDateFormat));
                else
                    writer.WriteNull("ToDate");

            if (salaryLinePostDto.UseRemittanceOption.IsSet)
                if (salaryLinePostDto.UseRemittanceOption.Value != null)
                    writer.WriteBoolean("UseRemittance", salaryLinePostDto.UseRemittanceOption.Value!.Value);
                else
                    writer.WriteNull("UseRemittance");

            if (salaryLinePostDto.VatCodeIdOption.IsSet)
                if (salaryLinePostDto.VatCodeIdOption.Value != null)
                    writer.WriteNumber("VatCodeId", salaryLinePostDto.VatCodeIdOption.Value!.Value);
                else
                    writer.WriteNull("VatCodeId");

            if (salaryLinePostDto.WorkDriveExceedsKilometerLimitOption.IsSet)
                if (salaryLinePostDto.WorkDriveExceedsKilometerLimitOption.Value != null)
                    writer.WriteBoolean("WorkDriveExceedsKilometerLimit", salaryLinePostDto.WorkDriveExceedsKilometerLimitOption.Value!.Value);
                else
                    writer.WriteNull("WorkDriveExceedsKilometerLimit");
        }
    }
}
