// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The product post DTO contains only properties relevant to a product-object in Go that can be altered directly via POST-method in API.
    /// </summary>
    public partial class ProductPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPostDto" /> class.
        /// </summary>
        /// <param name="code">The code of the product.</param>
        /// <param name="description">The description of the product.</param>
        /// <param name="gtin">The GTIN (Global trade item number) of the product.</param>
        /// <param name="isArchived">Value indicating whether the product is archived (set inactive).  Default is false.  Archived products will be unavailable for usage in the GUI.</param>
        /// <param name="isStockItem">Value indicating whether the product stock on hand can be registered.  If false, the stock on hand cannot be set and the stock fields will not be visible in the GUI.</param>
        /// <param name="name">The name of the product.</param>
        /// <param name="optionalSalesAccount">The code of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.</param>
        /// <param name="optionalSalesAccountAgricultureDepartment">optionalSalesAccountAgricultureDepartment</param>
        /// <param name="optionalSalesAccountId">The id of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.</param>
        /// <param name="productGroupCode">The code of the product group this product belong to.  If not provided, the product will be placed in the default product group.  Note that if ProductGroupId is set as well in the request, ProductGroupId takes precedence and ProductGroupCode is ignored.</param>
        /// <param name="productGroupId">The id of the product group this product belong to.  If not provided, the product will be placed in the default product group.</param>
        /// <param name="productType">productType</param>
        /// <param name="standardSalesAccount">The code of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.</param>
        /// <param name="standardSalesAccountAgricultureDepartment">standardSalesAccountAgricultureDepartment</param>
        /// <param name="standardSalesAccountId">The id of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.</param>
        /// <param name="stockOnHand">The number of products in stock.  Might differ from the available stock if confirmed sales orders exists, thus reserving a portion of the stock.</param>
        /// <param name="unitCost">The cost per unit of the product.  If null, the product will inherit the unit cost from the product group.</param>
        /// <param name="unitOfMeasureCode">unitOfMeasureCode</param>
        /// <param name="unitPrice">The sales price per unit of the product.  If null, the product will inherit the unit price from the product group.</param>
        [JsonConstructor]
        public ProductPostDto(Option<string?> code = default, Option<string?> description = default, Option<string?> gtin = default, Option<bool?> isArchived = default, Option<bool?> isStockItem = default, string? name = default, Option<long?> optionalSalesAccount = default, Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default, Option<long?> optionalSalesAccountId = default, Option<string?> productGroupCode = default, Option<long?> productGroupId = default, Option<ProductType?> productType = default, Option<long?> standardSalesAccount = default, Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default, Option<long?> standardSalesAccountId = default, Option<double?> stockOnHand = default, Option<double?> unitCost = default, Option<UnitOfMeasureType?> unitOfMeasureCode = default, Option<double?> unitPrice = default)
        {
            CodeOption = code;
            DescriptionOption = description;
            GtinOption = gtin;
            IsArchivedOption = isArchived;
            IsStockItemOption = isStockItem;
            Name = name;
            OptionalSalesAccountOption = optionalSalesAccount;
            OptionalSalesAccountAgricultureDepartmentOption = optionalSalesAccountAgricultureDepartment;
            OptionalSalesAccountIdOption = optionalSalesAccountId;
            ProductGroupCodeOption = productGroupCode;
            ProductGroupIdOption = productGroupId;
            ProductTypeOption = productType;
            StandardSalesAccountOption = standardSalesAccount;
            StandardSalesAccountAgricultureDepartmentOption = standardSalesAccountAgricultureDepartment;
            StandardSalesAccountIdOption = standardSalesAccountId;
            StockOnHandOption = stockOnHand;
            UnitCostOption = unitCost;
            UnitOfMeasureCodeOption = unitOfMeasureCode;
            UnitPriceOption = unitPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> OptionalSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets OptionalSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("OptionalSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? OptionalSalesAccountAgricultureDepartment { get { return this.OptionalSalesAccountAgricultureDepartmentOption; } set { this.OptionalSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProductType?> ProductTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [JsonPropertyName("ProductType")]
        public ProductType? ProductType { get { return this.ProductTypeOption; } set { this.ProductTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AgricultureDepartment?> StandardSalesAccountAgricultureDepartmentOption { get; private set; }

        /// <summary>
        /// Gets or Sets StandardSalesAccountAgricultureDepartment
        /// </summary>
        [JsonPropertyName("StandardSalesAccountAgricultureDepartment")]
        public AgricultureDepartment? StandardSalesAccountAgricultureDepartment { get { return this.StandardSalesAccountAgricultureDepartmentOption; } set { this.StandardSalesAccountAgricultureDepartmentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitOfMeasureCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnitOfMeasureType?> UnitOfMeasureCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasureCode
        /// </summary>
        [JsonPropertyName("UnitOfMeasureCode")]
        public UnitOfMeasureType? UnitOfMeasureCode { get { return this.UnitOfMeasureCodeOption; } set { this.UnitOfMeasureCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// The code of the product.
        /// </summary>
        /// <value>The code of the product.</value>
        /* <example>BA-12</example> */
        [JsonPropertyName("Code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the product.
        /// </summary>
        /// <value>The description of the product.</value>
        /* <example>Bottomless box of mysteries</example> */
        [JsonPropertyName("Description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gtin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GtinOption { get; private set; }

        /// <summary>
        /// The GTIN (Global trade item number) of the product.
        /// </summary>
        /// <value>The GTIN (Global trade item number) of the product.</value>
        /* <example>00012345678905</example> */
        [JsonPropertyName("Gtin")]
        public string? Gtin { get { return this.GtinOption; } set { this.GtinOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsArchived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsArchivedOption { get; private set; }

        /// <summary>
        /// Value indicating whether the product is archived (set inactive).  Default is false.  Archived products will be unavailable for usage in the GUI.
        /// </summary>
        /// <value>Value indicating whether the product is archived (set inactive).  Default is false.  Archived products will be unavailable for usage in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsArchived")]
        public bool? IsArchived { get { return this.IsArchivedOption; } set { this.IsArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsStockItem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsStockItemOption { get; private set; }

        /// <summary>
        /// Value indicating whether the product stock on hand can be registered.  If false, the stock on hand cannot be set and the stock fields will not be visible in the GUI.
        /// </summary>
        /// <value>Value indicating whether the product stock on hand can be registered.  If false, the stock on hand cannot be set and the stock fields will not be visible in the GUI.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsStockItem")]
        public bool? IsStockItem { get { return this.IsStockItemOption; } set { this.IsStockItemOption = new(value); } }

        /// <summary>
        /// The name of the product.
        /// </summary>
        /// <value>The name of the product.</value>
        /* <example>Big blue box</example> */
        [JsonPropertyName("Name")]
        public string? Name { get; set; }

        /// <summary>
        /// Used to track the state of OptionalSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountOption { get; private set; }

        /// <summary>
        /// The code of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.
        /// </summary>
        /// <value>The code of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if OptionalSalesAccountId is set as well in the request, OptionalSalesAccountId takes precedence and OptionalSalesAccount is ignored.</value>
        /* <example>3100</example> */
        [JsonPropertyName("OptionalSalesAccount")]
        public long? OptionalSalesAccount { get { return this.OptionalSalesAccountOption; } set { this.OptionalSalesAccountOption = new(value); } }

        /// <summary>
        /// Used to track the state of OptionalSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OptionalSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.
        /// </summary>
        /// <value>The id of the optional sales account of the product.  The optional sales account is the account the sale will be posted to, if the product is included on a sales order line that is invoiced, and that sales order line is set to trigger the use of the optional sales account.  If null, the product will inherit the optional sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.</value>
        /* <example>123456</example> */
        [JsonPropertyName("OptionalSalesAccountId")]
        public long? OptionalSalesAccountId { get { return this.OptionalSalesAccountIdOption; } set { this.OptionalSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductGroupCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProductGroupCodeOption { get; private set; }

        /// <summary>
        /// The code of the product group this product belong to.  If not provided, the product will be placed in the default product group.  Note that if ProductGroupId is set as well in the request, ProductGroupId takes precedence and ProductGroupCode is ignored.
        /// </summary>
        /// <value>The code of the product group this product belong to.  If not provided, the product will be placed in the default product group.  Note that if ProductGroupId is set as well in the request, ProductGroupId takes precedence and ProductGroupCode is ignored.</value>
        /* <example>PG123</example> */
        [JsonPropertyName("ProductGroupCode")]
        public string? ProductGroupCode { get { return this.ProductGroupCodeOption; } set { this.ProductGroupCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProductGroupId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ProductGroupIdOption { get; private set; }

        /// <summary>
        /// The id of the product group this product belong to.  If not provided, the product will be placed in the default product group.
        /// </summary>
        /// <value>The id of the product group this product belong to.  If not provided, the product will be placed in the default product group.</value>
        /* <example>123456</example> */
        [JsonPropertyName("ProductGroupId")]
        public long? ProductGroupId { get { return this.ProductGroupIdOption; } set { this.ProductGroupIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountOption { get; private set; }

        /// <summary>
        /// The code of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.
        /// </summary>
        /// <value>The code of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.  Note that if StandardSalesAccountId is set as well in the request, StandardSalesAccountId takes precedence and StandardSalesAccount is ignored.</value>
        /* <example>3000</example> */
        [JsonPropertyName("StandardSalesAccount")]
        public long? StandardSalesAccount { get { return this.StandardSalesAccountOption; } set { this.StandardSalesAccountOption = new(value); } }

        /// <summary>
        /// Used to track the state of StandardSalesAccountId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StandardSalesAccountIdOption { get; private set; }

        /// <summary>
        /// The id of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.
        /// </summary>
        /// <value>The id of the standard sales account of the product.  The standard sales account is the default account the sale will be posted to if the product is included on a sales order line that is invoiced.  If null, the product will inherit the standard sales account from the product group or the general sales settings on the client (in that order).  The concept of sales accounts is also explained in the common workflow articles.</value>
        /* <example>123456</example> */
        [JsonPropertyName("StandardSalesAccountId")]
        public long? StandardSalesAccountId { get { return this.StandardSalesAccountIdOption; } set { this.StandardSalesAccountIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StockOnHand
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> StockOnHandOption { get; private set; }

        /// <summary>
        /// The number of products in stock.  Might differ from the available stock if confirmed sales orders exists, thus reserving a portion of the stock.
        /// </summary>
        /// <value>The number of products in stock.  Might differ from the available stock if confirmed sales orders exists, thus reserving a portion of the stock.</value>
        /* <example>12</example> */
        [JsonPropertyName("StockOnHand")]
        public double? StockOnHand { get { return this.StockOnHandOption; } set { this.StockOnHandOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitCost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitCostOption { get; private set; }

        /// <summary>
        /// The cost per unit of the product.  If null, the product will inherit the unit cost from the product group.
        /// </summary>
        /// <value>The cost per unit of the product.  If null, the product will inherit the unit cost from the product group.</value>
        /* <example>200.57</example> */
        [JsonPropertyName("UnitCost")]
        public double? UnitCost { get { return this.UnitCostOption; } set { this.UnitCostOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> UnitPriceOption { get; private set; }

        /// <summary>
        /// The sales price per unit of the product.  If null, the product will inherit the unit price from the product group.
        /// </summary>
        /// <value>The sales price per unit of the product.  If null, the product will inherit the unit price from the product group.</value>
        /* <example>100.5</example> */
        [JsonPropertyName("UnitPrice")]
        public double? UnitPrice { get { return this.UnitPriceOption; } set { this.UnitPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductPostDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  IsArchived: ").Append(IsArchived).Append("\n");
            sb.Append("  IsStockItem: ").Append(IsStockItem).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OptionalSalesAccount: ").Append(OptionalSalesAccount).Append("\n");
            sb.Append("  OptionalSalesAccountAgricultureDepartment: ").Append(OptionalSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  OptionalSalesAccountId: ").Append(OptionalSalesAccountId).Append("\n");
            sb.Append("  ProductGroupCode: ").Append(ProductGroupCode).Append("\n");
            sb.Append("  ProductGroupId: ").Append(ProductGroupId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  StandardSalesAccount: ").Append(StandardSalesAccount).Append("\n");
            sb.Append("  StandardSalesAccountAgricultureDepartment: ").Append(StandardSalesAccountAgricultureDepartment).Append("\n");
            sb.Append("  StandardSalesAccountId: ").Append(StandardSalesAccountId).Append("\n");
            sb.Append("  StockOnHand: ").Append(StockOnHand).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitOfMeasureCode: ").Append(UnitOfMeasureCode).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Code, length must be less than 100.", new [] { "Code" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 400)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 400.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProductPostDto" />
    /// </summary>
    public class ProductPostDtoJsonConverter : JsonConverter<ProductPostDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProductPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProductPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> code = default;
            Option<string?> description = default;
            Option<string?> gtin = default;
            Option<bool?> isArchived = default;
            Option<bool?> isStockItem = default;
            Option<string?> name = default;
            Option<long?> optionalSalesAccount = default;
            Option<AgricultureDepartment?> optionalSalesAccountAgricultureDepartment = default;
            Option<long?> optionalSalesAccountId = default;
            Option<string?> productGroupCode = default;
            Option<long?> productGroupId = default;
            Option<ProductType?> productType = default;
            Option<long?> standardSalesAccount = default;
            Option<AgricultureDepartment?> standardSalesAccountAgricultureDepartment = default;
            Option<long?> standardSalesAccountId = default;
            Option<double?> stockOnHand = default;
            Option<double?> unitCost = default;
            Option<UnitOfMeasureType?> unitOfMeasureCode = default;
            Option<double?> unitPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Gtin":
                            gtin = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "IsArchived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isArchived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "IsStockItem":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isStockItem = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "Name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OptionalSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "OptionalSalesAccountAgricultureDepartment":
                            string? optionalSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (optionalSalesAccountAgricultureDepartmentRawValue != null)
                                optionalSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(optionalSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "OptionalSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optionalSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductGroupCode":
                            productGroupCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ProductGroupId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                productGroupId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ProductType":
                            string? productTypeRawValue = utf8JsonReader.GetString();
                            if (productTypeRawValue != null)
                                productType = new Option<ProductType?>(ProductTypeValueConverter.FromStringOrDefault(productTypeRawValue));
                            break;
                        case "StandardSalesAccount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StandardSalesAccountAgricultureDepartment":
                            string? standardSalesAccountAgricultureDepartmentRawValue = utf8JsonReader.GetString();
                            if (standardSalesAccountAgricultureDepartmentRawValue != null)
                                standardSalesAccountAgricultureDepartment = new Option<AgricultureDepartment?>(AgricultureDepartmentValueConverter.FromStringOrDefault(standardSalesAccountAgricultureDepartmentRawValue));
                            break;
                        case "StandardSalesAccountId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                standardSalesAccountId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "StockOnHand":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stockOnHand = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitCost":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitCost = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "UnitOfMeasureCode":
                            string? unitOfMeasureCodeRawValue = utf8JsonReader.GetString();
                            if (unitOfMeasureCodeRawValue != null)
                                unitOfMeasureCode = new Option<UnitOfMeasureType?>(UnitOfMeasureTypeValueConverter.FromStringOrDefault(unitOfMeasureCodeRawValue));
                            break;
                        case "UnitPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unitPrice = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ProductPostDto.", nameof(name));

            return new ProductPostDto(code, description, gtin, isArchived, isStockItem, name.Value!, optionalSalesAccount, optionalSalesAccountAgricultureDepartment, optionalSalesAccountId, productGroupCode, productGroupId, productType, standardSalesAccount, standardSalesAccountAgricultureDepartment, standardSalesAccountId, stockOnHand, unitCost, unitOfMeasureCode, unitPrice);
        }

        /// <summary>
        /// Serializes a <see cref="ProductPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProductPostDto productPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, productPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProductPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="productPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProductPostDto productPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (productPostDto.CodeOption.IsSet)
                if (productPostDto.CodeOption.Value != null)
                    writer.WriteString("Code", productPostDto.Code);
                else
                    writer.WriteNull("Code");

            if (productPostDto.DescriptionOption.IsSet)
                if (productPostDto.DescriptionOption.Value != null)
                    writer.WriteString("Description", productPostDto.Description);
                else
                    writer.WriteNull("Description");

            if (productPostDto.GtinOption.IsSet)
                if (productPostDto.GtinOption.Value != null)
                    writer.WriteString("Gtin", productPostDto.Gtin);
                else
                    writer.WriteNull("Gtin");

            if (productPostDto.IsArchivedOption.IsSet)
                if (productPostDto.IsArchivedOption.Value != null)
                    writer.WriteBoolean("IsArchived", productPostDto.IsArchivedOption.Value!.Value);
                else
                    writer.WriteNull("IsArchived");

            if (productPostDto.IsStockItemOption.IsSet)
                if (productPostDto.IsStockItemOption.Value != null)
                    writer.WriteBoolean("IsStockItem", productPostDto.IsStockItemOption.Value!.Value);
                else
                    writer.WriteNull("IsStockItem");

            if (productPostDto.Name != null)
                writer.WriteString("Name", productPostDto.Name);
            else
                writer.WriteNull("Name");

            if (productPostDto.OptionalSalesAccountOption.IsSet)
                if (productPostDto.OptionalSalesAccountOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccount", productPostDto.OptionalSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccount");

            if (productPostDto.OptionalSalesAccountAgricultureDepartmentOption.IsSet)
                if (productPostDto.OptionalSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var optionalSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productPostDto.OptionalSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("OptionalSalesAccountAgricultureDepartment", optionalSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("OptionalSalesAccountAgricultureDepartment");
            if (productPostDto.OptionalSalesAccountIdOption.IsSet)
                if (productPostDto.OptionalSalesAccountIdOption.Value != null)
                    writer.WriteNumber("OptionalSalesAccountId", productPostDto.OptionalSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("OptionalSalesAccountId");

            if (productPostDto.ProductGroupCodeOption.IsSet)
                if (productPostDto.ProductGroupCodeOption.Value != null)
                    writer.WriteString("ProductGroupCode", productPostDto.ProductGroupCode);
                else
                    writer.WriteNull("ProductGroupCode");

            if (productPostDto.ProductGroupIdOption.IsSet)
                if (productPostDto.ProductGroupIdOption.Value != null)
                    writer.WriteNumber("ProductGroupId", productPostDto.ProductGroupIdOption.Value!.Value);
                else
                    writer.WriteNull("ProductGroupId");

            if (productPostDto.ProductTypeOption.IsSet)
                if (productPostDto.ProductTypeOption!.Value != null)
                {
                    var productTypeRawValue = ProductTypeValueConverter.ToJsonValue(productPostDto.ProductTypeOption.Value!.Value);
                    writer.WriteString("ProductType", productTypeRawValue);
                }
                else
                    writer.WriteNull("ProductType");
            if (productPostDto.StandardSalesAccountOption.IsSet)
                if (productPostDto.StandardSalesAccountOption.Value != null)
                    writer.WriteNumber("StandardSalesAccount", productPostDto.StandardSalesAccountOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccount");

            if (productPostDto.StandardSalesAccountAgricultureDepartmentOption.IsSet)
                if (productPostDto.StandardSalesAccountAgricultureDepartmentOption!.Value != null)
                {
                    var standardSalesAccountAgricultureDepartmentRawValue = AgricultureDepartmentValueConverter.ToJsonValue(productPostDto.StandardSalesAccountAgricultureDepartmentOption.Value!.Value);
                    writer.WriteString("StandardSalesAccountAgricultureDepartment", standardSalesAccountAgricultureDepartmentRawValue);
                }
                else
                    writer.WriteNull("StandardSalesAccountAgricultureDepartment");
            if (productPostDto.StandardSalesAccountIdOption.IsSet)
                if (productPostDto.StandardSalesAccountIdOption.Value != null)
                    writer.WriteNumber("StandardSalesAccountId", productPostDto.StandardSalesAccountIdOption.Value!.Value);
                else
                    writer.WriteNull("StandardSalesAccountId");

            if (productPostDto.StockOnHandOption.IsSet)
                if (productPostDto.StockOnHandOption.Value != null)
                    writer.WriteNumber("StockOnHand", productPostDto.StockOnHandOption.Value!.Value);
                else
                    writer.WriteNull("StockOnHand");

            if (productPostDto.UnitCostOption.IsSet)
                if (productPostDto.UnitCostOption.Value != null)
                    writer.WriteNumber("UnitCost", productPostDto.UnitCostOption.Value!.Value);
                else
                    writer.WriteNull("UnitCost");

            if (productPostDto.UnitOfMeasureCodeOption.IsSet)
                if (productPostDto.UnitOfMeasureCodeOption!.Value != null)
                {
                    var unitOfMeasureCodeRawValue = UnitOfMeasureTypeValueConverter.ToJsonValue(productPostDto.UnitOfMeasureCodeOption.Value!.Value);
                    writer.WriteString("UnitOfMeasureCode", unitOfMeasureCodeRawValue);
                }
                else
                    writer.WriteNull("UnitOfMeasureCode");
            if (productPostDto.UnitPriceOption.IsSet)
                if (productPostDto.UnitPriceOption.Value != null)
                    writer.WriteNumber("UnitPrice", productPostDto.UnitPriceOption.Value!.Value);
                else
                    writer.WriteNull("UnitPrice");
        }
    }
}
