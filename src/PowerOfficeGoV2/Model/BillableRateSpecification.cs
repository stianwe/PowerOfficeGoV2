// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Specifies how to retrieve the hourly rate when billing.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Activity&lt;/i&gt; - The hourly rate is retrieved from the TimeTracking.Activity.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Employee&lt;/i&gt; - The hourly rate is retrieved from the Party.Employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Project&lt;/i&gt; - The hourly rate is retrieved from the Projects.Project.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Specifies how to retrieve the hourly rate when billing.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Activity&lt;/i&gt; - The hourly rate is retrieved from the TimeTracking.Activity.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Employee&lt;/i&gt; - The hourly rate is retrieved from the Party.Employee.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Project&lt;/i&gt; - The hourly rate is retrieved from the Projects.Project.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum BillableRateSpecification
    {
        /// <summary>
        /// Enum Activity for value: Activity
        /// </summary>
        Activity = 1,

        /// <summary>
        /// Enum Employee for value: Employee
        /// </summary>
        Employee = 2,

        /// <summary>
        /// Enum Project for value: Project
        /// </summary>
        Project = 3
    }

    /// <summary>
    /// Converts <see cref="BillableRateSpecification"/> to and from the JSON value
    /// </summary>
    public static class BillableRateSpecificationValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BillableRateSpecification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BillableRateSpecification FromString(string value)
        {
            if (value.Equals("Activity"))
                return BillableRateSpecification.Activity;

            if (value.Equals("Employee"))
                return BillableRateSpecification.Employee;

            if (value.Equals("Project"))
                return BillableRateSpecification.Project;

            throw new NotImplementedException($"Could not convert value to type BillableRateSpecification: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BillableRateSpecification"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BillableRateSpecification? FromStringOrDefault(string value)
        {
            if (value.Equals("Activity"))
                return BillableRateSpecification.Activity;

            if (value.Equals("Employee"))
                return BillableRateSpecification.Employee;

            if (value.Equals("Project"))
                return BillableRateSpecification.Project;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BillableRateSpecification"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BillableRateSpecification value)
        {
            if (value == BillableRateSpecification.Activity)
                return "Activity";

            if (value == BillableRateSpecification.Employee)
                return "Employee";

            if (value == BillableRateSpecification.Project)
                return "Project";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillableRateSpecification"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BillableRateSpecificationJsonConverter : JsonConverter<BillableRateSpecification>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BillableRateSpecification Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BillableRateSpecification? result = rawValue == null
                ? null
                : BillableRateSpecificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BillableRateSpecification to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billableRateSpecification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BillableRateSpecification billableRateSpecification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(billableRateSpecification.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BillableRateSpecification"/>
    /// </summary>
    public class BillableRateSpecificationNullableJsonConverter : JsonConverter<BillableRateSpecification?>
    {
        /// <summary>
        /// Returns a BillableRateSpecification from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BillableRateSpecification? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BillableRateSpecification? result = rawValue == null
                ? null
                : BillableRateSpecificationValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="billableRateSpecification"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BillableRateSpecification? billableRateSpecification, JsonSerializerOptions options)
        {
            writer.WriteStringValue(billableRateSpecification?.ToString() ?? "null");
        }
    }
}
