// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Properties of a contact delivery address.
    /// </summary>
    public partial class ContactDeliveryAddressDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDeliveryAddressDto" /> class.
        /// </summary>
        /// <param name="addressLine1">The first (main) address line.</param>
        /// <param name="addressLine2">The second address line.</param>
        /// <param name="city">The city.</param>
        /// <param name="contactId">The identifier of the contact (customer, employee or supplier) this delivery address is assigned to.  Cannot be set directly, but is set based on the contact argument in the request URL.</param>
        /// <param name="countryCode">The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.</param>
        /// <param name="createdDateTimeOffset">The timestamp of when this address was created.</param>
        /// <param name="externalCode">The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).</param>
        /// <param name="id">The identifier of the address.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).</param>
        /// <param name="isPrimary">A value indicating whether this delivery address is the primary delivery address for this contact.  Sales orders created, will default inherit the primary delivery address of the customer, if not overridden.  The first delivery address created for a contact will automatically be set as primary.</param>
        /// <param name="lastChangedDateTimeOffset">The last changed timestamp of this address.</param>
        /// <param name="zipCode">The zip code (postal code).</param>
        [JsonConstructor]
        public ContactDeliveryAddressDto(Option<string?> addressLine1 = default, Option<string?> addressLine2 = default, Option<string?> city = default, Option<long?> contactId = default, Option<string?> countryCode = default, Option<DateTimeOffset?> createdDateTimeOffset = default, Option<string?> externalCode = default, Option<long?> id = default, Option<bool?> isPrimary = default, Option<DateTimeOffset?> lastChangedDateTimeOffset = default, Option<string?> zipCode = default)
        {
            AddressLine1Option = addressLine1;
            AddressLine2Option = addressLine2;
            CityOption = city;
            ContactIdOption = contactId;
            CountryCodeOption = countryCode;
            CreatedDateTimeOffsetOption = createdDateTimeOffset;
            ExternalCodeOption = externalCode;
            IdOption = id;
            IsPrimaryOption = isPrimary;
            LastChangedDateTimeOffsetOption = lastChangedDateTimeOffset;
            ZipCodeOption = zipCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AddressLine1
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine1Option { get; private set; }

        /// <summary>
        /// The first (main) address line.
        /// </summary>
        /// <value>The first (main) address line.</value>
        /* <example>Postboks 404</example> */
        [JsonPropertyName("AddressLine1")]
        public string? AddressLine1 { get { return this.AddressLine1Option; } set { this.AddressLine1Option = new(value); } }

        /// <summary>
        /// Used to track the state of AddressLine2
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AddressLine2Option { get; private set; }

        /// <summary>
        /// The second address line.
        /// </summary>
        /// <value>The second address line.</value>
        /* <example>Att: Ola Nordmann</example> */
        [JsonPropertyName("AddressLine2")]
        public string? AddressLine2 { get { return this.AddressLine2Option; } set { this.AddressLine2Option = new(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// The city.
        /// </summary>
        /// <value>The city.</value>
        /* <example>Oslo</example> */
        [JsonPropertyName("City")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ContactIdOption { get; }

        /// <summary>
        /// The identifier of the contact (customer, employee or supplier) this delivery address is assigned to.  Cannot be set directly, but is set based on the contact argument in the request URL.
        /// </summary>
        /// <value>The identifier of the contact (customer, employee or supplier) this delivery address is assigned to.  Cannot be set directly, but is set based on the contact argument in the request URL.</value>
        /* <example>12345</example> */
        [JsonPropertyName("ContactId")]
        public long? ContactId { get { return this.ContactIdOption; } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.
        /// </summary>
        /// <value>The ISO 3166-1 alfa-2 country code (two characters).  Defaults to \&quot;NO\&quot; if not set.</value>
        /* <example>NO</example> */
        [JsonPropertyName("CountryCode")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> CreatedDateTimeOffsetOption { get; }

        /// <summary>
        /// The timestamp of when this address was created.
        /// </summary>
        /// <value>The timestamp of when this address was created.</value>
        /* <example>2022-07-11T12:46:59.123456700Z</example> */
        [JsonPropertyName("CreatedDateTimeOffset")]
        public DateTimeOffset? CreatedDateTimeOffset { get { return this.CreatedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ExternalCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalCodeOption { get; private set; }

        /// <summary>
        /// The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).
        /// </summary>
        /// <value>The external code  This field is not available in the GUI, but can be used by the integrating party to reference the address in the external system.  The field must be unique (for each address).</value>
        /* <example>123ABC</example> */
        [JsonPropertyName("ExternalCode")]
        public string? ExternalCode { get { return this.ExternalCodeOption; } set { this.ExternalCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IdOption { get; }

        /// <summary>
        /// The identifier of the address.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).
        /// </summary>
        /// <value>The identifier of the address.  This identifier is unique and assigned by PowerOffice Go when a new entity is saved, and should be provided when an entity should be edited (PATCH), deleted (DELETE) or retrieved specifically (GET).</value>
        /* <example>12345</example> */
        [JsonPropertyName("Id")]
        public long? Id { get { return this.IdOption; } }

        /// <summary>
        /// Used to track the state of IsPrimary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPrimaryOption { get; }

        /// <summary>
        /// A value indicating whether this delivery address is the primary delivery address for this contact.  Sales orders created, will default inherit the primary delivery address of the customer, if not overridden.  The first delivery address created for a contact will automatically be set as primary.
        /// </summary>
        /// <value>A value indicating whether this delivery address is the primary delivery address for this contact.  Sales orders created, will default inherit the primary delivery address of the customer, if not overridden.  The first delivery address created for a contact will automatically be set as primary.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsPrimary")]
        public bool? IsPrimary { get { return this.IsPrimaryOption; } }

        /// <summary>
        /// Used to track the state of LastChangedDateTimeOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> LastChangedDateTimeOffsetOption { get; }

        /// <summary>
        /// The last changed timestamp of this address.
        /// </summary>
        /// <value>The last changed timestamp of this address.</value>
        /* <example>2022-07-11T12:46:59.123456700Z</example> */
        [JsonPropertyName("LastChangedDateTimeOffset")]
        public DateTimeOffset? LastChangedDateTimeOffset { get { return this.LastChangedDateTimeOffsetOption; } }

        /// <summary>
        /// Used to track the state of ZipCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ZipCodeOption { get; private set; }

        /// <summary>
        /// The zip code (postal code).
        /// </summary>
        /// <value>The zip code (postal code).</value>
        /* <example>0161</example> */
        [JsonPropertyName("ZipCode")]
        public string? ZipCode { get { return this.ZipCodeOption; } set { this.ZipCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactDeliveryAddressDto {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CreatedDateTimeOffset: ").Append(CreatedDateTimeOffset).Append("\n");
            sb.Append("  ExternalCode: ").Append(ExternalCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LastChangedDateTimeOffset: ").Append(LastChangedDateTimeOffset).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine1, length must be less than 200.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 200)
            {
                yield return new ValidationResult("Invalid value for AddressLine2, length must be less than 200.", new [] { "AddressLine2" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 100)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 100.", new [] { "City" });
            }

            // ExternalCode (string) maxLength
            if (this.ExternalCode != null && this.ExternalCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ExternalCode, length must be less than 50.", new [] { "ExternalCode" });
            }

            // ZipCode (string) maxLength
            if (this.ZipCode != null && this.ZipCode.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ZipCode, length must be less than 50.", new [] { "ZipCode" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContactDeliveryAddressDto" />
    /// </summary>
    public class ContactDeliveryAddressDtoJsonConverter : JsonConverter<ContactDeliveryAddressDto>
    {
        /// <summary>
        /// The format to use to serialize CreatedDateTimeOffset
        /// </summary>
        public static string CreatedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastChangedDateTimeOffset
        /// </summary>
        public static string LastChangedDateTimeOffsetFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ContactDeliveryAddressDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContactDeliveryAddressDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> addressLine1 = default;
            Option<string?> addressLine2 = default;
            Option<string?> city = default;
            Option<long?> contactId = default;
            Option<string?> countryCode = default;
            Option<DateTimeOffset?> createdDateTimeOffset = default;
            Option<string?> externalCode = default;
            Option<long?> id = default;
            Option<bool?> isPrimary = default;
            Option<DateTimeOffset?> lastChangedDateTimeOffset = default;
            Option<string?> zipCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AddressLine1":
                            addressLine1 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "AddressLine2":
                            addressLine2 = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "City":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ContactId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contactId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "CountryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CreatedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ExternalCode":
                            externalCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "Id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "IsPrimary":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isPrimary = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LastChangedDateTimeOffset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastChangedDateTimeOffset = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ZipCode":
                            zipCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactId.IsSet && contactId.Value == null)
                throw new ArgumentNullException(nameof(contactId), "Property is not nullable for class ContactDeliveryAddressDto.");

            if (createdDateTimeOffset.IsSet && createdDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(createdDateTimeOffset), "Property is not nullable for class ContactDeliveryAddressDto.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContactDeliveryAddressDto.");

            if (lastChangedDateTimeOffset.IsSet && lastChangedDateTimeOffset.Value == null)
                throw new ArgumentNullException(nameof(lastChangedDateTimeOffset), "Property is not nullable for class ContactDeliveryAddressDto.");

            return new ContactDeliveryAddressDto(addressLine1, addressLine2, city, contactId, countryCode, createdDateTimeOffset, externalCode, id, isPrimary, lastChangedDateTimeOffset, zipCode);
        }

        /// <summary>
        /// Serializes a <see cref="ContactDeliveryAddressDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactDeliveryAddressDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContactDeliveryAddressDto contactDeliveryAddressDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contactDeliveryAddressDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContactDeliveryAddressDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contactDeliveryAddressDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContactDeliveryAddressDto contactDeliveryAddressDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contactDeliveryAddressDto.AddressLine1Option.IsSet)
                if (contactDeliveryAddressDto.AddressLine1Option.Value != null)
                    writer.WriteString("AddressLine1", contactDeliveryAddressDto.AddressLine1);
                else
                    writer.WriteNull("AddressLine1");

            if (contactDeliveryAddressDto.AddressLine2Option.IsSet)
                if (contactDeliveryAddressDto.AddressLine2Option.Value != null)
                    writer.WriteString("AddressLine2", contactDeliveryAddressDto.AddressLine2);
                else
                    writer.WriteNull("AddressLine2");

            if (contactDeliveryAddressDto.CityOption.IsSet)
                if (contactDeliveryAddressDto.CityOption.Value != null)
                    writer.WriteString("City", contactDeliveryAddressDto.City);
                else
                    writer.WriteNull("City");

            if (contactDeliveryAddressDto.ContactIdOption.IsSet)
                writer.WriteNumber("ContactId", contactDeliveryAddressDto.ContactIdOption.Value!.Value);

            if (contactDeliveryAddressDto.CountryCodeOption.IsSet)
                if (contactDeliveryAddressDto.CountryCodeOption.Value != null)
                    writer.WriteString("CountryCode", contactDeliveryAddressDto.CountryCode);
                else
                    writer.WriteNull("CountryCode");

            if (contactDeliveryAddressDto.CreatedDateTimeOffsetOption.IsSet)
                writer.WriteString("CreatedDateTimeOffset", contactDeliveryAddressDto.CreatedDateTimeOffsetOption.Value!.Value.ToString(CreatedDateTimeOffsetFormat));

            if (contactDeliveryAddressDto.ExternalCodeOption.IsSet)
                if (contactDeliveryAddressDto.ExternalCodeOption.Value != null)
                    writer.WriteString("ExternalCode", contactDeliveryAddressDto.ExternalCode);
                else
                    writer.WriteNull("ExternalCode");

            if (contactDeliveryAddressDto.IdOption.IsSet)
                writer.WriteNumber("Id", contactDeliveryAddressDto.IdOption.Value!.Value);

            if (contactDeliveryAddressDto.IsPrimaryOption.IsSet)
                if (contactDeliveryAddressDto.IsPrimaryOption.Value != null)
                    writer.WriteBoolean("IsPrimary", contactDeliveryAddressDto.IsPrimaryOption.Value!.Value);
                else
                    writer.WriteNull("IsPrimary");

            if (contactDeliveryAddressDto.LastChangedDateTimeOffsetOption.IsSet)
                writer.WriteString("LastChangedDateTimeOffset", contactDeliveryAddressDto.LastChangedDateTimeOffsetOption.Value!.Value.ToString(LastChangedDateTimeOffsetFormat));

            if (contactDeliveryAddressDto.ZipCodeOption.IsSet)
                if (contactDeliveryAddressDto.ZipCodeOption.Value != null)
                    writer.WriteString("ZipCode", contactDeliveryAddressDto.ZipCode);
                else
                    writer.WriteNull("ZipCode");
        }
    }
}
