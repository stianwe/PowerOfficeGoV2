// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Invoice delivery type specifying how an outgoing invoice should or will be delivered to a customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - Invoice will be delivered as email with PDF as attachment.                 Can only be used if the customer have an e-mail address registered (either eMailAddress or invoiceEmailAddress).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Print&lt;/i&gt; - Invoice will be printed and delivered physically.                 \&quot;Sending\&quot; the invoice in Go will generate a PDF for download and print.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EHF&lt;/i&gt; - Invoice will be delivered over EHF.                 Can only be set if the customers organizationNumber is set and the number is registered in ELMA.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AvtaleGiro&lt;/i&gt; - Invoice will be delivered over AvtaleGiro.                 Cannot be set directly (set by the customer in an external process).&lt;/li&gt;&lt;li&gt;&lt;i&gt;External&lt;/i&gt; - Invoice will be prepared for delivery over an external third party integration.                 Can only be set if the client have such an integration active.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Efaktura&lt;/i&gt; - Invoice will be delivered by Efaktura.                 Cannot be set directly (set by the customer on an external process).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Factoring&lt;/i&gt; - The invoice will be prepared for delivered over an external third party factoring integration.                 Can only be set if the client have such an integration active.&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Invoice delivery type specifying how an outgoing invoice should or will be delivered to a customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;PdfByEmail&lt;/i&gt; - Invoice will be delivered as email with PDF as attachment.                 Can only be used if the customer have an e-mail address registered (either eMailAddress or invoiceEmailAddress).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Print&lt;/i&gt; - Invoice will be printed and delivered physically.                 \&quot;Sending\&quot; the invoice in Go will generate a PDF for download and print.&lt;/li&gt;&lt;li&gt;&lt;i&gt;EHF&lt;/i&gt; - Invoice will be delivered over EHF.                 Can only be set if the customers organizationNumber is set and the number is registered in ELMA.&lt;/li&gt;&lt;li&gt;&lt;i&gt;AvtaleGiro&lt;/i&gt; - Invoice will be delivered over AvtaleGiro.                 Cannot be set directly (set by the customer in an external process).&lt;/li&gt;&lt;li&gt;&lt;i&gt;External&lt;/i&gt; - Invoice will be prepared for delivery over an external third party integration.                 Can only be set if the client have such an integration active.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Efaktura&lt;/i&gt; - Invoice will be delivered by Efaktura.                 Cannot be set directly (set by the customer on an external process).&lt;/li&gt;&lt;li&gt;&lt;i&gt;Factoring&lt;/i&gt; - The invoice will be prepared for delivered over an external third party factoring integration.                 Can only be set if the client have such an integration active.&lt;/li&gt;&lt;/ul&gt;</value>
    public enum InvoiceDeliveryType
    {
        /// <summary>
        /// Enum PdfByEmail for value: PdfByEmail
        /// </summary>
        PdfByEmail = 1,

        /// <summary>
        /// Enum Print for value: Print
        /// </summary>
        Print = 2,

        /// <summary>
        /// Enum EHF for value: EHF
        /// </summary>
        EHF = 3,

        /// <summary>
        /// Enum AvtaleGiro for value: AvtaleGiro
        /// </summary>
        AvtaleGiro = 4,

        /// <summary>
        /// Enum External for value: External
        /// </summary>
        External = 5,

        /// <summary>
        /// Enum Efaktura for value: Efaktura
        /// </summary>
        Efaktura = 6,

        /// <summary>
        /// Enum Factoring for value: Factoring
        /// </summary>
        Factoring = 7
    }

    /// <summary>
    /// Converts <see cref="InvoiceDeliveryType"/> to and from the JSON value
    /// </summary>
    public static class InvoiceDeliveryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="InvoiceDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InvoiceDeliveryType FromString(string value)
        {
            if (value.Equals("PdfByEmail"))
                return InvoiceDeliveryType.PdfByEmail;

            if (value.Equals("Print"))
                return InvoiceDeliveryType.Print;

            if (value.Equals("EHF"))
                return InvoiceDeliveryType.EHF;

            if (value.Equals("AvtaleGiro"))
                return InvoiceDeliveryType.AvtaleGiro;

            if (value.Equals("External"))
                return InvoiceDeliveryType.External;

            if (value.Equals("Efaktura"))
                return InvoiceDeliveryType.Efaktura;

            if (value.Equals("Factoring"))
                return InvoiceDeliveryType.Factoring;

            throw new NotImplementedException($"Could not convert value to type InvoiceDeliveryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="InvoiceDeliveryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InvoiceDeliveryType? FromStringOrDefault(string value)
        {
            if (value.Equals("PdfByEmail"))
                return InvoiceDeliveryType.PdfByEmail;

            if (value.Equals("Print"))
                return InvoiceDeliveryType.Print;

            if (value.Equals("EHF"))
                return InvoiceDeliveryType.EHF;

            if (value.Equals("AvtaleGiro"))
                return InvoiceDeliveryType.AvtaleGiro;

            if (value.Equals("External"))
                return InvoiceDeliveryType.External;

            if (value.Equals("Efaktura"))
                return InvoiceDeliveryType.Efaktura;

            if (value.Equals("Factoring"))
                return InvoiceDeliveryType.Factoring;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InvoiceDeliveryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(InvoiceDeliveryType value)
        {
            if (value == InvoiceDeliveryType.PdfByEmail)
                return "PdfByEmail";

            if (value == InvoiceDeliveryType.Print)
                return "Print";

            if (value == InvoiceDeliveryType.EHF)
                return "EHF";

            if (value == InvoiceDeliveryType.AvtaleGiro)
                return "AvtaleGiro";

            if (value == InvoiceDeliveryType.External)
                return "External";

            if (value == InvoiceDeliveryType.Efaktura)
                return "Efaktura";

            if (value == InvoiceDeliveryType.Factoring)
                return "Factoring";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InvoiceDeliveryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class InvoiceDeliveryTypeJsonConverter : JsonConverter<InvoiceDeliveryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InvoiceDeliveryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InvoiceDeliveryType? result = rawValue == null
                ? null
                : InvoiceDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the InvoiceDeliveryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="invoiceDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InvoiceDeliveryType invoiceDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(invoiceDeliveryType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InvoiceDeliveryType"/>
    /// </summary>
    public class InvoiceDeliveryTypeNullableJsonConverter : JsonConverter<InvoiceDeliveryType?>
    {
        /// <summary>
        /// Returns a InvoiceDeliveryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override InvoiceDeliveryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            InvoiceDeliveryType? result = rawValue == null
                ? null
                : InvoiceDeliveryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="invoiceDeliveryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, InvoiceDeliveryType? invoiceDeliveryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(invoiceDeliveryType?.ToString() ?? "null");
        }
    }
}
