// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// The available properties for the client organization settings, when creating new clients
    /// </summary>
    public partial class ClientPostDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientPostDto" /> class.
        /// </summary>
        /// <param name="adminUserId">The identifier of the user that will be the client subscription administrator.  This user will automatically be added to the client as an administrator.</param>
        /// <param name="mailAddress">mailAddress</param>
        /// <param name="clientName">The name of the client.</param>
        /// <param name="conversionDate">The start date of processing in Go.  The start day will always be set as the first day of the month provided, in the year provided.  The conversion date is the date the client started using Go.  Transactions can only be posted on or after this date.  The date can also be used to identify the date of the start-balance in Go, which will be this date -1 day.  If not set, the conversion date will default to January of the current year.</param>
        /// <param name="financialYearEndMonth">financialYearEndMonth</param>
        /// <param name="isVatRegistered">Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert).  If false, vat is not applied to outgoing invoices.</param>
        /// <param name="legalName">The legal name of the client.  The legal name is the formal name, and might differ from the marketing name.</param>
        /// <param name="organizationNumber">The organization number of the client.</param>
        /// <param name="templateClientId">The unique identifier of the template client to be used, if applicable.  If set, the new client will inherit the setup of general ledger accounts, activities, roles and Altinn settings.  If not provided, a standard Go template is used for the new client.</param>
        /// <param name="useVatCompensation">Information on whether this client are entitled to and uses vat compensation.  If true, vat codes with first letter notation K can be used when relevant for the client.</param>
        [JsonConstructor]
        public ClientPostDto(Guid adminUserId, AddressPostDto mailAddress, string? clientName = default, Option<DateOnly?> conversionDate = default, Option<Months?> financialYearEndMonth = default, Option<bool?> isVatRegistered = default, string? legalName = default, string? organizationNumber = default, Option<Guid?> templateClientId = default, Option<bool?> useVatCompensation = default)
        {
            AdminUserId = adminUserId;
            MailAddress = mailAddress;
            ClientName = clientName;
            ConversionDateOption = conversionDate;
            FinancialYearEndMonthOption = financialYearEndMonth;
            IsVatRegisteredOption = isVatRegistered;
            LegalName = legalName;
            OrganizationNumber = organizationNumber;
            TemplateClientIdOption = templateClientId;
            UseVatCompensationOption = useVatCompensation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FinancialYearEndMonth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Months?> FinancialYearEndMonthOption { get; private set; }

        /// <summary>
        /// Gets or Sets FinancialYearEndMonth
        /// </summary>
        [JsonPropertyName("FinancialYearEndMonth")]
        public Months? FinancialYearEndMonth { get { return this.FinancialYearEndMonthOption; } set { this.FinancialYearEndMonthOption = new(value); } }

        /// <summary>
        /// The identifier of the user that will be the client subscription administrator.  This user will automatically be added to the client as an administrator.
        /// </summary>
        /// <value>The identifier of the user that will be the client subscription administrator.  This user will automatically be added to the client as an administrator.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("AdminUserId")]
        public Guid AdminUserId { get; set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [JsonPropertyName("MailAddress")]
        public AddressPostDto MailAddress { get; set; }

        /// <summary>
        /// The name of the client.
        /// </summary>
        /// <value>The name of the client.</value>
        /* <example>Office Power</example> */
        [JsonPropertyName("ClientName")]
        public string? ClientName { get; set; }

        /// <summary>
        /// Used to track the state of ConversionDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateOnly?> ConversionDateOption { get; private set; }

        /// <summary>
        /// The start date of processing in Go.  The start day will always be set as the first day of the month provided, in the year provided.  The conversion date is the date the client started using Go.  Transactions can only be posted on or after this date.  The date can also be used to identify the date of the start-balance in Go, which will be this date -1 day.  If not set, the conversion date will default to January of the current year.
        /// </summary>
        /// <value>The start date of processing in Go.  The start day will always be set as the first day of the month provided, in the year provided.  The conversion date is the date the client started using Go.  Transactions can only be posted on or after this date.  The date can also be used to identify the date of the start-balance in Go, which will be this date -1 day.  If not set, the conversion date will default to January of the current year.</value>
        /* <example>Mon Jan 01 01:00:00 CET 2024</example> */
        [JsonPropertyName("ConversionDate")]
        public DateOnly? ConversionDate { get { return this.ConversionDateOption; } set { this.ConversionDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsVatRegistered
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsVatRegisteredOption { get; private set; }

        /// <summary>
        /// Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert).  If false, vat is not applied to outgoing invoices.
        /// </summary>
        /// <value>Information on whether this this client is registered for Value Added Tax (VAT, norwegian: mva-registrert).  If false, vat is not applied to outgoing invoices.</value>
        /* <example>true</example> */
        [JsonPropertyName("IsVatRegistered")]
        public bool? IsVatRegistered { get { return this.IsVatRegisteredOption; } set { this.IsVatRegisteredOption = new(value); } }

        /// <summary>
        /// The legal name of the client.  The legal name is the formal name, and might differ from the marketing name.
        /// </summary>
        /// <value>The legal name of the client.  The legal name is the formal name, and might differ from the marketing name.</value>
        /* <example>PowerOffice AS</example> */
        [JsonPropertyName("LegalName")]
        public string? LegalName { get; set; }

        /// <summary>
        /// The organization number of the client.
        /// </summary>
        /// <value>The organization number of the client.</value>
        /* <example>980386465</example> */
        [JsonPropertyName("OrganizationNumber")]
        public string? OrganizationNumber { get; set; }

        /// <summary>
        /// Used to track the state of TemplateClientId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> TemplateClientIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of the template client to be used, if applicable.  If set, the new client will inherit the setup of general ledger accounts, activities, roles and Altinn settings.  If not provided, a standard Go template is used for the new client.
        /// </summary>
        /// <value>The unique identifier of the template client to be used, if applicable.  If set, the new client will inherit the setup of general ledger accounts, activities, roles and Altinn settings.  If not provided, a standard Go template is used for the new client.</value>
        /* <example>09ab6bcf-4219-4149-8283-6b6a7342bfd9</example> */
        [JsonPropertyName("TemplateClientId")]
        public Guid? TemplateClientId { get { return this.TemplateClientIdOption; } set { this.TemplateClientIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseVatCompensation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseVatCompensationOption { get; private set; }

        /// <summary>
        /// Information on whether this client are entitled to and uses vat compensation.  If true, vat codes with first letter notation K can be used when relevant for the client.
        /// </summary>
        /// <value>Information on whether this client are entitled to and uses vat compensation.  If true, vat codes with first letter notation K can be used when relevant for the client.</value>
        /* <example>true</example> */
        [JsonPropertyName("UseVatCompensation")]
        public bool? UseVatCompensation { get { return this.UseVatCompensationOption; } set { this.UseVatCompensationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientPostDto {\n");
            sb.Append("  AdminUserId: ").Append(AdminUserId).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  ConversionDate: ").Append(ConversionDate).Append("\n");
            sb.Append("  FinancialYearEndMonth: ").Append(FinancialYearEndMonth).Append("\n");
            sb.Append("  IsVatRegistered: ").Append(IsVatRegistered).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  OrganizationNumber: ").Append(OrganizationNumber).Append("\n");
            sb.Append("  TemplateClientId: ").Append(TemplateClientId).Append("\n");
            sb.Append("  UseVatCompensation: ").Append(UseVatCompensation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientPostDto" />
    /// </summary>
    public class ClientPostDtoJsonConverter : JsonConverter<ClientPostDto>
    {
        /// <summary>
        /// The format to use to serialize ConversionDate
        /// </summary>
        public static string ConversionDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ClientPostDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClientPostDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> adminUserId = default;
            Option<AddressPostDto?> mailAddress = default;
            Option<string?> clientName = default;
            Option<DateOnly?> conversionDate = default;
            Option<Months?> financialYearEndMonth = default;
            Option<bool?> isVatRegistered = default;
            Option<string?> legalName = default;
            Option<string?> organizationNumber = default;
            Option<Guid?> templateClientId = default;
            Option<bool?> useVatCompensation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AdminUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                adminUserId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "MailAddress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mailAddress = new Option<AddressPostDto?>(JsonSerializer.Deserialize<AddressPostDto>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ClientName":
                            clientName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ConversionDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                conversionDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "FinancialYearEndMonth":
                            string? financialYearEndMonthRawValue = utf8JsonReader.GetString();
                            if (financialYearEndMonthRawValue != null)
                                financialYearEndMonth = new Option<Months?>(MonthsValueConverter.FromStringOrDefault(financialYearEndMonthRawValue));
                            break;
                        case "IsVatRegistered":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isVatRegistered = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "LegalName":
                            legalName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "OrganizationNumber":
                            organizationNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TemplateClientId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                templateClientId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "UseVatCompensation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useVatCompensation = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!adminUserId.IsSet)
                throw new ArgumentException("Property is required for class ClientPostDto.", nameof(adminUserId));

            if (!mailAddress.IsSet)
                throw new ArgumentException("Property is required for class ClientPostDto.", nameof(mailAddress));

            if (!clientName.IsSet)
                throw new ArgumentException("Property is required for class ClientPostDto.", nameof(clientName));

            if (!legalName.IsSet)
                throw new ArgumentException("Property is required for class ClientPostDto.", nameof(legalName));

            if (!organizationNumber.IsSet)
                throw new ArgumentException("Property is required for class ClientPostDto.", nameof(organizationNumber));

            if (adminUserId.IsSet && adminUserId.Value == null)
                throw new ArgumentNullException(nameof(adminUserId), "Property is not nullable for class ClientPostDto.");

            if (mailAddress.IsSet && mailAddress.Value == null)
                throw new ArgumentNullException(nameof(mailAddress), "Property is not nullable for class ClientPostDto.");

            return new ClientPostDto(adminUserId.Value!.Value!, mailAddress.Value!, clientName.Value!, conversionDate, financialYearEndMonth, isVatRegistered, legalName.Value!, organizationNumber.Value!, templateClientId, useVatCompensation);
        }

        /// <summary>
        /// Serializes a <see cref="ClientPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClientPostDto clientPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clientPostDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClientPostDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientPostDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClientPostDto clientPostDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clientPostDto.MailAddress == null)
                throw new ArgumentNullException(nameof(clientPostDto.MailAddress), "Property is required for class ClientPostDto.");

            writer.WriteString("AdminUserId", clientPostDto.AdminUserId);

            writer.WritePropertyName("MailAddress");
            JsonSerializer.Serialize(writer, clientPostDto.MailAddress, jsonSerializerOptions);
            if (clientPostDto.ClientName != null)
                writer.WriteString("ClientName", clientPostDto.ClientName);
            else
                writer.WriteNull("ClientName");

            if (clientPostDto.ConversionDateOption.IsSet)
                if (clientPostDto.ConversionDateOption.Value != null)
                    writer.WriteString("ConversionDate", clientPostDto.ConversionDateOption.Value!.Value.ToString(ConversionDateFormat));
                else
                    writer.WriteNull("ConversionDate");

            if (clientPostDto.FinancialYearEndMonthOption.IsSet)
                if (clientPostDto.FinancialYearEndMonthOption!.Value != null)
                {
                    var financialYearEndMonthRawValue = MonthsValueConverter.ToJsonValue(clientPostDto.FinancialYearEndMonthOption.Value!.Value);
                    writer.WriteString("FinancialYearEndMonth", financialYearEndMonthRawValue);
                }
                else
                    writer.WriteNull("FinancialYearEndMonth");
            if (clientPostDto.IsVatRegisteredOption.IsSet)
                if (clientPostDto.IsVatRegisteredOption.Value != null)
                    writer.WriteBoolean("IsVatRegistered", clientPostDto.IsVatRegisteredOption.Value!.Value);
                else
                    writer.WriteNull("IsVatRegistered");

            if (clientPostDto.LegalName != null)
                writer.WriteString("LegalName", clientPostDto.LegalName);
            else
                writer.WriteNull("LegalName");

            if (clientPostDto.OrganizationNumber != null)
                writer.WriteString("OrganizationNumber", clientPostDto.OrganizationNumber);
            else
                writer.WriteNull("OrganizationNumber");

            if (clientPostDto.TemplateClientIdOption.IsSet)
                if (clientPostDto.TemplateClientIdOption.Value != null)
                    writer.WriteString("TemplateClientId", clientPostDto.TemplateClientIdOption.Value!.Value);
                else
                    writer.WriteNull("TemplateClientId");

            if (clientPostDto.UseVatCompensationOption.IsSet)
                if (clientPostDto.UseVatCompensationOption.Value != null)
                    writer.WriteBoolean("UseVatCompensation", clientPostDto.UseVatCompensationOption.Value!.Value);
                else
                    writer.WriteNull("UseVatCompensation");
        }
    }
}
