// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining what kind of voucher the voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;SupplierInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client. Correspond with the voucher type IncomingInvoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SupplierCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client. Correspond with the voucher type IncomingCreditNote.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ManualJournal&lt;/i&gt; - Manual Journal. Correspond with the voucher type ManualJournal&lt;/li&gt;&lt;li&gt;&lt;i&gt;BankJournal&lt;/i&gt; - Bank journal. Correspond with the voucher type BankJournal&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining what kind of voucher the voucher is&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;SupplierInvoice&lt;/i&gt; - Incoming invoice sent from a supplier to the client. Correspond with the voucher type IncomingInvoice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;SupplierCreditNote&lt;/i&gt; - Incoming credit note sent from a supplier to the client. Correspond with the voucher type IncomingCreditNote.&lt;/li&gt;&lt;li&gt;&lt;i&gt;ManualJournal&lt;/i&gt; - Manual Journal. Correspond with the voucher type ManualJournal&lt;/li&gt;&lt;li&gt;&lt;i&gt;BankJournal&lt;/i&gt; - Bank journal. Correspond with the voucher type BankJournal&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ApprovalVoucherType
    {
        /// <summary>
        /// Enum SupplierInvoice for value: SupplierInvoice
        /// </summary>
        SupplierInvoice = 1,

        /// <summary>
        /// Enum SupplierCreditNote for value: SupplierCreditNote
        /// </summary>
        SupplierCreditNote = 2,

        /// <summary>
        /// Enum ManualJournal for value: ManualJournal
        /// </summary>
        ManualJournal = 3,

        /// <summary>
        /// Enum BankJournal for value: BankJournal
        /// </summary>
        BankJournal = 4
    }

    /// <summary>
    /// Converts <see cref="ApprovalVoucherType"/> to and from the JSON value
    /// </summary>
    public static class ApprovalVoucherTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ApprovalVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ApprovalVoucherType FromString(string value)
        {
            if (value.Equals("SupplierInvoice"))
                return ApprovalVoucherType.SupplierInvoice;

            if (value.Equals("SupplierCreditNote"))
                return ApprovalVoucherType.SupplierCreditNote;

            if (value.Equals("ManualJournal"))
                return ApprovalVoucherType.ManualJournal;

            if (value.Equals("BankJournal"))
                return ApprovalVoucherType.BankJournal;

            throw new NotImplementedException($"Could not convert value to type ApprovalVoucherType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ApprovalVoucherType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ApprovalVoucherType? FromStringOrDefault(string value)
        {
            if (value.Equals("SupplierInvoice"))
                return ApprovalVoucherType.SupplierInvoice;

            if (value.Equals("SupplierCreditNote"))
                return ApprovalVoucherType.SupplierCreditNote;

            if (value.Equals("ManualJournal"))
                return ApprovalVoucherType.ManualJournal;

            if (value.Equals("BankJournal"))
                return ApprovalVoucherType.BankJournal;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ApprovalVoucherType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ApprovalVoucherType value)
        {
            if (value == ApprovalVoucherType.SupplierInvoice)
                return "SupplierInvoice";

            if (value == ApprovalVoucherType.SupplierCreditNote)
                return "SupplierCreditNote";

            if (value == ApprovalVoucherType.ManualJournal)
                return "ManualJournal";

            if (value == ApprovalVoucherType.BankJournal)
                return "BankJournal";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApprovalVoucherType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ApprovalVoucherTypeJsonConverter : JsonConverter<ApprovalVoucherType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ApprovalVoucherType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ApprovalVoucherType? result = rawValue == null
                ? null
                : ApprovalVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ApprovalVoucherType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="approvalVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ApprovalVoucherType approvalVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(approvalVoucherType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApprovalVoucherType"/>
    /// </summary>
    public class ApprovalVoucherTypeNullableJsonConverter : JsonConverter<ApprovalVoucherType?>
    {
        /// <summary>
        /// Returns a ApprovalVoucherType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ApprovalVoucherType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ApprovalVoucherType? result = rawValue == null
                ? null
                : ApprovalVoucherTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="approvalVoucherType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ApprovalVoucherType? approvalVoucherType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(approvalVoucherType?.ToString() ?? "null");
        }
    }
}
