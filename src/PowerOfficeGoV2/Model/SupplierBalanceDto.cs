// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Represents a supplier balance.
    /// </summary>
    public partial class SupplierBalanceDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierBalanceDto" /> class.
        /// </summary>
        /// <param name="balance">The current total balance of the supplier, as of the date (inclusive) provided in the query.</param>
        /// <param name="supplierAccountNo">The supplier account number for the related balance.  SupplierAccountNo will also represent the Supplier number.  Suppliers can be queried and identified using the Supplier service.</param>
        /// <param name="supplierExternalNo">The external number of the supplier for the related balance, if set on the Supplier entity.  An external number set on the supplier is often used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.</param>
        /// <param name="supplierId">The identifier of the supplier this balance is related to.  Suppliers can be queried and identified using the Supplier service.</param>
        /// <param name="supplierName">The name of the supplier for the related balance.  Suppliers can be queried and identified using the Supplier service.</param>
        [JsonConstructor]
        internal SupplierBalanceDto(Option<double?> balance = default, Option<long?> supplierAccountNo = default, Option<long?> supplierExternalNo = default, Option<long?> supplierId = default, Option<string?> supplierName = default)
        {
            BalanceOption = balance;
            SupplierAccountNoOption = supplierAccountNo;
            SupplierExternalNoOption = supplierExternalNo;
            SupplierIdOption = supplierId;
            SupplierNameOption = supplierName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Balance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> BalanceOption { get; }

        /// <summary>
        /// The current total balance of the supplier, as of the date (inclusive) provided in the query.
        /// </summary>
        /// <value>The current total balance of the supplier, as of the date (inclusive) provided in the query.</value>
        /* <example>502.25</example> */
        [JsonPropertyName("Balance")]
        public double? Balance { get { return this.BalanceOption; } }

        /// <summary>
        /// Used to track the state of SupplierAccountNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierAccountNoOption { get; }

        /// <summary>
        /// The supplier account number for the related balance.  SupplierAccountNo will also represent the Supplier number.  Suppliers can be queried and identified using the Supplier service.
        /// </summary>
        /// <value>The supplier account number for the related balance.  SupplierAccountNo will also represent the Supplier number.  Suppliers can be queried and identified using the Supplier service.</value>
        /* <example>10000</example> */
        [JsonPropertyName("SupplierAccountNo")]
        public long? SupplierAccountNo { get { return this.SupplierAccountNoOption; } }

        /// <summary>
        /// Used to track the state of SupplierExternalNo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierExternalNoOption { get; }

        /// <summary>
        /// The external number of the supplier for the related balance, if set on the Supplier entity.  An external number set on the supplier is often used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.
        /// </summary>
        /// <value>The external number of the supplier for the related balance, if set on the Supplier entity.  An external number set on the supplier is often used to reference the supplier number in the external system, if the supplier numbers are not kept in 1:1 sync between Go and the external system.  The field is available in the GUI with the name External Code.</value>
        /* <example>10000</example> */
        [JsonPropertyName("SupplierExternalNo")]
        public long? SupplierExternalNo { get { return this.SupplierExternalNoOption; } }

        /// <summary>
        /// Used to track the state of SupplierId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SupplierIdOption { get; }

        /// <summary>
        /// The identifier of the supplier this balance is related to.  Suppliers can be queried and identified using the Supplier service.
        /// </summary>
        /// <value>The identifier of the supplier this balance is related to.  Suppliers can be queried and identified using the Supplier service.</value>
        /* <example>123456</example> */
        [JsonPropertyName("SupplierId")]
        public long? SupplierId { get { return this.SupplierIdOption; } }

        /// <summary>
        /// Used to track the state of SupplierName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SupplierNameOption { get; }

        /// <summary>
        /// The name of the supplier for the related balance.  Suppliers can be queried and identified using the Supplier service.
        /// </summary>
        /// <value>The name of the supplier for the related balance.  Suppliers can be queried and identified using the Supplier service.</value>
        /* <example>Coca-Cola AS</example> */
        [JsonPropertyName("SupplierName")]
        public string? SupplierName { get { return this.SupplierNameOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplierBalanceDto {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  SupplierAccountNo: ").Append(SupplierAccountNo).Append("\n");
            sb.Append("  SupplierExternalNo: ").Append(SupplierExternalNo).Append("\n");
            sb.Append("  SupplierId: ").Append(SupplierId).Append("\n");
            sb.Append("  SupplierName: ").Append(SupplierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SupplierBalanceDto" />
    /// </summary>
    public class SupplierBalanceDtoJsonConverter : JsonConverter<SupplierBalanceDto>
    {
        /// <summary>
        /// Deserializes json to <see cref="SupplierBalanceDto" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SupplierBalanceDto Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> balance = default;
            Option<long?> supplierAccountNo = default;
            Option<long?> supplierExternalNo = default;
            Option<long?> supplierId = default;
            Option<string?> supplierName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "Balance":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                balance = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "SupplierAccountNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierAccountNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierExternalNo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierExternalNo = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                supplierId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "SupplierName":
                            supplierName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class SupplierBalanceDto.");

            return new SupplierBalanceDto(balance, supplierAccountNo, supplierExternalNo, supplierId, supplierName);
        }

        /// <summary>
        /// Serializes a <see cref="SupplierBalanceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierBalanceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SupplierBalanceDto supplierBalanceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, supplierBalanceDto, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SupplierBalanceDto" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="supplierBalanceDto"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SupplierBalanceDto supplierBalanceDto, JsonSerializerOptions jsonSerializerOptions)
        {
            if (supplierBalanceDto.BalanceOption.IsSet)
                writer.WriteNumber("Balance", supplierBalanceDto.BalanceOption.Value!.Value);

            if (supplierBalanceDto.SupplierAccountNoOption.IsSet)
                if (supplierBalanceDto.SupplierAccountNoOption.Value != null)
                    writer.WriteNumber("SupplierAccountNo", supplierBalanceDto.SupplierAccountNoOption.Value!.Value);
                else
                    writer.WriteNull("SupplierAccountNo");

            if (supplierBalanceDto.SupplierExternalNoOption.IsSet)
                if (supplierBalanceDto.SupplierExternalNoOption.Value != null)
                    writer.WriteNumber("SupplierExternalNo", supplierBalanceDto.SupplierExternalNoOption.Value!.Value);
                else
                    writer.WriteNull("SupplierExternalNo");

            if (supplierBalanceDto.SupplierIdOption.IsSet)
                if (supplierBalanceDto.SupplierIdOption.Value != null)
                    writer.WriteNumber("SupplierId", supplierBalanceDto.SupplierIdOption.Value!.Value);
                else
                    writer.WriteNull("SupplierId");

            if (supplierBalanceDto.SupplierNameOption.IsSet)
                if (supplierBalanceDto.SupplierNameOption.Value != null)
                    writer.WriteString("SupplierName", supplierBalanceDto.SupplierName);
                else
                    writer.WriteNull("SupplierName");
        }
    }
}
