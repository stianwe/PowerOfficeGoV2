// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Project billing method describing how a project is billed to the customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;FixedPrice&lt;/i&gt; - Fixed price&lt;/li&gt;&lt;li&gt;&lt;i&gt;Time&lt;/i&gt; - Only billable hours&lt;/li&gt;&lt;li&gt;&lt;i&gt;TimeAndExpenses&lt;/i&gt; - Billable hours and other expenses&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Project billing method describing how a project is billed to the customer.&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;FixedPrice&lt;/i&gt; - Fixed price&lt;/li&gt;&lt;li&gt;&lt;i&gt;Time&lt;/i&gt; - Only billable hours&lt;/li&gt;&lt;li&gt;&lt;i&gt;TimeAndExpenses&lt;/i&gt; - Billable hours and other expenses&lt;/li&gt;&lt;/ul&gt;</value>
    public enum ProjectBillingMethod
    {
        /// <summary>
        /// Enum FixedPrice for value: FixedPrice
        /// </summary>
        FixedPrice = 1,

        /// <summary>
        /// Enum Time for value: Time
        /// </summary>
        Time = 2,

        /// <summary>
        /// Enum TimeAndExpenses for value: TimeAndExpenses
        /// </summary>
        TimeAndExpenses = 3
    }

    /// <summary>
    /// Converts <see cref="ProjectBillingMethod"/> to and from the JSON value
    /// </summary>
    public static class ProjectBillingMethodValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ProjectBillingMethod"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectBillingMethod FromString(string value)
        {
            if (value.Equals("FixedPrice"))
                return ProjectBillingMethod.FixedPrice;

            if (value.Equals("Time"))
                return ProjectBillingMethod.Time;

            if (value.Equals("TimeAndExpenses"))
                return ProjectBillingMethod.TimeAndExpenses;

            throw new NotImplementedException($"Could not convert value to type ProjectBillingMethod: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ProjectBillingMethod"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProjectBillingMethod? FromStringOrDefault(string value)
        {
            if (value.Equals("FixedPrice"))
                return ProjectBillingMethod.FixedPrice;

            if (value.Equals("Time"))
                return ProjectBillingMethod.Time;

            if (value.Equals("TimeAndExpenses"))
                return ProjectBillingMethod.TimeAndExpenses;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProjectBillingMethod"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ProjectBillingMethod value)
        {
            if (value == ProjectBillingMethod.FixedPrice)
                return "FixedPrice";

            if (value == ProjectBillingMethod.Time)
                return "Time";

            if (value == ProjectBillingMethod.TimeAndExpenses)
                return "TimeAndExpenses";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectBillingMethod"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ProjectBillingMethodJsonConverter : JsonConverter<ProjectBillingMethod>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectBillingMethod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectBillingMethod? result = rawValue == null
                ? null
                : ProjectBillingMethodValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ProjectBillingMethod to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectBillingMethod projectBillingMethod, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectBillingMethod.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProjectBillingMethod"/>
    /// </summary>
    public class ProjectBillingMethodNullableJsonConverter : JsonConverter<ProjectBillingMethod?>
    {
        /// <summary>
        /// Returns a ProjectBillingMethod from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ProjectBillingMethod? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ProjectBillingMethod? result = rawValue == null
                ? null
                : ProjectBillingMethodValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ProjectBillingMethod? projectBillingMethod, JsonSerializerOptions options)
        {
            writer.WriteStringValue(projectBillingMethod?.ToString() ?? "null");
        }
    }
}
