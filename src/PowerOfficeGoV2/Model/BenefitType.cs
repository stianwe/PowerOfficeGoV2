// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using PowerOfficeGoV2.Client;

namespace PowerOfficeGoV2.Model
{
    /// <summary>
    /// Enum defining the benefit types. (Norwegian: Fordelstype)&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Cash&lt;/i&gt; - Monetary benefit in cash or cash equivalents.                 (Norwegian: kontantytelse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Deduction&lt;/i&gt; - Deductions, for instance pension premiums or union fees.                 (Norwegian: fradrag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ExpenseAllowance&lt;/i&gt; - Expense allowance, for instance allowance for the use of hand tools.                 (Norwegian: utgiftsgodtgjoerelse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None, no benefit to report.                 (Norwegian: ingen)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PaymentInKind&lt;/i&gt; - Payment in kind, non monetary benefit.                 Benefits an employee receives from their employer in any form other than money.                 They are sometimes also known as ‘perks’.                 (Norwegian: naturalytelse)&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    /// <value>Enum defining the benefit types. (Norwegian: Fordelstype)&lt;p&gt;Members:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;Cash&lt;/i&gt; - Monetary benefit in cash or cash equivalents.                 (Norwegian: kontantytelse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Deduction&lt;/i&gt; - Deductions, for instance pension premiums or union fees.                 (Norwegian: fradrag)&lt;/li&gt;&lt;li&gt;&lt;i&gt;ExpenseAllowance&lt;/i&gt; - Expense allowance, for instance allowance for the use of hand tools.                 (Norwegian: utgiftsgodtgjoerelse)&lt;/li&gt;&lt;li&gt;&lt;i&gt;None&lt;/i&gt; - None, no benefit to report.                 (Norwegian: ingen)&lt;/li&gt;&lt;li&gt;&lt;i&gt;PaymentInKind&lt;/i&gt; - Payment in kind, non monetary benefit.                 Benefits an employee receives from their employer in any form other than money.                 They are sometimes also known as ‘perks’.                 (Norwegian: naturalytelse)&lt;/li&gt;&lt;/ul&gt;</value>
    public enum BenefitType
    {
        /// <summary>
        /// Enum Cash for value: Cash
        /// </summary>
        Cash = 1,

        /// <summary>
        /// Enum Deduction for value: Deduction
        /// </summary>
        Deduction = 2,

        /// <summary>
        /// Enum ExpenseAllowance for value: ExpenseAllowance
        /// </summary>
        ExpenseAllowance = 3,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 4,

        /// <summary>
        /// Enum PaymentInKind for value: PaymentInKind
        /// </summary>
        PaymentInKind = 5
    }

    /// <summary>
    /// Converts <see cref="BenefitType"/> to and from the JSON value
    /// </summary>
    public static class BenefitTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BenefitType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BenefitType FromString(string value)
        {
            if (value.Equals("Cash"))
                return BenefitType.Cash;

            if (value.Equals("Deduction"))
                return BenefitType.Deduction;

            if (value.Equals("ExpenseAllowance"))
                return BenefitType.ExpenseAllowance;

            if (value.Equals("None"))
                return BenefitType.None;

            if (value.Equals("PaymentInKind"))
                return BenefitType.PaymentInKind;

            throw new NotImplementedException($"Could not convert value to type BenefitType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BenefitType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BenefitType? FromStringOrDefault(string value)
        {
            if (value.Equals("Cash"))
                return BenefitType.Cash;

            if (value.Equals("Deduction"))
                return BenefitType.Deduction;

            if (value.Equals("ExpenseAllowance"))
                return BenefitType.ExpenseAllowance;

            if (value.Equals("None"))
                return BenefitType.None;

            if (value.Equals("PaymentInKind"))
                return BenefitType.PaymentInKind;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BenefitType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BenefitType value)
        {
            if (value == BenefitType.Cash)
                return "Cash";

            if (value == BenefitType.Deduction)
                return "Deduction";

            if (value == BenefitType.ExpenseAllowance)
                return "ExpenseAllowance";

            if (value == BenefitType.None)
                return "None";

            if (value == BenefitType.PaymentInKind)
                return "PaymentInKind";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BenefitType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BenefitTypeJsonConverter : JsonConverter<BenefitType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BenefitType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BenefitType? result = rawValue == null
                ? null
                : BenefitTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BenefitType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="benefitType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BenefitType benefitType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(benefitType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BenefitType"/>
    /// </summary>
    public class BenefitTypeNullableJsonConverter : JsonConverter<BenefitType?>
    {
        /// <summary>
        /// Returns a BenefitType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BenefitType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BenefitType? result = rawValue == null
                ? null
                : BenefitTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="benefitType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BenefitType? benefitType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(benefitType?.ToString() ?? "null");
        }
    }
}
