/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using PowerOfficeGoV2.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("PowerOfficeGoV2.Test")]

namespace PowerOfficeGoV2.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is AccountType accountType)
                return AccountTypeValueConverter.ToJsonValue(accountType);
            if (obj is AgricultureDepartment agricultureDepartment)
                return AgricultureDepartmentValueConverter.ToJsonValue(agricultureDepartment);
            if (obj is ApprovalState approvalState)
                return ApprovalStateValueConverter.ToJsonValue(approvalState);
            if (obj is ApprovalVoucherType approvalVoucherType)
                return ApprovalVoucherTypeValueConverter.ToJsonValue(approvalVoucherType);
            if (obj is AssignmentAgreementStatus assignmentAgreementStatus)
                return AssignmentAgreementStatusValueConverter.ToJsonValue(assignmentAgreementStatus);
            if (obj is BenefitDescriptionType benefitDescriptionType)
                return BenefitDescriptionTypeValueConverter.ToJsonValue(benefitDescriptionType);
            if (obj is BenefitType benefitType)
                return BenefitTypeValueConverter.ToJsonValue(benefitType);
            if (obj is BillableRateSpecification billableRateSpecification)
                return BillableRateSpecificationValueConverter.ToJsonValue(billableRateSpecification);
            if (obj is ClientContactPersonRole clientContactPersonRole)
                return ClientContactPersonRoleValueConverter.ToJsonValue(clientContactPersonRole);
            if (obj is CommuterPersonType commuterPersonType)
                return CommuterPersonTypeValueConverter.ToJsonValue(commuterPersonType);
            if (obj is CurrencyRegistryCode currencyRegistryCode)
                return CurrencyRegistryCodeValueConverter.ToJsonValue(currencyRegistryCode);
            if (obj is DaysInWeekHolidayPay daysInWeekHolidayPay)
                return DaysInWeekHolidayPayValueConverter.ToJsonValue(daysInWeekHolidayPay);
            if (obj is DeductionType deductionType)
                return DeductionTypeValueConverter.ToJsonValue(deductionType);
            if (obj is EmployerContributionRule employerContributionRule)
                return EmployerContributionRuleValueConverter.ToJsonValue(employerContributionRule);
            if (obj is EmployerContributionZone employerContributionZone)
                return EmployerContributionZoneValueConverter.ToJsonValue(employerContributionZone);
            if (obj is EmploymentFormType employmentFormType)
                return EmploymentFormTypeValueConverter.ToJsonValue(employmentFormType);
            if (obj is EmploymentSpecificationType employmentSpecificationType)
                return EmploymentSpecificationTypeValueConverter.ToJsonValue(employmentSpecificationType);
            if (obj is EmploymentType employmentType)
                return EmploymentTypeValueConverter.ToJsonValue(employmentType);
            if (obj is EndDateReasonType endDateReasonType)
                return EndDateReasonTypeValueConverter.ToJsonValue(endDateReasonType);
            if (obj is FnoReportingType fnoReportingType)
                return FnoReportingTypeValueConverter.ToJsonValue(fnoReportingType);
            if (obj is FnoStatusType fnoStatusType)
                return FnoStatusTypeValueConverter.ToJsonValue(fnoStatusType);
            if (obj is Gender gender)
                return GenderValueConverter.ToJsonValue(gender);
            if (obj is GeneralLedgerAccountType generalLedgerAccountType)
                return GeneralLedgerAccountTypeValueConverter.ToJsonValue(generalLedgerAccountType);
            if (obj is IncomingVoucherType incomingVoucherType)
                return IncomingVoucherTypeValueConverter.ToJsonValue(incomingVoucherType);
            if (obj is InternationalIdType internationalIdType)
                return InternationalIdTypeValueConverter.ToJsonValue(internationalIdType);
            if (obj is InvoiceDeliveryType invoiceDeliveryType)
                return InvoiceDeliveryTypeValueConverter.ToJsonValue(invoiceDeliveryType);
            if (obj is LeaveType leaveType)
                return LeaveTypeValueConverter.ToJsonValue(leaveType);
            if (obj is LivestockGender livestockGender)
                return LivestockGenderValueConverter.ToJsonValue(livestockGender);
            if (obj is Months months)
                return MonthsValueConverter.ToJsonValue(months);
            if (obj is NoticeOfDebtCollectionDeliveryType noticeOfDebtCollectionDeliveryType)
                return NoticeOfDebtCollectionDeliveryTypeValueConverter.ToJsonValue(noticeOfDebtCollectionDeliveryType);
            if (obj is OrderStatus orderStatus)
                return OrderStatusValueConverter.ToJsonValue(orderStatus);
            if (obj is OutgoingInvoiceVoucherType outgoingInvoiceVoucherType)
                return OutgoingInvoiceVoucherTypeValueConverter.ToJsonValue(outgoingInvoiceVoucherType);
            if (obj is PayrollAccrualModeType payrollAccrualModeType)
                return PayrollAccrualModeTypeValueConverter.ToJsonValue(payrollAccrualModeType);
            if (obj is PayslipDeliveryType payslipDeliveryType)
                return PayslipDeliveryTypeValueConverter.ToJsonValue(payslipDeliveryType);
            if (obj is PayslipLanguageType payslipLanguageType)
                return PayslipLanguageTypeValueConverter.ToJsonValue(payslipLanguageType);
            if (obj is PayslipPasswordType payslipPasswordType)
                return PayslipPasswordTypeValueConverter.ToJsonValue(payslipPasswordType);
            if (obj is PayslipSendScheduleType payslipSendScheduleType)
                return PayslipSendScheduleTypeValueConverter.ToJsonValue(payslipSendScheduleType);
            if (obj is PostingType postingType)
                return PostingTypeValueConverter.ToJsonValue(postingType);
            if (obj is ProcessingType processingType)
                return ProcessingTypeValueConverter.ToJsonValue(processingType);
            if (obj is ProductType productType)
                return ProductTypeValueConverter.ToJsonValue(productType);
            if (obj is ProjectBillingMethod projectBillingMethod)
                return ProjectBillingMethodValueConverter.ToJsonValue(projectBillingMethod);
            if (obj is ProjectStatusType projectStatusType)
                return ProjectStatusTypeValueConverter.ToJsonValue(projectStatusType);
            if (obj is ReminderDeliveryType reminderDeliveryType)
                return ReminderDeliveryTypeValueConverter.ToJsonValue(reminderDeliveryType);
            if (obj is RemunerationPeriodType remunerationPeriodType)
                return RemunerationPeriodTypeValueConverter.ToJsonValue(remunerationPeriodType);
            if (obj is RoundingPrecisionType roundingPrecisionType)
                return RoundingPrecisionTypeValueConverter.ToJsonValue(roundingPrecisionType);
            if (obj is SalaryRemunerationType salaryRemunerationType)
                return SalaryRemunerationTypeValueConverter.ToJsonValue(salaryRemunerationType);
            if (obj is SendInvoiceDeliveryType sendInvoiceDeliveryType)
                return SendInvoiceDeliveryTypeValueConverter.ToJsonValue(sendInvoiceDeliveryType);
            if (obj is SpecialIncomeConditionType specialIncomeConditionType)
                return SpecialIncomeConditionTypeValueConverter.ToJsonValue(specialIncomeConditionType);
            if (obj is SubLedgerNumberSeriesType subLedgerNumberSeriesType)
                return SubLedgerNumberSeriesTypeValueConverter.ToJsonValue(subLedgerNumberSeriesType);
            if (obj is SubjectToAuditType subjectToAuditType)
                return SubjectToAuditTypeValueConverter.ToJsonValue(subjectToAuditType);
            if (obj is TaxDeductionType taxDeductionType)
                return TaxDeductionTypeValueConverter.ToJsonValue(taxDeductionType);
            if (obj is TaxRuleType taxRuleType)
                return TaxRuleTypeValueConverter.ToJsonValue(taxRuleType);
            if (obj is UnitOfMeasureType unitOfMeasureType)
                return UnitOfMeasureTypeValueConverter.ToJsonValue(unitOfMeasureType);
            if (obj is UserStatus userStatus)
                return UserStatusValueConverter.ToJsonValue(userStatus);
            if (obj is VatAlternativeGrouping vatAlternativeGrouping)
                return VatAlternativeGroupingValueConverter.ToJsonValue(vatAlternativeGrouping);
            if (obj is VatPeriodType vatPeriodType)
                return VatPeriodTypeValueConverter.ToJsonValue(vatPeriodType);
            if (obj is VatReturnSpecification vatReturnSpecification)
                return VatReturnSpecificationValueConverter.ToJsonValue(vatReturnSpecification);
            if (obj is VatReturnType vatReturnType)
                return VatReturnTypeValueConverter.ToJsonValue(vatReturnType);
            if (obj is VoucherApprovalStatus voucherApprovalStatus)
                return VoucherApprovalStatusValueConverter.ToJsonValue(voucherApprovalStatus);
            if (obj is VoucherDocumentationType voucherDocumentationType)
                return VoucherDocumentationTypeValueConverter.ToJsonValue(voucherDocumentationType);
            if (obj is VoucherLineType voucherLineType)
                return VoucherLineTypeValueConverter.ToJsonValue(voucherLineType);
            if (obj is VoucherState voucherState)
                return VoucherStateValueConverter.ToJsonValue(voucherState);
            if (obj is VoucherType voucherType)
                return VoucherTypeValueConverter.ToJsonValue(voucherType);
            if (obj is WorkingHoursArrangementType workingHoursArrangementType)
                return WorkingHoursArrangementTypeValueConverter.ToJsonValue(workingHoursArrangementType);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }
        
        public static bool UseDemoApi { get; internal set; } = false;

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "http://localhost:8080";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "http";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public static string CONTEXT_PATH => UseDemoApi ? "/Demo/v2" : "/v2";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "localhost";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
