// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISalesOrdersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SalesOrdersApiEvents Events { get; }

        /// <summary>
        /// Gets the specific sales order by id. (Auth roles: SalesOrders,SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// The returned object are a lightweight version of an sales order, not containing any line details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesOrderByIdApiResponse"/>&gt;</returns>
        Task<IGetSalesOrderByIdApiResponse> GetSalesOrderByIdAsync(Guid id, Option<bool> showInherited = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specific sales order by id. (Auth roles: SalesOrders,SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// The returned object are a lightweight version of an sales order, not containing any line details.
        /// </remarks>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesOrderByIdApiResponse"/>?&gt;</returns>
        Task<IGetSalesOrderByIdApiResponse?> GetSalesOrderByIdOrDefaultAsync(Guid id, Option<bool> showInherited = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the orders from the client. (Auth roles: SalesOrders,SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Orders can be in either draft or confirmed state, but neither are sent and posted invoices yet (they are considered outgoing invoice drafts).  The returned objects are a lightweight version of an sales order, not containing any line details.  Multiple filtering options.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-15999, 12500, 13000-\&quot; will result in invoice drafts from customers with numbers from and including 10000 to 15999, 12500, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects orders with department set in the header of the order. The order lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all orders without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter orders with last changed timestamp greater than the provided timestamp. Can be used as one way of getting changes in orders or getting new orders. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to reduce the number of invoices, if only the invoices that the (currently) querying integration created are relevant. (optional)</param>
        /// <param name="orderStatus">Filter by order status. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all orders without project codes are returned. If null or whitespace, all orders with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersGetApiResponse"/>&gt;</returns>
        Task<ISalesOrdersGetApiResponse> SalesOrdersGetAsync(Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<OrderStatus> orderStatus = default, Option<string> projectCodes = default, Option<bool> showInherited = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the orders from the client. (Auth roles: SalesOrders,SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Orders can be in either draft or confirmed state, but neither are sent and posted invoices yet (they are considered outgoing invoice drafts).  The returned objects are a lightweight version of an sales order, not containing any line details.  Multiple filtering options.
        /// </remarks>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-15999, 12500, 13000-\&quot; will result in invoice drafts from customers with numbers from and including 10000 to 15999, 12500, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects orders with department set in the header of the order. The order lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all orders without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter orders with last changed timestamp greater than the provided timestamp. Can be used as one way of getting changes in orders or getting new orders. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to reduce the number of invoices, if only the invoices that the (currently) querying integration created are relevant. (optional)</param>
        /// <param name="orderStatus">Filter by order status. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all orders without project codes are returned. If null or whitespace, all orders with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersGetApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersGetApiResponse?> SalesOrdersGetOrDefaultAsync(Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<OrderStatus> orderStatus = default, Option<string> projectCodes = default, Option<bool> showInherited = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an sales order entity with a given id. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Deletes all sales order information, including header and lines.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdDeleteApiResponse"/>&gt;</returns>
        Task<ISalesOrdersIdDeleteApiResponse> SalesOrdersIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an sales order entity with a given id. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Deletes all sales order information, including header and lines.
        /// </remarks>
        /// <param name="id">The id of the sales order to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdDeleteApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersIdDeleteApiResponse?> SalesOrdersIdDeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing sales order with a given id. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="operation">JSON Patch structure for updating an Sales Order. See SalesOrderPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdPatchApiResponse"/>&gt;</returns>
        Task<ISalesOrdersIdPatchApiResponse> SalesOrdersIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing sales order with a given id. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="operation">JSON Patch structure for updating an Sales Order. See SalesOrderPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdPatchApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersIdPatchApiResponse?> SalesOrdersIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetSalesOrderByIdApiResponse"/>
    /// </summary>
    public interface IGetSalesOrderByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.SalesOrderDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersGetApiResponse"/>
    /// </summary>
    public interface ISalesOrdersGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SalesOrderDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersIdDeleteApiResponse"/>
    /// </summary>
    public interface ISalesOrdersIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersIdPatchApiResponse"/>
    /// </summary>
    public interface ISalesOrdersIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.SalesOrderDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SalesOrdersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSalesOrderById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSalesOrderById;

        internal void ExecuteOnGetSalesOrderById(SalesOrdersApi.GetSalesOrderByIdApiResponse apiResponse)
        {
            OnGetSalesOrderById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSalesOrderById(Exception exception)
        {
            OnErrorGetSalesOrderById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersGet;

        internal void ExecuteOnSalesOrdersGet(SalesOrdersApi.SalesOrdersGetApiResponse apiResponse)
        {
            OnSalesOrdersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersGet(Exception exception)
        {
            OnErrorSalesOrdersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersIdDelete;

        internal void ExecuteOnSalesOrdersIdDelete(SalesOrdersApi.SalesOrdersIdDeleteApiResponse apiResponse)
        {
            OnSalesOrdersIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersIdDelete(Exception exception)
        {
            OnErrorSalesOrdersIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersIdPatch;

        internal void ExecuteOnSalesOrdersIdPatch(SalesOrdersApi.SalesOrdersIdPatchApiResponse apiResponse)
        {
            OnSalesOrdersIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersIdPatch(Exception exception)
        {
            OnErrorSalesOrdersIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SalesOrdersApi : ISalesOrdersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SalesOrdersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SalesOrdersApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesOrdersApi(ILogger<SalesOrdersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SalesOrdersApiEvents salesOrdersApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SalesOrdersApi>();
            HttpClient = httpClient;
            Events = salesOrdersApiEvents;
        }

        partial void FormatGetSalesOrderById(ref Guid id, ref Option<bool> showInherited);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="showInherited"></param>
        private void AfterGetSalesOrderByIdDefaultImplementation(IGetSalesOrderByIdApiResponse apiResponseLocalVar, Guid id, Option<bool> showInherited)
        {
            bool suppressDefaultLog = false;
            AfterGetSalesOrderById(ref suppressDefaultLog, apiResponseLocalVar, id, showInherited);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="showInherited"></param>
        partial void AfterGetSalesOrderById(ref bool suppressDefaultLog, IGetSalesOrderByIdApiResponse apiResponseLocalVar, Guid id, Option<bool> showInherited);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="showInherited"></param>
        private void OnErrorGetSalesOrderByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<bool> showInherited)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSalesOrderById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, showInherited);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="showInherited"></param>
        partial void OnErrorGetSalesOrderById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<bool> showInherited);

        /// <summary>
        /// Gets the specific sales order by id. (Auth roles: SalesOrders,SalesOrders_Full) The returned object are a lightweight version of an sales order, not containing any line details.
        /// </summary>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesOrderByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSalesOrderByIdApiResponse?> GetSalesOrderByIdOrDefaultAsync(Guid id, Option<bool> showInherited = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSalesOrderByIdAsync(id, showInherited, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the specific sales order by id. (Auth roles: SalesOrders,SalesOrders_Full) The returned object are a lightweight version of an sales order, not containing any line details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalesOrderByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSalesOrderByIdApiResponse> GetSalesOrderByIdAsync(Guid id, Option<bool> showInherited = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSalesOrderById(ref id, ref showInherited);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (showInherited.IsSet)
                        parseQueryStringLocalVar["showInherited"] = ClientUtils.ParameterToString(showInherited.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSalesOrderByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSalesOrderByIdApiResponse>();

                        GetSalesOrderByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSalesOrderByIdDefaultImplementation(apiResponseLocalVar, id, showInherited);

                        Events.ExecuteOnGetSalesOrderById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSalesOrderByIdDefaultImplementation(e, "/SalesOrders/{id}", uriBuilderLocalVar.Path, id, showInherited);
                Events.ExecuteOnErrorGetSalesOrderById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSalesOrderByIdApiResponse"/>
        /// </summary>
        public partial class GetSalesOrderByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetSalesOrderByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSalesOrderByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSalesOrderByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSalesOrderByIdApiResponse(ILogger<GetSalesOrderByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SalesOrderDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SalesOrderDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.SalesOrderDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersGet(ref Option<string> customerNos, ref Option<string> departmentCodes, ref Option<bool> includeSubProject, ref Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, ref Option<bool> onlyCreatedByCurrentIntegration, ref Option<OrderStatus> orderStatus, ref Option<string> projectCodes, ref Option<bool> showInherited, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSalesOrdersGet(Option<string> customerNos, Option<string> departmentCodes, Option<string> projectCodes, Option<ResourceParameters> resourceParameter)
        {
            if (customerNos.IsSet && customerNos.Value == null)
                throw new ArgumentNullException(nameof(customerNos));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="orderStatus"></param>
        /// <param name="projectCodes"></param>
        /// <param name="showInherited"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSalesOrdersGetDefaultImplementation(ISalesOrdersGetApiResponse apiResponseLocalVar, Option<string> customerNos, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyCreatedByCurrentIntegration, Option<OrderStatus> orderStatus, Option<string> projectCodes, Option<bool> showInherited, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersGet(ref suppressDefaultLog, apiResponseLocalVar, customerNos, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, onlyCreatedByCurrentIntegration, orderStatus, projectCodes, showInherited, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="orderStatus"></param>
        /// <param name="projectCodes"></param>
        /// <param name="showInherited"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSalesOrdersGet(ref bool suppressDefaultLog, ISalesOrdersGetApiResponse apiResponseLocalVar, Option<string> customerNos, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyCreatedByCurrentIntegration, Option<OrderStatus> orderStatus, Option<string> projectCodes, Option<bool> showInherited, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="orderStatus"></param>
        /// <param name="projectCodes"></param>
        /// <param name="showInherited"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSalesOrdersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> customerNos, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyCreatedByCurrentIntegration, Option<OrderStatus> orderStatus, Option<string> projectCodes, Option<bool> showInherited, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, customerNos, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, onlyCreatedByCurrentIntegration, orderStatus, projectCodes, showInherited, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="orderStatus"></param>
        /// <param name="projectCodes"></param>
        /// <param name="showInherited"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSalesOrdersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> customerNos, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyCreatedByCurrentIntegration, Option<OrderStatus> orderStatus, Option<string> projectCodes, Option<bool> showInherited, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the orders from the client. (Auth roles: SalesOrders,SalesOrders_Full) Orders can be in either draft or confirmed state, but neither are sent and posted invoices yet (they are considered outgoing invoice drafts).  The returned objects are a lightweight version of an sales order, not containing any line details.  Multiple filtering options.
        /// </summary>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-15999, 12500, 13000-\&quot; will result in invoice drafts from customers with numbers from and including 10000 to 15999, 12500, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects orders with department set in the header of the order. The order lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all orders without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter orders with last changed timestamp greater than the provided timestamp. Can be used as one way of getting changes in orders or getting new orders. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to reduce the number of invoices, if only the invoices that the (currently) querying integration created are relevant. (optional)</param>
        /// <param name="orderStatus">Filter by order status. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all orders without project codes are returned. If null or whitespace, all orders with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersGetApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersGetApiResponse?> SalesOrdersGetOrDefaultAsync(Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<OrderStatus> orderStatus = default, Option<string> projectCodes = default, Option<bool> showInherited = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersGetAsync(customerNos, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, onlyCreatedByCurrentIntegration, orderStatus, projectCodes, showInherited, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the orders from the client. (Auth roles: SalesOrders,SalesOrders_Full) Orders can be in either draft or confirmed state, but neither are sent and posted invoices yet (they are considered outgoing invoice drafts).  The returned objects are a lightweight version of an sales order, not containing any line details.  Multiple filtering options.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-15999, 12500, 13000-\&quot; will result in invoice drafts from customers with numbers from and including 10000 to 15999, 12500, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects orders with department set in the header of the order. The order lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all orders without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter orders with last changed timestamp greater than the provided timestamp. Can be used as one way of getting changes in orders or getting new orders. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to reduce the number of invoices, if only the invoices that the (currently) querying integration created are relevant. (optional)</param>
        /// <param name="orderStatus">Filter by order status. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all orders without project codes are returned. If null or whitespace, all orders with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="showInherited">Choose whether to display the properties as in Go GUI - with inherited values, or as the actual values set on the sales order. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersGetApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersGetApiResponse> SalesOrdersGetAsync(Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<OrderStatus> orderStatus = default, Option<string> projectCodes = default, Option<bool> showInherited = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalesOrdersGet(customerNos, departmentCodes, projectCodes, resourceParameter);

                FormatSalesOrdersGet(ref customerNos, ref departmentCodes, ref includeSubProject, ref lastChangedDateTimeOffsetGreaterThan, ref onlyCreatedByCurrentIntegration, ref orderStatus, ref projectCodes, ref showInherited, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (customerNos.IsSet)
                        parseQueryStringLocalVar["customerNos"] = ClientUtils.ParameterToString(customerNos.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (onlyCreatedByCurrentIntegration.IsSet)
                        parseQueryStringLocalVar["onlyCreatedByCurrentIntegration"] = ClientUtils.ParameterToString(onlyCreatedByCurrentIntegration.Value);

                    if (orderStatus.IsSet)
                        parseQueryStringLocalVar["orderStatus"] = ClientUtils.ParameterToString(orderStatus.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (showInherited.IsSet)
                        parseQueryStringLocalVar["showInherited"] = ClientUtils.ParameterToString(showInherited.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersGetApiResponse>();

                        SalesOrdersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersGetDefaultImplementation(apiResponseLocalVar, customerNos, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, onlyCreatedByCurrentIntegration, orderStatus, projectCodes, showInherited, resourceParameter);

                        Events.ExecuteOnSalesOrdersGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersGetDefaultImplementation(e, "/SalesOrders", uriBuilderLocalVar.Path, customerNos, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, onlyCreatedByCurrentIntegration, orderStatus, projectCodes, showInherited, resourceParameter);
                Events.ExecuteOnErrorSalesOrdersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersGetApiResponse"/>
        /// </summary>
        public partial class SalesOrdersGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersGetApiResponse(ILogger<SalesOrdersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SalesOrderDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SalesOrderDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SalesOrderDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersIdDelete(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterSalesOrdersIdDeleteDefaultImplementation(ISalesOrdersIdDeleteApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterSalesOrdersIdDelete(ref bool suppressDefaultLog, ISalesOrdersIdDeleteApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorSalesOrdersIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorSalesOrdersIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete an sales order entity with a given id. (Auth roles: SalesOrders_Full) Deletes all sales order information, including header and lines.
        /// </summary>
        /// <param name="id">The id of the sales order to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdDeleteApiResponse?> SalesOrdersIdDeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an sales order entity with a given id. (Auth roles: SalesOrders_Full) Deletes all sales order information, including header and lines.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdDeleteApiResponse> SalesOrdersIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSalesOrdersIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersIdDeleteApiResponse>();

                        SalesOrdersIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnSalesOrdersIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersIdDeleteDefaultImplementation(e, "/SalesOrders/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorSalesOrdersIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersIdDeleteApiResponse"/>
        /// </summary>
        public partial class SalesOrdersIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersIdDeleteApiResponse(ILogger<SalesOrdersIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersIdPatch(ref Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateSalesOrdersIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterSalesOrdersIdPatchDefaultImplementation(ISalesOrdersIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterSalesOrdersIdPatch(ref bool suppressDefaultLog, ISalesOrdersIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorSalesOrdersIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorSalesOrdersIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing sales order with a given id. (Auth roles: SalesOrders_Full) 
        /// </summary>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="operation">JSON Patch structure for updating an Sales Order. See SalesOrderPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdPatchApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdPatchApiResponse?> SalesOrdersIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersIdPatchAsync(id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing sales order with a given id. (Auth roles: SalesOrders_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the sales order.</param>
        /// <param name="operation">JSON Patch structure for updating an Sales Order. See SalesOrderPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdPatchApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdPatchApiResponse> SalesOrdersIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalesOrdersIdPatch(operation);

                FormatSalesOrdersIdPatch(ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersIdPatchApiResponse>();

                        SalesOrdersIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersIdPatchDefaultImplementation(apiResponseLocalVar, id, operation);

                        Events.ExecuteOnSalesOrdersIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersIdPatchDefaultImplementation(e, "/SalesOrders/{id}", uriBuilderLocalVar.Path, id, operation);
                Events.ExecuteOnErrorSalesOrdersIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersIdPatchApiResponse"/>
        /// </summary>
        public partial class SalesOrdersIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersIdPatchApiResponse(ILogger<SalesOrdersIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SalesOrderDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SalesOrderDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.SalesOrderDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
