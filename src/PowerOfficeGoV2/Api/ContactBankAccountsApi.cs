// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContactBankAccountsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContactBankAccountsApiEvents Events { get; }

        /// <summary>
        /// Delete an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the contact bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdDeleteApiResponse"/>&gt;</returns>
        Task<IContactBankAccountsContactIdIdDeleteApiResponse> ContactBankAccountsContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the contact bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdDeleteApiResponse"/>?&gt;</returns>
        Task<IContactBankAccountsContactIdIdDeleteApiResponse?> ContactBankAccountsContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdPatchApiResponse"/>&gt;</returns>
        Task<IContactBankAccountsContactIdIdPatchApiResponse> ContactBankAccountsContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdPatchApiResponse"/>?&gt;</returns>
        Task<IContactBankAccountsContactIdIdPatchApiResponse?> ContactBankAccountsContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add new bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdPostApiResponse"/>&gt;</returns>
        Task<IContactBankAccountsContactIdPostApiResponse> ContactBankAccountsContactIdPostAsync(long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add new bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdPostApiResponse"/>?&gt;</returns>
        Task<IContactBankAccountsContactIdPostApiResponse?> ContactBankAccountsContactIdPostOrDefaultAsync(long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the bank accounts set on the client contacts (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// Queries can be done independent of the contact objects, but the response is coupled with the contact access privileges. Multiple filtering options.              Bank accounts set on contacts are used for payments and information purposes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccountNumbers">Filter by bank account numbers. Separate by comma to filter on multiple bank accounts. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="contactIds">Filter contact bank accounts by the contact id&#39;s. Separate by comma to filter on multiple id&#39;s. If filterString is null or whitespace, the query will lookup all the contacts the integration has access and privileges for. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact bank account created timestamp property.                  This filtering will return all bank accounts with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact bank account last changed timestamp property.                  This filtering will return all bank accounts with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsGetApiResponse"/>&gt;</returns>
        Task<IContactBankAccountsGetApiResponse> ContactBankAccountsGetAsync(Option<string> bankAccountNumbers = default, Option<string> contactIds = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the bank accounts set on the client contacts (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// Queries can be done independent of the contact objects, but the response is coupled with the contact access privileges. Multiple filtering options.              Bank accounts set on contacts are used for payments and information purposes.
        /// </remarks>
        /// <param name="bankAccountNumbers">Filter by bank account numbers. Separate by comma to filter on multiple bank accounts. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="contactIds">Filter contact bank accounts by the contact id&#39;s. Separate by comma to filter on multiple id&#39;s. If filterString is null or whitespace, the query will lookup all the contacts the integration has access and privileges for. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact bank account created timestamp property.                  This filtering will return all bank accounts with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact bank account last changed timestamp property.                  This filtering will return all bank accounts with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsGetApiResponse"/>?&gt;</returns>
        Task<IContactBankAccountsGetApiResponse?> ContactBankAccountsGetOrDefaultAsync(Option<string> bankAccountNumbers = default, Option<string> contactIds = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact bank account given contact id and bank account id (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactBankAccountsByIdApiResponse"/>&gt;</returns>
        Task<IGetContactBankAccountsByIdApiResponse> GetContactBankAccountsByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact bank account given contact id and bank account id (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactBankAccountsByIdApiResponse"/>?&gt;</returns>
        Task<IGetContactBankAccountsByIdApiResponse?> GetContactBankAccountsByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IContactBankAccountsContactIdIdDeleteApiResponse"/>
    /// </summary>
    public interface IContactBankAccountsContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactBankAccountsContactIdIdPatchApiResponse"/>
    /// </summary>
    public interface IContactBankAccountsContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactBankAccountDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactBankAccountsContactIdPostApiResponse"/>
    /// </summary>
    public interface IContactBankAccountsContactIdPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ContactBankAccountDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactBankAccountsGetApiResponse"/>
    /// </summary>
    public interface IContactBankAccountsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<ContactBankAccountDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactBankAccountsByIdApiResponse"/>
    /// </summary>
    public interface IGetContactBankAccountsByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactBankAccountDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContactBankAccountsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactBankAccountsContactIdIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactBankAccountsContactIdIdDelete;

        internal void ExecuteOnContactBankAccountsContactIdIdDelete(ContactBankAccountsApi.ContactBankAccountsContactIdIdDeleteApiResponse apiResponse)
        {
            OnContactBankAccountsContactIdIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactBankAccountsContactIdIdDelete(Exception exception)
        {
            OnErrorContactBankAccountsContactIdIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactBankAccountsContactIdIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactBankAccountsContactIdIdPatch;

        internal void ExecuteOnContactBankAccountsContactIdIdPatch(ContactBankAccountsApi.ContactBankAccountsContactIdIdPatchApiResponse apiResponse)
        {
            OnContactBankAccountsContactIdIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactBankAccountsContactIdIdPatch(Exception exception)
        {
            OnErrorContactBankAccountsContactIdIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactBankAccountsContactIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactBankAccountsContactIdPost;

        internal void ExecuteOnContactBankAccountsContactIdPost(ContactBankAccountsApi.ContactBankAccountsContactIdPostApiResponse apiResponse)
        {
            OnContactBankAccountsContactIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactBankAccountsContactIdPost(Exception exception)
        {
            OnErrorContactBankAccountsContactIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactBankAccountsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactBankAccountsGet;

        internal void ExecuteOnContactBankAccountsGet(ContactBankAccountsApi.ContactBankAccountsGetApiResponse apiResponse)
        {
            OnContactBankAccountsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactBankAccountsGet(Exception exception)
        {
            OnErrorContactBankAccountsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactBankAccountsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactBankAccountsById;

        internal void ExecuteOnGetContactBankAccountsById(ContactBankAccountsApi.GetContactBankAccountsByIdApiResponse apiResponse)
        {
            OnGetContactBankAccountsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactBankAccountsById(Exception exception)
        {
            OnErrorGetContactBankAccountsById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContactBankAccountsApi : IContactBankAccountsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContactBankAccountsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContactBankAccountsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactBankAccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactBankAccountsApi(ILogger<ContactBankAccountsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContactBankAccountsApiEvents contactBankAccountsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContactBankAccountsApi>();
            HttpClient = httpClient;
            Events = contactBankAccountsApiEvents;
        }

        partial void FormatContactBankAccountsContactIdIdDelete(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterContactBankAccountsContactIdIdDeleteDefaultImplementation(IContactBankAccountsContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterContactBankAccountsContactIdIdDelete(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterContactBankAccountsContactIdIdDelete(ref bool suppressDefaultLog, IContactBankAccountsContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorContactBankAccountsContactIdIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactBankAccountsContactIdIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorContactBankAccountsContactIdIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Delete an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the contact bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdIdDeleteApiResponse?> ContactBankAccountsContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactBankAccountsContactIdIdDeleteAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the contact bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdIdDeleteApiResponse> ContactBankAccountsContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatContactBankAccountsContactIdIdDelete(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactBankAccounts/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactBankAccountsContactIdIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactBankAccountsContactIdIdDeleteApiResponse>();

                        ContactBankAccountsContactIdIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactBankAccounts/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactBankAccountsContactIdIdDeleteDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnContactBankAccountsContactIdIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactBankAccountsContactIdIdDeleteDefaultImplementation(e, "/ContactBankAccounts/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorContactBankAccountsContactIdIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactBankAccountsContactIdIdDeleteApiResponse"/>
        /// </summary>
        public partial class ContactBankAccountsContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactBankAccountsContactIdIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactBankAccountsContactIdIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactBankAccountsContactIdIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactBankAccountsContactIdIdDeleteApiResponse(ILogger<ContactBankAccountsContactIdIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactBankAccountsContactIdIdPatch(ref long contactId, ref long id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateContactBankAccountsContactIdIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterContactBankAccountsContactIdIdPatchDefaultImplementation(IContactBankAccountsContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterContactBankAccountsContactIdIdPatch(ref suppressDefaultLog, apiResponseLocalVar, contactId, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterContactBankAccountsContactIdIdPatch(ref bool suppressDefaultLog, IContactBankAccountsContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorContactBankAccountsContactIdIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactBankAccountsContactIdIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorContactBankAccountsContactIdIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Update an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdIdPatchApiResponse?> ContactBankAccountsContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactBankAccountsContactIdIdPatchAsync(contactId, id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update an existing bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdIdPatchApiResponse> ContactBankAccountsContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactBankAccountsContactIdIdPatch(operation);

                FormatContactBankAccountsContactIdIdPatch(ref contactId, ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactBankAccounts/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactBankAccountsContactIdIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactBankAccountsContactIdIdPatchApiResponse>();

                        ContactBankAccountsContactIdIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactBankAccounts/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactBankAccountsContactIdIdPatchDefaultImplementation(apiResponseLocalVar, contactId, id, operation);

                        Events.ExecuteOnContactBankAccountsContactIdIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactBankAccountsContactIdIdPatchDefaultImplementation(e, "/ContactBankAccounts/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id, operation);
                Events.ExecuteOnErrorContactBankAccountsContactIdIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactBankAccountsContactIdIdPatchApiResponse"/>
        /// </summary>
        public partial class ContactBankAccountsContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactBankAccountsContactIdIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactBankAccountsContactIdIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactBankAccountsContactIdIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactBankAccountsContactIdIdPatchApiResponse(ILogger<ContactBankAccountsContactIdIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactBankAccountDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactBankAccountDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactBankAccountDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactBankAccountsContactIdPost(ref long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactBankAccountPostDto"></param>
        /// <returns></returns>
        private void ValidateContactBankAccountsContactIdPost(Option<ContactBankAccountPostDto> contactBankAccountPostDto)
        {
            if (contactBankAccountPostDto.IsSet && contactBankAccountPostDto.Value == null)
                throw new ArgumentNullException(nameof(contactBankAccountPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"></param>
        private void AfterContactBankAccountsContactIdPostDefaultImplementation(IContactBankAccountsContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto)
        {
            bool suppressDefaultLog = false;
            AfterContactBankAccountsContactIdPost(ref suppressDefaultLog, apiResponseLocalVar, contactId, contactBankAccountPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"></param>
        partial void AfterContactBankAccountsContactIdPost(ref bool suppressDefaultLog, IContactBankAccountsContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"></param>
        private void OnErrorContactBankAccountsContactIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactBankAccountsContactIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, contactBankAccountPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"></param>
        partial void OnErrorContactBankAccountsContactIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto);

        /// <summary>
        /// Add new bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdPostApiResponse?> ContactBankAccountsContactIdPostOrDefaultAsync(long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactBankAccountsContactIdPostAsync(contactId, contactBankAccountPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add new bank account on a contact (customer/employee/supplier) with a given id. (Auth roles: ContactBankAccount_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId"></param>
        /// <param name="contactBankAccountPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsContactIdPostApiResponse> ContactBankAccountsContactIdPostAsync(long contactId, Option<ContactBankAccountPostDto> contactBankAccountPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactBankAccountsContactIdPost(contactBankAccountPostDto);

                FormatContactBankAccountsContactIdPost(ref contactId, contactBankAccountPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactBankAccounts/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    if (contactBankAccountPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (contactBankAccountPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactBankAccountPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactBankAccountsContactIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactBankAccountsContactIdPostApiResponse>();

                        ContactBankAccountsContactIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactBankAccounts/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactBankAccountsContactIdPostDefaultImplementation(apiResponseLocalVar, contactId, contactBankAccountPostDto);

                        Events.ExecuteOnContactBankAccountsContactIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactBankAccountsContactIdPostDefaultImplementation(e, "/ContactBankAccounts/{contactId}", uriBuilderLocalVar.Path, contactId, contactBankAccountPostDto);
                Events.ExecuteOnErrorContactBankAccountsContactIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactBankAccountsContactIdPostApiResponse"/>
        /// </summary>
        public partial class ContactBankAccountsContactIdPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactBankAccountsContactIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactBankAccountsContactIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactBankAccountsContactIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactBankAccountsContactIdPostApiResponse(ILogger<ContactBankAccountsContactIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactBankAccountDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactBankAccountDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactBankAccountDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactBankAccountsGet(ref Option<string> bankAccountNumbers, ref Option<string> contactIds, ref Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, ref Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="bankAccountNumbers"></param>
        /// <param name="contactIds"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateContactBankAccountsGet(Option<string> bankAccountNumbers, Option<string> contactIds, Option<ResourceParameters> resourceParameter)
        {
            if (bankAccountNumbers.IsSet && bankAccountNumbers.Value == null)
                throw new ArgumentNullException(nameof(bankAccountNumbers));

            if (contactIds.IsSet && contactIds.Value == null)
                throw new ArgumentNullException(nameof(contactIds));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bankAccountNumbers"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void AfterContactBankAccountsGetDefaultImplementation(IContactBankAccountsGetApiResponse apiResponseLocalVar, Option<string> bankAccountNumbers, Option<string> contactIds, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterContactBankAccountsGet(ref suppressDefaultLog, apiResponseLocalVar, bankAccountNumbers, contactIds, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bankAccountNumbers"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterContactBankAccountsGet(ref bool suppressDefaultLog, IContactBankAccountsGetApiResponse apiResponseLocalVar, Option<string> bankAccountNumbers, Option<string> contactIds, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bankAccountNumbers"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorContactBankAccountsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> bankAccountNumbers, Option<string> contactIds, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactBankAccountsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, bankAccountNumbers, contactIds, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bankAccountNumbers"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorContactBankAccountsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> bankAccountNumbers, Option<string> contactIds, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the bank accounts set on the client contacts (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) Queries can be done independent of the contact objects, but the response is coupled with the contact access privileges. Multiple filtering options.              Bank accounts set on contacts are used for payments and information purposes.
        /// </summary>
        /// <param name="bankAccountNumbers">Filter by bank account numbers. Separate by comma to filter on multiple bank accounts. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="contactIds">Filter contact bank accounts by the contact id&#39;s. Separate by comma to filter on multiple id&#39;s. If filterString is null or whitespace, the query will lookup all the contacts the integration has access and privileges for. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact bank account created timestamp property.                  This filtering will return all bank accounts with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact bank account last changed timestamp property.                  This filtering will return all bank accounts with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsGetApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsGetApiResponse?> ContactBankAccountsGetOrDefaultAsync(Option<string> bankAccountNumbers = default, Option<string> contactIds = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactBankAccountsGetAsync(bankAccountNumbers, contactIds, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the bank accounts set on the client contacts (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) Queries can be done independent of the contact objects, but the response is coupled with the contact access privileges. Multiple filtering options.              Bank accounts set on contacts are used for payments and information purposes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccountNumbers">Filter by bank account numbers. Separate by comma to filter on multiple bank accounts. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="contactIds">Filter contact bank accounts by the contact id&#39;s. Separate by comma to filter on multiple id&#39;s. If filterString is null or whitespace, the query will lookup all the contacts the integration has access and privileges for. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact bank account created timestamp property.                  This filtering will return all bank accounts with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact bank account last changed timestamp property.                  This filtering will return all bank accounts with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactBankAccountsGetApiResponse"/>&gt;</returns>
        public async Task<IContactBankAccountsGetApiResponse> ContactBankAccountsGetAsync(Option<string> bankAccountNumbers = default, Option<string> contactIds = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactBankAccountsGet(bankAccountNumbers, contactIds, resourceParameter);

                FormatContactBankAccountsGet(ref bankAccountNumbers, ref contactIds, ref createdDateTimeOffsetGreaterThan, ref lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactBankAccounts";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (bankAccountNumbers.IsSet)
                        parseQueryStringLocalVar["bankAccountNumbers"] = ClientUtils.ParameterToString(bankAccountNumbers.Value);

                    if (contactIds.IsSet)
                        parseQueryStringLocalVar["contactIds"] = ClientUtils.ParameterToString(contactIds.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactBankAccountsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactBankAccountsGetApiResponse>();

                        ContactBankAccountsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactBankAccounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactBankAccountsGetDefaultImplementation(apiResponseLocalVar, bankAccountNumbers, contactIds, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                        Events.ExecuteOnContactBankAccountsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactBankAccountsGetDefaultImplementation(e, "/ContactBankAccounts", uriBuilderLocalVar.Path, bankAccountNumbers, contactIds, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
                Events.ExecuteOnErrorContactBankAccountsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactBankAccountsGetApiResponse"/>
        /// </summary>
        public partial class ContactBankAccountsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactBankAccountsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactBankAccountsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactBankAccountsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactBankAccountsGetApiResponse(ILogger<ContactBankAccountsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ContactBankAccountDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ContactBankAccountDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ContactBankAccountDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactBankAccountsById(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterGetContactBankAccountsByIdDefaultImplementation(IGetContactBankAccountsByIdApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetContactBankAccountsById(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterGetContactBankAccountsById(ref bool suppressDefaultLog, IGetContactBankAccountsByIdApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorGetContactBankAccountsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactBankAccountsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorGetContactBankAccountsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Get a contact bank account given contact id and bank account id (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) 
        /// </summary>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactBankAccountsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactBankAccountsByIdApiResponse?> GetContactBankAccountsByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactBankAccountsByIdAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a contact bank account given contact id and bank account id (customer/employee/supplier). (Auth roles: ContactBankAccount, ContactBankAccount_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of the bank account</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactBankAccountsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactBankAccountsByIdApiResponse> GetContactBankAccountsByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetContactBankAccountsById(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactBankAccounts/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactBankAccountsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactBankAccountsByIdApiResponse>();

                        GetContactBankAccountsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactBankAccounts/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactBankAccountsByIdDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnGetContactBankAccountsById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactBankAccountsByIdDefaultImplementation(e, "/ContactBankAccounts/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorGetContactBankAccountsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactBankAccountsByIdApiResponse"/>
        /// </summary>
        public partial class GetContactBankAccountsByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetContactBankAccountsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactBankAccountsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactBankAccountsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactBankAccountsByIdApiResponse(ILogger<GetContactBankAccountsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactBankAccountDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactBankAccountDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactBankAccountDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
