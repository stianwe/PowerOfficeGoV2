// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentSalariesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentSalariesApiEvents Events { get; }

        /// <summary>
        /// Get salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentSalary,EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse> EmployeesEmploymentsEmploymentIdSalariesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentSalary,EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse?> EmployeesEmploymentsEmploymentIdSalariesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse> EmployeesEmploymentsEmploymentIdSalariesPostAsync(long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse?> EmployeesEmploymentsEmploymentIdSalariesPostOrDefaultAsync(long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// Note that there must be at least one salary line on an employment, so if the last salary line is attempted to be deleted you will get a 409 Conflict response.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// Note that there must be at least one salary line on an employment, so if the last salary line is attempted to be deleted you will get a 409 Conflict response.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteOrDefaultAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a salary (line). See EmploymentSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse> EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchAsync(long employmentId, long salaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing salary (line) on a given employment. (Auth roles: EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a salary (line). See EmploymentSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchOrDefaultAsync(long employmentId, long salaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific salary (line) on a given employment. (Auth roles: EmploymentSalary,EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalaryByIdApiResponse"/>&gt;</returns>
        Task<IGetSalaryByIdApiResponse> GetSalaryByIdAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific salary (line) on a given employment. (Auth roles: EmploymentSalary,EmploymentSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalaryByIdApiResponse"/>?&gt;</returns>
        Task<IGetSalaryByIdApiResponse?> GetSalaryByIdOrDefaultAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentSalaryDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentSalaryDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentSalaryDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSalaryByIdApiResponse"/>
    /// </summary>
    public interface IGetSalaryByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentSalaryDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentSalariesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdSalariesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdSalariesGet;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdSalariesGet(EmploymentSalariesApi.EmployeesEmploymentsEmploymentIdSalariesGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdSalariesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdSalariesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdSalariesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdSalariesPost;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdSalariesPost(EmploymentSalariesApi.EmployeesEmploymentsEmploymentIdSalariesPostApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdSalariesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesPost(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdSalariesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(EmploymentSalariesApi.EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(EmploymentSalariesApi.EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSalaryById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSalaryById;

        internal void ExecuteOnGetSalaryById(EmploymentSalariesApi.GetSalaryByIdApiResponse apiResponse)
        {
            OnGetSalaryById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSalaryById(Exception exception)
        {
            OnErrorGetSalaryById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentSalariesApi : IEmploymentSalariesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentSalariesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentSalariesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentSalariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentSalariesApi(ILogger<EmploymentSalariesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentSalariesApiEvents employmentSalariesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentSalariesApi>();
            HttpClient = httpClient;
            Events = employmentSalariesApiEvents;
        }

        partial void FormatEmployeesEmploymentsEmploymentIdSalariesGet(ref long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdSalariesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsEmploymentIdSalariesGetDefaultImplementation(IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdSalariesGet(ref suppressDefaultLog, apiResponseLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdSalariesGet(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdSalariesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdSalariesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdSalariesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentSalary,EmploymentSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse?> EmployeesEmploymentsEmploymentIdSalariesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdSalariesGetAsync(employmentId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentSalary,EmploymentSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse> EmployeesEmploymentsEmploymentIdSalariesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdSalariesGet(resourceParameter);

                FormatEmployeesEmploymentsEmploymentIdSalariesGet(ref employmentId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Salaries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdSalariesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdSalariesGetApiResponse>();

                        EmployeesEmploymentsEmploymentIdSalariesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Salaries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdSalariesGetDefaultImplementation(apiResponseLocalVar, employmentId, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdSalariesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdSalariesGetDefaultImplementation(e, "/Employees/Employments/{employmentId}/Salaries", uriBuilderLocalVar.Path, employmentId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdSalariesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdSalariesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdSalariesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdSalariesGetApiResponse(ILogger<EmployeesEmploymentsEmploymentIdSalariesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentSalaryDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentSalaryDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentSalaryDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdSalariesPost(ref long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentSalaryPostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdSalariesPost(Option<EmploymentSalaryPostDto> employmentSalaryPostDto)
        {
            if (employmentSalaryPostDto.IsSet && employmentSalaryPostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentSalaryPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentSalaryPostDto"></param>
        private void AfterEmployeesEmploymentsEmploymentIdSalariesPostDefaultImplementation(IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdSalariesPost(ref suppressDefaultLog, apiResponseLocalVar, employmentId, employmentSalaryPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentSalaryPostDto"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdSalariesPost(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentSalaryPostDto"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdSalariesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdSalariesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, employmentSalaryPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentSalaryPostDto"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdSalariesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto);

        /// <summary>
        /// Create a new salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse?> EmployeesEmploymentsEmploymentIdSalariesPostOrDefaultAsync(long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdSalariesPostAsync(employmentId, employmentSalaryPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse> EmployeesEmploymentsEmploymentIdSalariesPostAsync(long employmentId, Option<EmploymentSalaryPostDto> employmentSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdSalariesPost(employmentSalaryPostDto);

                FormatEmployeesEmploymentsEmploymentIdSalariesPost(ref employmentId, employmentSalaryPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Salaries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (employmentSalaryPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentSalaryPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentSalaryPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdSalariesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdSalariesPostApiResponse>();

                        EmployeesEmploymentsEmploymentIdSalariesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Salaries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdSalariesPostDefaultImplementation(apiResponseLocalVar, employmentId, employmentSalaryPostDto);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdSalariesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdSalariesPostDefaultImplementation(e, "/Employees/Employments/{employmentId}/Salaries", uriBuilderLocalVar.Path, employmentId, employmentSalaryPostDto);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdSalariesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdSalariesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdSalariesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdSalariesPostApiResponse(ILogger<EmployeesEmploymentsEmploymentIdSalariesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentSalaryDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref long employmentId, ref long salaryId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        private void AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteDefaultImplementation(IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse apiResponseLocalVar, long employmentId, long salaryId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employmentId, salaryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse apiResponseLocalVar, long employmentId, long salaryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, salaryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId);

        /// <summary>
        /// Delete a specific salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) Note that there must be at least one salary line on an employment, so if the last salary line is attempted to be deleted you will get a 409 Conflict response.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteOrDefaultAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteAsync(employmentId, salaryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) Note that there must be at least one salary line on an employment, so if the last salary line is attempted to be deleted you will get a 409 Conflict response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(ref employmentId, ref salaryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Salaries/{salaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalaryId%7D", Uri.EscapeDataString(salaryId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse>();

                        EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteDefaultImplementation(apiResponseLocalVar, employmentId, salaryId);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteDefaultImplementation(e, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", uriBuilderLocalVar.Path, employmentId, salaryId);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse(ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref long employmentId, ref long salaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchDefaultImplementation(IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse apiResponseLocalVar, long employmentId, long salaryId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employmentId, salaryId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse apiResponseLocalVar, long employmentId, long salaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, salaryId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a salary (line). See EmploymentSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchOrDefaultAsync(long employmentId, long salaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchAsync(employmentId, salaryId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing salary (line) on a given employment. (Auth roles: EmploymentSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a salary (line). See EmploymentSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse> EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchAsync(long employmentId, long salaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(operation);

                FormatEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(ref employmentId, ref salaryId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Salaries/{salaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalaryId%7D", Uri.EscapeDataString(salaryId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse>();

                        EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchDefaultImplementation(apiResponseLocalVar, employmentId, salaryId, operation);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchDefaultImplementation(e, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", uriBuilderLocalVar.Path, employmentId, salaryId, operation);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse(ILogger<EmployeesEmploymentsEmploymentIdSalariesSalaryIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentSalaryDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSalaryById(ref long employmentId, ref long salaryId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        private void AfterGetSalaryByIdDefaultImplementation(IGetSalaryByIdApiResponse apiResponseLocalVar, long employmentId, long salaryId)
        {
            bool suppressDefaultLog = false;
            AfterGetSalaryById(ref suppressDefaultLog, apiResponseLocalVar, employmentId, salaryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        partial void AfterGetSalaryById(ref bool suppressDefaultLog, IGetSalaryByIdApiResponse apiResponseLocalVar, long employmentId, long salaryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        private void OnErrorGetSalaryByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSalaryById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, salaryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="salaryId"></param>
        partial void OnErrorGetSalaryById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long salaryId);

        /// <summary>
        /// Gets a specific salary (line) on a given employment. (Auth roles: EmploymentSalary,EmploymentSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalaryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSalaryByIdApiResponse?> GetSalaryByIdOrDefaultAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSalaryByIdAsync(employmentId, salaryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific salary (line) on a given employment. (Auth roles: EmploymentSalary,EmploymentSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="salaryId">The id of the salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSalaryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSalaryByIdApiResponse> GetSalaryByIdAsync(long employmentId, long salaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSalaryById(ref employmentId, ref salaryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Salaries/{salaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalaryId%7D", Uri.EscapeDataString(salaryId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSalaryByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSalaryByIdApiResponse>();

                        GetSalaryByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSalaryByIdDefaultImplementation(apiResponseLocalVar, employmentId, salaryId);

                        Events.ExecuteOnGetSalaryById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSalaryByIdDefaultImplementation(e, "/Employees/Employments/{employmentId}/Salaries/{salaryId}", uriBuilderLocalVar.Path, employmentId, salaryId);
                Events.ExecuteOnErrorGetSalaryById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSalaryByIdApiResponse"/>
        /// </summary>
        public partial class GetSalaryByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetSalaryByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSalaryByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSalaryByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSalaryByIdApiResponse(ILogger<GetSalaryByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentSalaryDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
