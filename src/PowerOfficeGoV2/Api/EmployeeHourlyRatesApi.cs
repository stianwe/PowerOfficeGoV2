// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmployeeHourlyRatesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmployeeHourlyRatesApiEvents Events { get; }

        /// <summary>
        /// Gets all hourly rates registered on the employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="validNow">Sets a parameter filtering the hourly rates that are active and in effect at the time of the query (if set true). If false, the complete collection of hourly rates will be returned, including past rates and future sets (if any). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesGetApiResponse> EmployeesEmployeeIdHourlyRatesGetAsync(long employeeId, Option<bool> validNow = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all hourly rates registered on the employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="validNow">Sets a parameter filtering the hourly rates that are active and in effect at the time of the query (if set true). If false, the complete collection of hourly rates will be returned, including past rates and future sets (if any). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesGetApiResponse?> EmployeesEmployeeIdHourlyRatesGetOrDefaultAsync(long employeeId, Option<bool> validNow = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific set of hourly rates on a given employee. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee the hourly rate belongs to.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse> EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific set of hourly rates on a given employee. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee the hourly rate belongs to.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse?> EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteOrDefaultAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing hourly rate entry on an employee with a given (hourlRate) Id. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to update.</param>
        /// <param name="operation">JSON Patch structure for updating an hourly rate. See EmployeeHourlyRatesPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse> EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchAsync(long employeeId, long hourlyRateId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing hourly rate entry on an employee with a given (hourlRate) Id. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to update.</param>
        /// <param name="operation">JSON Patch structure for updating an hourly rate. See EmployeeHourlyRatesPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse?> EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchOrDefaultAsync(long employeeId, long hourlyRateId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one new hourly rate entity. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employeeHourlyRatePostDto">A employee hourly rate post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesPostApiResponse> EmployeesEmployeeIdHourlyRatesPostAsync(long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one new hourly rate entity. (Auth roles: EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employeeHourlyRatePostDto">A employee hourly rate post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdHourlyRatesPostApiResponse?> EmployeesEmployeeIdHourlyRatesPostOrDefaultAsync(long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific hourly rate on a given employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHourlyRateByIdApiResponse"/>&gt;</returns>
        Task<IGetHourlyRateByIdApiResponse> GetHourlyRateByIdAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific hourly rate on a given employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHourlyRateByIdApiResponse"/>?&gt;</returns>
        Task<IGetHourlyRateByIdApiResponse?> GetHourlyRateByIdOrDefaultAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdHourlyRatesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdHourlyRatesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmployeeHourlyRateDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmployeeHourlyRateDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdHourlyRatesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdHourlyRatesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmployeeHourlyRateDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetHourlyRateByIdApiResponse"/>
    /// </summary>
    public interface IGetHourlyRateByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmployeeHourlyRateDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmployeeHourlyRatesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdHourlyRatesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdHourlyRatesGet;

        internal void ExecuteOnEmployeesEmployeeIdHourlyRatesGet(EmployeeHourlyRatesApi.EmployeesEmployeeIdHourlyRatesGetApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdHourlyRatesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdHourlyRatesGet(Exception exception)
        {
            OnErrorEmployeesEmployeeIdHourlyRatesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete;

        internal void ExecuteOnEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(EmployeeHourlyRatesApi.EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(Exception exception)
        {
            OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch;

        internal void ExecuteOnEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(EmployeeHourlyRatesApi.EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(Exception exception)
        {
            OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdHourlyRatesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdHourlyRatesPost;

        internal void ExecuteOnEmployeesEmployeeIdHourlyRatesPost(EmployeeHourlyRatesApi.EmployeesEmployeeIdHourlyRatesPostApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdHourlyRatesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdHourlyRatesPost(Exception exception)
        {
            OnErrorEmployeesEmployeeIdHourlyRatesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetHourlyRateById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetHourlyRateById;

        internal void ExecuteOnGetHourlyRateById(EmployeeHourlyRatesApi.GetHourlyRateByIdApiResponse apiResponse)
        {
            OnGetHourlyRateById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetHourlyRateById(Exception exception)
        {
            OnErrorGetHourlyRateById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmployeeHourlyRatesApi : IEmployeeHourlyRatesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmployeeHourlyRatesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmployeeHourlyRatesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeHourlyRatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmployeeHourlyRatesApi(ILogger<EmployeeHourlyRatesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmployeeHourlyRatesApiEvents employeeHourlyRatesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmployeeHourlyRatesApi>();
            HttpClient = httpClient;
            Events = employeeHourlyRatesApiEvents;
        }

        partial void FormatEmployeesEmployeeIdHourlyRatesGet(ref long employeeId, ref Option<bool> validNow, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdHourlyRatesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="validNow"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmployeeIdHourlyRatesGetDefaultImplementation(IEmployeesEmployeeIdHourlyRatesGetApiResponse apiResponseLocalVar, long employeeId, Option<bool> validNow, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdHourlyRatesGet(ref suppressDefaultLog, apiResponseLocalVar, employeeId, validNow, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="validNow"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmployeeIdHourlyRatesGet(ref bool suppressDefaultLog, IEmployeesEmployeeIdHourlyRatesGetApiResponse apiResponseLocalVar, long employeeId, Option<bool> validNow, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="validNow"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmployeeIdHourlyRatesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<bool> validNow, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdHourlyRatesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, validNow, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="validNow"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmployeeIdHourlyRatesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<bool> validNow, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets all hourly rates registered on the employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="validNow">Sets a parameter filtering the hourly rates that are active and in effect at the time of the query (if set true). If false, the complete collection of hourly rates will be returned, including past rates and future sets (if any). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesGetApiResponse?> EmployeesEmployeeIdHourlyRatesGetOrDefaultAsync(long employeeId, Option<bool> validNow = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdHourlyRatesGetAsync(employeeId, validNow, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all hourly rates registered on the employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="validNow">Sets a parameter filtering the hourly rates that are active and in effect at the time of the query (if set true). If false, the complete collection of hourly rates will be returned, including past rates and future sets (if any). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesGetApiResponse> EmployeesEmployeeIdHourlyRatesGetAsync(long employeeId, Option<bool> validNow = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdHourlyRatesGet(resourceParameter);

                FormatEmployeesEmployeeIdHourlyRatesGet(ref employeeId, ref validNow, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/HourlyRates";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validNow.IsSet)
                        parseQueryStringLocalVar["validNow"] = ClientUtils.ParameterToString(validNow.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdHourlyRatesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdHourlyRatesGetApiResponse>();

                        EmployeesEmployeeIdHourlyRatesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/HourlyRates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdHourlyRatesGetDefaultImplementation(apiResponseLocalVar, employeeId, validNow, resourceParameter);

                        Events.ExecuteOnEmployeesEmployeeIdHourlyRatesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdHourlyRatesGetDefaultImplementation(e, "/Employees/{employeeId}/HourlyRates", uriBuilderLocalVar.Path, employeeId, validNow, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmployeeIdHourlyRatesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdHourlyRatesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdHourlyRatesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdHourlyRatesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdHourlyRatesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdHourlyRatesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdHourlyRatesGetApiResponse(ILogger<EmployeesEmployeeIdHourlyRatesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmployeeHourlyRateDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmployeeHourlyRateDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmployeeHourlyRateDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref long employeeId, ref long hourlyRateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        private void AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteDefaultImplementation(IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employeeId, hourlyRateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        partial void AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref bool suppressDefaultLog, IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        private void OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, hourlyRateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        partial void OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId);

        /// <summary>
        /// Delete a specific set of hourly rates on a given employee. (Auth roles: EmployeeHourlyRates_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee the hourly rate belongs to.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse?> EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteOrDefaultAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteAsync(employeeId, hourlyRateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific set of hourly rates on a given employee. (Auth roles: EmployeeHourlyRates_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee the hourly rate belongs to.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse> EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(ref employeeId, ref hourlyRateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/HourlyRates/{hourlyRateId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BhourlyRateId%7D", Uri.EscapeDataString(hourlyRateId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse>();

                        EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteDefaultImplementation(apiResponseLocalVar, employeeId, hourlyRateId);

                        Events.ExecuteOnEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteDefaultImplementation(e, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", uriBuilderLocalVar.Path, employeeId, hourlyRateId);
                Events.ExecuteOnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse(ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref long employeeId, ref long hourlyRateId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchDefaultImplementation(IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employeeId, hourlyRateId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref bool suppressDefaultLog, IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, hourlyRateId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing hourly rate entry on an employee with a given (hourlRate) Id. (Auth roles: EmployeeHourlyRates_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to update.</param>
        /// <param name="operation">JSON Patch structure for updating an hourly rate. See EmployeeHourlyRatesPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse?> EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchOrDefaultAsync(long employeeId, long hourlyRateId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchAsync(employeeId, hourlyRateId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing hourly rate entry on an employee with a given (hourlRate) Id. (Auth roles: EmployeeHourlyRates_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate to update.</param>
        /// <param name="operation">JSON Patch structure for updating an hourly rate. See EmployeeHourlyRatesPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse> EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchAsync(long employeeId, long hourlyRateId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(operation);

                FormatEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(ref employeeId, ref hourlyRateId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/HourlyRates/{hourlyRateId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BhourlyRateId%7D", Uri.EscapeDataString(hourlyRateId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse>();

                        EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchDefaultImplementation(apiResponseLocalVar, employeeId, hourlyRateId, operation);

                        Events.ExecuteOnEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchDefaultImplementation(e, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", uriBuilderLocalVar.Path, employeeId, hourlyRateId, operation);
                Events.ExecuteOnErrorEmployeesEmployeeIdHourlyRatesHourlyRateIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse(ILogger<EmployeesEmployeeIdHourlyRatesHourlyRateIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeHourlyRateDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeHourlyRateDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeHourlyRateDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdHourlyRatesPost(ref long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employeeHourlyRatePostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdHourlyRatesPost(Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto)
        {
            if (employeeHourlyRatePostDto.IsSet && employeeHourlyRatePostDto.Value == null)
                throw new ArgumentNullException(nameof(employeeHourlyRatePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employeeHourlyRatePostDto"></param>
        private void AfterEmployeesEmployeeIdHourlyRatesPostDefaultImplementation(IEmployeesEmployeeIdHourlyRatesPostApiResponse apiResponseLocalVar, long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdHourlyRatesPost(ref suppressDefaultLog, apiResponseLocalVar, employeeId, employeeHourlyRatePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employeeHourlyRatePostDto"></param>
        partial void AfterEmployeesEmployeeIdHourlyRatesPost(ref bool suppressDefaultLog, IEmployeesEmployeeIdHourlyRatesPostApiResponse apiResponseLocalVar, long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employeeHourlyRatePostDto"></param>
        private void OnErrorEmployeesEmployeeIdHourlyRatesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdHourlyRatesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, employeeHourlyRatePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employeeHourlyRatePostDto"></param>
        partial void OnErrorEmployeesEmployeeIdHourlyRatesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto);

        /// <summary>
        /// Create one new hourly rate entity. (Auth roles: EmployeeHourlyRates_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employeeHourlyRatePostDto">A employee hourly rate post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesPostApiResponse?> EmployeesEmployeeIdHourlyRatesPostOrDefaultAsync(long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdHourlyRatesPostAsync(employeeId, employeeHourlyRatePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create one new hourly rate entity. (Auth roles: EmployeeHourlyRates_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employeeHourlyRatePostDto">A employee hourly rate post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdHourlyRatesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdHourlyRatesPostApiResponse> EmployeesEmployeeIdHourlyRatesPostAsync(long employeeId, Option<EmployeeHourlyRatePostDto> employeeHourlyRatePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdHourlyRatesPost(employeeHourlyRatePostDto);

                FormatEmployeesEmployeeIdHourlyRatesPost(ref employeeId, employeeHourlyRatePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/HourlyRates";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    if (employeeHourlyRatePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employeeHourlyRatePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employeeHourlyRatePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdHourlyRatesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdHourlyRatesPostApiResponse>();

                        EmployeesEmployeeIdHourlyRatesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/HourlyRates", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdHourlyRatesPostDefaultImplementation(apiResponseLocalVar, employeeId, employeeHourlyRatePostDto);

                        Events.ExecuteOnEmployeesEmployeeIdHourlyRatesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdHourlyRatesPostDefaultImplementation(e, "/Employees/{employeeId}/HourlyRates", uriBuilderLocalVar.Path, employeeId, employeeHourlyRatePostDto);
                Events.ExecuteOnErrorEmployeesEmployeeIdHourlyRatesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdHourlyRatesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdHourlyRatesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdHourlyRatesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdHourlyRatesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdHourlyRatesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdHourlyRatesPostApiResponse(ILogger<EmployeesEmployeeIdHourlyRatesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeHourlyRateDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeHourlyRateDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeHourlyRateDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetHourlyRateById(ref long employeeId, ref long hourlyRateId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        private void AfterGetHourlyRateByIdDefaultImplementation(IGetHourlyRateByIdApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId)
        {
            bool suppressDefaultLog = false;
            AfterGetHourlyRateById(ref suppressDefaultLog, apiResponseLocalVar, employeeId, hourlyRateId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        partial void AfterGetHourlyRateById(ref bool suppressDefaultLog, IGetHourlyRateByIdApiResponse apiResponseLocalVar, long employeeId, long hourlyRateId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        private void OnErrorGetHourlyRateByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetHourlyRateById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, hourlyRateId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="hourlyRateId"></param>
        partial void OnErrorGetHourlyRateById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long hourlyRateId);

        /// <summary>
        /// Gets a specific hourly rate on a given employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHourlyRateByIdApiResponse"/>&gt;</returns>
        public async Task<IGetHourlyRateByIdApiResponse?> GetHourlyRateByIdOrDefaultAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetHourlyRateByIdAsync(employeeId, hourlyRateId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific hourly rate on a given employee. (Auth roles: EmployeeHourlyRates,EmployeeHourlyRates_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="hourlyRateId">The id of the hourly rate.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHourlyRateByIdApiResponse"/>&gt;</returns>
        public async Task<IGetHourlyRateByIdApiResponse> GetHourlyRateByIdAsync(long employeeId, long hourlyRateId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetHourlyRateById(ref employeeId, ref hourlyRateId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/HourlyRates/{hourlyRateId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BhourlyRateId%7D", Uri.EscapeDataString(hourlyRateId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetHourlyRateByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetHourlyRateByIdApiResponse>();

                        GetHourlyRateByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetHourlyRateByIdDefaultImplementation(apiResponseLocalVar, employeeId, hourlyRateId);

                        Events.ExecuteOnGetHourlyRateById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetHourlyRateByIdDefaultImplementation(e, "/Employees/{employeeId}/HourlyRates/{hourlyRateId}", uriBuilderLocalVar.Path, employeeId, hourlyRateId);
                Events.ExecuteOnErrorGetHourlyRateById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetHourlyRateByIdApiResponse"/>
        /// </summary>
        public partial class GetHourlyRateByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetHourlyRateByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetHourlyRateByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetHourlyRateByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetHourlyRateByIdApiResponse(ILogger<GetHourlyRateByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeHourlyRateDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeHourlyRateDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeHourlyRateDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
