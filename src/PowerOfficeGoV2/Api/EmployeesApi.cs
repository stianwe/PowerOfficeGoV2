// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmployeesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmployeesApiEvents Events { get; }

        /// <summary>
        /// Change payout bank accounts for an employee with a given id. (Auth roles: EmployeeBankAccounts_Full)
        /// </summary>
        /// <remarks>
        /// Note that in order to use this endpoint you need to have the special privilege \&quot;EmployeeBankAccounts\&quot;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating employee bank accounts. See EmployeeBankAccountsPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdBankAccountsPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdBankAccountsPatchApiResponse> EmployeesEmployeeIdBankAccountsPatchAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change payout bank accounts for an employee with a given id. (Auth roles: EmployeeBankAccounts_Full)
        /// </summary>
        /// <remarks>
        /// Note that in order to use this endpoint you need to have the special privilege \&quot;EmployeeBankAccounts\&quot;.
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating employee bank accounts. See EmployeeBankAccountsPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdBankAccountsPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdBankAccountsPatchApiResponse?> EmployeesEmployeeIdBankAccountsPatchOrDefaultAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an employee entity with a given id. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// If the employee have links to transactions or other entities, or if the contact is an active customer/supplier, this operation cannot be performed.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdDeleteApiResponse> EmployeesEmployeeIdDeleteAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an employee entity with a given id. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// If the employee have links to transactions or other entities, or if the contact is an active customer/supplier, this operation cannot be performed.
        /// </remarks>
        /// <param name="employeeId">The id of the employee to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdDeleteApiResponse?> EmployeesEmployeeIdDeleteOrDefaultAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing employee with a given id. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating an Employee. See EmployeePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdPatchApiResponse> EmployeesEmployeeIdPatchAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing employee with a given id. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating an Employee. See EmployeePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdPatchApiResponse?> EmployeesEmployeeIdPatchOrDefaultAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the employees available on the client. Multiple filtering options. (Auth roles: Employee,Employee_Full)
        /// </summary>
        /// <remarks>
        /// The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupIds">Filter by contact group IDs. Separate by comma [,] to filter on multiple contact group IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan">Filter by the employee created timestamp. This filtering will return all employees with a created timestamp greater than the timestamp provided. Can be used when polling for new entries. Date not inclusive. (optional)</param>
        /// <param name="employeeNos">Filter by employee numbers. Separate by comma [,] to filter on multiple employee numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1, 100-200, 500-\&quot; will result in employees with number 1, from and including 100 to 200, 500 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalImportReference">Filter by external import reference. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalNos">Filter by employee external numbers. Separate by comma [,] to filter on multiple employee external numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;30000, 14153-19534, 150000-\&quot; will result in employees with external number 30000, from and including 14153 to 19534, 150000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp. This filtering will return all employees with a last changed timestamp greater than the timestamp provided. Can be used when polling for new entries. If used, changed employees should replace what was previously stored in the external system. Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesGetApiResponse> EmployeesGetAsync(Option<string> contactGroupIds = default, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan = default, Option<string> employeeNos = default, Option<string> externalImportReference = default, Option<string> externalNos = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the employees available on the client. Multiple filtering options. (Auth roles: Employee,Employee_Full)
        /// </summary>
        /// <remarks>
        /// The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </remarks>
        /// <param name="contactGroupIds">Filter by contact group IDs. Separate by comma [,] to filter on multiple contact group IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan">Filter by the employee created timestamp. This filtering will return all employees with a created timestamp greater than the timestamp provided. Can be used when polling for new entries. Date not inclusive. (optional)</param>
        /// <param name="employeeNos">Filter by employee numbers. Separate by comma [,] to filter on multiple employee numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1, 100-200, 500-\&quot; will result in employees with number 1, from and including 100 to 200, 500 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalImportReference">Filter by external import reference. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalNos">Filter by employee external numbers. Separate by comma [,] to filter on multiple employee external numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;30000, 14153-19534, 150000-\&quot; will result in employees with external number 30000, from and including 14153 to 19534, 150000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp. This filtering will return all employees with a last changed timestamp greater than the timestamp provided. Can be used when polling for new entries. If used, changed employees should replace what was previously stored in the external system. Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesGetApiResponse?> EmployeesGetOrDefaultAsync(Option<string> contactGroupIds = default, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan = default, Option<string> employeeNos = default, Option<string> externalImportReference = default, Option<string> externalNos = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one new employee entity. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesPostApiResponse> EmployeesPostAsync(Option<EmployeePostDto> employeePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create one new employee entity. (Auth roles: Employee_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employeePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesPostApiResponse?> EmployeesPostOrDefaultAsync(Option<EmployeePostDto> employeePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specific employee by id. (Auth roles: Employee,Employee_Full)
        /// </summary>
        /// <remarks>
        /// The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmployeeByIdApiResponse"/>&gt;</returns>
        Task<IGetEmployeeByIdApiResponse> GetEmployeeByIdAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specific employee by id. (Auth roles: Employee,Employee_Full)
        /// </summary>
        /// <remarks>
        /// The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmployeeByIdApiResponse"/>?&gt;</returns>
        Task<IGetEmployeeByIdApiResponse?> GetEmployeeByIdOrDefaultAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdBankAccountsPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdBankAccountsPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmployeeDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmployeeDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmployeeDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmployeeDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmployeeByIdApiResponse"/>
    /// </summary>
    public interface IGetEmployeeByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmployeeDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmployeesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdBankAccountsPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdBankAccountsPatch;

        internal void ExecuteOnEmployeesEmployeeIdBankAccountsPatch(EmployeesApi.EmployeesEmployeeIdBankAccountsPatchApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdBankAccountsPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdBankAccountsPatch(Exception exception)
        {
            OnErrorEmployeesEmployeeIdBankAccountsPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdDelete;

        internal void ExecuteOnEmployeesEmployeeIdDelete(EmployeesApi.EmployeesEmployeeIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdDelete(Exception exception)
        {
            OnErrorEmployeesEmployeeIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdPatch;

        internal void ExecuteOnEmployeesEmployeeIdPatch(EmployeesApi.EmployeesEmployeeIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdPatch(Exception exception)
        {
            OnErrorEmployeesEmployeeIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesGet;

        internal void ExecuteOnEmployeesGet(EmployeesApi.EmployeesGetApiResponse apiResponse)
        {
            OnEmployeesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesGet(Exception exception)
        {
            OnErrorEmployeesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesPost;

        internal void ExecuteOnEmployeesPost(EmployeesApi.EmployeesPostApiResponse apiResponse)
        {
            OnEmployeesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesPost(Exception exception)
        {
            OnErrorEmployeesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmployeeById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmployeeById;

        internal void ExecuteOnGetEmployeeById(EmployeesApi.GetEmployeeByIdApiResponse apiResponse)
        {
            OnGetEmployeeById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmployeeById(Exception exception)
        {
            OnErrorGetEmployeeById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmployeesApi : IEmployeesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmployeesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmployeesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmployeesApi(ILogger<EmployeesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmployeesApiEvents employeesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmployeesApi>();
            HttpClient = httpClient;
            Events = employeesApiEvents;
        }

        partial void FormatEmployeesEmployeeIdBankAccountsPatch(ref long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdBankAccountsPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmployeeIdBankAccountsPatchDefaultImplementation(IEmployeesEmployeeIdBankAccountsPatchApiResponse apiResponseLocalVar, long employeeId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdBankAccountsPatch(ref suppressDefaultLog, apiResponseLocalVar, employeeId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmployeeIdBankAccountsPatch(ref bool suppressDefaultLog, IEmployeesEmployeeIdBankAccountsPatchApiResponse apiResponseLocalVar, long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmployeeIdBankAccountsPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdBankAccountsPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmployeeIdBankAccountsPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Change payout bank accounts for an employee with a given id. (Auth roles: EmployeeBankAccounts_Full) Note that in order to use this endpoint you need to have the special privilege \&quot;EmployeeBankAccounts\&quot;.
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating employee bank accounts. See EmployeeBankAccountsPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdBankAccountsPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdBankAccountsPatchApiResponse?> EmployeesEmployeeIdBankAccountsPatchOrDefaultAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdBankAccountsPatchAsync(employeeId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change payout bank accounts for an employee with a given id. (Auth roles: EmployeeBankAccounts_Full) Note that in order to use this endpoint you need to have the special privilege \&quot;EmployeeBankAccounts\&quot;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating employee bank accounts. See EmployeeBankAccountsPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdBankAccountsPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdBankAccountsPatchApiResponse> EmployeesEmployeeIdBankAccountsPatchAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdBankAccountsPatch(operation);

                FormatEmployeesEmployeeIdBankAccountsPatch(ref employeeId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/BankAccounts";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdBankAccountsPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdBankAccountsPatchApiResponse>();

                        EmployeesEmployeeIdBankAccountsPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/BankAccounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdBankAccountsPatchDefaultImplementation(apiResponseLocalVar, employeeId, operation);

                        Events.ExecuteOnEmployeesEmployeeIdBankAccountsPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdBankAccountsPatchDefaultImplementation(e, "/Employees/{employeeId}/BankAccounts", uriBuilderLocalVar.Path, employeeId, operation);
                Events.ExecuteOnErrorEmployeesEmployeeIdBankAccountsPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdBankAccountsPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdBankAccountsPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdBankAccountsPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdBankAccountsPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdBankAccountsPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdBankAccountsPatchApiResponse(ILogger<EmployeesEmployeeIdBankAccountsPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdDelete(ref long employeeId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        private void AfterEmployeesEmployeeIdDeleteDefaultImplementation(IEmployeesEmployeeIdDeleteApiResponse apiResponseLocalVar, long employeeId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employeeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        partial void AfterEmployeesEmployeeIdDelete(ref bool suppressDefaultLog, IEmployeesEmployeeIdDeleteApiResponse apiResponseLocalVar, long employeeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        private void OnErrorEmployeesEmployeeIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        partial void OnErrorEmployeesEmployeeIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId);

        /// <summary>
        /// Delete an employee entity with a given id. (Auth roles: Employee_Full) If the employee have links to transactions or other entities, or if the contact is an active customer/supplier, this operation cannot be performed.
        /// </summary>
        /// <param name="employeeId">The id of the employee to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdDeleteApiResponse?> EmployeesEmployeeIdDeleteOrDefaultAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdDeleteAsync(employeeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete an employee entity with a given id. (Auth roles: Employee_Full) If the employee have links to transactions or other entities, or if the contact is an active customer/supplier, this operation cannot be performed.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdDeleteApiResponse> EmployeesEmployeeIdDeleteAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmployeeIdDelete(ref employeeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdDeleteApiResponse>();

                        EmployeesEmployeeIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdDeleteDefaultImplementation(apiResponseLocalVar, employeeId);

                        Events.ExecuteOnEmployeesEmployeeIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdDeleteDefaultImplementation(e, "/Employees/{employeeId}", uriBuilderLocalVar.Path, employeeId);
                Events.ExecuteOnErrorEmployeesEmployeeIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdDeleteApiResponse(ILogger<EmployeesEmployeeIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdPatch(ref long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmployeeIdPatchDefaultImplementation(IEmployeesEmployeeIdPatchApiResponse apiResponseLocalVar, long employeeId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employeeId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmployeeIdPatch(ref bool suppressDefaultLog, IEmployeesEmployeeIdPatchApiResponse apiResponseLocalVar, long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmployeeIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmployeeIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing employee with a given id. (Auth roles: Employee_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating an Employee. See EmployeePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdPatchApiResponse?> EmployeesEmployeeIdPatchOrDefaultAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdPatchAsync(employeeId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing employee with a given id. (Auth roles: Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="operation">JSON Patch structure for updating an Employee. See EmployeePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdPatchApiResponse> EmployeesEmployeeIdPatchAsync(long employeeId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdPatch(operation);

                FormatEmployeesEmployeeIdPatch(ref employeeId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdPatchApiResponse>();

                        EmployeesEmployeeIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdPatchDefaultImplementation(apiResponseLocalVar, employeeId, operation);

                        Events.ExecuteOnEmployeesEmployeeIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdPatchDefaultImplementation(e, "/Employees/{employeeId}", uriBuilderLocalVar.Path, employeeId, operation);
                Events.ExecuteOnErrorEmployeesEmployeeIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdPatchApiResponse(ILogger<EmployeesEmployeeIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesGet(ref Option<string> contactGroupIds, ref Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan, ref Option<string> employeeNos, ref Option<string> externalImportReference, ref Option<string> externalNos, ref Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactGroupIds"></param>
        /// <param name="employeeNos"></param>
        /// <param name="externalImportReference"></param>
        /// <param name="externalNos"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesGet(Option<string> contactGroupIds, Option<string> employeeNos, Option<string> externalImportReference, Option<string> externalNos, Option<ResourceParameters> resourceParameter)
        {
            if (contactGroupIds.IsSet && contactGroupIds.Value == null)
                throw new ArgumentNullException(nameof(contactGroupIds));

            if (employeeNos.IsSet && employeeNos.Value == null)
                throw new ArgumentNullException(nameof(employeeNos));

            if (externalImportReference.IsSet && externalImportReference.Value == null)
                throw new ArgumentNullException(nameof(externalImportReference));

            if (externalNos.IsSet && externalNos.Value == null)
                throw new ArgumentNullException(nameof(externalNos));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan"></param>
        /// <param name="employeeNos"></param>
        /// <param name="externalImportReference"></param>
        /// <param name="externalNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesGetDefaultImplementation(IEmployeesGetApiResponse apiResponseLocalVar, Option<string> contactGroupIds, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan, Option<string> employeeNos, Option<string> externalImportReference, Option<string> externalNos, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesGet(ref suppressDefaultLog, apiResponseLocalVar, contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan"></param>
        /// <param name="employeeNos"></param>
        /// <param name="externalImportReference"></param>
        /// <param name="externalNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesGet(ref bool suppressDefaultLog, IEmployeesGetApiResponse apiResponseLocalVar, Option<string> contactGroupIds, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan, Option<string> employeeNos, Option<string> externalImportReference, Option<string> externalNos, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan"></param>
        /// <param name="employeeNos"></param>
        /// <param name="externalImportReference"></param>
        /// <param name="externalNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactGroupIds, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan, Option<string> employeeNos, Option<string> externalImportReference, Option<string> externalNos, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan"></param>
        /// <param name="employeeNos"></param>
        /// <param name="externalImportReference"></param>
        /// <param name="externalNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactGroupIds, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan, Option<string> employeeNos, Option<string> externalImportReference, Option<string> externalNos, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the employees available on the client. Multiple filtering options. (Auth roles: Employee,Employee_Full) The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </summary>
        /// <param name="contactGroupIds">Filter by contact group IDs. Separate by comma [,] to filter on multiple contact group IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan">Filter by the employee created timestamp. This filtering will return all employees with a created timestamp greater than the timestamp provided. Can be used when polling for new entries. Date not inclusive. (optional)</param>
        /// <param name="employeeNos">Filter by employee numbers. Separate by comma [,] to filter on multiple employee numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1, 100-200, 500-\&quot; will result in employees with number 1, from and including 100 to 200, 500 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalImportReference">Filter by external import reference. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalNos">Filter by employee external numbers. Separate by comma [,] to filter on multiple employee external numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;30000, 14153-19534, 150000-\&quot; will result in employees with external number 30000, from and including 14153 to 19534, 150000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp. This filtering will return all employees with a last changed timestamp greater than the timestamp provided. Can be used when polling for new entries. If used, changed employees should replace what was previously stored in the external system. Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesGetApiResponse?> EmployeesGetOrDefaultAsync(Option<string> contactGroupIds = default, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan = default, Option<string> employeeNos = default, Option<string> externalImportReference = default, Option<string> externalNos = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesGetAsync(contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the employees available on the client. Multiple filtering options. (Auth roles: Employee,Employee_Full) The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactGroupIds">Filter by contact group IDs. Separate by comma [,] to filter on multiple contact group IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="employeeCreatedDateTimeOffsetGreaterThan">Filter by the employee created timestamp. This filtering will return all employees with a created timestamp greater than the timestamp provided. Can be used when polling for new entries. Date not inclusive. (optional)</param>
        /// <param name="employeeNos">Filter by employee numbers. Separate by comma [,] to filter on multiple employee numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1, 100-200, 500-\&quot; will result in employees with number 1, from and including 100 to 200, 500 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalImportReference">Filter by external import reference. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="externalNos">Filter by employee external numbers. Separate by comma [,] to filter on multiple employee external numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;30000, 14153-19534, 150000-\&quot; will result in employees with external number 30000, from and including 14153 to 19534, 150000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp. This filtering will return all employees with a last changed timestamp greater than the timestamp provided. Can be used when polling for new entries. If used, changed employees should replace what was previously stored in the external system. Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesGetApiResponse> EmployeesGetAsync(Option<string> contactGroupIds = default, Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan = default, Option<string> employeeNos = default, Option<string> externalImportReference = default, Option<string> externalNos = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesGet(contactGroupIds, employeeNos, externalImportReference, externalNos, resourceParameter);

                FormatEmployeesGet(ref contactGroupIds, ref employeeCreatedDateTimeOffsetGreaterThan, ref employeeNos, ref externalImportReference, ref externalNos, ref lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (contactGroupIds.IsSet)
                        parseQueryStringLocalVar["contactGroupIds"] = ClientUtils.ParameterToString(contactGroupIds.Value);

                    if (employeeCreatedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["employeeCreatedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(employeeCreatedDateTimeOffsetGreaterThan.Value);

                    if (employeeNos.IsSet)
                        parseQueryStringLocalVar["employeeNos"] = ClientUtils.ParameterToString(employeeNos.Value);

                    if (externalImportReference.IsSet)
                        parseQueryStringLocalVar["externalImportReference"] = ClientUtils.ParameterToString(externalImportReference.Value);

                    if (externalNos.IsSet)
                        parseQueryStringLocalVar["externalNos"] = ClientUtils.ParameterToString(externalNos.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesGetApiResponse>();

                        EmployeesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesGetDefaultImplementation(apiResponseLocalVar, contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                        Events.ExecuteOnEmployeesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesGetDefaultImplementation(e, "/Employees", uriBuilderLocalVar.Path, contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
                Events.ExecuteOnErrorEmployeesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesGetApiResponse(ILogger<EmployeesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmployeeDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmployeeDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmployeeDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesPost(Option<EmployeePostDto> employeePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employeePostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesPost(Option<EmployeePostDto> employeePostDto)
        {
            if (employeePostDto.IsSet && employeePostDto.Value == null)
                throw new ArgumentNullException(nameof(employeePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeePostDto"></param>
        private void AfterEmployeesPostDefaultImplementation(IEmployeesPostApiResponse apiResponseLocalVar, Option<EmployeePostDto> employeePostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesPost(ref suppressDefaultLog, apiResponseLocalVar, employeePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeePostDto"></param>
        partial void AfterEmployeesPost(ref bool suppressDefaultLog, IEmployeesPostApiResponse apiResponseLocalVar, Option<EmployeePostDto> employeePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeePostDto"></param>
        private void OnErrorEmployeesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<EmployeePostDto> employeePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeePostDto"></param>
        partial void OnErrorEmployeesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<EmployeePostDto> employeePostDto);

        /// <summary>
        /// Create one new employee entity. (Auth roles: Employee_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employeePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesPostApiResponse?> EmployeesPostOrDefaultAsync(Option<EmployeePostDto> employeePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesPostAsync(employeePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create one new employee entity. (Auth roles: Employee_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesPostApiResponse> EmployeesPostAsync(Option<EmployeePostDto> employeePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesPost(employeePostDto);

                FormatEmployeesPost(employeePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees";

                    if (employeePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employeePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employeePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesPostApiResponse>();

                        EmployeesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesPostDefaultImplementation(apiResponseLocalVar, employeePostDto);

                        Events.ExecuteOnEmployeesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesPostDefaultImplementation(e, "/Employees", uriBuilderLocalVar.Path, employeePostDto);
                Events.ExecuteOnErrorEmployeesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesPostApiResponse(ILogger<EmployeesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmployeeById(ref long employeeId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        private void AfterGetEmployeeByIdDefaultImplementation(IGetEmployeeByIdApiResponse apiResponseLocalVar, long employeeId)
        {
            bool suppressDefaultLog = false;
            AfterGetEmployeeById(ref suppressDefaultLog, apiResponseLocalVar, employeeId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        partial void AfterGetEmployeeById(ref bool suppressDefaultLog, IGetEmployeeByIdApiResponse apiResponseLocalVar, long employeeId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        private void OnErrorGetEmployeeByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmployeeById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        partial void OnErrorGetEmployeeById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId);

        /// <summary>
        /// Gets the specific employee by id. (Auth roles: Employee,Employee_Full) The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmployeeByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEmployeeByIdApiResponse?> GetEmployeeByIdOrDefaultAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmployeeByIdAsync(employeeId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the specific employee by id. (Auth roles: Employee,Employee_Full) The employee object is a contact entity, meaning the id might be shared with a customer and/or a supplier if the contact is registered as both an employee and customer/supplier in Go.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmployeeByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEmployeeByIdApiResponse> GetEmployeeByIdAsync(long employeeId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEmployeeById(ref employeeId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmployeeByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmployeeByIdApiResponse>();

                        GetEmployeeByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmployeeByIdDefaultImplementation(apiResponseLocalVar, employeeId);

                        Events.ExecuteOnGetEmployeeById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmployeeByIdDefaultImplementation(e, "/Employees/{employeeId}", uriBuilderLocalVar.Path, employeeId);
                Events.ExecuteOnErrorGetEmployeeById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmployeeByIdApiResponse"/>
        /// </summary>
        public partial class GetEmployeeByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetEmployeeByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmployeeByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmployeeByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmployeeByIdApiResponse(ILogger<GetEmployeeByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmployeeDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmployeeDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmployeeDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
