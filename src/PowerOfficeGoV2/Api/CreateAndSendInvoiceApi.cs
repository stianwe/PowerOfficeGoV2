// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICreateAndSendInvoiceApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CreateAndSendInvoiceApiEvents Events { get; }

        /// <summary>
        /// Get the sent state of a sales order. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Can be polled to confirm that the sales order was successfully transformed to an invoice or credit note and delivered.  If delivery failed, LastErrorMessage will have a value.  Note: Imported vouchers and invoices may not have a sent date.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentStateApiResponse"/>&gt;</returns>
        Task<IGetSentStateApiResponse> GetSentStateAsync(Option<Guid> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the sent state of a sales order. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Can be polled to confirm that the sales order was successfully transformed to an invoice or credit note and delivered.  If delivery failed, LastErrorMessage will have a value.  Note: Imported vouchers and invoices may not have a sent date.
        /// </remarks>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentStateApiResponse"/>?&gt;</returns>
        Task<IGetSentStateApiResponse?> GetSentStateOrDefaultAsync(Option<Guid> id = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a send request for a sales order. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Transforms the sales order to an invoice or credit note and delivers it to the customer.  If the request is successful, a 202Accepted response code will be returned,  and the header Location will contain a URL to the status endpoint with the sales order id.  The integration must have the invoice sending privilege.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdCreateAndSendInvoicePostApiResponse"/>&gt;</returns>
        Task<ISalesOrdersIdCreateAndSendInvoicePostApiResponse> SalesOrdersIdCreateAndSendInvoicePostAsync(Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a send request for a sales order. (Auth roles: SalesOrders_Full)
        /// </summary>
        /// <remarks>
        /// Transforms the sales order to an invoice or credit note and delivers it to the customer.  If the request is successful, a 202Accepted response code will be returned,  and the header Location will contain a URL to the status endpoint with the sales order id.  The integration must have the invoice sending privilege.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdCreateAndSendInvoicePostApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersIdCreateAndSendInvoicePostApiResponse?> SalesOrdersIdCreateAndSendInvoicePostOrDefaultAsync(Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetSentStateApiResponse"/>
    /// </summary>
    public interface IGetSentStateApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<InvoiceSentStateDto>?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersIdCreateAndSendInvoicePostApiResponse"/>
    /// </summary>
    public interface ISalesOrdersIdCreateAndSendInvoicePostApiResponse : PowerOfficeGoV2.Client.IApiResponse, IAccepted<PowerOfficeGoV2.Model.SendInvoiceRequestDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CreateAndSendInvoiceApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSentState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSentState;

        internal void ExecuteOnGetSentState(CreateAndSendInvoiceApi.GetSentStateApiResponse apiResponse)
        {
            OnGetSentState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSentState(Exception exception)
        {
            OnErrorGetSentState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersIdCreateAndSendInvoicePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersIdCreateAndSendInvoicePost;

        internal void ExecuteOnSalesOrdersIdCreateAndSendInvoicePost(CreateAndSendInvoiceApi.SalesOrdersIdCreateAndSendInvoicePostApiResponse apiResponse)
        {
            OnSalesOrdersIdCreateAndSendInvoicePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersIdCreateAndSendInvoicePost(Exception exception)
        {
            OnErrorSalesOrdersIdCreateAndSendInvoicePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CreateAndSendInvoiceApi : ICreateAndSendInvoiceApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CreateAndSendInvoiceApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CreateAndSendInvoiceApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAndSendInvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreateAndSendInvoiceApi(ILogger<CreateAndSendInvoiceApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CreateAndSendInvoiceApiEvents createAndSendInvoiceApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CreateAndSendInvoiceApi>();
            HttpClient = httpClient;
            Events = createAndSendInvoiceApiEvents;
        }

        partial void FormatGetSentState(ref Option<Guid> id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetSentStateDefaultImplementation(IGetSentStateApiResponse apiResponseLocalVar, Option<Guid> id)
        {
            bool suppressDefaultLog = false;
            AfterGetSentState(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetSentState(ref bool suppressDefaultLog, IGetSentStateApiResponse apiResponseLocalVar, Option<Guid> id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetSentStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSentState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetSentState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<Guid> id);

        /// <summary>
        /// Get the sent state of a sales order. (Auth roles: SalesOrders_Full) Can be polled to confirm that the sales order was successfully transformed to an invoice or credit note and delivered.  If delivery failed, LastErrorMessage will have a value.  Note: Imported vouchers and invoices may not have a sent date.
        /// </summary>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentStateApiResponse"/>&gt;</returns>
        public async Task<IGetSentStateApiResponse?> GetSentStateOrDefaultAsync(Option<Guid> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSentStateAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the sent state of a sales order. (Auth roles: SalesOrders_Full) Can be polled to confirm that the sales order was successfully transformed to an invoice or credit note and delivered.  If delivery failed, LastErrorMessage will have a value.  Note: Imported vouchers and invoices may not have a sent date.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSentStateApiResponse"/>&gt;</returns>
        public async Task<IGetSentStateApiResponse> GetSentStateAsync(Option<Guid> id = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSentState(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/sentState";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSentStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSentStateApiResponse>();

                        GetSentStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/sentState", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSentStateDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetSentState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSentStateDefaultImplementation(e, "/SalesOrders/sentState", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetSentState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSentStateApiResponse"/>
        /// </summary>
        public partial class GetSentStateApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetSentStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSentStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSentStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSentStateApiResponse(ILogger<GetSentStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<InvoiceSentStateDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<InvoiceSentStateDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<InvoiceSentStateDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersIdCreateAndSendInvoicePost(ref Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sendInvoiceRequestPostDto"></param>
        /// <returns></returns>
        private void ValidateSalesOrdersIdCreateAndSendInvoicePost(Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto)
        {
            if (sendInvoiceRequestPostDto.IsSet && sendInvoiceRequestPostDto.Value == null)
                throw new ArgumentNullException(nameof(sendInvoiceRequestPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"></param>
        private void AfterSalesOrdersIdCreateAndSendInvoicePostDefaultImplementation(ISalesOrdersIdCreateAndSendInvoicePostApiResponse apiResponseLocalVar, Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersIdCreateAndSendInvoicePost(ref suppressDefaultLog, apiResponseLocalVar, id, sendInvoiceRequestPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"></param>
        partial void AfterSalesOrdersIdCreateAndSendInvoicePost(ref bool suppressDefaultLog, ISalesOrdersIdCreateAndSendInvoicePostApiResponse apiResponseLocalVar, Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"></param>
        private void OnErrorSalesOrdersIdCreateAndSendInvoicePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersIdCreateAndSendInvoicePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sendInvoiceRequestPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"></param>
        partial void OnErrorSalesOrdersIdCreateAndSendInvoicePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto);

        /// <summary>
        /// Create a send request for a sales order. (Auth roles: SalesOrders_Full) Transforms the sales order to an invoice or credit note and delivers it to the customer.  If the request is successful, a 202Accepted response code will be returned,  and the header Location will contain a URL to the status endpoint with the sales order id.  The integration must have the invoice sending privilege.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdCreateAndSendInvoicePostApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdCreateAndSendInvoicePostApiResponse?> SalesOrdersIdCreateAndSendInvoicePostOrDefaultAsync(Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersIdCreateAndSendInvoicePostAsync(id, sendInvoiceRequestPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a send request for a sales order. (Auth roles: SalesOrders_Full) Transforms the sales order to an invoice or credit note and delivers it to the customer.  If the request is successful, a 202Accepted response code will be returned,  and the header Location will contain a URL to the status endpoint with the sales order id.  The integration must have the invoice sending privilege.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="sendInvoiceRequestPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersIdCreateAndSendInvoicePostApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersIdCreateAndSendInvoicePostApiResponse> SalesOrdersIdCreateAndSendInvoicePostAsync(Guid id, Option<SendInvoiceRequestPostDto> sendInvoiceRequestPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalesOrdersIdCreateAndSendInvoicePost(sendInvoiceRequestPostDto);

                FormatSalesOrdersIdCreateAndSendInvoicePost(ref id, sendInvoiceRequestPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{id}/createAndSendInvoice";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (sendInvoiceRequestPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (sendInvoiceRequestPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sendInvoiceRequestPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersIdCreateAndSendInvoicePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersIdCreateAndSendInvoicePostApiResponse>();

                        SalesOrdersIdCreateAndSendInvoicePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{id}/createAndSendInvoice", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersIdCreateAndSendInvoicePostDefaultImplementation(apiResponseLocalVar, id, sendInvoiceRequestPostDto);

                        Events.ExecuteOnSalesOrdersIdCreateAndSendInvoicePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersIdCreateAndSendInvoicePostDefaultImplementation(e, "/SalesOrders/{id}/createAndSendInvoice", uriBuilderLocalVar.Path, id, sendInvoiceRequestPostDto);
                Events.ExecuteOnErrorSalesOrdersIdCreateAndSendInvoicePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersIdCreateAndSendInvoicePostApiResponse"/>
        /// </summary>
        public partial class SalesOrdersIdCreateAndSendInvoicePostApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersIdCreateAndSendInvoicePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersIdCreateAndSendInvoicePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersIdCreateAndSendInvoicePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersIdCreateAndSendInvoicePostApiResponse(ILogger<SalesOrdersIdCreateAndSendInvoicePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SendInvoiceRequestDto? Accepted()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsAccepted
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SendInvoiceRequestDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAccepted([NotNullWhen(true)]out PowerOfficeGoV2.Model.SendInvoiceRequestDto? result)
            {
                result = null;

                try
                {
                    result = Accepted();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)202);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsAccepted && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
