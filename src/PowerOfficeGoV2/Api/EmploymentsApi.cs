// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentsApiEvents Events { get; }

        /// <summary>
        /// Delete a specific employment on a given employee. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// Note that an employment cannot be deleted if it has been reported (a-melding).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse> EmployeesEmployeeIdEmploymentsEmploymentIdDeleteAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific employment on a given employee. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// Note that an employment cannot be deleted if it has been reported (a-melding).
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse?> EmployeesEmployeeIdEmploymentsEmploymentIdDeleteOrDefaultAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing employment with a given id. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="operation">JSON Patch structure for updating an employment. See EmploymentPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse> EmployeesEmployeeIdEmploymentsEmploymentIdPatchAsync(long employeeId, long employmentId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing employment with a given id. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="operation">JSON Patch structure for updating an employment. See EmploymentPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse?> EmployeesEmployeeIdEmploymentsEmploymentIdPatchOrDefaultAsync(long employeeId, long employmentId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get employments (employment relationships) on the employee. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// Will only contain line count for salary-, fixed salary-, leave-, layout- and percentage of full time employment lines.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsGetApiResponse> EmployeesEmployeeIdEmploymentsGetAsync(long employeeId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get employments (employment relationships) on the employee. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// Will only contain line count for salary-, fixed salary-, leave-, layout- and percentage of full time employment lines.
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsGetApiResponse?> EmployeesEmployeeIdEmploymentsGetOrDefaultAsync(long employeeId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new employment. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsPostApiResponse> EmployeesEmployeeIdEmploymentsPostAsync(long employeeId, Option<EmploymentPostDto> employmentPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new employment. (Auth roles: Employment_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmployeeIdEmploymentsPostApiResponse?> EmployeesEmployeeIdEmploymentsPostOrDefaultAsync(long employeeId, Option<EmploymentPostDto> employmentPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all employments for all employees registered on the client. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// Returns a lightweight (slimmed down) version of the employment entity.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeEmployments">Filter employments based on active status.  An employment is considered active if no endDate is set, or if the endDate set is at a future date.  The filter do not consider the EndedAndReported property, as a future endDate and reason might be reported on an employment still active until the end date.  True to only get employments with active status, false to only get employments with inactive status. If empty the filter is not used. (optional)</param>
        /// <param name="employmentForm">Filter by employment form. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp property.  This filtering will return all employments with a last changed timestamp greater than the timestamp provided.  Can be used when polling for new entries or when changes has occured.  Note that the last changed property is unaffected by changes in sub entities of an employment (salary, leave, fixed salary lines and other \&quot;lists\&quot;)  Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsGetApiResponse> EmployeesEmploymentsGetAsync(Option<bool> activeEmployments = default, Option<string> employmentForm = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all employments for all employees registered on the client. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// Returns a lightweight (slimmed down) version of the employment entity.
        /// </remarks>
        /// <param name="activeEmployments">Filter employments based on active status.  An employment is considered active if no endDate is set, or if the endDate set is at a future date.  The filter do not consider the EndedAndReported property, as a future endDate and reason might be reported on an employment still active until the end date.  True to only get employments with active status, false to only get employments with inactive status. If empty the filter is not used. (optional)</param>
        /// <param name="employmentForm">Filter by employment form. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp property.  This filtering will return all employments with a last changed timestamp greater than the timestamp provided.  Can be used when polling for new entries or when changes has occured.  Note that the last changed property is unaffected by changes in sub entities of an employment (salary, leave, fixed salary lines and other \&quot;lists\&quot;)  Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsGetApiResponse?> EmployeesEmploymentsGetOrDefaultAsync(Option<bool> activeEmployments = default, Option<string> employmentForm = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific employment on a given employee. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmploymentByIdApiResponse"/>&gt;</returns>
        Task<IGetEmploymentByIdApiResponse> GetEmploymentByIdAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific employment on a given employee. (Auth roles: Employment,Employment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmploymentByIdApiResponse"/>?&gt;</returns>
        Task<IGetEmploymentByIdApiResponse?> GetEmploymentByIdOrDefaultAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdEmploymentsGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdEmploymentsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmployeeIdEmploymentsPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmployeeIdEmploymentsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentLightDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmploymentByIdApiResponse"/>
    /// </summary>
    public interface IGetEmploymentByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdEmploymentsEmploymentIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete;

        internal void ExecuteOnEmployeesEmployeeIdEmploymentsEmploymentIdDelete(EmploymentsApi.EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdEmploymentsEmploymentIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete(Exception exception)
        {
            OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdEmploymentsEmploymentIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch;

        internal void ExecuteOnEmployeesEmployeeIdEmploymentsEmploymentIdPatch(EmploymentsApi.EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdEmploymentsEmploymentIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch(Exception exception)
        {
            OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdEmploymentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdEmploymentsGet;

        internal void ExecuteOnEmployeesEmployeeIdEmploymentsGet(EmploymentsApi.EmployeesEmployeeIdEmploymentsGetApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdEmploymentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdEmploymentsGet(Exception exception)
        {
            OnErrorEmployeesEmployeeIdEmploymentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmployeeIdEmploymentsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmployeeIdEmploymentsPost;

        internal void ExecuteOnEmployeesEmployeeIdEmploymentsPost(EmploymentsApi.EmployeesEmployeeIdEmploymentsPostApiResponse apiResponse)
        {
            OnEmployeesEmployeeIdEmploymentsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmployeeIdEmploymentsPost(Exception exception)
        {
            OnErrorEmployeesEmployeeIdEmploymentsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsGet;

        internal void ExecuteOnEmployeesEmploymentsGet(EmploymentsApi.EmployeesEmploymentsGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmploymentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmploymentById;

        internal void ExecuteOnGetEmploymentById(EmploymentsApi.GetEmploymentByIdApiResponse apiResponse)
        {
            OnGetEmploymentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmploymentById(Exception exception)
        {
            OnErrorGetEmploymentById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentsApi : IEmploymentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentsApi(ILogger<EmploymentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentsApiEvents employmentsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentsApi>();
            HttpClient = httpClient;
            Events = employmentsApiEvents;
        }

        partial void FormatEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref long employeeId, ref long employmentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        private void AfterEmployeesEmployeeIdEmploymentsEmploymentIdDeleteDefaultImplementation(IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse apiResponseLocalVar, long employeeId, long employmentId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employeeId, employmentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        partial void AfterEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref bool suppressDefaultLog, IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse apiResponseLocalVar, long employeeId, long employmentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        private void OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, employmentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        partial void OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId);

        /// <summary>
        /// Delete a specific employment on a given employee. (Auth roles: Employment_Full) Note that an employment cannot be deleted if it has been reported (a-melding).
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse?> EmployeesEmployeeIdEmploymentsEmploymentIdDeleteOrDefaultAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdEmploymentsEmploymentIdDeleteAsync(employeeId, employmentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific employment on a given employee. (Auth roles: Employment_Full) Note that an employment cannot be deleted if it has been reported (a-melding).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse> EmployeesEmployeeIdEmploymentsEmploymentIdDeleteAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmployeeIdEmploymentsEmploymentIdDelete(ref employeeId, ref employmentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/Employments/{employmentId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse>();

                        EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/Employments/{employmentId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdEmploymentsEmploymentIdDeleteDefaultImplementation(apiResponseLocalVar, employeeId, employmentId);

                        Events.ExecuteOnEmployeesEmployeeIdEmploymentsEmploymentIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDeleteDefaultImplementation(e, "/Employees/{employeeId}/Employments/{employmentId}", uriBuilderLocalVar.Path, employeeId, employmentId);
                Events.ExecuteOnErrorEmployeesEmployeeIdEmploymentsEmploymentIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse(ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref long employeeId, ref long employmentId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdEmploymentsEmploymentIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmployeeIdEmploymentsEmploymentIdPatchDefaultImplementation(IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse apiResponseLocalVar, long employeeId, long employmentId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employeeId, employmentId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref bool suppressDefaultLog, IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse apiResponseLocalVar, long employeeId, long employmentId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, employmentId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing employment with a given id. (Auth roles: Employment_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="operation">JSON Patch structure for updating an employment. See EmploymentPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse?> EmployeesEmployeeIdEmploymentsEmploymentIdPatchOrDefaultAsync(long employeeId, long employmentId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdEmploymentsEmploymentIdPatchAsync(employeeId, employmentId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing employment with a given id. (Auth roles: Employment_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="operation">JSON Patch structure for updating an employment. See EmploymentPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse> EmployeesEmployeeIdEmploymentsEmploymentIdPatchAsync(long employeeId, long employmentId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdEmploymentsEmploymentIdPatch(operation);

                FormatEmployeesEmployeeIdEmploymentsEmploymentIdPatch(ref employeeId, ref employmentId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/Employments/{employmentId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse>();

                        EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/Employments/{employmentId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdEmploymentsEmploymentIdPatchDefaultImplementation(apiResponseLocalVar, employeeId, employmentId, operation);

                        Events.ExecuteOnEmployeesEmployeeIdEmploymentsEmploymentIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatchDefaultImplementation(e, "/Employees/{employeeId}/Employments/{employmentId}", uriBuilderLocalVar.Path, employeeId, employmentId, operation);
                Events.ExecuteOnErrorEmployeesEmployeeIdEmploymentsEmploymentIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse(ILogger<EmployeesEmployeeIdEmploymentsEmploymentIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdEmploymentsGet(ref long employeeId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdEmploymentsGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmployeeIdEmploymentsGetDefaultImplementation(IEmployeesEmployeeIdEmploymentsGetApiResponse apiResponseLocalVar, long employeeId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdEmploymentsGet(ref suppressDefaultLog, apiResponseLocalVar, employeeId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmployeeIdEmploymentsGet(ref bool suppressDefaultLog, IEmployeesEmployeeIdEmploymentsGetApiResponse apiResponseLocalVar, long employeeId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmployeeIdEmploymentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdEmploymentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmployeeIdEmploymentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get employments (employment relationships) on the employee. (Auth roles: Employment,Employment_Full) Will only contain line count for salary-, fixed salary-, leave-, layout- and percentage of full time employment lines.
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsGetApiResponse?> EmployeesEmployeeIdEmploymentsGetOrDefaultAsync(long employeeId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdEmploymentsGetAsync(employeeId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get employments (employment relationships) on the employee. (Auth roles: Employment,Employment_Full) Will only contain line count for salary-, fixed salary-, leave-, layout- and percentage of full time employment lines.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsGetApiResponse> EmployeesEmployeeIdEmploymentsGetAsync(long employeeId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdEmploymentsGet(resourceParameter);

                FormatEmployeesEmployeeIdEmploymentsGet(ref employeeId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/Employments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdEmploymentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdEmploymentsGetApiResponse>();

                        EmployeesEmployeeIdEmploymentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/Employments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdEmploymentsGetDefaultImplementation(apiResponseLocalVar, employeeId, resourceParameter);

                        Events.ExecuteOnEmployeesEmployeeIdEmploymentsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdEmploymentsGetDefaultImplementation(e, "/Employees/{employeeId}/Employments", uriBuilderLocalVar.Path, employeeId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmployeeIdEmploymentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdEmploymentsGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdEmploymentsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdEmploymentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdEmploymentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdEmploymentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdEmploymentsGetApiResponse(ILogger<EmployeesEmployeeIdEmploymentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmployeeIdEmploymentsPost(ref long employeeId, Option<EmploymentPostDto> employmentPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentPostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmployeeIdEmploymentsPost(Option<EmploymentPostDto> employmentPostDto)
        {
            if (employmentPostDto.IsSet && employmentPostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentPostDto"></param>
        private void AfterEmployeesEmployeeIdEmploymentsPostDefaultImplementation(IEmployeesEmployeeIdEmploymentsPostApiResponse apiResponseLocalVar, long employeeId, Option<EmploymentPostDto> employmentPostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmployeeIdEmploymentsPost(ref suppressDefaultLog, apiResponseLocalVar, employeeId, employmentPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentPostDto"></param>
        partial void AfterEmployeesEmployeeIdEmploymentsPost(ref bool suppressDefaultLog, IEmployeesEmployeeIdEmploymentsPostApiResponse apiResponseLocalVar, long employeeId, Option<EmploymentPostDto> employmentPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentPostDto"></param>
        private void OnErrorEmployeesEmployeeIdEmploymentsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<EmploymentPostDto> employmentPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmployeeIdEmploymentsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, employmentPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentPostDto"></param>
        partial void OnErrorEmployeesEmployeeIdEmploymentsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, Option<EmploymentPostDto> employmentPostDto);

        /// <summary>
        /// Create a new employment. (Auth roles: Employment_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsPostApiResponse?> EmployeesEmployeeIdEmploymentsPostOrDefaultAsync(long employeeId, Option<EmploymentPostDto> employmentPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmployeeIdEmploymentsPostAsync(employeeId, employmentPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new employment. (Auth roles: Employment_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmployeeIdEmploymentsPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmployeeIdEmploymentsPostApiResponse> EmployeesEmployeeIdEmploymentsPostAsync(long employeeId, Option<EmploymentPostDto> employmentPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmployeeIdEmploymentsPost(employmentPostDto);

                FormatEmployeesEmployeeIdEmploymentsPost(ref employeeId, employmentPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/Employments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));

                    if (employmentPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmployeeIdEmploymentsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmployeeIdEmploymentsPostApiResponse>();

                        EmployeesEmployeeIdEmploymentsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/Employments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmployeeIdEmploymentsPostDefaultImplementation(apiResponseLocalVar, employeeId, employmentPostDto);

                        Events.ExecuteOnEmployeesEmployeeIdEmploymentsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmployeeIdEmploymentsPostDefaultImplementation(e, "/Employees/{employeeId}/Employments", uriBuilderLocalVar.Path, employeeId, employmentPostDto);
                Events.ExecuteOnErrorEmployeesEmployeeIdEmploymentsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmployeeIdEmploymentsPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmployeeIdEmploymentsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmployeeIdEmploymentsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmployeeIdEmploymentsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmployeeIdEmploymentsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmployeeIdEmploymentsPostApiResponse(ILogger<EmployeesEmployeeIdEmploymentsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsGet(ref Option<bool> activeEmployments, ref Option<string> employmentForm, ref Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentForm"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsGet(Option<string> employmentForm, Option<ResourceParameters> resourceParameter)
        {
            if (employmentForm.IsSet && employmentForm.Value == null)
                throw new ArgumentNullException(nameof(employmentForm));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="activeEmployments"></param>
        /// <param name="employmentForm"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsGetDefaultImplementation(IEmployeesEmploymentsGetApiResponse apiResponseLocalVar, Option<bool> activeEmployments, Option<string> employmentForm, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsGet(ref suppressDefaultLog, apiResponseLocalVar, activeEmployments, employmentForm, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="activeEmployments"></param>
        /// <param name="employmentForm"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsGet(ref bool suppressDefaultLog, IEmployeesEmploymentsGetApiResponse apiResponseLocalVar, Option<bool> activeEmployments, Option<string> employmentForm, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="activeEmployments"></param>
        /// <param name="employmentForm"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> activeEmployments, Option<string> employmentForm, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, activeEmployments, employmentForm, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="activeEmployments"></param>
        /// <param name="employmentForm"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> activeEmployments, Option<string> employmentForm, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get all employments for all employees registered on the client. (Auth roles: Employment,Employment_Full) Returns a lightweight (slimmed down) version of the employment entity.
        /// </summary>
        /// <param name="activeEmployments">Filter employments based on active status.  An employment is considered active if no endDate is set, or if the endDate set is at a future date.  The filter do not consider the EndedAndReported property, as a future endDate and reason might be reported on an employment still active until the end date.  True to only get employments with active status, false to only get employments with inactive status. If empty the filter is not used. (optional)</param>
        /// <param name="employmentForm">Filter by employment form. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp property.  This filtering will return all employments with a last changed timestamp greater than the timestamp provided.  Can be used when polling for new entries or when changes has occured.  Note that the last changed property is unaffected by changes in sub entities of an employment (salary, leave, fixed salary lines and other \&quot;lists\&quot;)  Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsGetApiResponse?> EmployeesEmploymentsGetOrDefaultAsync(Option<bool> activeEmployments = default, Option<string> employmentForm = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsGetAsync(activeEmployments, employmentForm, lastChangedDateTimeOffsetGreaterThan, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all employments for all employees registered on the client. (Auth roles: Employment,Employment_Full) Returns a lightweight (slimmed down) version of the employment entity.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="activeEmployments">Filter employments based on active status.  An employment is considered active if no endDate is set, or if the endDate set is at a future date.  The filter do not consider the EndedAndReported property, as a future endDate and reason might be reported on an employment still active until the end date.  True to only get employments with active status, false to only get employments with inactive status. If empty the filter is not used. (optional)</param>
        /// <param name="employmentForm">Filter by employment form. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the last changed timestamp property.  This filtering will return all employments with a last changed timestamp greater than the timestamp provided.  Can be used when polling for new entries or when changes has occured.  Note that the last changed property is unaffected by changes in sub entities of an employment (salary, leave, fixed salary lines and other \&quot;lists\&quot;)  Date not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsGetApiResponse> EmployeesEmploymentsGetAsync(Option<bool> activeEmployments = default, Option<string> employmentForm = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsGet(employmentForm, resourceParameter);

                FormatEmployeesEmploymentsGet(ref activeEmployments, ref employmentForm, ref lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (activeEmployments.IsSet)
                        parseQueryStringLocalVar["activeEmployments"] = ClientUtils.ParameterToString(activeEmployments.Value);

                    if (employmentForm.IsSet)
                        parseQueryStringLocalVar["employmentForm"] = ClientUtils.ParameterToString(employmentForm.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsGetApiResponse>();

                        EmployeesEmploymentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsGetDefaultImplementation(apiResponseLocalVar, activeEmployments, employmentForm, lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsGetDefaultImplementation(e, "/Employees/Employments", uriBuilderLocalVar.Path, activeEmployments, employmentForm, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsGetApiResponse(ILogger<EmployeesEmploymentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentLightDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentLightDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentLightDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmploymentById(ref long employeeId, ref long employmentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        private void AfterGetEmploymentByIdDefaultImplementation(IGetEmploymentByIdApiResponse apiResponseLocalVar, long employeeId, long employmentId)
        {
            bool suppressDefaultLog = false;
            AfterGetEmploymentById(ref suppressDefaultLog, apiResponseLocalVar, employeeId, employmentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        partial void AfterGetEmploymentById(ref bool suppressDefaultLog, IGetEmploymentByIdApiResponse apiResponseLocalVar, long employeeId, long employmentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        private void OnErrorGetEmploymentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmploymentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employeeId, employmentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employeeId"></param>
        /// <param name="employmentId"></param>
        partial void OnErrorGetEmploymentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employeeId, long employmentId);

        /// <summary>
        /// Gets a specific employment on a given employee. (Auth roles: Employment,Employment_Full) 
        /// </summary>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmploymentByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEmploymentByIdApiResponse?> GetEmploymentByIdOrDefaultAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmploymentByIdAsync(employeeId, employmentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific employment on a given employee. (Auth roles: Employment,Employment_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employeeId">The id of the employee.</param>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmploymentByIdApiResponse"/>&gt;</returns>
        public async Task<IGetEmploymentByIdApiResponse> GetEmploymentByIdAsync(long employeeId, long employmentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEmploymentById(ref employeeId, ref employmentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/{employeeId}/Employments/{employmentId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemployeeId%7D", Uri.EscapeDataString(employeeId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmploymentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmploymentByIdApiResponse>();

                        GetEmploymentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/{employeeId}/Employments/{employmentId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmploymentByIdDefaultImplementation(apiResponseLocalVar, employeeId, employmentId);

                        Events.ExecuteOnGetEmploymentById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmploymentByIdDefaultImplementation(e, "/Employees/{employeeId}/Employments/{employmentId}", uriBuilderLocalVar.Path, employeeId, employmentId);
                Events.ExecuteOnErrorGetEmploymentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmploymentByIdApiResponse"/>
        /// </summary>
        public partial class GetEmploymentByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetEmploymentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmploymentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmploymentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmploymentByIdApiResponse(ILogger<GetEmploymentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
