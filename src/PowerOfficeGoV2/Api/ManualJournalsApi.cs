// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IManualJournalsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ManualJournalsApiEvents Events { get; }

        /// <summary>
        /// Get a manual voucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a manual journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetManualJournalByIdApiResponse"/>&gt;</returns>
        Task<IGetManualJournalByIdApiResponse> GetManualJournalByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a manual voucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <param name="id">The identifier of a manual journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetManualJournalByIdApiResponse"/>?&gt;</returns>
        Task<IGetManualJournalByIdApiResponse?> GetManualJournalByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update manual journal entry voucher header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Manual journal entry voucher lines must be updated using a separate endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a manual journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a ManualJournalEntryVoucher. See ManualJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdPatchApiResponse> JournalEntryVouchersManualJournalsIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update manual journal entry voucher header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Manual journal entry voucher lines must be updated using a separate endpoint.
        /// </remarks>
        /// <param name="id">The identifier of a manual journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a ManualJournalEntryVoucher. See ManualJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdPatchApiResponse?> JournalEntryVouchersManualJournalsIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a ManualJournalEntryVoucherLine from a ManualJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the ManualJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the ManualJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a ManualJournalEntryVoucherLine from a ManualJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the ManualJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the ManualJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a manual journal entry voucher line. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the manual voucher.</param>
        /// <param name="lineId">The identifier of the manual journal entry voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a manual journal entry voucher line. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a manual journal entry voucher line. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the manual voucher.</param>
        /// <param name="lineId">The identifier of the manual journal entry voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a manual journal entry voucher line. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a line to a manual voucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Returns the entire manual voucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesPostAsync(Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a line to a manual voucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Returns the entire manual voucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesPostOrDefaultAsync(Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a manual journal entry. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the manual journal entry voucher.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsPostApiResponse> JournalEntryVouchersManualJournalsPostAsync(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a manual journal entry. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the manual journal entry voucher.
        /// </remarks>
        /// <param name="manualJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersManualJournalsPostApiResponse?> JournalEntryVouchersManualJournalsPostOrDefaultAsync(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetManualJournalByIdApiResponse"/>
    /// </summary>
    public interface IGetManualJournalByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersManualJournalsIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersManualJournalsIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ManualJournalEntryVoucherLineDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersManualJournalsPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersManualJournalsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ManualJournalsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetManualJournalById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetManualJournalById;

        internal void ExecuteOnGetManualJournalById(ManualJournalsApi.GetManualJournalByIdApiResponse apiResponse)
        {
            OnGetManualJournalById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetManualJournalById(Exception exception)
        {
            OnErrorGetManualJournalById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersManualJournalsIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersManualJournalsIdPatch;

        internal void ExecuteOnJournalEntryVouchersManualJournalsIdPatch(ManualJournalsApi.JournalEntryVouchersManualJournalsIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersManualJournalsIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersManualJournalsIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersManualJournalsIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete;

        internal void ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ManualJournalsApi.JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponse)
        {
            OnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(Exception exception)
        {
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch;

        internal void ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ManualJournalsApi.JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersManualJournalsIdVoucherLinesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost;

        internal void ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesPost(ManualJournalsApi.JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersManualJournalsIdVoucherLinesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost(Exception exception)
        {
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersManualJournalsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersManualJournalsPost;

        internal void ExecuteOnJournalEntryVouchersManualJournalsPost(ManualJournalsApi.JournalEntryVouchersManualJournalsPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersManualJournalsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersManualJournalsPost(Exception exception)
        {
            OnErrorJournalEntryVouchersManualJournalsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ManualJournalsApi : IManualJournalsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ManualJournalsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ManualJournalsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManualJournalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManualJournalsApi(ILogger<ManualJournalsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ManualJournalsApiEvents manualJournalsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ManualJournalsApi>();
            HttpClient = httpClient;
            Events = manualJournalsApiEvents;
        }

        partial void FormatGetManualJournalById(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetManualJournalByIdDefaultImplementation(IGetManualJournalByIdApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetManualJournalById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetManualJournalById(ref bool suppressDefaultLog, IGetManualJournalByIdApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetManualJournalByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetManualJournalById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetManualJournalById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get a manual voucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.
        /// </summary>
        /// <param name="id">The identifier of a manual journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetManualJournalByIdApiResponse"/>&gt;</returns>
        public async Task<IGetManualJournalByIdApiResponse?> GetManualJournalByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetManualJournalByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a manual voucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a manual journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetManualJournalByIdApiResponse"/>&gt;</returns>
        public async Task<IGetManualJournalByIdApiResponse> GetManualJournalByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetManualJournalById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetManualJournalByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetManualJournalByIdApiResponse>();

                        GetManualJournalByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetManualJournalByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetManualJournalById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetManualJournalByIdDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetManualJournalById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetManualJournalByIdApiResponse"/>
        /// </summary>
        public partial class GetManualJournalByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetManualJournalByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetManualJournalByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetManualJournalByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetManualJournalByIdApiResponse(ILogger<GetManualJournalByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersManualJournalsIdPatch(ref Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersManualJournalsIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersManualJournalsIdPatchDefaultImplementation(IJournalEntryVouchersManualJournalsIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersManualJournalsIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersManualJournalsIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersManualJournalsIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersManualJournalsIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersManualJournalsIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersManualJournalsIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Update manual journal entry voucher header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Manual journal entry voucher lines must be updated using a separate endpoint.
        /// </summary>
        /// <param name="id">The identifier of a manual journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a ManualJournalEntryVoucher. See ManualJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdPatchApiResponse?> JournalEntryVouchersManualJournalsIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersManualJournalsIdPatchAsync(id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update manual journal entry voucher header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Manual journal entry voucher lines must be updated using a separate endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a manual journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a ManualJournalEntryVoucher. See ManualJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdPatchApiResponse> JournalEntryVouchersManualJournalsIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersManualJournalsIdPatch(operation);

                FormatJournalEntryVouchersManualJournalsIdPatch(ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersManualJournalsIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersManualJournalsIdPatchApiResponse>();

                        JournalEntryVouchersManualJournalsIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersManualJournalsIdPatchDefaultImplementation(apiResponseLocalVar, id, operation);

                        Events.ExecuteOnJournalEntryVouchersManualJournalsIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersManualJournalsIdPatchDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals/{id}", uriBuilderLocalVar.Path, id, operation);
                Events.ExecuteOnErrorJournalEntryVouchersManualJournalsIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersManualJournalsIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersManualJournalsIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersManualJournalsIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersManualJournalsIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersManualJournalsIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersManualJournalsIdPatchApiResponse(ILogger<JournalEntryVouchersManualJournalsIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref Guid id, ref long lineId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id, lineId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref bool suppressDefaultLog, IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId);

        /// <summary>
        /// Delete a ManualJournalEntryVoucherLine from a ManualJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the ManualJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the ManualJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteAsync(id, lineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a ManualJournalEntryVoucherLine from a ManualJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the ManualJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the ManualJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(ref id, ref lineId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse>();

                        JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(apiResponseLocalVar, id, lineId);

                        Events.ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId);
                Events.ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse(ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref Guid id, ref long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchDefaultImplementation(IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, lineId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Update a manual journal entry voucher line. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the manual voucher.</param>
        /// <param name="lineId">The identifier of the manual journal entry voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a manual journal entry voucher line. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchAsync(id, lineId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a manual journal entry voucher line. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the manual voucher.</param>
        /// <param name="lineId">The identifier of the manual journal entry voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a manual journal entry voucher line. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(operation);

                FormatJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(ref id, ref lineId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse>();

                        JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchDefaultImplementation(apiResponseLocalVar, id, lineId, operation);

                        Events.ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId, operation);
                Events.ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse(ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesLineIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ManualJournalEntryVoucherLineDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ManualJournalEntryVoucherLineDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ManualJournalEntryVoucherLineDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manualJournalEntryVoucherLinePostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersManualJournalsIdVoucherLinesPost(Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto)
        {
            if (manualJournalEntryVoucherLinePostDto.IsSet && manualJournalEntryVoucherLinePostDto.Value == null)
                throw new ArgumentNullException(nameof(manualJournalEntryVoucherLinePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"></param>
        private void AfterJournalEntryVouchersManualJournalsIdVoucherLinesPostDefaultImplementation(IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref suppressDefaultLog, apiResponseLocalVar, id, manualJournalEntryVoucherLinePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"></param>
        partial void AfterJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref bool suppressDefaultLog, IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"></param>
        private void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, manualJournalEntryVoucherLinePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"></param>
        partial void OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Add a line to a manual voucher. (Auth roles: JournalEntryVoucher_Full) Returns the entire manual voucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse?> JournalEntryVouchersManualJournalsIdVoucherLinesPostOrDefaultAsync(Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersManualJournalsIdVoucherLinesPostAsync(id, manualJournalEntryVoucherLinePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a line to a manual voucher. (Auth roles: JournalEntryVoucher_Full) Returns the entire manual voucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="manualJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse> JournalEntryVouchersManualJournalsIdVoucherLinesPostAsync(Guid id, Option<ManualJournalEntryVoucherLinePostDto> manualJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersManualJournalsIdVoucherLinesPost(manualJournalEntryVoucherLinePostDto);

                FormatJournalEntryVouchersManualJournalsIdVoucherLinesPost(ref id, manualJournalEntryVoucherLinePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (manualJournalEntryVoucherLinePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (manualJournalEntryVoucherLinePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manualJournalEntryVoucherLinePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse>();

                        JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersManualJournalsIdVoucherLinesPostDefaultImplementation(apiResponseLocalVar, id, manualJournalEntryVoucherLinePostDto);

                        Events.ExecuteOnJournalEntryVouchersManualJournalsIdVoucherLinesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPostDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals/{id}/VoucherLines", uriBuilderLocalVar.Path, id, manualJournalEntryVoucherLinePostDto);
                Events.ExecuteOnErrorJournalEntryVouchersManualJournalsIdVoucherLinesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse(ILogger<JournalEntryVouchersManualJournalsIdVoucherLinesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersManualJournalsPost(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="manualJournalEntryVoucherPostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersManualJournalsPost(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto)
        {
            if (manualJournalEntryVoucherPostDto.IsSet && manualJournalEntryVoucherPostDto.Value == null)
                throw new ArgumentNullException(nameof(manualJournalEntryVoucherPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manualJournalEntryVoucherPostDto"></param>
        private void AfterJournalEntryVouchersManualJournalsPostDefaultImplementation(IJournalEntryVouchersManualJournalsPostApiResponse apiResponseLocalVar, Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersManualJournalsPost(ref suppressDefaultLog, apiResponseLocalVar, manualJournalEntryVoucherPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="manualJournalEntryVoucherPostDto"></param>
        partial void AfterJournalEntryVouchersManualJournalsPost(ref bool suppressDefaultLog, IJournalEntryVouchersManualJournalsPostApiResponse apiResponseLocalVar, Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manualJournalEntryVoucherPostDto"></param>
        private void OnErrorJournalEntryVouchersManualJournalsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersManualJournalsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, manualJournalEntryVoucherPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="manualJournalEntryVoucherPostDto"></param>
        partial void OnErrorJournalEntryVouchersManualJournalsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto);

        /// <summary>
        /// Create a manual journal entry. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the manual journal entry voucher.
        /// </summary>
        /// <param name="manualJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsPostApiResponse?> JournalEntryVouchersManualJournalsPostOrDefaultAsync(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersManualJournalsPostAsync(manualJournalEntryVoucherPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a manual journal entry. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the manual journal entry voucher.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="manualJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersManualJournalsPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersManualJournalsPostApiResponse> JournalEntryVouchersManualJournalsPostAsync(Option<ManualJournalEntryVoucherPostDto> manualJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersManualJournalsPost(manualJournalEntryVoucherPostDto);

                FormatJournalEntryVouchersManualJournalsPost(manualJournalEntryVoucherPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/ManualJournals";

                    if (manualJournalEntryVoucherPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (manualJournalEntryVoucherPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(manualJournalEntryVoucherPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersManualJournalsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersManualJournalsPostApiResponse>();

                        JournalEntryVouchersManualJournalsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/ManualJournals", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersManualJournalsPostDefaultImplementation(apiResponseLocalVar, manualJournalEntryVoucherPostDto);

                        Events.ExecuteOnJournalEntryVouchersManualJournalsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersManualJournalsPostDefaultImplementation(e, "/JournalEntryVouchers/ManualJournals", uriBuilderLocalVar.Path, manualJournalEntryVoucherPostDto);
                Events.ExecuteOnErrorJournalEntryVouchersManualJournalsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersManualJournalsPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersManualJournalsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersManualJournalsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersManualJournalsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersManualJournalsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersManualJournalsPostApiResponse(ILogger<JournalEntryVouchersManualJournalsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ManualJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
