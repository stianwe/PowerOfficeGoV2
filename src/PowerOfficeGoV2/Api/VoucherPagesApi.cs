// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IVoucherPagesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        VoucherPagesApiEvents Events { get; }

        /// <summary>
        /// Delete a voucher page from a journal entry voucher draft. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The ID of the voucher page to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse> JournalEntryVouchersIdVoucherPagesPageIdDeleteAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a voucher page from a journal entry voucher draft. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The ID of the voucher page to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse?> JournalEntryVouchersIdVoucherPagesPageIdDeleteOrDefaultAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a voucher page image by id (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// You can only access vouchers and voucher pages you have created or is an approver of.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The id of a voucher page. Page ids can be found by querying the voucher endpoint first.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse> JournalEntryVouchersIdVoucherPagesPageIdGetAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a voucher page image by id (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// You can only access vouchers and voucher pages you have created or is an approver of.
        /// </remarks>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The id of a voucher page. Page ids can be found by querying the voucher endpoint first.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse?> JournalEntryVouchersIdVoucherPagesPageIdGetOrDefaultAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a page to a voucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// You can only access vouchers and voucher pages you have created or is an approver of.              Posted vouchers or vouchers in approval at a different users can not be updated by the current integration or user.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPostApiResponse> JournalEntryVouchersIdVoucherPagesPostAsync(Guid id, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a page to a voucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// You can only access vouchers and voucher pages you have created or is an approver of.              Posted vouchers or vouchers in approval at a different users can not be updated by the current integration or user.
        /// </remarks>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdVoucherPagesPostApiResponse?> JournalEntryVouchersIdVoucherPagesPostOrDefaultAsync(Guid id, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdVoucherPagesPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdVoucherPagesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VoucherPagesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdVoucherPagesPageIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete;

        internal void ExecuteOnJournalEntryVouchersIdVoucherPagesPageIdDelete(VoucherPagesApi.JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdVoucherPagesPageIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete(Exception exception)
        {
            OnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdVoucherPagesPageIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdVoucherPagesPageIdGet;

        internal void ExecuteOnJournalEntryVouchersIdVoucherPagesPageIdGet(VoucherPagesApi.JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdVoucherPagesPageIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPageIdGet(Exception exception)
        {
            OnErrorJournalEntryVouchersIdVoucherPagesPageIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdVoucherPagesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdVoucherPagesPost;

        internal void ExecuteOnJournalEntryVouchersIdVoucherPagesPost(VoucherPagesApi.JournalEntryVouchersIdVoucherPagesPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdVoucherPagesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPost(Exception exception)
        {
            OnErrorJournalEntryVouchersIdVoucherPagesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class VoucherPagesApi : IVoucherPagesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<VoucherPagesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public VoucherPagesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherPagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoucherPagesApi(ILogger<VoucherPagesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, VoucherPagesApiEvents voucherPagesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<VoucherPagesApi>();
            HttpClient = httpClient;
            Events = voucherPagesApiEvents;
        }

        partial void FormatJournalEntryVouchersIdVoucherPagesPageIdDelete(ref Guid id, ref long pageId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        private void AfterJournalEntryVouchersIdVoucherPagesPageIdDeleteDefaultImplementation(IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse apiResponseLocalVar, Guid id, long pageId)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdVoucherPagesPageIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id, pageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        partial void AfterJournalEntryVouchersIdVoucherPagesPageIdDelete(ref bool suppressDefaultLog, IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse apiResponseLocalVar, Guid id, long pageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        private void OnErrorJournalEntryVouchersIdVoucherPagesPageIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long pageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, pageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        partial void OnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long pageId);

        /// <summary>
        /// Delete a voucher page from a journal entry voucher draft. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The ID of the voucher page to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse?> JournalEntryVouchersIdVoucherPagesPageIdDeleteOrDefaultAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdVoucherPagesPageIdDeleteAsync(id, pageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a voucher page from a journal entry voucher draft. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The ID of the voucher page to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse> JournalEntryVouchersIdVoucherPagesPageIdDeleteAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersIdVoucherPagesPageIdDelete(ref id, ref pageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}/VoucherPages/{pageId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpageId%7D", Uri.EscapeDataString(pageId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse>();

                        JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}/VoucherPages/{pageId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdVoucherPagesPageIdDeleteDefaultImplementation(apiResponseLocalVar, id, pageId);

                        Events.ExecuteOnJournalEntryVouchersIdVoucherPagesPageIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdVoucherPagesPageIdDeleteDefaultImplementation(e, "/JournalEntryVouchers/{id}/VoucherPages/{pageId}", uriBuilderLocalVar.Path, id, pageId);
                Events.ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPageIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse(ILogger<JournalEntryVouchersIdVoucherPagesPageIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersIdVoucherPagesPageIdGet(ref Guid id, ref long pageId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        private void AfterJournalEntryVouchersIdVoucherPagesPageIdGetDefaultImplementation(IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse apiResponseLocalVar, Guid id, long pageId)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdVoucherPagesPageIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, pageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        partial void AfterJournalEntryVouchersIdVoucherPagesPageIdGet(ref bool suppressDefaultLog, IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse apiResponseLocalVar, Guid id, long pageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        private void OnErrorJournalEntryVouchersIdVoucherPagesPageIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long pageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdVoucherPagesPageIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, pageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="pageId"></param>
        partial void OnErrorJournalEntryVouchersIdVoucherPagesPageIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long pageId);

        /// <summary>
        /// Gets a voucher page image by id (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full) You can only access vouchers and voucher pages you have created or is an approver of.
        /// </summary>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The id of a voucher page. Page ids can be found by querying the voucher endpoint first.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse?> JournalEntryVouchersIdVoucherPagesPageIdGetOrDefaultAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdVoucherPagesPageIdGetAsync(id, pageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a voucher page image by id (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full) You can only access vouchers and voucher pages you have created or is an approver of.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="pageId">The id of a voucher page. Page ids can be found by querying the voucher endpoint first.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse> JournalEntryVouchersIdVoucherPagesPageIdGetAsync(Guid id, long pageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersIdVoucherPagesPageIdGet(ref id, ref pageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}/VoucherPages/{pageId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpageId%7D", Uri.EscapeDataString(pageId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse>();

                        JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}/VoucherPages/{pageId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdVoucherPagesPageIdGetDefaultImplementation(apiResponseLocalVar, id, pageId);

                        Events.ExecuteOnJournalEntryVouchersIdVoucherPagesPageIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdVoucherPagesPageIdGetDefaultImplementation(e, "/JournalEntryVouchers/{id}/VoucherPages/{pageId}", uriBuilderLocalVar.Path, id, pageId);
                Events.ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPageIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdVoucherPagesPageIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse(ILogger<JournalEntryVouchersIdVoucherPagesPageIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersIdVoucherPagesPost(ref Guid id, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersIdVoucherPagesPost(Option<System.IO.Stream> file)
        {
            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="file"></param>
        private void AfterJournalEntryVouchersIdVoucherPagesPostDefaultImplementation(IJournalEntryVouchersIdVoucherPagesPostApiResponse apiResponseLocalVar, Guid id, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdVoucherPagesPost(ref suppressDefaultLog, apiResponseLocalVar, id, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="file"></param>
        partial void AfterJournalEntryVouchersIdVoucherPagesPost(ref bool suppressDefaultLog, IJournalEntryVouchersIdVoucherPagesPostApiResponse apiResponseLocalVar, Guid id, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="file"></param>
        private void OnErrorJournalEntryVouchersIdVoucherPagesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdVoucherPagesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="file"></param>
        partial void OnErrorJournalEntryVouchersIdVoucherPagesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<System.IO.Stream> file);

        /// <summary>
        /// Add a page to a voucher. (Auth roles: JournalEntryVoucher_Full) You can only access vouchers and voucher pages you have created or is an approver of.              Posted vouchers or vouchers in approval at a different users can not be updated by the current integration or user.
        /// </summary>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPostApiResponse?> JournalEntryVouchersIdVoucherPagesPostOrDefaultAsync(Guid id, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdVoucherPagesPostAsync(id, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a page to a voucher. (Auth roles: JournalEntryVoucher_Full) You can only access vouchers and voucher pages you have created or is an approver of.              Posted vouchers or vouchers in approval at a different users can not be updated by the current integration or user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the voucher.</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdVoucherPagesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdVoucherPagesPostApiResponse> JournalEntryVouchersIdVoucherPagesPostAsync(Guid id, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersIdVoucherPagesPost(file);

                FormatJournalEntryVouchersIdVoucherPagesPost(ref id, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}/VoucherPages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdVoucherPagesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdVoucherPagesPostApiResponse>();

                        JournalEntryVouchersIdVoucherPagesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}/VoucherPages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdVoucherPagesPostDefaultImplementation(apiResponseLocalVar, id, file);

                        Events.ExecuteOnJournalEntryVouchersIdVoucherPagesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdVoucherPagesPostDefaultImplementation(e, "/JournalEntryVouchers/{id}/VoucherPages", uriBuilderLocalVar.Path, id, file);
                Events.ExecuteOnErrorJournalEntryVouchersIdVoucherPagesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdVoucherPagesPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdVoucherPagesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdVoucherPagesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdVoucherPagesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdVoucherPagesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdVoucherPagesPostApiResponse(ILogger<JournalEntryVouchersIdVoucherPagesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
