// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISalesOrderAttachmentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SalesOrderAttachmentsApiEvents Events { get; }

        /// <summary>
        /// Fetch an attachment (file) from a sales order by its identifier. (Auth roles: SalesOrderAttachment, SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// Use this method to fetch a attachment file.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentByIdApiResponse"/>&gt;</returns>
        Task<IGetInvoiceAttachmentByIdApiResponse> GetInvoiceAttachmentByIdAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Fetch an attachment (file) from a sales order by its identifier. (Auth roles: SalesOrderAttachment, SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// Use this method to fetch a attachment file.
        /// </remarks>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentByIdApiResponse"/>?&gt;</returns>
        Task<IGetInvoiceAttachmentByIdApiResponse?> GetInvoiceAttachmentByIdOrDefaultAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lists the details of all attachments from a sales order. (Auth roles: SalesOrderAttachment,SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// To reduce the payload, the returned list do not contain the file. To retrieve the files, this must be done by getting each attachment by its identifier.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsGetApiResponse> SalesOrdersSalesOrderIdAttachmentsGetAsync(Guid salesOrderId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Lists the details of all attachments from a sales order. (Auth roles: SalesOrderAttachment,SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// To reduce the payload, the returned list do not contain the file. To retrieve the files, this must be done by getting each attachment by its identifier.
        /// </remarks>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsGetApiResponse?> SalesOrdersSalesOrderIdAttachmentsGetOrDefaultAsync(Guid salesOrderId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing attachment from a sales order by its identifier (Auth roles: SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse> SalesOrdersSalesOrderIdAttachmentsIdDeleteAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing attachment from a sales order by its identifier (Auth roles: SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse?> SalesOrdersSalesOrderIdAttachmentsIdDeleteOrDefaultAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a attachment to an existing sales order. (Auth roles: SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// Create and add a new attachment to an existing sales order entity on the client.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsPostApiResponse> SalesOrdersSalesOrderIdAttachmentsPostAsync(Guid salesOrderId, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a attachment to an existing sales order. (Auth roles: SalesOrderAttachment_Full)
        /// </summary>
        /// <remarks>
        /// Create and add a new attachment to an existing sales order entity on the client.
        /// </remarks>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>?&gt;</returns>
        Task<ISalesOrdersSalesOrderIdAttachmentsPostApiResponse?> SalesOrdersSalesOrderIdAttachmentsPostOrDefaultAsync(Guid salesOrderId, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetInvoiceAttachmentByIdApiResponse"/>
    /// </summary>
    public interface IGetInvoiceAttachmentByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>
    /// </summary>
    public interface ISalesOrdersSalesOrderIdAttachmentsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SalesOrderAttachmentDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>
    /// </summary>
    public interface ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>
    /// </summary>
    public interface ISalesOrdersSalesOrderIdAttachmentsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.SalesOrderAttachmentDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SalesOrderAttachmentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetInvoiceAttachmentById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetInvoiceAttachmentById;

        internal void ExecuteOnGetInvoiceAttachmentById(SalesOrderAttachmentsApi.GetInvoiceAttachmentByIdApiResponse apiResponse)
        {
            OnGetInvoiceAttachmentById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetInvoiceAttachmentById(Exception exception)
        {
            OnErrorGetInvoiceAttachmentById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersSalesOrderIdAttachmentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersSalesOrderIdAttachmentsGet;

        internal void ExecuteOnSalesOrdersSalesOrderIdAttachmentsGet(SalesOrderAttachmentsApi.SalesOrdersSalesOrderIdAttachmentsGetApiResponse apiResponse)
        {
            OnSalesOrdersSalesOrderIdAttachmentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsGet(Exception exception)
        {
            OnErrorSalesOrdersSalesOrderIdAttachmentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersSalesOrderIdAttachmentsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete;

        internal void ExecuteOnSalesOrdersSalesOrderIdAttachmentsIdDelete(SalesOrderAttachmentsApi.SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse apiResponse)
        {
            OnSalesOrdersSalesOrderIdAttachmentsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete(Exception exception)
        {
            OnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSalesOrdersSalesOrderIdAttachmentsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSalesOrdersSalesOrderIdAttachmentsPost;

        internal void ExecuteOnSalesOrdersSalesOrderIdAttachmentsPost(SalesOrderAttachmentsApi.SalesOrdersSalesOrderIdAttachmentsPostApiResponse apiResponse)
        {
            OnSalesOrdersSalesOrderIdAttachmentsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsPost(Exception exception)
        {
            OnErrorSalesOrdersSalesOrderIdAttachmentsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SalesOrderAttachmentsApi : ISalesOrderAttachmentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SalesOrderAttachmentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SalesOrderAttachmentsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderAttachmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SalesOrderAttachmentsApi(ILogger<SalesOrderAttachmentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SalesOrderAttachmentsApiEvents salesOrderAttachmentsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SalesOrderAttachmentsApi>();
            HttpClient = httpClient;
            Events = salesOrderAttachmentsApiEvents;
        }

        partial void FormatGetInvoiceAttachmentById(ref Guid salesOrderId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        private void AfterGetInvoiceAttachmentByIdDefaultImplementation(IGetInvoiceAttachmentByIdApiResponse apiResponseLocalVar, Guid salesOrderId, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetInvoiceAttachmentById(ref suppressDefaultLog, apiResponseLocalVar, salesOrderId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        partial void AfterGetInvoiceAttachmentById(ref bool suppressDefaultLog, IGetInvoiceAttachmentByIdApiResponse apiResponseLocalVar, Guid salesOrderId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        private void OnErrorGetInvoiceAttachmentByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetInvoiceAttachmentById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, salesOrderId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        partial void OnErrorGetInvoiceAttachmentById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, long id);

        /// <summary>
        /// Fetch an attachment (file) from a sales order by its identifier. (Auth roles: SalesOrderAttachment, SalesOrderAttachment_Full) Use this method to fetch a attachment file.
        /// </summary>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentByIdApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceAttachmentByIdApiResponse?> GetInvoiceAttachmentByIdOrDefaultAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetInvoiceAttachmentByIdAsync(salesOrderId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Fetch an attachment (file) from a sales order by its identifier. (Auth roles: SalesOrderAttachment, SalesOrderAttachment_Full) Use this method to fetch a attachment file.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetInvoiceAttachmentByIdApiResponse"/>&gt;</returns>
        public async Task<IGetInvoiceAttachmentByIdApiResponse> GetInvoiceAttachmentByIdAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetInvoiceAttachmentById(ref salesOrderId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{salesOrderId}/attachments/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalesOrderId%7D", Uri.EscapeDataString(salesOrderId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetInvoiceAttachmentByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetInvoiceAttachmentByIdApiResponse>();

                        GetInvoiceAttachmentByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{salesOrderId}/attachments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetInvoiceAttachmentByIdDefaultImplementation(apiResponseLocalVar, salesOrderId, id);

                        Events.ExecuteOnGetInvoiceAttachmentById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetInvoiceAttachmentByIdDefaultImplementation(e, "/SalesOrders/{salesOrderId}/attachments/{id}", uriBuilderLocalVar.Path, salesOrderId, id);
                Events.ExecuteOnErrorGetInvoiceAttachmentById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetInvoiceAttachmentByIdApiResponse"/>
        /// </summary>
        public partial class GetInvoiceAttachmentByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetInvoiceAttachmentByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetInvoiceAttachmentByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetInvoiceAttachmentByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetInvoiceAttachmentByIdApiResponse(ILogger<GetInvoiceAttachmentByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsBadRequest && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersSalesOrderIdAttachmentsGet(ref Guid salesOrderId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSalesOrdersSalesOrderIdAttachmentsGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSalesOrdersSalesOrderIdAttachmentsGetDefaultImplementation(ISalesOrdersSalesOrderIdAttachmentsGetApiResponse apiResponseLocalVar, Guid salesOrderId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersSalesOrderIdAttachmentsGet(ref suppressDefaultLog, apiResponseLocalVar, salesOrderId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSalesOrdersSalesOrderIdAttachmentsGet(ref bool suppressDefaultLog, ISalesOrdersSalesOrderIdAttachmentsGetApiResponse apiResponseLocalVar, Guid salesOrderId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSalesOrdersSalesOrderIdAttachmentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersSalesOrderIdAttachmentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, salesOrderId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSalesOrdersSalesOrderIdAttachmentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Lists the details of all attachments from a sales order. (Auth roles: SalesOrderAttachment,SalesOrderAttachment_Full) To reduce the payload, the returned list do not contain the file. To retrieve the files, this must be done by getting each attachment by its identifier.
        /// </summary>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsGetApiResponse?> SalesOrdersSalesOrderIdAttachmentsGetOrDefaultAsync(Guid salesOrderId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersSalesOrderIdAttachmentsGetAsync(salesOrderId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Lists the details of all attachments from a sales order. (Auth roles: SalesOrderAttachment,SalesOrderAttachment_Full) To reduce the payload, the returned list do not contain the file. To retrieve the files, this must be done by getting each attachment by its identifier.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsGetApiResponse> SalesOrdersSalesOrderIdAttachmentsGetAsync(Guid salesOrderId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalesOrdersSalesOrderIdAttachmentsGet(resourceParameter);

                FormatSalesOrdersSalesOrderIdAttachmentsGet(ref salesOrderId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{salesOrderId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalesOrderId%7D", Uri.EscapeDataString(salesOrderId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersSalesOrderIdAttachmentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersSalesOrderIdAttachmentsGetApiResponse>();

                        SalesOrdersSalesOrderIdAttachmentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{salesOrderId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersSalesOrderIdAttachmentsGetDefaultImplementation(apiResponseLocalVar, salesOrderId, resourceParameter);

                        Events.ExecuteOnSalesOrdersSalesOrderIdAttachmentsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersSalesOrderIdAttachmentsGetDefaultImplementation(e, "/SalesOrders/{salesOrderId}/attachments", uriBuilderLocalVar.Path, salesOrderId, resourceParameter);
                Events.ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>
        /// </summary>
        public partial class SalesOrdersSalesOrderIdAttachmentsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersSalesOrderIdAttachmentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersSalesOrderIdAttachmentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersSalesOrderIdAttachmentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersSalesOrderIdAttachmentsGetApiResponse(ILogger<SalesOrdersSalesOrderIdAttachmentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SalesOrderAttachmentDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SalesOrderAttachmentDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SalesOrderAttachmentDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersSalesOrderIdAttachmentsIdDelete(ref Guid salesOrderId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        private void AfterSalesOrdersSalesOrderIdAttachmentsIdDeleteDefaultImplementation(ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse apiResponseLocalVar, Guid salesOrderId, long id)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersSalesOrderIdAttachmentsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, salesOrderId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        partial void AfterSalesOrdersSalesOrderIdAttachmentsIdDelete(ref bool suppressDefaultLog, ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse apiResponseLocalVar, Guid salesOrderId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        private void OnErrorSalesOrdersSalesOrderIdAttachmentsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, salesOrderId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="id"></param>
        partial void OnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, long id);

        /// <summary>
        /// Deletes an existing attachment from a sales order by its identifier (Auth roles: SalesOrderAttachment_Full) 
        /// </summary>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse?> SalesOrdersSalesOrderIdAttachmentsIdDeleteOrDefaultAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersSalesOrderIdAttachmentsIdDeleteAsync(salesOrderId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing attachment from a sales order by its identifier (Auth roles: SalesOrderAttachment_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="id">The sales order attachment identifier</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse> SalesOrdersSalesOrderIdAttachmentsIdDeleteAsync(Guid salesOrderId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSalesOrdersSalesOrderIdAttachmentsIdDelete(ref salesOrderId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{salesOrderId}/attachments/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalesOrderId%7D", Uri.EscapeDataString(salesOrderId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse>();

                        SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{salesOrderId}/attachments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersSalesOrderIdAttachmentsIdDeleteDefaultImplementation(apiResponseLocalVar, salesOrderId, id);

                        Events.ExecuteOnSalesOrdersSalesOrderIdAttachmentsIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersSalesOrderIdAttachmentsIdDeleteDefaultImplementation(e, "/SalesOrders/{salesOrderId}/attachments/{id}", uriBuilderLocalVar.Path, salesOrderId, id);
                Events.ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>
        /// </summary>
        public partial class SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse(ILogger<SalesOrdersSalesOrderIdAttachmentsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSalesOrdersSalesOrderIdAttachmentsPost(ref Guid salesOrderId, ref Option<System.IO.Stream> file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateSalesOrdersSalesOrderIdAttachmentsPost(Option<System.IO.Stream> file)
        {
            if (file.IsSet && file.Value == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="file"></param>
        private void AfterSalesOrdersSalesOrderIdAttachmentsPostDefaultImplementation(ISalesOrdersSalesOrderIdAttachmentsPostApiResponse apiResponseLocalVar, Guid salesOrderId, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLog = false;
            AfterSalesOrdersSalesOrderIdAttachmentsPost(ref suppressDefaultLog, apiResponseLocalVar, salesOrderId, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="file"></param>
        partial void AfterSalesOrdersSalesOrderIdAttachmentsPost(ref bool suppressDefaultLog, ISalesOrdersSalesOrderIdAttachmentsPostApiResponse apiResponseLocalVar, Guid salesOrderId, Option<System.IO.Stream> file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="file"></param>
        private void OnErrorSalesOrdersSalesOrderIdAttachmentsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, Option<System.IO.Stream> file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSalesOrdersSalesOrderIdAttachmentsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, salesOrderId, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="salesOrderId"></param>
        /// <param name="file"></param>
        partial void OnErrorSalesOrdersSalesOrderIdAttachmentsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid salesOrderId, Option<System.IO.Stream> file);

        /// <summary>
        /// Add a attachment to an existing sales order. (Auth roles: SalesOrderAttachment_Full) Create and add a new attachment to an existing sales order entity on the client.
        /// </summary>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsPostApiResponse?> SalesOrdersSalesOrderIdAttachmentsPostOrDefaultAsync(Guid salesOrderId, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SalesOrdersSalesOrderIdAttachmentsPostAsync(salesOrderId, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a attachment to an existing sales order. (Auth roles: SalesOrderAttachment_Full) Create and add a new attachment to an existing sales order entity on the client.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="salesOrderId">The sales order identifier</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>&gt;</returns>
        public async Task<ISalesOrdersSalesOrderIdAttachmentsPostApiResponse> SalesOrdersSalesOrderIdAttachmentsPostAsync(Guid salesOrderId, Option<System.IO.Stream> file = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSalesOrdersSalesOrderIdAttachmentsPost(file);

                FormatSalesOrdersSalesOrderIdAttachmentsPost(ref salesOrderId, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SalesOrders/{salesOrderId}/attachments";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsalesOrderId%7D", Uri.EscapeDataString(salesOrderId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (file.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(file.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SalesOrdersSalesOrderIdAttachmentsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SalesOrdersSalesOrderIdAttachmentsPostApiResponse>();

                        SalesOrdersSalesOrderIdAttachmentsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SalesOrders/{salesOrderId}/attachments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSalesOrdersSalesOrderIdAttachmentsPostDefaultImplementation(apiResponseLocalVar, salesOrderId, file);

                        Events.ExecuteOnSalesOrdersSalesOrderIdAttachmentsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSalesOrdersSalesOrderIdAttachmentsPostDefaultImplementation(e, "/SalesOrders/{salesOrderId}/attachments", uriBuilderLocalVar.Path, salesOrderId, file);
                Events.ExecuteOnErrorSalesOrdersSalesOrderIdAttachmentsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>
        /// </summary>
        public partial class SalesOrdersSalesOrderIdAttachmentsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISalesOrdersSalesOrderIdAttachmentsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SalesOrdersSalesOrderIdAttachmentsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SalesOrdersSalesOrderIdAttachmentsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SalesOrdersSalesOrderIdAttachmentsPostApiResponse(ILogger<SalesOrdersSalesOrderIdAttachmentsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SalesOrderAttachmentDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SalesOrderAttachmentDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.SalesOrderAttachmentDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
