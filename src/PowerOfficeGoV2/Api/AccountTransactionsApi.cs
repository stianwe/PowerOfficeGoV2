// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAccountTransactionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AccountTransactionsApiEvents Events { get; }

        /// <summary>
        /// Gets all account transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: AccountTransaction,AccountTransaction_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="accountNos">Filter by account numbers. Separate by comma [,] to filter on multiple account numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1000-1999, 2500, 3000-\&quot; will result in transactions with account numbers from and including 1000 to 1999, 2500, 3000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="agricultureDepartments">Filter by agriculture departments. Separate by comma [,] to filter on multiple names. If null or whitespace, all transactions with or without agriculture departments are returned (filter is not used). (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by created timestamp. This filtering will return all transactions with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Date not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without department codes are returned. If null or whitespace, all transactions with or without department codes are returned (filter is not used). (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by last changed timestamp. No changes with accounting effect can be made on a posted voucher in Go, making createdDateTimeOffsetGreaterThan the preferred filtering in order to get new account transactions from Go. However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp. This filtering will return all transactions with a last changed timestamp greater than the timestamp provided. Can be used when polling for new transactions and where changes in description are needed from Go. If used, changed transactions should replace what was previously stored in the external system. Note again that no changes can be made that affects the accounting as such. Date not inclusive. (optional)</param>
        /// <param name="productCodes">Filter by product codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without product codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without project codes are returned. If null or whitespace, all transactions with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="vatCodes">Filter by vat codes. Separate by comma [,] to filter on multiple codes. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in transactions with voucher numbers from and including 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma [,] to filter on multiple voucher types. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountTransactionsGetApiResponse"/>&gt;</returns>
        Task<IAccountTransactionsGetApiResponse> AccountTransactionsGetAsync(DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos = default, Option<string> agricultureDepartments = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<string> productCodes = default, Option<string> projectCodes = default, Option<string> vatCodes = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all account transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: AccountTransaction,AccountTransaction_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="accountNos">Filter by account numbers. Separate by comma [,] to filter on multiple account numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1000-1999, 2500, 3000-\&quot; will result in transactions with account numbers from and including 1000 to 1999, 2500, 3000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="agricultureDepartments">Filter by agriculture departments. Separate by comma [,] to filter on multiple names. If null or whitespace, all transactions with or without agriculture departments are returned (filter is not used). (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by created timestamp. This filtering will return all transactions with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Date not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without department codes are returned. If null or whitespace, all transactions with or without department codes are returned (filter is not used). (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by last changed timestamp. No changes with accounting effect can be made on a posted voucher in Go, making createdDateTimeOffsetGreaterThan the preferred filtering in order to get new account transactions from Go. However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp. This filtering will return all transactions with a last changed timestamp greater than the timestamp provided. Can be used when polling for new transactions and where changes in description are needed from Go. If used, changed transactions should replace what was previously stored in the external system. Note again that no changes can be made that affects the accounting as such. Date not inclusive. (optional)</param>
        /// <param name="productCodes">Filter by product codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without product codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without project codes are returned. If null or whitespace, all transactions with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="vatCodes">Filter by vat codes. Separate by comma [,] to filter on multiple codes. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in transactions with voucher numbers from and including 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma [,] to filter on multiple voucher types. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountTransactionsGetApiResponse"/>?&gt;</returns>
        Task<IAccountTransactionsGetApiResponse?> AccountTransactionsGetOrDefaultAsync(DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos = default, Option<string> agricultureDepartments = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<string> productCodes = default, Option<string> projectCodes = default, Option<string> vatCodes = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAccountTransactionsGetApiResponse"/>
    /// </summary>
    public interface IAccountTransactionsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<AccountTransactionDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccountTransactionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAccountTransactionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAccountTransactionsGet;

        internal void ExecuteOnAccountTransactionsGet(AccountTransactionsApi.AccountTransactionsGetApiResponse apiResponse)
        {
            OnAccountTransactionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAccountTransactionsGet(Exception exception)
        {
            OnErrorAccountTransactionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AccountTransactionsApi : IAccountTransactionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AccountTransactionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AccountTransactionsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountTransactionsApi(ILogger<AccountTransactionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AccountTransactionsApiEvents accountTransactionsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AccountTransactionsApi>();
            HttpClient = httpClient;
            Events = accountTransactionsApiEvents;
        }

        partial void FormatAccountTransactionsGet(ref DateTimeOffset fromDate, ref DateTimeOffset toDate, ref Option<string> accountNos, ref Option<string> agricultureDepartments, ref Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, ref Option<string> departmentCodes, ref Option<bool> includeSubProject, ref Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, ref Option<string> productCodes, ref Option<string> projectCodes, ref Option<string> vatCodes, ref Option<string> voucherNos, ref Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accountNos"></param>
        /// <param name="agricultureDepartments"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="productCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="vatCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateAccountTransactionsGet(Option<string> accountNos, Option<string> agricultureDepartments, Option<string> departmentCodes, Option<string> productCodes, Option<string> projectCodes, Option<string> vatCodes, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            if (accountNos.IsSet && accountNos.Value == null)
                throw new ArgumentNullException(nameof(accountNos));

            if (agricultureDepartments.IsSet && agricultureDepartments.Value == null)
                throw new ArgumentNullException(nameof(agricultureDepartments));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (productCodes.IsSet && productCodes.Value == null)
                throw new ArgumentNullException(nameof(productCodes));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (vatCodes.IsSet && vatCodes.Value == null)
                throw new ArgumentNullException(nameof(vatCodes));

            if (voucherNos.IsSet && voucherNos.Value == null)
                throw new ArgumentNullException(nameof(voucherNos));

            if (voucherTypes.IsSet && voucherTypes.Value == null)
                throw new ArgumentNullException(nameof(voucherTypes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="accountNos"></param>
        /// <param name="agricultureDepartments"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="productCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="vatCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void AfterAccountTransactionsGetDefaultImplementation(IAccountTransactionsGetApiResponse apiResponseLocalVar, DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos, Option<string> agricultureDepartments, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<string> productCodes, Option<string> projectCodes, Option<string> vatCodes, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterAccountTransactionsGet(ref suppressDefaultLog, apiResponseLocalVar, fromDate, toDate, accountNos, agricultureDepartments, createdDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="accountNos"></param>
        /// <param name="agricultureDepartments"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="productCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="vatCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterAccountTransactionsGet(ref bool suppressDefaultLog, IAccountTransactionsGetApiResponse apiResponseLocalVar, DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos, Option<string> agricultureDepartments, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<string> productCodes, Option<string> projectCodes, Option<string> vatCodes, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="accountNos"></param>
        /// <param name="agricultureDepartments"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="productCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="vatCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorAccountTransactionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos, Option<string> agricultureDepartments, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<string> productCodes, Option<string> projectCodes, Option<string> vatCodes, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccountTransactionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fromDate, toDate, accountNos, agricultureDepartments, createdDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="accountNos"></param>
        /// <param name="agricultureDepartments"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="productCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="vatCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorAccountTransactionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos, Option<string> agricultureDepartments, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan, Option<string> productCodes, Option<string> projectCodes, Option<string> vatCodes, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets all account transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: AccountTransaction,AccountTransaction_Full) 
        /// </summary>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="accountNos">Filter by account numbers. Separate by comma [,] to filter on multiple account numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1000-1999, 2500, 3000-\&quot; will result in transactions with account numbers from and including 1000 to 1999, 2500, 3000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="agricultureDepartments">Filter by agriculture departments. Separate by comma [,] to filter on multiple names. If null or whitespace, all transactions with or without agriculture departments are returned (filter is not used). (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by created timestamp. This filtering will return all transactions with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Date not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without department codes are returned. If null or whitespace, all transactions with or without department codes are returned (filter is not used). (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by last changed timestamp. No changes with accounting effect can be made on a posted voucher in Go, making createdDateTimeOffsetGreaterThan the preferred filtering in order to get new account transactions from Go. However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp. This filtering will return all transactions with a last changed timestamp greater than the timestamp provided. Can be used when polling for new transactions and where changes in description are needed from Go. If used, changed transactions should replace what was previously stored in the external system. Note again that no changes can be made that affects the accounting as such. Date not inclusive. (optional)</param>
        /// <param name="productCodes">Filter by product codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without product codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without project codes are returned. If null or whitespace, all transactions with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="vatCodes">Filter by vat codes. Separate by comma [,] to filter on multiple codes. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in transactions with voucher numbers from and including 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma [,] to filter on multiple voucher types. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IAccountTransactionsGetApiResponse?> AccountTransactionsGetOrDefaultAsync(DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos = default, Option<string> agricultureDepartments = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<string> productCodes = default, Option<string> projectCodes = default, Option<string> vatCodes = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccountTransactionsGetAsync(fromDate, toDate, accountNos, agricultureDepartments, createdDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all account transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: AccountTransaction,AccountTransaction_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="accountNos">Filter by account numbers. Separate by comma [,] to filter on multiple account numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1000-1999, 2500, 3000-\&quot; will result in transactions with account numbers from and including 1000 to 1999, 2500, 3000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="agricultureDepartments">Filter by agriculture departments. Separate by comma [,] to filter on multiple names. If null or whitespace, all transactions with or without agriculture departments are returned (filter is not used). (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by created timestamp. This filtering will return all transactions with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Date not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without department codes are returned. If null or whitespace, all transactions with or without department codes are returned (filter is not used). (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by last changed timestamp. No changes with accounting effect can be made on a posted voucher in Go, making createdDateTimeOffsetGreaterThan the preferred filtering in order to get new account transactions from Go. However, simple changes like the description can be made on a posted voucher, which will effect the last changed timestamp. This filtering will return all transactions with a last changed timestamp greater than the timestamp provided. Can be used when polling for new transactions and where changes in description are needed from Go. If used, changed transactions should replace what was previously stored in the external system. Note again that no changes can be made that affects the accounting as such. Date not inclusive. (optional)</param>
        /// <param name="productCodes">Filter by product codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without product codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all transactions without project codes are returned. If null or whitespace, all transactions with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="vatCodes">Filter by vat codes. Separate by comma [,] to filter on multiple codes. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in transactions with voucher numbers from and including 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma [,] to filter on multiple voucher types. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountTransactionsGetApiResponse"/>&gt;</returns>
        public async Task<IAccountTransactionsGetApiResponse> AccountTransactionsGetAsync(DateTimeOffset fromDate, DateTimeOffset toDate, Option<string> accountNos = default, Option<string> agricultureDepartments = default, Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default, Option<string> productCodes = default, Option<string> projectCodes = default, Option<string> vatCodes = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAccountTransactionsGet(accountNos, agricultureDepartments, departmentCodes, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter);

                FormatAccountTransactionsGet(ref fromDate, ref toDate, ref accountNos, ref agricultureDepartments, ref createdDateTimeOffsetGreaterThan, ref departmentCodes, ref includeSubProject, ref lastChangedDateTimeOffsetGreaterThan, ref productCodes, ref projectCodes, ref vatCodes, ref voucherNos, ref voucherTypes, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/AccountTransactions";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fromDate"] = ClientUtils.ParameterToString(fromDate);
                    parseQueryStringLocalVar["toDate"] = ClientUtils.ParameterToString(toDate);

                    if (accountNos.IsSet)
                        parseQueryStringLocalVar["accountNos"] = ClientUtils.ParameterToString(accountNos.Value);

                    if (agricultureDepartments.IsSet)
                        parseQueryStringLocalVar["agricultureDepartments"] = ClientUtils.ParameterToString(agricultureDepartments.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (productCodes.IsSet)
                        parseQueryStringLocalVar["productCodes"] = ClientUtils.ParameterToString(productCodes.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (vatCodes.IsSet)
                        parseQueryStringLocalVar["vatCodes"] = ClientUtils.ParameterToString(vatCodes.Value);

                    if (voucherNos.IsSet)
                        parseQueryStringLocalVar["voucherNos"] = ClientUtils.ParameterToString(voucherNos.Value);

                    if (voucherTypes.IsSet)
                        parseQueryStringLocalVar["voucherTypes"] = ClientUtils.ParameterToString(voucherTypes.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AccountTransactionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccountTransactionsGetApiResponse>();

                        AccountTransactionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/AccountTransactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAccountTransactionsGetDefaultImplementation(apiResponseLocalVar, fromDate, toDate, accountNos, agricultureDepartments, createdDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter);

                        Events.ExecuteOnAccountTransactionsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccountTransactionsGetDefaultImplementation(e, "/AccountTransactions", uriBuilderLocalVar.Path, fromDate, toDate, accountNos, agricultureDepartments, createdDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, lastChangedDateTimeOffsetGreaterThan, productCodes, projectCodes, vatCodes, voucherNos, voucherTypes, resourceParameter);
                Events.ExecuteOnErrorAccountTransactionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AccountTransactionsGetApiResponse"/>
        /// </summary>
        public partial class AccountTransactionsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IAccountTransactionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccountTransactionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AccountTransactionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccountTransactionsGetApiResponse(ILogger<AccountTransactionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AccountTransactionDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AccountTransactionDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AccountTransactionDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
