// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssignmentsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssignmentsApiEvents Events { get; }

        /// <summary>
        /// List the quality assignments from the client, returning lightweight objects. (Auth roles: QualityAssignmentLight,QualityAssignmentLight_Full)
        /// </summary>
        /// <remarks>
        /// Archived assignments are not returned by default.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by assignment status (draft, active or archived). Archived assignments are not returned unless the filter with argument \&quot;archived\&quot; is applied. (optional)</param>
        /// <param name="customerSubLedgerAccountIds">Filter by customer sub ledger account id&#39;s. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="managerSubLedgerAccountIds">Filter by the identifier of the assignment manager. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsGetApiResponse"/>&gt;</returns>
        Task<IAssignmentsGetApiResponse> AssignmentsGetAsync(Option<string> status = default, Option<string> customerSubLedgerAccountIds = default, Option<string> managerSubLedgerAccountIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the quality assignments from the client, returning lightweight objects. (Auth roles: QualityAssignmentLight,QualityAssignmentLight_Full)
        /// </summary>
        /// <remarks>
        /// Archived assignments are not returned by default.
        /// </remarks>
        /// <param name="status">Filter by assignment status (draft, active or archived). Archived assignments are not returned unless the filter with argument \&quot;archived\&quot; is applied. (optional)</param>
        /// <param name="customerSubLedgerAccountIds">Filter by customer sub ledger account id&#39;s. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="managerSubLedgerAccountIds">Filter by the identifier of the assignment manager. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsGetApiResponse"/>?&gt;</returns>
        Task<IAssignmentsGetApiResponse?> AssignmentsGetOrDefaultAsync(Option<string> status = default, Option<string> customerSubLedgerAccountIds = default, Option<string> managerSubLedgerAccountIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the general information from a given quality assignment (Auth roles: QualityAssignmentGeneral,QualityAssignmentGeneral_Full, QualityAssignmentLight,QualityAssignmentLight_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsIdGetApiResponse"/>&gt;</returns>
        Task<IAssignmentsIdGetApiResponse> AssignmentsIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the general information from a given quality assignment (Auth roles: QualityAssignmentGeneral,QualityAssignmentGeneral_Full, QualityAssignmentLight,QualityAssignmentLight_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Identifier of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsIdGetApiResponse"/>?&gt;</returns>
        Task<IAssignmentsIdGetApiResponse?> AssignmentsIdGetOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAssignmentsGetApiResponse"/>
    /// </summary>
    public interface IAssignmentsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<AssignmentLightWeightDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IAssignmentsIdGetApiResponse"/>
    /// </summary>
    public interface IAssignmentsIdGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.AssignmentGeneralDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssignmentsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAssignmentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAssignmentsGet;

        internal void ExecuteOnAssignmentsGet(AssignmentsApi.AssignmentsGetApiResponse apiResponse)
        {
            OnAssignmentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAssignmentsGet(Exception exception)
        {
            OnErrorAssignmentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAssignmentsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAssignmentsIdGet;

        internal void ExecuteOnAssignmentsIdGet(AssignmentsApi.AssignmentsIdGetApiResponse apiResponse)
        {
            OnAssignmentsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAssignmentsIdGet(Exception exception)
        {
            OnErrorAssignmentsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssignmentsApi : IAssignmentsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssignmentsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssignmentsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssignmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssignmentsApi(ILogger<AssignmentsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssignmentsApiEvents assignmentsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssignmentsApi>();
            HttpClient = httpClient;
            Events = assignmentsApiEvents;
        }

        partial void FormatAssignmentsGet(ref Option<string> status, ref Option<string> customerSubLedgerAccountIds, ref Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="status"></param>
        /// <param name="customerSubLedgerAccountIds"></param>
        /// <param name="managerSubLedgerAccountIds"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateAssignmentsGet(Option<string> status, Option<string> customerSubLedgerAccountIds, Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter)
        {
            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (customerSubLedgerAccountIds.IsSet && customerSubLedgerAccountIds.Value == null)
                throw new ArgumentNullException(nameof(customerSubLedgerAccountIds));

            if (managerSubLedgerAccountIds.IsSet && managerSubLedgerAccountIds.Value == null)
                throw new ArgumentNullException(nameof(managerSubLedgerAccountIds));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="customerSubLedgerAccountIds"></param>
        /// <param name="managerSubLedgerAccountIds"></param>
        /// <param name="resourceParameter"></param>
        private void AfterAssignmentsGetDefaultImplementation(IAssignmentsGetApiResponse apiResponseLocalVar, Option<string> status, Option<string> customerSubLedgerAccountIds, Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterAssignmentsGet(ref suppressDefaultLog, apiResponseLocalVar, status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="customerSubLedgerAccountIds"></param>
        /// <param name="managerSubLedgerAccountIds"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterAssignmentsGet(ref bool suppressDefaultLog, IAssignmentsGetApiResponse apiResponseLocalVar, Option<string> status, Option<string> customerSubLedgerAccountIds, Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="customerSubLedgerAccountIds"></param>
        /// <param name="managerSubLedgerAccountIds"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorAssignmentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> status, Option<string> customerSubLedgerAccountIds, Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAssignmentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="customerSubLedgerAccountIds"></param>
        /// <param name="managerSubLedgerAccountIds"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorAssignmentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> status, Option<string> customerSubLedgerAccountIds, Option<string> managerSubLedgerAccountIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// List the quality assignments from the client, returning lightweight objects. (Auth roles: QualityAssignmentLight,QualityAssignmentLight_Full) Archived assignments are not returned by default.
        /// </summary>
        /// <param name="status">Filter by assignment status (draft, active or archived). Archived assignments are not returned unless the filter with argument \&quot;archived\&quot; is applied. (optional)</param>
        /// <param name="customerSubLedgerAccountIds">Filter by customer sub ledger account id&#39;s. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="managerSubLedgerAccountIds">Filter by the identifier of the assignment manager. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsGetApiResponse"/>&gt;</returns>
        public async Task<IAssignmentsGetApiResponse?> AssignmentsGetOrDefaultAsync(Option<string> status = default, Option<string> customerSubLedgerAccountIds = default, Option<string> managerSubLedgerAccountIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AssignmentsGetAsync(status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List the quality assignments from the client, returning lightweight objects. (Auth roles: QualityAssignmentLight,QualityAssignmentLight_Full) Archived assignments are not returned by default.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by assignment status (draft, active or archived). Archived assignments are not returned unless the filter with argument \&quot;archived\&quot; is applied. (optional)</param>
        /// <param name="customerSubLedgerAccountIds">Filter by customer sub ledger account id&#39;s. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="managerSubLedgerAccountIds">Filter by the identifier of the assignment manager. Separate by comma [,] to filter on multiple customer id&#39;s. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsGetApiResponse"/>&gt;</returns>
        public async Task<IAssignmentsGetApiResponse> AssignmentsGetAsync(Option<string> status = default, Option<string> customerSubLedgerAccountIds = default, Option<string> managerSubLedgerAccountIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAssignmentsGet(status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter);

                FormatAssignmentsGet(ref status, ref customerSubLedgerAccountIds, ref managerSubLedgerAccountIds, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Assignments";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (customerSubLedgerAccountIds.IsSet)
                        parseQueryStringLocalVar["customerSubLedgerAccountIds"] = ClientUtils.ParameterToString(customerSubLedgerAccountIds.Value);

                    if (managerSubLedgerAccountIds.IsSet)
                        parseQueryStringLocalVar["managerSubLedgerAccountIds"] = ClientUtils.ParameterToString(managerSubLedgerAccountIds.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AssignmentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssignmentsGetApiResponse>();

                        AssignmentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Assignments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAssignmentsGetDefaultImplementation(apiResponseLocalVar, status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter);

                        Events.ExecuteOnAssignmentsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAssignmentsGetDefaultImplementation(e, "/Assignments", uriBuilderLocalVar.Path, status, customerSubLedgerAccountIds, managerSubLedgerAccountIds, resourceParameter);
                Events.ExecuteOnErrorAssignmentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AssignmentsGetApiResponse"/>
        /// </summary>
        public partial class AssignmentsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IAssignmentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AssignmentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AssignmentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AssignmentsGetApiResponse(ILogger<AssignmentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<AssignmentLightWeightDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<AssignmentLightWeightDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<AssignmentLightWeightDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAssignmentsIdGet(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterAssignmentsIdGetDefaultImplementation(IAssignmentsIdGetApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterAssignmentsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterAssignmentsIdGet(ref bool suppressDefaultLog, IAssignmentsIdGetApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorAssignmentsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAssignmentsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorAssignmentsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Get the general information from a given quality assignment (Auth roles: QualityAssignmentGeneral,QualityAssignmentGeneral_Full, QualityAssignmentLight,QualityAssignmentLight_Full) 
        /// </summary>
        /// <param name="id">Identifier of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsIdGetApiResponse"/>&gt;</returns>
        public async Task<IAssignmentsIdGetApiResponse?> AssignmentsIdGetOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AssignmentsIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the general information from a given quality assignment (Auth roles: QualityAssignmentGeneral,QualityAssignmentGeneral_Full, QualityAssignmentLight,QualityAssignmentLight_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the assignment</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAssignmentsIdGetApiResponse"/>&gt;</returns>
        public async Task<IAssignmentsIdGetApiResponse> AssignmentsIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatAssignmentsIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Assignments/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AssignmentsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AssignmentsIdGetApiResponse>();

                        AssignmentsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Assignments/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAssignmentsIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnAssignmentsIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAssignmentsIdGetDefaultImplementation(e, "/Assignments/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorAssignmentsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AssignmentsIdGetApiResponse"/>
        /// </summary>
        public partial class AssignmentsIdGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IAssignmentsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AssignmentsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AssignmentsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AssignmentsIdGetApiResponse(ILogger<AssignmentsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.AssignmentGeneralDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.AssignmentGeneralDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.AssignmentGeneralDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
