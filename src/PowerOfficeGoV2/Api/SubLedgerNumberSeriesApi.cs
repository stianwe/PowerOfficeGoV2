// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISubLedgerNumberSeriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SubLedgerNumberSeriesApiEvents Events { get; }

        /// <summary>
        /// Gets the sub-ledger number series set on the client (Auth roles: CommonServices,CommonServices_Full)
        /// </summary>
        /// <remarks>
        /// Gets the sub-ledger number series set on the client. Sub-ledgers are sub-accounts of a general ledger account, used  for entries related to either customers, suppliers or employees.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generalLedgerAccountNos">Gets the underlying general ledger account code of this subledger series. Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account. More information of accounts can be retrieved using the GeneralLedgerAccount service. (optional)</param>
        /// <param name="isDefault">Filter series based on the isDefault property. Blank means no filter. (optional)</param>
        /// <param name="subLedgerNumberSeriesType">Filter by SubledgerNumberSeriesType                Note: The SubLedgerNumberSeriesType filter is case sensitive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesGetApiResponse"/>&gt;</returns>
        Task<ISubLedgerNumberSeriesGetApiResponse> SubLedgerNumberSeriesGetAsync(Option<string> generalLedgerAccountNos = default, Option<bool> isDefault = default, Option<string> subLedgerNumberSeriesType = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the sub-ledger number series set on the client (Auth roles: CommonServices,CommonServices_Full)
        /// </summary>
        /// <remarks>
        /// Gets the sub-ledger number series set on the client. Sub-ledgers are sub-accounts of a general ledger account, used  for entries related to either customers, suppliers or employees.
        /// </remarks>
        /// <param name="generalLedgerAccountNos">Gets the underlying general ledger account code of this subledger series. Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account. More information of accounts can be retrieved using the GeneralLedgerAccount service. (optional)</param>
        /// <param name="isDefault">Filter series based on the isDefault property. Blank means no filter. (optional)</param>
        /// <param name="subLedgerNumberSeriesType">Filter by SubledgerNumberSeriesType                Note: The SubLedgerNumberSeriesType filter is case sensitive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesGetApiResponse"/>?&gt;</returns>
        Task<ISubLedgerNumberSeriesGetApiResponse?> SubLedgerNumberSeriesGetOrDefaultAsync(Option<string> generalLedgerAccountNos = default, Option<bool> isDefault = default, Option<string> subLedgerNumberSeriesType = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a SubLedgerNumberSeries by ID. (Auth roles: CommonServices,CommonServices_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesIdGetApiResponse"/>&gt;</returns>
        Task<ISubLedgerNumberSeriesIdGetApiResponse> SubLedgerNumberSeriesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a SubLedgerNumberSeries by ID. (Auth roles: CommonServices,CommonServices_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesIdGetApiResponse"/>?&gt;</returns>
        Task<ISubLedgerNumberSeriesIdGetApiResponse?> SubLedgerNumberSeriesIdGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ISubLedgerNumberSeriesGetApiResponse"/>
    /// </summary>
    public interface ISubLedgerNumberSeriesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SubLedgerNumberSeriesDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISubLedgerNumberSeriesIdGetApiResponse"/>
    /// </summary>
    public interface ISubLedgerNumberSeriesIdGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SubLedgerNumberSeriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubLedgerNumberSeriesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubLedgerNumberSeriesGet;

        internal void ExecuteOnSubLedgerNumberSeriesGet(SubLedgerNumberSeriesApi.SubLedgerNumberSeriesGetApiResponse apiResponse)
        {
            OnSubLedgerNumberSeriesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubLedgerNumberSeriesGet(Exception exception)
        {
            OnErrorSubLedgerNumberSeriesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubLedgerNumberSeriesIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubLedgerNumberSeriesIdGet;

        internal void ExecuteOnSubLedgerNumberSeriesIdGet(SubLedgerNumberSeriesApi.SubLedgerNumberSeriesIdGetApiResponse apiResponse)
        {
            OnSubLedgerNumberSeriesIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubLedgerNumberSeriesIdGet(Exception exception)
        {
            OnErrorSubLedgerNumberSeriesIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SubLedgerNumberSeriesApi : ISubLedgerNumberSeriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SubLedgerNumberSeriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SubLedgerNumberSeriesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubLedgerNumberSeriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubLedgerNumberSeriesApi(ILogger<SubLedgerNumberSeriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SubLedgerNumberSeriesApiEvents subLedgerNumberSeriesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SubLedgerNumberSeriesApi>();
            HttpClient = httpClient;
            Events = subLedgerNumberSeriesApiEvents;
        }

        partial void FormatSubLedgerNumberSeriesGet(ref Option<string> generalLedgerAccountNos, ref Option<bool> isDefault, ref Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generalLedgerAccountNos"></param>
        /// <param name="subLedgerNumberSeriesType"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSubLedgerNumberSeriesGet(Option<string> generalLedgerAccountNos, Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter)
        {
            if (generalLedgerAccountNos.IsSet && generalLedgerAccountNos.Value == null)
                throw new ArgumentNullException(nameof(generalLedgerAccountNos));

            if (subLedgerNumberSeriesType.IsSet && subLedgerNumberSeriesType.Value == null)
                throw new ArgumentNullException(nameof(subLedgerNumberSeriesType));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generalLedgerAccountNos"></param>
        /// <param name="isDefault"></param>
        /// <param name="subLedgerNumberSeriesType"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSubLedgerNumberSeriesGetDefaultImplementation(ISubLedgerNumberSeriesGetApiResponse apiResponseLocalVar, Option<string> generalLedgerAccountNos, Option<bool> isDefault, Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSubLedgerNumberSeriesGet(ref suppressDefaultLog, apiResponseLocalVar, generalLedgerAccountNos, isDefault, subLedgerNumberSeriesType, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generalLedgerAccountNos"></param>
        /// <param name="isDefault"></param>
        /// <param name="subLedgerNumberSeriesType"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSubLedgerNumberSeriesGet(ref bool suppressDefaultLog, ISubLedgerNumberSeriesGetApiResponse apiResponseLocalVar, Option<string> generalLedgerAccountNos, Option<bool> isDefault, Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generalLedgerAccountNos"></param>
        /// <param name="isDefault"></param>
        /// <param name="subLedgerNumberSeriesType"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSubLedgerNumberSeriesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> generalLedgerAccountNos, Option<bool> isDefault, Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubLedgerNumberSeriesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generalLedgerAccountNos, isDefault, subLedgerNumberSeriesType, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generalLedgerAccountNos"></param>
        /// <param name="isDefault"></param>
        /// <param name="subLedgerNumberSeriesType"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSubLedgerNumberSeriesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> generalLedgerAccountNos, Option<bool> isDefault, Option<string> subLedgerNumberSeriesType, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the sub-ledger number series set on the client (Auth roles: CommonServices,CommonServices_Full) Gets the sub-ledger number series set on the client. Sub-ledgers are sub-accounts of a general ledger account, used  for entries related to either customers, suppliers or employees.
        /// </summary>
        /// <param name="generalLedgerAccountNos">Gets the underlying general ledger account code of this subledger series. Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account. More information of accounts can be retrieved using the GeneralLedgerAccount service. (optional)</param>
        /// <param name="isDefault">Filter series based on the isDefault property. Blank means no filter. (optional)</param>
        /// <param name="subLedgerNumberSeriesType">Filter by SubledgerNumberSeriesType                Note: The SubLedgerNumberSeriesType filter is case sensitive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesGetApiResponse"/>&gt;</returns>
        public async Task<ISubLedgerNumberSeriesGetApiResponse?> SubLedgerNumberSeriesGetOrDefaultAsync(Option<string> generalLedgerAccountNos = default, Option<bool> isDefault = default, Option<string> subLedgerNumberSeriesType = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubLedgerNumberSeriesGetAsync(generalLedgerAccountNos, isDefault, subLedgerNumberSeriesType, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the sub-ledger number series set on the client (Auth roles: CommonServices,CommonServices_Full) Gets the sub-ledger number series set on the client. Sub-ledgers are sub-accounts of a general ledger account, used  for entries related to either customers, suppliers or employees.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generalLedgerAccountNos">Gets the underlying general ledger account code of this subledger series. Subledger transactions in Go will be posted using the subledger number, but the overall accounting effect will be on this underlying account. More information of accounts can be retrieved using the GeneralLedgerAccount service. (optional)</param>
        /// <param name="isDefault">Filter series based on the isDefault property. Blank means no filter. (optional)</param>
        /// <param name="subLedgerNumberSeriesType">Filter by SubledgerNumberSeriesType                Note: The SubLedgerNumberSeriesType filter is case sensitive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesGetApiResponse"/>&gt;</returns>
        public async Task<ISubLedgerNumberSeriesGetApiResponse> SubLedgerNumberSeriesGetAsync(Option<string> generalLedgerAccountNos = default, Option<bool> isDefault = default, Option<string> subLedgerNumberSeriesType = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubLedgerNumberSeriesGet(generalLedgerAccountNos, subLedgerNumberSeriesType, resourceParameter);

                FormatSubLedgerNumberSeriesGet(ref generalLedgerAccountNos, ref isDefault, ref subLedgerNumberSeriesType, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SubLedgerNumberSeries";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (generalLedgerAccountNos.IsSet)
                        parseQueryStringLocalVar["generalLedgerAccountNos"] = ClientUtils.ParameterToString(generalLedgerAccountNos.Value);

                    if (isDefault.IsSet)
                        parseQueryStringLocalVar["isDefault"] = ClientUtils.ParameterToString(isDefault.Value);

                    if (subLedgerNumberSeriesType.IsSet)
                        parseQueryStringLocalVar["subLedgerNumberSeriesType"] = ClientUtils.ParameterToString(subLedgerNumberSeriesType.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SubLedgerNumberSeriesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubLedgerNumberSeriesGetApiResponse>();

                        SubLedgerNumberSeriesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SubLedgerNumberSeries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSubLedgerNumberSeriesGetDefaultImplementation(apiResponseLocalVar, generalLedgerAccountNos, isDefault, subLedgerNumberSeriesType, resourceParameter);

                        Events.ExecuteOnSubLedgerNumberSeriesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubLedgerNumberSeriesGetDefaultImplementation(e, "/SubLedgerNumberSeries", uriBuilderLocalVar.Path, generalLedgerAccountNos, isDefault, subLedgerNumberSeriesType, resourceParameter);
                Events.ExecuteOnErrorSubLedgerNumberSeriesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubLedgerNumberSeriesGetApiResponse"/>
        /// </summary>
        public partial class SubLedgerNumberSeriesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISubLedgerNumberSeriesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubLedgerNumberSeriesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubLedgerNumberSeriesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubLedgerNumberSeriesGetApiResponse(ILogger<SubLedgerNumberSeriesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SubLedgerNumberSeriesDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SubLedgerNumberSeriesDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SubLedgerNumberSeriesDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubLedgerNumberSeriesIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterSubLedgerNumberSeriesIdGetDefaultImplementation(ISubLedgerNumberSeriesIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterSubLedgerNumberSeriesIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterSubLedgerNumberSeriesIdGet(ref bool suppressDefaultLog, ISubLedgerNumberSeriesIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorSubLedgerNumberSeriesIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubLedgerNumberSeriesIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorSubLedgerNumberSeriesIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get a SubLedgerNumberSeries by ID. (Auth roles: CommonServices,CommonServices_Full) 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesIdGetApiResponse"/>&gt;</returns>
        public async Task<ISubLedgerNumberSeriesIdGetApiResponse?> SubLedgerNumberSeriesIdGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubLedgerNumberSeriesIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a SubLedgerNumberSeries by ID. (Auth roles: CommonServices,CommonServices_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubLedgerNumberSeriesIdGetApiResponse"/>&gt;</returns>
        public async Task<ISubLedgerNumberSeriesIdGetApiResponse> SubLedgerNumberSeriesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatSubLedgerNumberSeriesIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/SubLedgerNumberSeries/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SubLedgerNumberSeriesIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubLedgerNumberSeriesIdGetApiResponse>();

                        SubLedgerNumberSeriesIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/SubLedgerNumberSeries/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSubLedgerNumberSeriesIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnSubLedgerNumberSeriesIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubLedgerNumberSeriesIdGetDefaultImplementation(e, "/SubLedgerNumberSeries/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorSubLedgerNumberSeriesIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubLedgerNumberSeriesIdGetApiResponse"/>
        /// </summary>
        public partial class SubLedgerNumberSeriesIdGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISubLedgerNumberSeriesIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubLedgerNumberSeriesIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubLedgerNumberSeriesIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubLedgerNumberSeriesIdGetApiResponse(ILogger<SubLedgerNumberSeriesIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
