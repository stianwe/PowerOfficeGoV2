// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentFtePercentagesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentFtePercentagesApiEvents Events { get; }

        /// <summary>
        /// Delete a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// Note that there must be at least one full-time equivalent (FTE) percentage line on an employment, so if the last FTE percentage line is attempted to be deleted you will get a 409 Conflict response.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// Note that there must be at least one full-time equivalent (FTE) percentage line on an employment, so if the last FTE percentage line is attempted to be deleted you will get a 409 Conflict response.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteOrDefaultAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="operation">JSON Patch structure for updating a full-time equivalent (FTE) percentage (line). See EmploymentFtePercentagePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchAsync(long employmentId, long ftePercentageId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="operation">JSON Patch structure for updating a full-time equivalent (FTE) percentage (line). See EmploymentFtePercentagePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchOrDefaultAsync(long employmentId, long ftePercentageId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get full-time equivalent (FTE) percentage lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get full-time equivalent (FTE) percentage lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFtePercentagePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesPostAsync(long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFtePercentagePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesPostOrDefaultAsync(long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFtePercentageByIdApiResponse"/>&gt;</returns>
        Task<IGetFtePercentageByIdApiResponse> GetFtePercentageByIdAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFtePercentageByIdApiResponse"/>?&gt;</returns>
        Task<IGetFtePercentageByIdApiResponse?> GetFtePercentageByIdOrDefaultAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentFtePercentageDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentFtePercentageDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentFtePercentageDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFtePercentageByIdApiResponse"/>
    /// </summary>
    public interface IGetFtePercentageByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentFtePercentageDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentFtePercentagesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(EmploymentFtePercentagesApi.EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(EmploymentFtePercentagesApi.EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFtePercentagesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesGet(EmploymentFtePercentagesApi.EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFtePercentagesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFtePercentagesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesPost(EmploymentFtePercentagesApi.EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFtePercentagesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFtePercentageById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFtePercentageById;

        internal void ExecuteOnGetFtePercentageById(EmploymentFtePercentagesApi.GetFtePercentageByIdApiResponse apiResponse)
        {
            OnGetFtePercentageById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFtePercentageById(Exception exception)
        {
            OnErrorGetFtePercentageById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentFtePercentagesApi : IEmploymentFtePercentagesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentFtePercentagesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentFtePercentagesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentFtePercentagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentFtePercentagesApi(ILogger<EmploymentFtePercentagesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentFtePercentagesApiEvents employmentFtePercentagesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentFtePercentagesApi>();
            HttpClient = httpClient;
            Events = employmentFtePercentagesApiEvents;
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref long employmentId, ref long ftePercentageId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteDefaultImplementation(IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employmentId, ftePercentageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, ftePercentageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId);

        /// <summary>
        /// Delete a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) Note that there must be at least one full-time equivalent (FTE) percentage line on an employment, so if the last FTE percentage line is attempted to be deleted you will get a 409 Conflict response.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteOrDefaultAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteAsync(employmentId, ftePercentageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) Note that there must be at least one full-time equivalent (FTE) percentage line on an employment, so if the last FTE percentage line is attempted to be deleted you will get a 409 Conflict response.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(ref employmentId, ref ftePercentageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BftePercentageId%7D", Uri.EscapeDataString(ftePercentageId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse>();

                        EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteDefaultImplementation(apiResponseLocalVar, employmentId, ftePercentageId);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteDefaultImplementation(e, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", uriBuilderLocalVar.Path, employmentId, ftePercentageId);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref long employmentId, ref long ftePercentageId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchDefaultImplementation(IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employmentId, ftePercentageId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, ftePercentageId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="operation">JSON Patch structure for updating a full-time equivalent (FTE) percentage (line). See EmploymentFtePercentagePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchOrDefaultAsync(long employmentId, long ftePercentageId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchAsync(employmentId, ftePercentageId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="operation">JSON Patch structure for updating a full-time equivalent (FTE) percentage (line). See EmploymentFtePercentagePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchAsync(long employmentId, long ftePercentageId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(operation);

                FormatEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(ref employmentId, ref ftePercentageId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BftePercentageId%7D", Uri.EscapeDataString(ftePercentageId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse>();

                        EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchDefaultImplementation(apiResponseLocalVar, employmentId, ftePercentageId, operation);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchDefaultImplementation(e, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", uriBuilderLocalVar.Path, employmentId, ftePercentageId, operation);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesFtePercentageIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFtePercentageDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFtePercentageDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFtePercentageDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFtePercentagesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFtePercentagesGetDefaultImplementation(IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref suppressDefaultLog, apiResponseLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get full-time equivalent (FTE) percentage lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFtePercentagesGetAsync(employmentId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get full-time equivalent (FTE) percentage lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFtePercentagesGet(resourceParameter);

                FormatEmployeesEmploymentsEmploymentIdFtePercentagesGet(ref employmentId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FtePercentages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse>();

                        EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FtePercentages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFtePercentagesGetDefaultImplementation(apiResponseLocalVar, employmentId, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGetDefaultImplementation(e, "/Employees/Employments/{employmentId}/FtePercentages", uriBuilderLocalVar.Path, employmentId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentFtePercentageDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentFtePercentageDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentFtePercentageDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentFtePercentagePostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFtePercentagesPost(Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto)
        {
            if (employmentFtePercentagePostDto.IsSet && employmentFtePercentagePostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentFtePercentagePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFtePercentagesPostDefaultImplementation(IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref suppressDefaultLog, apiResponseLocalVar, employmentId, employmentFtePercentagePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, employmentFtePercentagePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFtePercentagePostDto"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto);

        /// <summary>
        /// Create a new full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFtePercentagePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse?> EmployeesEmploymentsEmploymentIdFtePercentagesPostOrDefaultAsync(long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFtePercentagesPostAsync(employmentId, employmentFtePercentagePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFtePercentagePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse> EmployeesEmploymentsEmploymentIdFtePercentagesPostAsync(long employmentId, Option<EmploymentFtePercentagePostDto> employmentFtePercentagePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFtePercentagesPost(employmentFtePercentagePostDto);

                FormatEmployeesEmploymentsEmploymentIdFtePercentagesPost(ref employmentId, employmentFtePercentagePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FtePercentages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (employmentFtePercentagePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentFtePercentagePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentFtePercentagePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse>();

                        EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FtePercentages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFtePercentagesPostDefaultImplementation(apiResponseLocalVar, employmentId, employmentFtePercentagePostDto);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFtePercentagesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPostDefaultImplementation(e, "/Employees/Employments/{employmentId}/FtePercentages", uriBuilderLocalVar.Path, employmentId, employmentFtePercentagePostDto);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFtePercentagesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFtePercentagesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFtePercentageDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFtePercentageDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFtePercentageDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFtePercentageById(ref long employmentId, ref long ftePercentageId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        private void AfterGetFtePercentageByIdDefaultImplementation(IGetFtePercentageByIdApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId)
        {
            bool suppressDefaultLog = false;
            AfterGetFtePercentageById(ref suppressDefaultLog, apiResponseLocalVar, employmentId, ftePercentageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        partial void AfterGetFtePercentageById(ref bool suppressDefaultLog, IGetFtePercentageByIdApiResponse apiResponseLocalVar, long employmentId, long ftePercentageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        private void OnErrorGetFtePercentageByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFtePercentageById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, ftePercentageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="ftePercentageId"></param>
        partial void OnErrorGetFtePercentageById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, long ftePercentageId);

        /// <summary>
        /// Gets a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFtePercentageByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFtePercentageByIdApiResponse?> GetFtePercentageByIdOrDefaultAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFtePercentageByIdAsync(employmentId, ftePercentageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific full-time equivalent (FTE) percentage (line) on a given employment. (Auth roles: EmploymentFtePercentage,EmploymentFtePercentage_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="ftePercentageId">The id of the full-time equivalent (FTE) percentage (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFtePercentageByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFtePercentageByIdApiResponse> GetFtePercentageByIdAsync(long employmentId, long ftePercentageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFtePercentageById(ref employmentId, ref ftePercentageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BftePercentageId%7D", Uri.EscapeDataString(ftePercentageId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFtePercentageByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFtePercentageByIdApiResponse>();

                        GetFtePercentageByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFtePercentageByIdDefaultImplementation(apiResponseLocalVar, employmentId, ftePercentageId);

                        Events.ExecuteOnGetFtePercentageById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFtePercentageByIdDefaultImplementation(e, "/Employees/Employments/{employmentId}/FtePercentages/{ftePercentageId}", uriBuilderLocalVar.Path, employmentId, ftePercentageId);
                Events.ExecuteOnErrorGetFtePercentageById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFtePercentageByIdApiResponse"/>
        /// </summary>
        public partial class GetFtePercentageByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetFtePercentageByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFtePercentageByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFtePercentageByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFtePercentageByIdApiResponse(ILogger<GetFtePercentageByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFtePercentageDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFtePercentageDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFtePercentageDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
