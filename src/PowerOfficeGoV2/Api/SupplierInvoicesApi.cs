// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISupplierInvoicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SupplierInvoicesApiEvents Events { get; }

        /// <summary>
        /// Returns a supplier invoice by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierInvoiceByIdApiResponse"/>&gt;</returns>
        Task<IGetSupplierInvoiceByIdApiResponse> GetSupplierInvoiceByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns a supplier invoice by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierInvoiceByIdApiResponse"/>?&gt;</returns>
        Task<IGetSupplierInvoiceByIdApiResponse?> GetSupplierInvoiceByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update supplier invoice header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Supplier invoice lines must be updated using a separate endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="operation">JSON Patch structure for updating an Supplier Invoice. See SupplierInvoiceJournalEntryVoucherPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse> JournalEntryVouchersSupplierInvoicesIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update supplier invoice header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Supplier invoice lines must be updated using a separate endpoint.
        /// </remarks>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="operation">JSON Patch structure for updating an Supplier Invoice. See SupplierInvoiceJournalEntryVoucherPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse?> JournalEntryVouchersSupplierInvoicesIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a supplier voucher line from a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier invoice line.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a supplier voucher line from a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier invoice line.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a supplier voucher line. See SupplierVoucherLinePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a supplier voucher line. See SupplierVoucherLinePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a new supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="supplierVoucherLinePostDto">A supplier voucher line post dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostAsync(Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a new supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="supplierVoucherLinePostDto">A supplier voucher line post dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostOrDefaultAsync(Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the supplier invoice.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesPostApiResponse> JournalEntryVouchersSupplierInvoicesPostAsync(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a supplier invoice. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the supplier invoice.
        /// </remarks>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersSupplierInvoicesPostApiResponse?> JournalEntryVouchersSupplierInvoicesPostOrDefaultAsync(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetSupplierInvoiceByIdApiResponse"/>
    /// </summary>
    public interface IGetSupplierInvoiceByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.SupplierVoucherLineDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersSupplierInvoicesPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersSupplierInvoicesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SupplierInvoicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSupplierInvoiceById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSupplierInvoiceById;

        internal void ExecuteOnGetSupplierInvoiceById(SupplierInvoicesApi.GetSupplierInvoiceByIdApiResponse apiResponse)
        {
            OnGetSupplierInvoiceById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSupplierInvoiceById(Exception exception)
        {
            OnErrorGetSupplierInvoiceById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersSupplierInvoicesIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersSupplierInvoicesIdPatch;

        internal void ExecuteOnJournalEntryVouchersSupplierInvoicesIdPatch(SupplierInvoicesApi.JournalEntryVouchersSupplierInvoicesIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersSupplierInvoicesIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersSupplierInvoicesIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete;

        internal void ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(SupplierInvoicesApi.JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse apiResponse)
        {
            OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(Exception exception)
        {
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch;

        internal void ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(SupplierInvoicesApi.JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost;

        internal void ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(SupplierInvoicesApi.JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(Exception exception)
        {
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersSupplierInvoicesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersSupplierInvoicesPost;

        internal void ExecuteOnJournalEntryVouchersSupplierInvoicesPost(SupplierInvoicesApi.JournalEntryVouchersSupplierInvoicesPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersSupplierInvoicesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersSupplierInvoicesPost(Exception exception)
        {
            OnErrorJournalEntryVouchersSupplierInvoicesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SupplierInvoicesApi : ISupplierInvoicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SupplierInvoicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SupplierInvoicesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierInvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SupplierInvoicesApi(ILogger<SupplierInvoicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SupplierInvoicesApiEvents supplierInvoicesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SupplierInvoicesApi>();
            HttpClient = httpClient;
            Events = supplierInvoicesApiEvents;
        }

        partial void FormatGetSupplierInvoiceById(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetSupplierInvoiceByIdDefaultImplementation(IGetSupplierInvoiceByIdApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetSupplierInvoiceById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetSupplierInvoiceById(ref bool suppressDefaultLog, IGetSupplierInvoiceByIdApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetSupplierInvoiceByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSupplierInvoiceById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetSupplierInvoiceById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Returns a supplier invoice by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.
        /// </summary>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierInvoiceByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSupplierInvoiceByIdApiResponse?> GetSupplierInvoiceByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSupplierInvoiceByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns a supplier invoice by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSupplierInvoiceByIdApiResponse"/>&gt;</returns>
        public async Task<IGetSupplierInvoiceByIdApiResponse> GetSupplierInvoiceByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSupplierInvoiceById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSupplierInvoiceByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSupplierInvoiceByIdApiResponse>();

                        GetSupplierInvoiceByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSupplierInvoiceByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetSupplierInvoiceById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSupplierInvoiceByIdDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetSupplierInvoiceById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSupplierInvoiceByIdApiResponse"/>
        /// </summary>
        public partial class GetSupplierInvoiceByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetSupplierInvoiceByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSupplierInvoiceByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSupplierInvoiceByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSupplierInvoiceByIdApiResponse(ILogger<GetSupplierInvoiceByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersSupplierInvoicesIdPatch(ref Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersSupplierInvoicesIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersSupplierInvoicesIdPatchDefaultImplementation(IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersSupplierInvoicesIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersSupplierInvoicesIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersSupplierInvoicesIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersSupplierInvoicesIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersSupplierInvoicesIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Update supplier invoice header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Supplier invoice lines must be updated using a separate endpoint.
        /// </summary>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="operation">JSON Patch structure for updating an Supplier Invoice. See SupplierInvoiceJournalEntryVoucherPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse?> JournalEntryVouchersSupplierInvoicesIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersSupplierInvoicesIdPatchAsync(id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update supplier invoice header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              Supplier invoice lines must be updated using a separate endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="operation">JSON Patch structure for updating an Supplier Invoice. See SupplierInvoiceJournalEntryVoucherPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse> JournalEntryVouchersSupplierInvoicesIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersSupplierInvoicesIdPatch(operation);

                FormatJournalEntryVouchersSupplierInvoicesIdPatch(ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersSupplierInvoicesIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersSupplierInvoicesIdPatchApiResponse>();

                        JournalEntryVouchersSupplierInvoicesIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersSupplierInvoicesIdPatchDefaultImplementation(apiResponseLocalVar, id, operation);

                        Events.ExecuteOnJournalEntryVouchersSupplierInvoicesIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersSupplierInvoicesIdPatchDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices/{id}", uriBuilderLocalVar.Path, id, operation);
                Events.ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersSupplierInvoicesIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersSupplierInvoicesIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersSupplierInvoicesIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersSupplierInvoicesIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersSupplierInvoicesIdPatchApiResponse(ILogger<JournalEntryVouchersSupplierInvoicesIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref Guid id, ref long lineId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteDefaultImplementation(IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id, lineId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref bool suppressDefaultLog, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId);

        /// <summary>
        /// Delete a supplier voucher line from a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier invoice line.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteAsync(id, lineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a supplier voucher line from a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier invoice line.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(ref id, ref lineId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse>();

                        JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteDefaultImplementation(apiResponseLocalVar, id, lineId);

                        Events.ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId);
                Events.ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse(ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref Guid id, ref long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchDefaultImplementation(IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, lineId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Update a supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a supplier voucher line. See SupplierVoucherLinePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchAsync(id, lineId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the supplier invoice.</param>
        /// <param name="lineId">The identifier of the supplier voucher line.</param>
        /// <param name="operation">JSON Patch structure for updating a supplier voucher line. See SupplierVoucherLinePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(operation);

                FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(ref id, ref lineId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse>();

                        JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchDefaultImplementation(apiResponseLocalVar, id, lineId, operation);

                        Events.ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId, operation);
                Events.ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse(ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesLineIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SupplierVoucherLineDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SupplierVoucherLineDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.SupplierVoucherLineDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="supplierVoucherLinePostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto)
        {
            if (supplierVoucherLinePostDto.IsSet && supplierVoucherLinePostDto.Value == null)
                throw new ArgumentNullException(nameof(supplierVoucherLinePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="supplierVoucherLinePostDto"></param>
        private void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostDefaultImplementation(IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref suppressDefaultLog, apiResponseLocalVar, id, supplierVoucherLinePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="supplierVoucherLinePostDto"></param>
        partial void AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref bool suppressDefaultLog, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="supplierVoucherLinePostDto"></param>
        private void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, supplierVoucherLinePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="supplierVoucherLinePostDto"></param>
        partial void OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto);

        /// <summary>
        /// Add a new supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="supplierVoucherLinePostDto">A supplier voucher line post dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse?> JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostOrDefaultAsync(Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostAsync(id, supplierVoucherLinePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a new supplier voucher line on a supplier invoice. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a supplier invoice.</param>
        /// <param name="supplierVoucherLinePostDto">A supplier voucher line post dto. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse> JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostAsync(Guid id, Option<SupplierVoucherLinePostDto> supplierVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(supplierVoucherLinePostDto);

                FormatJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(ref id, supplierVoucherLinePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (supplierVoucherLinePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (supplierVoucherLinePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(supplierVoucherLinePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse>();

                        JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostDefaultImplementation(apiResponseLocalVar, id, supplierVoucherLinePostDto);

                        Events.ExecuteOnJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices/{id}/VoucherLines", uriBuilderLocalVar.Path, id, supplierVoucherLinePostDto);
                Events.ExecuteOnErrorJournalEntryVouchersSupplierInvoicesIdVoucherLinesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse(ILogger<JournalEntryVouchersSupplierInvoicesIdVoucherLinesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersSupplierInvoicesPost(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersSupplierInvoicesPost(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto)
        {
            if (supplierInvoiceJournalEntryVoucherPostDto.IsSet && supplierInvoiceJournalEntryVoucherPostDto.Value == null)
                throw new ArgumentNullException(nameof(supplierInvoiceJournalEntryVoucherPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"></param>
        private void AfterJournalEntryVouchersSupplierInvoicesPostDefaultImplementation(IJournalEntryVouchersSupplierInvoicesPostApiResponse apiResponseLocalVar, Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersSupplierInvoicesPost(ref suppressDefaultLog, apiResponseLocalVar, supplierInvoiceJournalEntryVoucherPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"></param>
        partial void AfterJournalEntryVouchersSupplierInvoicesPost(ref bool suppressDefaultLog, IJournalEntryVouchersSupplierInvoicesPostApiResponse apiResponseLocalVar, Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"></param>
        private void OnErrorJournalEntryVouchersSupplierInvoicesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersSupplierInvoicesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, supplierInvoiceJournalEntryVoucherPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"></param>
        partial void OnErrorJournalEntryVouchersSupplierInvoicesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto);

        /// <summary>
        /// Create a supplier invoice. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the supplier invoice.
        /// </summary>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesPostApiResponse?> JournalEntryVouchersSupplierInvoicesPostOrDefaultAsync(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersSupplierInvoicesPostAsync(supplierInvoiceJournalEntryVoucherPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a supplier invoice. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the supplier invoice.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierInvoiceJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersSupplierInvoicesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersSupplierInvoicesPostApiResponse> JournalEntryVouchersSupplierInvoicesPostAsync(Option<SupplierInvoiceJournalEntryVoucherPostDto> supplierInvoiceJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersSupplierInvoicesPost(supplierInvoiceJournalEntryVoucherPostDto);

                FormatJournalEntryVouchersSupplierInvoicesPost(supplierInvoiceJournalEntryVoucherPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/SupplierInvoices";

                    if (supplierInvoiceJournalEntryVoucherPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (supplierInvoiceJournalEntryVoucherPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(supplierInvoiceJournalEntryVoucherPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersSupplierInvoicesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersSupplierInvoicesPostApiResponse>();

                        JournalEntryVouchersSupplierInvoicesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/SupplierInvoices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersSupplierInvoicesPostDefaultImplementation(apiResponseLocalVar, supplierInvoiceJournalEntryVoucherPostDto);

                        Events.ExecuteOnJournalEntryVouchersSupplierInvoicesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersSupplierInvoicesPostDefaultImplementation(e, "/JournalEntryVouchers/SupplierInvoices", uriBuilderLocalVar.Path, supplierInvoiceJournalEntryVoucherPostDto);
                Events.ExecuteOnErrorJournalEntryVouchersSupplierInvoicesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersSupplierInvoicesPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersSupplierInvoicesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersSupplierInvoicesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersSupplierInvoicesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersSupplierInvoicesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersSupplierInvoicesPostApiResponse(ILogger<JournalEntryVouchersSupplierInvoicesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.SupplierInvoiceJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
