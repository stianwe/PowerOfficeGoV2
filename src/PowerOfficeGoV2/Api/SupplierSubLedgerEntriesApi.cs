// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISupplierSubLedgerEntriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SupplierSubLedgerEntriesApiEvents Events { get; }

        /// <summary>
        /// Gets all supplier sub-ledger transactions that share a given match ID. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId">The match ID to filter for.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerEntriesByMatchIdGetApiResponse"/>&gt;</returns>
        Task<ISupplierledgerEntriesByMatchIdGetApiResponse> SupplierledgerEntriesByMatchIdGetAsync(long matchId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all supplier sub-ledger transactions that share a given match ID. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="matchId">The match ID to filter for.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerEntriesByMatchIdGetApiResponse"/>?&gt;</returns>
        Task<ISupplierledgerEntriesByMatchIdGetApiResponse?> SupplierledgerEntriesByMatchIdGetOrDefaultAsync(long matchId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all supplier sub-ledger transactions that are open items at a given date (inclusive). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date, inclusive. Get all open entries as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Blank means no filter. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches that are still open. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter items by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerOpenItemsGetApiResponse"/>&gt;</returns>
        Task<ISupplierledgerOpenItemsGetApiResponse> SupplierledgerOpenItemsGetAsync(DateOnly date, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all supplier sub-ledger transactions that are open items at a given date (inclusive). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="date">Date, inclusive. Get all open entries as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Blank means no filter. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches that are still open. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter items by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerOpenItemsGetApiResponse"/>?&gt;</returns>
        Task<ISupplierledgerOpenItemsGetApiResponse?> SupplierledgerOpenItemsGetOrDefaultAsync(DateOnly date, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all supplier sub-ledger transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). If date is less then the current date (today); the balance displayed on all entries will be the balance the entry was on that date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches. If, for instance, this filter is set true and combined with voucherType filter on incoming invoices, this can be one way of retrieving payments on invoices. NOTE: We use absolute values, so for manual journal entries where balance and amount is positive, we get transactions with amount less than balance. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter entries by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerStatementGetApiResponse"/>&gt;</returns>
        Task<ISupplierledgerStatementGetApiResponse> SupplierledgerStatementGetAsync(DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all supplier sub-ledger transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). If date is less then the current date (today); the balance displayed on all entries will be the balance the entry was on that date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches. If, for instance, this filter is set true and combined with voucherType filter on incoming invoices, this can be one way of retrieving payments on invoices. NOTE: We use absolute values, so for manual journal entries where balance and amount is positive, we get transactions with amount less than balance. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter entries by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerStatementGetApiResponse"/>?&gt;</returns>
        Task<ISupplierledgerStatementGetApiResponse?> SupplierledgerStatementGetOrDefaultAsync(DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the supplier balances at a given date (inclusive).  The balances represent the sum of accounts payable for the suppliers at the given date.  NOTE: Suppliers without any ledger entries are not shown.  Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date, inclusive. Get all balances as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter balances by contact group IDs. This will return the balances for the supplier belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeOnlyOpenItems">Sets whether or not to return balances for suppliers with only open items. If false, all active suppliers and their balances will be returned, including zero balances for suppliers with no open items. NOTE: Suppliers without any ledger entries are not shown. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter balances by sub-ledger number series IDs. This will return balances for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerSupplierBalancesGetApiResponse"/>&gt;</returns>
        Task<ISupplierledgerSupplierBalancesGetApiResponse> SupplierledgerSupplierBalancesGetAsync(DateOnly date, Option<string> contactGroupIds = default, Option<bool> includeOnlyOpenItems = default, Option<string> subLedgerNumberSeriesIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the supplier balances at a given date (inclusive).  The balances represent the sum of accounts payable for the suppliers at the given date.  NOTE: Suppliers without any ledger entries are not shown.  Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="date">Date, inclusive. Get all balances as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter balances by contact group IDs. This will return the balances for the supplier belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeOnlyOpenItems">Sets whether or not to return balances for suppliers with only open items. If false, all active suppliers and their balances will be returned, including zero balances for suppliers with no open items. NOTE: Suppliers without any ledger entries are not shown. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter balances by sub-ledger number series IDs. This will return balances for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerSupplierBalancesGetApiResponse"/>?&gt;</returns>
        Task<ISupplierledgerSupplierBalancesGetApiResponse?> SupplierledgerSupplierBalancesGetOrDefaultAsync(DateOnly date, Option<string> contactGroupIds = default, Option<bool> includeOnlyOpenItems = default, Option<string> subLedgerNumberSeriesIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ISupplierledgerEntriesByMatchIdGetApiResponse"/>
    /// </summary>
    public interface ISupplierledgerEntriesByMatchIdGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SupplierLedgerEntryDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISupplierledgerOpenItemsGetApiResponse"/>
    /// </summary>
    public interface ISupplierledgerOpenItemsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SupplierLedgerEntryDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISupplierledgerStatementGetApiResponse"/>
    /// </summary>
    public interface ISupplierledgerStatementGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SupplierLedgerEntryDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISupplierledgerSupplierBalancesGetApiResponse"/>
    /// </summary>
    public interface ISupplierledgerSupplierBalancesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<SupplierBalanceDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SupplierSubLedgerEntriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSupplierledgerEntriesByMatchIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSupplierledgerEntriesByMatchIdGet;

        internal void ExecuteOnSupplierledgerEntriesByMatchIdGet(SupplierSubLedgerEntriesApi.SupplierledgerEntriesByMatchIdGetApiResponse apiResponse)
        {
            OnSupplierledgerEntriesByMatchIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSupplierledgerEntriesByMatchIdGet(Exception exception)
        {
            OnErrorSupplierledgerEntriesByMatchIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSupplierledgerOpenItemsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSupplierledgerOpenItemsGet;

        internal void ExecuteOnSupplierledgerOpenItemsGet(SupplierSubLedgerEntriesApi.SupplierledgerOpenItemsGetApiResponse apiResponse)
        {
            OnSupplierledgerOpenItemsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSupplierledgerOpenItemsGet(Exception exception)
        {
            OnErrorSupplierledgerOpenItemsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSupplierledgerStatementGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSupplierledgerStatementGet;

        internal void ExecuteOnSupplierledgerStatementGet(SupplierSubLedgerEntriesApi.SupplierledgerStatementGetApiResponse apiResponse)
        {
            OnSupplierledgerStatementGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSupplierledgerStatementGet(Exception exception)
        {
            OnErrorSupplierledgerStatementGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSupplierledgerSupplierBalancesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSupplierledgerSupplierBalancesGet;

        internal void ExecuteOnSupplierledgerSupplierBalancesGet(SupplierSubLedgerEntriesApi.SupplierledgerSupplierBalancesGetApiResponse apiResponse)
        {
            OnSupplierledgerSupplierBalancesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSupplierledgerSupplierBalancesGet(Exception exception)
        {
            OnErrorSupplierledgerSupplierBalancesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SupplierSubLedgerEntriesApi : ISupplierSubLedgerEntriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SupplierSubLedgerEntriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SupplierSubLedgerEntriesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupplierSubLedgerEntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SupplierSubLedgerEntriesApi(ILogger<SupplierSubLedgerEntriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SupplierSubLedgerEntriesApiEvents supplierSubLedgerEntriesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SupplierSubLedgerEntriesApi>();
            HttpClient = httpClient;
            Events = supplierSubLedgerEntriesApiEvents;
        }

        partial void FormatSupplierledgerEntriesByMatchIdGet(ref long matchId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSupplierledgerEntriesByMatchIdGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="matchId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSupplierledgerEntriesByMatchIdGetDefaultImplementation(ISupplierledgerEntriesByMatchIdGetApiResponse apiResponseLocalVar, long matchId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSupplierledgerEntriesByMatchIdGet(ref suppressDefaultLog, apiResponseLocalVar, matchId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="matchId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSupplierledgerEntriesByMatchIdGet(ref bool suppressDefaultLog, ISupplierledgerEntriesByMatchIdGetApiResponse apiResponseLocalVar, long matchId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="matchId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSupplierledgerEntriesByMatchIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long matchId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSupplierledgerEntriesByMatchIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, matchId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="matchId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSupplierledgerEntriesByMatchIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long matchId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets all supplier sub-ledger transactions that share a given match ID. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <param name="matchId">The match ID to filter for.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerEntriesByMatchIdGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerEntriesByMatchIdGetApiResponse?> SupplierledgerEntriesByMatchIdGetOrDefaultAsync(long matchId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SupplierledgerEntriesByMatchIdGetAsync(matchId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all supplier sub-ledger transactions that share a given match ID. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId">The match ID to filter for.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerEntriesByMatchIdGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerEntriesByMatchIdGetApiResponse> SupplierledgerEntriesByMatchIdGetAsync(long matchId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSupplierledgerEntriesByMatchIdGet(resourceParameter);

                FormatSupplierledgerEntriesByMatchIdGet(ref matchId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Supplierledger/EntriesByMatchId";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["matchId"] = ClientUtils.ParameterToString(matchId);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SupplierledgerEntriesByMatchIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SupplierledgerEntriesByMatchIdGetApiResponse>();

                        SupplierledgerEntriesByMatchIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Supplierledger/EntriesByMatchId", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSupplierledgerEntriesByMatchIdGetDefaultImplementation(apiResponseLocalVar, matchId, resourceParameter);

                        Events.ExecuteOnSupplierledgerEntriesByMatchIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSupplierledgerEntriesByMatchIdGetDefaultImplementation(e, "/Supplierledger/EntriesByMatchId", uriBuilderLocalVar.Path, matchId, resourceParameter);
                Events.ExecuteOnErrorSupplierledgerEntriesByMatchIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SupplierledgerEntriesByMatchIdGetApiResponse"/>
        /// </summary>
        public partial class SupplierledgerEntriesByMatchIdGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISupplierledgerEntriesByMatchIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SupplierledgerEntriesByMatchIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SupplierledgerEntriesByMatchIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SupplierledgerEntriesByMatchIdGetApiResponse(ILogger<SupplierledgerEntriesByMatchIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SupplierLedgerEntryDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SupplierLedgerEntryDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SupplierLedgerEntryDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSupplierledgerOpenItemsGet(ref DateOnly date, ref Option<string> contactGroupIds, ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<string> customMatchingReferences, ref Option<string> departmentCodes, ref Option<string> externalNos, ref Option<bool> includeSubProject, ref Option<string> invoiceNos, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, ref Option<bool> onlyBalancesGreaterThanAmount, ref Option<bool> onlyCreatedByCurrentIntegration, ref Option<string> projectCodes, ref Option<string> subLedgerNumberSeriesIds, ref Option<string> supplierNos, ref Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactGroupIds"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSupplierledgerOpenItemsGet(Option<string> contactGroupIds, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<string> invoiceNos, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            if (contactGroupIds.IsSet && contactGroupIds.Value == null)
                throw new ArgumentNullException(nameof(contactGroupIds));

            if (customMatchingReferences.IsSet && customMatchingReferences.Value == null)
                throw new ArgumentNullException(nameof(customMatchingReferences));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (externalNos.IsSet && externalNos.Value == null)
                throw new ArgumentNullException(nameof(externalNos));

            if (invoiceNos.IsSet && invoiceNos.Value == null)
                throw new ArgumentNullException(nameof(invoiceNos));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (subLedgerNumberSeriesIds.IsSet && subLedgerNumberSeriesIds.Value == null)
                throw new ArgumentNullException(nameof(subLedgerNumberSeriesIds));

            if (supplierNos.IsSet && supplierNos.Value == null)
                throw new ArgumentNullException(nameof(supplierNos));

            if (voucherTypes.IsSet && voucherTypes.Value == null)
                throw new ArgumentNullException(nameof(voucherTypes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSupplierledgerOpenItemsGetDefaultImplementation(ISupplierledgerOpenItemsGetApiResponse apiResponseLocalVar, DateOnly date, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSupplierledgerOpenItemsGet(ref suppressDefaultLog, apiResponseLocalVar, date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSupplierledgerOpenItemsGet(ref bool suppressDefaultLog, ISupplierledgerOpenItemsGetApiResponse apiResponseLocalVar, DateOnly date, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSupplierledgerOpenItemsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly date, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSupplierledgerOpenItemsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSupplierledgerOpenItemsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly date, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets all supplier sub-ledger transactions that are open items at a given date (inclusive). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <param name="date">Date, inclusive. Get all open entries as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Blank means no filter. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches that are still open. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter items by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerOpenItemsGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerOpenItemsGetApiResponse?> SupplierledgerOpenItemsGetOrDefaultAsync(DateOnly date, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SupplierledgerOpenItemsGetAsync(date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all supplier sub-ledger transactions that are open items at a given date (inclusive). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date, inclusive. Get all open entries as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Blank means no filter. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches that are still open. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter items by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerOpenItemsGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerOpenItemsGetApiResponse> SupplierledgerOpenItemsGetAsync(DateOnly date, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSupplierledgerOpenItemsGet(contactGroupIds, customMatchingReferences, departmentCodes, externalNos, invoiceNos, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);

                FormatSupplierledgerOpenItemsGet(ref date, ref contactGroupIds, ref createdDateTimeOffsetGreaterThan, ref customMatchingReferences, ref departmentCodes, ref externalNos, ref includeSubProject, ref invoiceNos, ref lastChangedDateTimeOffsetGreaterThan, ref onlyBalancesGreaterThanAmount, ref onlyCreatedByCurrentIntegration, ref projectCodes, ref subLedgerNumberSeriesIds, ref supplierNos, ref voucherTypes, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Supplierledger/OpenItems";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    if (contactGroupIds.IsSet)
                        parseQueryStringLocalVar["contactGroupIds"] = ClientUtils.ParameterToString(contactGroupIds.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (customMatchingReferences.IsSet)
                        parseQueryStringLocalVar["customMatchingReferences"] = ClientUtils.ParameterToString(customMatchingReferences.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (externalNos.IsSet)
                        parseQueryStringLocalVar["externalNos"] = ClientUtils.ParameterToString(externalNos.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (invoiceNos.IsSet)
                        parseQueryStringLocalVar["invoiceNos"] = ClientUtils.ParameterToString(invoiceNos.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (onlyBalancesGreaterThanAmount.IsSet)
                        parseQueryStringLocalVar["onlyBalancesGreaterThanAmount"] = ClientUtils.ParameterToString(onlyBalancesGreaterThanAmount.Value);

                    if (onlyCreatedByCurrentIntegration.IsSet)
                        parseQueryStringLocalVar["onlyCreatedByCurrentIntegration"] = ClientUtils.ParameterToString(onlyCreatedByCurrentIntegration.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (subLedgerNumberSeriesIds.IsSet)
                        parseQueryStringLocalVar["subLedgerNumberSeriesIds"] = ClientUtils.ParameterToString(subLedgerNumberSeriesIds.Value);

                    if (supplierNos.IsSet)
                        parseQueryStringLocalVar["supplierNos"] = ClientUtils.ParameterToString(supplierNos.Value);

                    if (voucherTypes.IsSet)
                        parseQueryStringLocalVar["voucherTypes"] = ClientUtils.ParameterToString(voucherTypes.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SupplierledgerOpenItemsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SupplierledgerOpenItemsGetApiResponse>();

                        SupplierledgerOpenItemsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Supplierledger/OpenItems", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSupplierledgerOpenItemsGetDefaultImplementation(apiResponseLocalVar, date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);

                        Events.ExecuteOnSupplierledgerOpenItemsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSupplierledgerOpenItemsGetDefaultImplementation(e, "/Supplierledger/OpenItems", uriBuilderLocalVar.Path, date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
                Events.ExecuteOnErrorSupplierledgerOpenItemsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SupplierledgerOpenItemsGetApiResponse"/>
        /// </summary>
        public partial class SupplierledgerOpenItemsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISupplierledgerOpenItemsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SupplierledgerOpenItemsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SupplierledgerOpenItemsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SupplierledgerOpenItemsGetApiResponse(ILogger<SupplierledgerOpenItemsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SupplierLedgerEntryDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SupplierLedgerEntryDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SupplierLedgerEntryDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSupplierledgerStatementGet(ref DateOnly fromDate, ref DateOnly toDate, ref Option<string> contactGroupIds, ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<string> customMatchingReferences, ref Option<string> departmentCodes, ref Option<string> externalNos, ref Option<bool> includeSubProject, ref Option<string> invoiceNos, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, ref Option<bool> onlyBalancesGreaterThanAmount, ref Option<bool> onlyCreatedByCurrentIntegration, ref Option<string> projectCodes, ref Option<string> subLedgerNumberSeriesIds, ref Option<string> supplierNos, ref Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactGroupIds"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSupplierledgerStatementGet(Option<string> contactGroupIds, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<string> invoiceNos, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            if (contactGroupIds.IsSet && contactGroupIds.Value == null)
                throw new ArgumentNullException(nameof(contactGroupIds));

            if (customMatchingReferences.IsSet && customMatchingReferences.Value == null)
                throw new ArgumentNullException(nameof(customMatchingReferences));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (externalNos.IsSet && externalNos.Value == null)
                throw new ArgumentNullException(nameof(externalNos));

            if (invoiceNos.IsSet && invoiceNos.Value == null)
                throw new ArgumentNullException(nameof(invoiceNos));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (subLedgerNumberSeriesIds.IsSet && subLedgerNumberSeriesIds.Value == null)
                throw new ArgumentNullException(nameof(subLedgerNumberSeriesIds));

            if (supplierNos.IsSet && supplierNos.Value == null)
                throw new ArgumentNullException(nameof(supplierNos));

            if (voucherTypes.IsSet && voucherTypes.Value == null)
                throw new ArgumentNullException(nameof(voucherTypes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSupplierledgerStatementGetDefaultImplementation(ISupplierledgerStatementGetApiResponse apiResponseLocalVar, DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSupplierledgerStatementGet(ref suppressDefaultLog, apiResponseLocalVar, fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSupplierledgerStatementGet(ref bool suppressDefaultLog, ISupplierledgerStatementGetApiResponse apiResponseLocalVar, DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSupplierledgerStatementGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSupplierledgerStatementGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="externalNos"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="onlyBalancesGreaterThanAmount"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="projectCodes"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSupplierledgerStatementGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> externalNos, Option<bool> includeSubProject, Option<string> invoiceNos, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> onlyBalancesGreaterThanAmount, Option<bool> onlyCreatedByCurrentIntegration, Option<string> projectCodes, Option<string> subLedgerNumberSeriesIds, Option<string> supplierNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets all supplier sub-ledger transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). If date is less then the current date (today); the balance displayed on all entries will be the balance the entry was on that date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches. If, for instance, this filter is set true and combined with voucherType filter on incoming invoices, this can be one way of retrieving payments on invoices. NOTE: We use absolute values, so for manual journal entries where balance and amount is positive, we get transactions with amount less than balance. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter entries by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerStatementGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerStatementGetApiResponse?> SupplierledgerStatementGetOrDefaultAsync(DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SupplierledgerStatementGetAsync(fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all supplier sub-ledger transactions between two dates (inclusive). The dates represent the posted date (date of accounting effect). Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all transactions with a posted date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="toDate">To date, inclusive. Get all transactions with a posted date up to this date (inclusive). If date is less then the current date (today); the balance displayed on all entries will be the balance the entry was on that date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter by contact group IDs. This will return entries for the suppliers belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter entries based on the created timestamp property. This filtering will return all entries with a created timestamp greater than the timestamp provided. Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="customMatchingReferences">Filter transactions on invoices with given custom matching references. Separate by comma to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter entries on department codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without department codes are returned (no filter). If -1, then all transactions without department codes are included. (optional)</param>
        /// <param name="externalNos">Filter by supplier external numbers. SearchString should be in the form of \&quot;30000, 14153-19534, 150000-\&quot; where values for 30000, between (inclusive) 14153-19534 and all over 150000 (inclusive) will be retrieved. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceNos">Filter transactions for invoices with given invoice numbers. Separate by comma to filter on multiple invoice numbers. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter entries based on the last changed timestamp property. The accounting entry in itself cannot change, but the match state of the sub-ledger entry might change. Using last changed filtering is one way of retrieving new matched items and as such the payment status of invoices. This filtering will return all entries with a last changed timestamp greater than the timestamp provided. Timestamp not inclusive. (optional)</param>
        /// <param name="onlyBalancesGreaterThanAmount">Filter on transactions with balances greater than amount. This will only provide entries with matches. If, for instance, this filter is set true and combined with voucherType filter on incoming invoices, this can be one way of retrieving payments on invoices. NOTE: We use absolute values, so for manual journal entries where balance and amount is positive, we get transactions with amount less than balance. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Sets whether or not to return only entries that the current integration created. Can be used to reduce the number of entries if only the status of transactions that the querying integration created are relevant to report. (optional)</param>
        /// <param name="projectCodes">Filter entries on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). If -1, then all transactions without project codes are included. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter entries by sub-ledger number series IDs. This will return entries for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. Supplier number also represent the supplier sub-ledger account number. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where values from 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher types. Separate by comma to filter multiple voucher types. If blank, all transactions returned (no filter). (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerStatementGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerStatementGetApiResponse> SupplierledgerStatementGetAsync(DateOnly fromDate, DateOnly toDate, Option<string> contactGroupIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<string> externalNos = default, Option<bool> includeSubProject = default, Option<string> invoiceNos = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> onlyBalancesGreaterThanAmount = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<string> projectCodes = default, Option<string> subLedgerNumberSeriesIds = default, Option<string> supplierNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSupplierledgerStatementGet(contactGroupIds, customMatchingReferences, departmentCodes, externalNos, invoiceNos, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);

                FormatSupplierledgerStatementGet(ref fromDate, ref toDate, ref contactGroupIds, ref createdDateTimeOffsetGreaterThan, ref customMatchingReferences, ref departmentCodes, ref externalNos, ref includeSubProject, ref invoiceNos, ref lastChangedDateTimeOffsetGreaterThan, ref onlyBalancesGreaterThanAmount, ref onlyCreatedByCurrentIntegration, ref projectCodes, ref subLedgerNumberSeriesIds, ref supplierNos, ref voucherTypes, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Supplierledger/Statement";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fromDate"] = ClientUtils.ParameterToString(fromDate);
                    parseQueryStringLocalVar["toDate"] = ClientUtils.ParameterToString(toDate);

                    if (contactGroupIds.IsSet)
                        parseQueryStringLocalVar["contactGroupIds"] = ClientUtils.ParameterToString(contactGroupIds.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (customMatchingReferences.IsSet)
                        parseQueryStringLocalVar["customMatchingReferences"] = ClientUtils.ParameterToString(customMatchingReferences.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (externalNos.IsSet)
                        parseQueryStringLocalVar["externalNos"] = ClientUtils.ParameterToString(externalNos.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (invoiceNos.IsSet)
                        parseQueryStringLocalVar["invoiceNos"] = ClientUtils.ParameterToString(invoiceNos.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (onlyBalancesGreaterThanAmount.IsSet)
                        parseQueryStringLocalVar["onlyBalancesGreaterThanAmount"] = ClientUtils.ParameterToString(onlyBalancesGreaterThanAmount.Value);

                    if (onlyCreatedByCurrentIntegration.IsSet)
                        parseQueryStringLocalVar["onlyCreatedByCurrentIntegration"] = ClientUtils.ParameterToString(onlyCreatedByCurrentIntegration.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (subLedgerNumberSeriesIds.IsSet)
                        parseQueryStringLocalVar["subLedgerNumberSeriesIds"] = ClientUtils.ParameterToString(subLedgerNumberSeriesIds.Value);

                    if (supplierNos.IsSet)
                        parseQueryStringLocalVar["supplierNos"] = ClientUtils.ParameterToString(supplierNos.Value);

                    if (voucherTypes.IsSet)
                        parseQueryStringLocalVar["voucherTypes"] = ClientUtils.ParameterToString(voucherTypes.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SupplierledgerStatementGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SupplierledgerStatementGetApiResponse>();

                        SupplierledgerStatementGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Supplierledger/Statement", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSupplierledgerStatementGetDefaultImplementation(apiResponseLocalVar, fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);

                        Events.ExecuteOnSupplierledgerStatementGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSupplierledgerStatementGetDefaultImplementation(e, "/Supplierledger/Statement", uriBuilderLocalVar.Path, fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
                Events.ExecuteOnErrorSupplierledgerStatementGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SupplierledgerStatementGetApiResponse"/>
        /// </summary>
        public partial class SupplierledgerStatementGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISupplierledgerStatementGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SupplierledgerStatementGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SupplierledgerStatementGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SupplierledgerStatementGetApiResponse(ILogger<SupplierledgerStatementGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SupplierLedgerEntryDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SupplierLedgerEntryDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SupplierLedgerEntryDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSupplierledgerSupplierBalancesGet(ref DateOnly date, ref Option<string> contactGroupIds, ref Option<bool> includeOnlyOpenItems, ref Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactGroupIds"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateSupplierledgerSupplierBalancesGet(Option<string> contactGroupIds, Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter)
        {
            if (contactGroupIds.IsSet && contactGroupIds.Value == null)
                throw new ArgumentNullException(nameof(contactGroupIds));

            if (subLedgerNumberSeriesIds.IsSet && subLedgerNumberSeriesIds.Value == null)
                throw new ArgumentNullException(nameof(subLedgerNumberSeriesIds));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="includeOnlyOpenItems"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="resourceParameter"></param>
        private void AfterSupplierledgerSupplierBalancesGetDefaultImplementation(ISupplierledgerSupplierBalancesGetApiResponse apiResponseLocalVar, DateOnly date, Option<string> contactGroupIds, Option<bool> includeOnlyOpenItems, Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterSupplierledgerSupplierBalancesGet(ref suppressDefaultLog, apiResponseLocalVar, date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="includeOnlyOpenItems"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterSupplierledgerSupplierBalancesGet(ref bool suppressDefaultLog, ISupplierledgerSupplierBalancesGetApiResponse apiResponseLocalVar, DateOnly date, Option<string> contactGroupIds, Option<bool> includeOnlyOpenItems, Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="includeOnlyOpenItems"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorSupplierledgerSupplierBalancesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly date, Option<string> contactGroupIds, Option<bool> includeOnlyOpenItems, Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSupplierledgerSupplierBalancesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="date"></param>
        /// <param name="contactGroupIds"></param>
        /// <param name="includeOnlyOpenItems"></param>
        /// <param name="subLedgerNumberSeriesIds"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorSupplierledgerSupplierBalancesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DateOnly date, Option<string> contactGroupIds, Option<bool> includeOnlyOpenItems, Option<string> subLedgerNumberSeriesIds, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the supplier balances at a given date (inclusive).  The balances represent the sum of accounts payable for the suppliers at the given date.  NOTE: Suppliers without any ledger entries are not shown.  Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <param name="date">Date, inclusive. Get all balances as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter balances by contact group IDs. This will return the balances for the supplier belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeOnlyOpenItems">Sets whether or not to return balances for suppliers with only open items. If false, all active suppliers and their balances will be returned, including zero balances for suppliers with no open items. NOTE: Suppliers without any ledger entries are not shown. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter balances by sub-ledger number series IDs. This will return balances for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerSupplierBalancesGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerSupplierBalancesGetApiResponse?> SupplierledgerSupplierBalancesGetOrDefaultAsync(DateOnly date, Option<string> contactGroupIds = default, Option<bool> includeOnlyOpenItems = default, Option<string> subLedgerNumberSeriesIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SupplierledgerSupplierBalancesGetAsync(date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the supplier balances at a given date (inclusive).  The balances represent the sum of accounts payable for the suppliers at the given date.  NOTE: Suppliers without any ledger entries are not shown.  Multiple filtering options. (Auth roles: SupplierLedger,SupplierLedger_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date, inclusive. Get all balances as of this date. Note that (date time) offsets (if provided) is not taken into account, only date is used.</param>
        /// <param name="contactGroupIds">Filter balances by contact group IDs. This will return the balances for the supplier belonging in the given contact groups. Separate by comma to filter on multiple contact group IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="includeOnlyOpenItems">Sets whether or not to return balances for suppliers with only open items. If false, all active suppliers and their balances will be returned, including zero balances for suppliers with no open items. NOTE: Suppliers without any ledger entries are not shown. (optional)</param>
        /// <param name="subLedgerNumberSeriesIds">Filter balances by sub-ledger number series IDs. This will return balances for the suppliers belonging in the given sub-ledger number series. Separate by comma to filter on multiple sub-ledger number series IDs. If filterString is null or whitespace, query is returned as is.\&quot; (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISupplierledgerSupplierBalancesGetApiResponse"/>&gt;</returns>
        public async Task<ISupplierledgerSupplierBalancesGetApiResponse> SupplierledgerSupplierBalancesGetAsync(DateOnly date, Option<string> contactGroupIds = default, Option<bool> includeOnlyOpenItems = default, Option<string> subLedgerNumberSeriesIds = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSupplierledgerSupplierBalancesGet(contactGroupIds, subLedgerNumberSeriesIds, resourceParameter);

                FormatSupplierledgerSupplierBalancesGet(ref date, ref contactGroupIds, ref includeOnlyOpenItems, ref subLedgerNumberSeriesIds, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Supplierledger/SupplierBalances";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["date"] = ClientUtils.ParameterToString(date);

                    if (contactGroupIds.IsSet)
                        parseQueryStringLocalVar["contactGroupIds"] = ClientUtils.ParameterToString(contactGroupIds.Value);

                    if (includeOnlyOpenItems.IsSet)
                        parseQueryStringLocalVar["includeOnlyOpenItems"] = ClientUtils.ParameterToString(includeOnlyOpenItems.Value);

                    if (subLedgerNumberSeriesIds.IsSet)
                        parseQueryStringLocalVar["subLedgerNumberSeriesIds"] = ClientUtils.ParameterToString(subLedgerNumberSeriesIds.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SupplierledgerSupplierBalancesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SupplierledgerSupplierBalancesGetApiResponse>();

                        SupplierledgerSupplierBalancesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Supplierledger/SupplierBalances", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSupplierledgerSupplierBalancesGetDefaultImplementation(apiResponseLocalVar, date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter);

                        Events.ExecuteOnSupplierledgerSupplierBalancesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSupplierledgerSupplierBalancesGetDefaultImplementation(e, "/Supplierledger/SupplierBalances", uriBuilderLocalVar.Path, date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter);
                Events.ExecuteOnErrorSupplierledgerSupplierBalancesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SupplierledgerSupplierBalancesGetApiResponse"/>
        /// </summary>
        public partial class SupplierledgerSupplierBalancesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, ISupplierledgerSupplierBalancesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SupplierledgerSupplierBalancesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SupplierledgerSupplierBalancesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SupplierledgerSupplierBalancesGetApiResponse(ILogger<SupplierledgerSupplierBalancesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SupplierBalanceDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SupplierBalanceDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SupplierBalanceDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
