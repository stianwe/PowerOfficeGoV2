// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentLeavesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentLeavesApiEvents Events { get; }

        /// <summary>
        /// Get leave lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLeave,EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse> EmployeesEmploymentsEmploymentIdLeavesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get leave lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLeave,EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse?> EmployeesEmploymentsEmploymentIdLeavesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteOrDefaultAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="operation">JSON Patch structure for updating a leave (line). See EmploymentLeavePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse> EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchAsync(long employmentId, Guid leaveId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="operation">JSON Patch structure for updating a leave (line). See EmploymentLeavePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchOrDefaultAsync(long employmentId, Guid leaveId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLeavePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse> EmployeesEmploymentsEmploymentIdLeavesPostAsync(long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new leave (line) on a given employment. (Auth roles: EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLeavePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse?> EmployeesEmploymentsEmploymentIdLeavesPostOrDefaultAsync(long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific leave (line) on a given employment. (Auth roles: EmploymentLeave,EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaveByIdApiResponse"/>&gt;</returns>
        Task<IGetLeaveByIdApiResponse> GetLeaveByIdAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific leave (line) on a given employment. (Auth roles: EmploymentLeave,EmploymentLeave_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaveByIdApiResponse"/>?&gt;</returns>
        Task<IGetLeaveByIdApiResponse?> GetLeaveByIdOrDefaultAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentLeaveDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentLeaveDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentLeaveDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetLeaveByIdApiResponse"/>
    /// </summary>
    public interface IGetLeaveByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentLeaveDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentLeavesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLeavesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLeavesGet;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLeavesGet(EmploymentLeavesApi.EmployeesEmploymentsEmploymentIdLeavesGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLeavesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLeavesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(EmploymentLeavesApi.EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(EmploymentLeavesApi.EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLeavesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLeavesPost;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLeavesPost(EmploymentLeavesApi.EmployeesEmploymentsEmploymentIdLeavesPostApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLeavesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesPost(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLeavesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLeaveById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLeaveById;

        internal void ExecuteOnGetLeaveById(EmploymentLeavesApi.GetLeaveByIdApiResponse apiResponse)
        {
            OnGetLeaveById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLeaveById(Exception exception)
        {
            OnErrorGetLeaveById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentLeavesApi : IEmploymentLeavesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentLeavesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentLeavesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentLeavesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentLeavesApi(ILogger<EmploymentLeavesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentLeavesApiEvents employmentLeavesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentLeavesApi>();
            HttpClient = httpClient;
            Events = employmentLeavesApiEvents;
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLeavesGet(ref long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLeavesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLeavesGetDefaultImplementation(IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLeavesGet(ref suppressDefaultLog, apiResponseLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLeavesGet(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLeavesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLeavesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLeavesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get leave lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLeave,EmploymentLeave_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse?> EmployeesEmploymentsEmploymentIdLeavesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLeavesGetAsync(employmentId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get leave lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLeave,EmploymentLeave_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse> EmployeesEmploymentsEmploymentIdLeavesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLeavesGet(resourceParameter);

                FormatEmployeesEmploymentsEmploymentIdLeavesGet(ref employmentId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Leaves";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLeavesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLeavesGetApiResponse>();

                        EmployeesEmploymentsEmploymentIdLeavesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Leaves", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLeavesGetDefaultImplementation(apiResponseLocalVar, employmentId, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLeavesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLeavesGetDefaultImplementation(e, "/Employees/Employments/{employmentId}/Leaves", uriBuilderLocalVar.Path, employmentId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLeavesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLeavesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLeavesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLeavesGetApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLeavesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentLeaveDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentLeaveDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentLeaveDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref long employmentId, ref Guid leaveId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteDefaultImplementation(IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid leaveId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employmentId, leaveId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid leaveId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, leaveId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId);

        /// <summary>
        /// Delete a specific leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteOrDefaultAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteAsync(employmentId, leaveId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(ref employmentId, ref leaveId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Leaves/{leaveId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleaveId%7D", Uri.EscapeDataString(leaveId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse>();

                        EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteDefaultImplementation(apiResponseLocalVar, employmentId, leaveId);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteDefaultImplementation(e, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", uriBuilderLocalVar.Path, employmentId, leaveId);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref long employmentId, ref Guid leaveId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchDefaultImplementation(IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid leaveId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employmentId, leaveId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid leaveId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, leaveId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="operation">JSON Patch structure for updating a leave (line). See EmploymentLeavePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchOrDefaultAsync(long employmentId, Guid leaveId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchAsync(employmentId, leaveId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="operation">JSON Patch structure for updating a leave (line). See EmploymentLeavePatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse> EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchAsync(long employmentId, Guid leaveId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(operation);

                FormatEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(ref employmentId, ref leaveId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Leaves/{leaveId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleaveId%7D", Uri.EscapeDataString(leaveId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse>();

                        EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchDefaultImplementation(apiResponseLocalVar, employmentId, leaveId, operation);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchDefaultImplementation(e, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", uriBuilderLocalVar.Path, employmentId, leaveId, operation);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLeaveDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLeaveDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLeaveDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLeavesPost(ref long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentLeavePostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLeavesPost(Option<EmploymentLeavePostDto> employmentLeavePostDto)
        {
            if (employmentLeavePostDto.IsSet && employmentLeavePostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentLeavePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLeavePostDto"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLeavesPostDefaultImplementation(IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLeavesPost(ref suppressDefaultLog, apiResponseLocalVar, employmentId, employmentLeavePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLeavePostDto"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLeavesPost(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLeavePostDto"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLeavesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLeavesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, employmentLeavePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLeavePostDto"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLeavesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto);

        /// <summary>
        /// Create a new leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLeavePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse?> EmployeesEmploymentsEmploymentIdLeavesPostOrDefaultAsync(long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLeavesPostAsync(employmentId, employmentLeavePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new leave (line) on a given employment. (Auth roles: EmploymentLeave_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLeavePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse> EmployeesEmploymentsEmploymentIdLeavesPostAsync(long employmentId, Option<EmploymentLeavePostDto> employmentLeavePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLeavesPost(employmentLeavePostDto);

                FormatEmployeesEmploymentsEmploymentIdLeavesPost(ref employmentId, employmentLeavePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Leaves";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (employmentLeavePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentLeavePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentLeavePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLeavesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLeavesPostApiResponse>();

                        EmployeesEmploymentsEmploymentIdLeavesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Leaves", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLeavesPostDefaultImplementation(apiResponseLocalVar, employmentId, employmentLeavePostDto);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLeavesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLeavesPostDefaultImplementation(e, "/Employees/Employments/{employmentId}/Leaves", uriBuilderLocalVar.Path, employmentId, employmentLeavePostDto);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLeavesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLeavesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLeavesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLeavesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLeavesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLeavesPostApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLeavesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLeaveDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLeaveDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLeaveDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLeaveById(ref long employmentId, ref Guid leaveId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        private void AfterGetLeaveByIdDefaultImplementation(IGetLeaveByIdApiResponse apiResponseLocalVar, long employmentId, Guid leaveId)
        {
            bool suppressDefaultLog = false;
            AfterGetLeaveById(ref suppressDefaultLog, apiResponseLocalVar, employmentId, leaveId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        partial void AfterGetLeaveById(ref bool suppressDefaultLog, IGetLeaveByIdApiResponse apiResponseLocalVar, long employmentId, Guid leaveId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        private void OnErrorGetLeaveByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLeaveById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, leaveId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="leaveId"></param>
        partial void OnErrorGetLeaveById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid leaveId);

        /// <summary>
        /// Gets a specific leave (line) on a given employment. (Auth roles: EmploymentLeave,EmploymentLeave_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaveByIdApiResponse"/>&gt;</returns>
        public async Task<IGetLeaveByIdApiResponse?> GetLeaveByIdOrDefaultAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLeaveByIdAsync(employmentId, leaveId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific leave (line) on a given employment. (Auth roles: EmploymentLeave,EmploymentLeave_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="leaveId">The id of the leave (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLeaveByIdApiResponse"/>&gt;</returns>
        public async Task<IGetLeaveByIdApiResponse> GetLeaveByIdAsync(long employmentId, Guid leaveId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLeaveById(ref employmentId, ref leaveId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Leaves/{leaveId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleaveId%7D", Uri.EscapeDataString(leaveId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLeaveByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLeaveByIdApiResponse>();

                        GetLeaveByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLeaveByIdDefaultImplementation(apiResponseLocalVar, employmentId, leaveId);

                        Events.ExecuteOnGetLeaveById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLeaveByIdDefaultImplementation(e, "/Employees/Employments/{employmentId}/Leaves/{leaveId}", uriBuilderLocalVar.Path, employmentId, leaveId);
                Events.ExecuteOnErrorGetLeaveById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLeaveByIdApiResponse"/>
        /// </summary>
        public partial class GetLeaveByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetLeaveByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLeaveByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLeaveByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLeaveByIdApiResponse(ILogger<GetLeaveByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLeaveDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLeaveDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLeaveDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
