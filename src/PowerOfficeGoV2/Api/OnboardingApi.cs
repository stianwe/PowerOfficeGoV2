// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOnboardingApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OnboardingApiEvents Events { get; }

        /// <summary>
        /// Finalize the last procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow.
        /// </summary>
        /// <remarks>
        /// Finalize the last step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingFinalizePostApiResponse"/>&gt;</returns>
        Task<IOnboardingFinalizePostApiResponse> OnboardingFinalizePostAsync(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Finalize the last procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow.
        /// </summary>
        /// <remarks>
        /// Finalize the last step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </remarks>
        /// <param name="finalizeOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingFinalizePostApiResponse"/>?&gt;</returns>
        Task<IOnboardingFinalizePostApiResponse?> OnboardingFinalizePostOrDefaultAsync(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initiate the first procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow.
        /// </summary>
        /// <remarks>
        /// Initiate the first step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingInitiatePostApiResponse"/>&gt;</returns>
        Task<IOnboardingInitiatePostApiResponse> OnboardingInitiatePostAsync(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initiate the first procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow.
        /// </summary>
        /// <remarks>
        /// Initiate the first step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </remarks>
        /// <param name="initiateOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingInitiatePostApiResponse"/>?&gt;</returns>
        Task<IOnboardingInitiatePostApiResponse?> OnboardingInitiatePostOrDefaultAsync(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IOnboardingFinalizePostApiResponse"/>
    /// </summary>
    public interface IOnboardingFinalizePostApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.FinalizeOnboardingResponseDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, ITooManyRequests<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// The <see cref="IOnboardingInitiatePostApiResponse"/>
    /// </summary>
    public interface IOnboardingInitiatePostApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.InitiateOnboardingResponseDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, ITooManyRequests<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OnboardingApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOnboardingFinalizePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOnboardingFinalizePost;

        internal void ExecuteOnOnboardingFinalizePost(OnboardingApi.OnboardingFinalizePostApiResponse apiResponse)
        {
            OnOnboardingFinalizePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOnboardingFinalizePost(Exception exception)
        {
            OnErrorOnboardingFinalizePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOnboardingInitiatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOnboardingInitiatePost;

        internal void ExecuteOnOnboardingInitiatePost(OnboardingApi.OnboardingInitiatePostApiResponse apiResponse)
        {
            OnOnboardingInitiatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOnboardingInitiatePost(Exception exception)
        {
            OnErrorOnboardingInitiatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OnboardingApi : IOnboardingApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OnboardingApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OnboardingApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnboardingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnboardingApi(ILogger<OnboardingApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OnboardingApiEvents onboardingApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OnboardingApi>();
            HttpClient = httpClient;
            Events = onboardingApiEvents;
        }

        partial void FormatOnboardingFinalizePost(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="finalizeOnboardingPostDto"></param>
        /// <returns></returns>
        private void ValidateOnboardingFinalizePost(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto)
        {
            if (finalizeOnboardingPostDto.IsSet && finalizeOnboardingPostDto.Value == null)
                throw new ArgumentNullException(nameof(finalizeOnboardingPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="finalizeOnboardingPostDto"></param>
        private void AfterOnboardingFinalizePostDefaultImplementation(IOnboardingFinalizePostApiResponse apiResponseLocalVar, Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto)
        {
            bool suppressDefaultLog = false;
            AfterOnboardingFinalizePost(ref suppressDefaultLog, apiResponseLocalVar, finalizeOnboardingPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="finalizeOnboardingPostDto"></param>
        partial void AfterOnboardingFinalizePost(ref bool suppressDefaultLog, IOnboardingFinalizePostApiResponse apiResponseLocalVar, Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="finalizeOnboardingPostDto"></param>
        private void OnErrorOnboardingFinalizePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOnboardingFinalizePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, finalizeOnboardingPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="finalizeOnboardingPostDto"></param>
        partial void OnErrorOnboardingFinalizePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto);

        /// <summary>
        /// Finalize the last procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow. Finalize the last step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </summary>
        /// <param name="finalizeOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingFinalizePostApiResponse"/>&gt;</returns>
        public async Task<IOnboardingFinalizePostApiResponse?> OnboardingFinalizePostOrDefaultAsync(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OnboardingFinalizePostAsync(finalizeOnboardingPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Finalize the last procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow. Finalize the last step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="finalizeOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingFinalizePostApiResponse"/>&gt;</returns>
        public async Task<IOnboardingFinalizePostApiResponse> OnboardingFinalizePostAsync(Option<FinalizeOnboardingPostDto> finalizeOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOnboardingFinalizePost(finalizeOnboardingPostDto);

                FormatOnboardingFinalizePost(finalizeOnboardingPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Onboarding/Finalize";

                    if (finalizeOnboardingPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (finalizeOnboardingPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(finalizeOnboardingPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<OnboardingFinalizePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OnboardingFinalizePostApiResponse>();

                        OnboardingFinalizePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Onboarding/Finalize", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOnboardingFinalizePostDefaultImplementation(apiResponseLocalVar, finalizeOnboardingPostDto);

                        Events.ExecuteOnOnboardingFinalizePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOnboardingFinalizePostDefaultImplementation(e, "/Onboarding/Finalize", uriBuilderLocalVar.Path, finalizeOnboardingPostDto);
                Events.ExecuteOnErrorOnboardingFinalizePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OnboardingFinalizePostApiResponse"/>
        /// </summary>
        public partial class OnboardingFinalizePostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IOnboardingFinalizePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OnboardingFinalizePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OnboardingFinalizePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OnboardingFinalizePostApiResponse(ILogger<OnboardingFinalizePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.FinalizeOnboardingResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.FinalizeOnboardingResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.FinalizeOnboardingResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOnboardingInitiatePost(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="initiateOnboardingPostDto"></param>
        /// <returns></returns>
        private void ValidateOnboardingInitiatePost(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto)
        {
            if (initiateOnboardingPostDto.IsSet && initiateOnboardingPostDto.Value == null)
                throw new ArgumentNullException(nameof(initiateOnboardingPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        private void AfterOnboardingInitiatePostDefaultImplementation(IOnboardingInitiatePostApiResponse apiResponseLocalVar, Option<InitiateOnboardingPostDto> initiateOnboardingPostDto)
        {
            bool suppressDefaultLog = false;
            AfterOnboardingInitiatePost(ref suppressDefaultLog, apiResponseLocalVar, initiateOnboardingPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        partial void AfterOnboardingInitiatePost(ref bool suppressDefaultLog, IOnboardingInitiatePostApiResponse apiResponseLocalVar, Option<InitiateOnboardingPostDto> initiateOnboardingPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        private void OnErrorOnboardingInitiatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<InitiateOnboardingPostDto> initiateOnboardingPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOnboardingInitiatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, initiateOnboardingPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="initiateOnboardingPostDto"></param>
        partial void OnErrorOnboardingInitiatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<InitiateOnboardingPostDto> initiateOnboardingPostDto);

        /// <summary>
        /// Initiate the first procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow. Initiate the first step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </summary>
        /// <param name="initiateOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingInitiatePostApiResponse"/>&gt;</returns>
        public async Task<IOnboardingInitiatePostApiResponse?> OnboardingInitiatePostOrDefaultAsync(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OnboardingInitiatePostAsync(initiateOnboardingPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Initiate the first procedural step of onboarding your integration for one or more PowerOffice Go client, using the external onboarding worklfow. Initiate the first step in the process of onboarding the integration on clients. Read our documentation page for detailed workflow descriptions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="initiateOnboardingPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOnboardingInitiatePostApiResponse"/>&gt;</returns>
        public async Task<IOnboardingInitiatePostApiResponse> OnboardingInitiatePostAsync(Option<InitiateOnboardingPostDto> initiateOnboardingPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOnboardingInitiatePost(initiateOnboardingPostDto);

                FormatOnboardingInitiatePost(initiateOnboardingPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Onboarding/Initiate";

                    if (initiateOnboardingPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (initiateOnboardingPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(initiateOnboardingPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<OnboardingInitiatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OnboardingInitiatePostApiResponse>();

                        OnboardingInitiatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Onboarding/Initiate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOnboardingInitiatePostDefaultImplementation(apiResponseLocalVar, initiateOnboardingPostDto);

                        Events.ExecuteOnOnboardingInitiatePost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOnboardingInitiatePostDefaultImplementation(e, "/Onboarding/Initiate", uriBuilderLocalVar.Path, initiateOnboardingPostDto);
                Events.ExecuteOnErrorOnboardingInitiatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OnboardingInitiatePostApiResponse"/>
        /// </summary>
        public partial class OnboardingInitiatePostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IOnboardingInitiatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OnboardingInitiatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OnboardingInitiatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OnboardingInitiatePostApiResponse(ILogger<OnboardingInitiatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.InitiateOnboardingResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.InitiateOnboardingResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.InitiateOnboardingResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
