// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentLayoffsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentLayoffsApiEvents Events { get; }

        /// <summary>
        /// Get layoff lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse> EmployeesEmploymentsEmploymentIdLayoffsGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get layoff lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteOrDefaultAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="operation">JSON Patch structure for updating a layoff (line). See EmploymentLayoffPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchAsync(long employmentId, Guid layoffId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="operation">JSON Patch structure for updating a layoff (line). See EmploymentLayoffPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchOrDefaultAsync(long employmentId, Guid layoffId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLayoffPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse> EmployeesEmploymentsEmploymentIdLayoffsPostAsync(long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLayoffPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsPostOrDefaultAsync(long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLayoffByIdApiResponse"/>&gt;</returns>
        Task<IGetLayoffByIdApiResponse> GetLayoffByIdAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLayoffByIdApiResponse"/>?&gt;</returns>
        Task<IGetLayoffByIdApiResponse?> GetLayoffByIdOrDefaultAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentLayoffDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentLayoffDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentLayoffDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetLayoffByIdApiResponse"/>
    /// </summary>
    public interface IGetLayoffByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentLayoffDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentLayoffsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLayoffsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLayoffsGet;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsGet(EmploymentLayoffsApi.EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLayoffsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(EmploymentLayoffsApi.EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(EmploymentLayoffsApi.EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdLayoffsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdLayoffsPost;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsPost(EmploymentLayoffsApi.EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdLayoffsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsPost(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLayoffById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLayoffById;

        internal void ExecuteOnGetLayoffById(EmploymentLayoffsApi.GetLayoffByIdApiResponse apiResponse)
        {
            OnGetLayoffById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLayoffById(Exception exception)
        {
            OnErrorGetLayoffById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentLayoffsApi : IEmploymentLayoffsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentLayoffsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentLayoffsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentLayoffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentLayoffsApi(ILogger<EmploymentLayoffsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentLayoffsApiEvents employmentLayoffsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentLayoffsApi>();
            HttpClient = httpClient;
            Events = employmentLayoffsApiEvents;
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLayoffsGet(ref long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLayoffsGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLayoffsGetDefaultImplementation(IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLayoffsGet(ref suppressDefaultLog, apiResponseLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLayoffsGet(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLayoffsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLayoffsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get layoff lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLayoffsGetAsync(employmentId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get layoff lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse> EmployeesEmploymentsEmploymentIdLayoffsGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLayoffsGet(resourceParameter);

                FormatEmployeesEmploymentsEmploymentIdLayoffsGet(ref employmentId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Layoffs";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse>();

                        EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Layoffs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLayoffsGetDefaultImplementation(apiResponseLocalVar, employmentId, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLayoffsGetDefaultImplementation(e, "/Employees/Employments/{employmentId}/Layoffs", uriBuilderLocalVar.Path, employmentId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLayoffsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLayoffsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentLayoffDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentLayoffDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentLayoffDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref long employmentId, ref Guid layoffId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteDefaultImplementation(IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid layoffId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employmentId, layoffId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid layoffId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, layoffId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId);

        /// <summary>
        /// Delete a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteOrDefaultAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteAsync(employmentId, layoffId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(ref employmentId, ref layoffId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Layoffs/{layoffId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlayoffId%7D", Uri.EscapeDataString(layoffId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse>();

                        EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteDefaultImplementation(apiResponseLocalVar, employmentId, layoffId);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteDefaultImplementation(e, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", uriBuilderLocalVar.Path, employmentId, layoffId);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref long employmentId, ref Guid layoffId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchDefaultImplementation(IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid layoffId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employmentId, layoffId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid layoffId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, layoffId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="operation">JSON Patch structure for updating a layoff (line). See EmploymentLayoffPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchOrDefaultAsync(long employmentId, Guid layoffId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchAsync(employmentId, layoffId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="operation">JSON Patch structure for updating a layoff (line). See EmploymentLayoffPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse> EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchAsync(long employmentId, Guid layoffId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(operation);

                FormatEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(ref employmentId, ref layoffId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Layoffs/{layoffId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlayoffId%7D", Uri.EscapeDataString(layoffId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse>();

                        EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchDefaultImplementation(apiResponseLocalVar, employmentId, layoffId, operation);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchDefaultImplementation(e, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", uriBuilderLocalVar.Path, employmentId, layoffId, operation);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLayoffsLayoffIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLayoffDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLayoffDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLayoffDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdLayoffsPost(ref long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentLayoffPostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdLayoffsPost(Option<EmploymentLayoffPostDto> employmentLayoffPostDto)
        {
            if (employmentLayoffPostDto.IsSet && employmentLayoffPostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentLayoffPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLayoffPostDto"></param>
        private void AfterEmployeesEmploymentsEmploymentIdLayoffsPostDefaultImplementation(IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdLayoffsPost(ref suppressDefaultLog, apiResponseLocalVar, employmentId, employmentLayoffPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLayoffPostDto"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdLayoffsPost(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLayoffPostDto"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdLayoffsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdLayoffsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, employmentLayoffPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentLayoffPostDto"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdLayoffsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto);

        /// <summary>
        /// Create a new layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLayoffPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse?> EmployeesEmploymentsEmploymentIdLayoffsPostOrDefaultAsync(long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdLayoffsPostAsync(employmentId, employmentLayoffPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new layoff (line) on a given employment. (Auth roles: EmploymentLayoff_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentLayoffPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse> EmployeesEmploymentsEmploymentIdLayoffsPostAsync(long employmentId, Option<EmploymentLayoffPostDto> employmentLayoffPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdLayoffsPost(employmentLayoffPostDto);

                FormatEmployeesEmploymentsEmploymentIdLayoffsPost(ref employmentId, employmentLayoffPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Layoffs";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (employmentLayoffPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentLayoffPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentLayoffPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse>();

                        EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Layoffs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdLayoffsPostDefaultImplementation(apiResponseLocalVar, employmentId, employmentLayoffPostDto);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdLayoffsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdLayoffsPostDefaultImplementation(e, "/Employees/Employments/{employmentId}/Layoffs", uriBuilderLocalVar.Path, employmentId, employmentLayoffPostDto);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdLayoffsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdLayoffsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse(ILogger<EmployeesEmploymentsEmploymentIdLayoffsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLayoffDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLayoffDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLayoffDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLayoffById(ref long employmentId, ref Guid layoffId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        private void AfterGetLayoffByIdDefaultImplementation(IGetLayoffByIdApiResponse apiResponseLocalVar, long employmentId, Guid layoffId)
        {
            bool suppressDefaultLog = false;
            AfterGetLayoffById(ref suppressDefaultLog, apiResponseLocalVar, employmentId, layoffId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        partial void AfterGetLayoffById(ref bool suppressDefaultLog, IGetLayoffByIdApiResponse apiResponseLocalVar, long employmentId, Guid layoffId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        private void OnErrorGetLayoffByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLayoffById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, layoffId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="layoffId"></param>
        partial void OnErrorGetLayoffById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid layoffId);

        /// <summary>
        /// Gets a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLayoffByIdApiResponse"/>&gt;</returns>
        public async Task<IGetLayoffByIdApiResponse?> GetLayoffByIdOrDefaultAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLayoffByIdAsync(employmentId, layoffId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific layoff (line) on a given employment. (Auth roles: EmploymentLayoff,EmploymentLayoff_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="layoffId">The id of the layoff (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLayoffByIdApiResponse"/>&gt;</returns>
        public async Task<IGetLayoffByIdApiResponse> GetLayoffByIdAsync(long employmentId, Guid layoffId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLayoffById(ref employmentId, ref layoffId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/Layoffs/{layoffId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlayoffId%7D", Uri.EscapeDataString(layoffId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLayoffByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLayoffByIdApiResponse>();

                        GetLayoffByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLayoffByIdDefaultImplementation(apiResponseLocalVar, employmentId, layoffId);

                        Events.ExecuteOnGetLayoffById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLayoffByIdDefaultImplementation(e, "/Employees/Employments/{employmentId}/Layoffs/{layoffId}", uriBuilderLocalVar.Path, employmentId, layoffId);
                Events.ExecuteOnErrorGetLayoffById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLayoffByIdApiResponse"/>
        /// </summary>
        public partial class GetLayoffByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetLayoffByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLayoffByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLayoffByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLayoffByIdApiResponse(ILogger<GetLayoffByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentLayoffDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentLayoffDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentLayoffDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
