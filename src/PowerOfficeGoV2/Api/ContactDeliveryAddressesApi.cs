// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContactDeliveryAddressesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContactDeliveryAddressesApiEvents Events { get; }

        /// <summary>
        /// Deletes a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdDeleteApiResponse"/>&gt;</returns>
        Task<IContactDeliveryAddressesContactIdIdDeleteApiResponse> ContactDeliveryAddressesContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdDeleteApiResponse"/>?&gt;</returns>
        Task<IContactDeliveryAddressesContactIdIdDeleteApiResponse?> ContactDeliveryAddressesContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing delivery addresses for a given contact (customer/employee/supplier identifier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// CountryCode will default to \&quot;NO\&quot; if provided as null or empty string.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="operation">Json patch document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdPatchApiResponse"/>&gt;</returns>
        Task<IContactDeliveryAddressesContactIdIdPatchApiResponse> ContactDeliveryAddressesContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing delivery addresses for a given contact (customer/employee/supplier identifier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// CountryCode will default to \&quot;NO\&quot; if provided as null or empty string.
        /// </remarks>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="operation">Json patch document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdPatchApiResponse"/>?&gt;</returns>
        Task<IContactDeliveryAddressesContactIdIdPatchApiResponse?> ContactDeliveryAddressesContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a delivery address for a given contact (customer/employee/supplier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// CountryCode must be a valid ISO 3166-1 alfa-2 code if provided. If not CountryCode is provided, it will default to \&quot;NO\&quot;.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="contactDeliveryAddressPostDto">A contact delivery address post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdPostApiResponse"/>&gt;</returns>
        Task<IContactDeliveryAddressesContactIdPostApiResponse> ContactDeliveryAddressesContactIdPostAsync(long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates a delivery address for a given contact (customer/employee/supplier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full)
        /// </summary>
        /// <remarks>
        /// CountryCode must be a valid ISO 3166-1 alfa-2 code if provided. If not CountryCode is provided, it will default to \&quot;NO\&quot;.
        /// </remarks>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="contactDeliveryAddressPostDto">A contact delivery address post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdPostApiResponse"/>?&gt;</returns>
        Task<IContactDeliveryAddressesContactIdPostApiResponse?> ContactDeliveryAddressesContactIdPostOrDefaultAsync(long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the delivery addresses for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// Gets the delivery addresses for a given contact (customer/employee/supplier identifier).  The common use case of an delivery address is to set it on sales orders for customers.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; created timestamp property.                  This filtering will return all addresses with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact delivery address external codes.  Separate by comma to filter on multiple external codes. If filterString is null or whitespace, query is returned as is. Case insensitive, ie. ABC &#x3D;&#x3D; abc. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; last changed timestamp property.                  This filtering will return all contact delivery addresses with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesGetApiResponse"/>&gt;</returns>
        Task<IContactDeliveryAddressesGetApiResponse> ContactDeliveryAddressesGetAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the delivery addresses for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// Gets the delivery addresses for a given contact (customer/employee/supplier identifier).  The common use case of an delivery address is to set it on sales orders for customers.
        /// </remarks>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; created timestamp property.                  This filtering will return all addresses with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact delivery address external codes.  Separate by comma to filter on multiple external codes. If filterString is null or whitespace, query is returned as is. Case insensitive, ie. ABC &#x3D;&#x3D; abc. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; last changed timestamp property.                  This filtering will return all contact delivery addresses with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesGetApiResponse"/>?&gt;</returns>
        Task<IContactDeliveryAddressesGetApiResponse?> ContactDeliveryAddressesGetOrDefaultAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of a delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactDeliveryAddressByIdApiResponse"/>&gt;</returns>
        Task<IGetContactDeliveryAddressByIdApiResponse> GetContactDeliveryAddressByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of a delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactDeliveryAddressByIdApiResponse"/>?&gt;</returns>
        Task<IGetContactDeliveryAddressByIdApiResponse?> GetContactDeliveryAddressByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IContactDeliveryAddressesContactIdIdDeleteApiResponse"/>
    /// </summary>
    public interface IContactDeliveryAddressesContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactDeliveryAddressesContactIdIdPatchApiResponse"/>
    /// </summary>
    public interface IContactDeliveryAddressesContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactDeliveryAddressDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactDeliveryAddressesContactIdPostApiResponse"/>
    /// </summary>
    public interface IContactDeliveryAddressesContactIdPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ContactDeliveryAddressDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactDeliveryAddressesGetApiResponse"/>
    /// </summary>
    public interface IContactDeliveryAddressesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<ContactDeliveryAddressDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactDeliveryAddressByIdApiResponse"/>
    /// </summary>
    public interface IGetContactDeliveryAddressByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactDeliveryAddressDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContactDeliveryAddressesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactDeliveryAddressesContactIdIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactDeliveryAddressesContactIdIdDelete;

        internal void ExecuteOnContactDeliveryAddressesContactIdIdDelete(ContactDeliveryAddressesApi.ContactDeliveryAddressesContactIdIdDeleteApiResponse apiResponse)
        {
            OnContactDeliveryAddressesContactIdIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactDeliveryAddressesContactIdIdDelete(Exception exception)
        {
            OnErrorContactDeliveryAddressesContactIdIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactDeliveryAddressesContactIdIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactDeliveryAddressesContactIdIdPatch;

        internal void ExecuteOnContactDeliveryAddressesContactIdIdPatch(ContactDeliveryAddressesApi.ContactDeliveryAddressesContactIdIdPatchApiResponse apiResponse)
        {
            OnContactDeliveryAddressesContactIdIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactDeliveryAddressesContactIdIdPatch(Exception exception)
        {
            OnErrorContactDeliveryAddressesContactIdIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactDeliveryAddressesContactIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactDeliveryAddressesContactIdPost;

        internal void ExecuteOnContactDeliveryAddressesContactIdPost(ContactDeliveryAddressesApi.ContactDeliveryAddressesContactIdPostApiResponse apiResponse)
        {
            OnContactDeliveryAddressesContactIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactDeliveryAddressesContactIdPost(Exception exception)
        {
            OnErrorContactDeliveryAddressesContactIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactDeliveryAddressesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactDeliveryAddressesGet;

        internal void ExecuteOnContactDeliveryAddressesGet(ContactDeliveryAddressesApi.ContactDeliveryAddressesGetApiResponse apiResponse)
        {
            OnContactDeliveryAddressesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactDeliveryAddressesGet(Exception exception)
        {
            OnErrorContactDeliveryAddressesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactDeliveryAddressById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactDeliveryAddressById;

        internal void ExecuteOnGetContactDeliveryAddressById(ContactDeliveryAddressesApi.GetContactDeliveryAddressByIdApiResponse apiResponse)
        {
            OnGetContactDeliveryAddressById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactDeliveryAddressById(Exception exception)
        {
            OnErrorGetContactDeliveryAddressById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContactDeliveryAddressesApi : IContactDeliveryAddressesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContactDeliveryAddressesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContactDeliveryAddressesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDeliveryAddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactDeliveryAddressesApi(ILogger<ContactDeliveryAddressesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContactDeliveryAddressesApiEvents contactDeliveryAddressesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContactDeliveryAddressesApi>();
            HttpClient = httpClient;
            Events = contactDeliveryAddressesApiEvents;
        }

        partial void FormatContactDeliveryAddressesContactIdIdDelete(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterContactDeliveryAddressesContactIdIdDeleteDefaultImplementation(IContactDeliveryAddressesContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterContactDeliveryAddressesContactIdIdDelete(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterContactDeliveryAddressesContactIdIdDelete(ref bool suppressDefaultLog, IContactDeliveryAddressesContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorContactDeliveryAddressesContactIdIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactDeliveryAddressesContactIdIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorContactDeliveryAddressesContactIdIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Deletes a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdIdDeleteApiResponse?> ContactDeliveryAddressesContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactDeliveryAddressesContactIdIdDeleteAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdIdDeleteApiResponse> ContactDeliveryAddressesContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatContactDeliveryAddressesContactIdIdDelete(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactDeliveryAddresses/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactDeliveryAddressesContactIdIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactDeliveryAddressesContactIdIdDeleteApiResponse>();

                        ContactDeliveryAddressesContactIdIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactDeliveryAddresses/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactDeliveryAddressesContactIdIdDeleteDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnContactDeliveryAddressesContactIdIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactDeliveryAddressesContactIdIdDeleteDefaultImplementation(e, "/ContactDeliveryAddresses/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorContactDeliveryAddressesContactIdIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactDeliveryAddressesContactIdIdDeleteApiResponse"/>
        /// </summary>
        public partial class ContactDeliveryAddressesContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactDeliveryAddressesContactIdIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactDeliveryAddressesContactIdIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactDeliveryAddressesContactIdIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactDeliveryAddressesContactIdIdDeleteApiResponse(ILogger<ContactDeliveryAddressesContactIdIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactDeliveryAddressesContactIdIdPatch(ref long contactId, ref long id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateContactDeliveryAddressesContactIdIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterContactDeliveryAddressesContactIdIdPatchDefaultImplementation(IContactDeliveryAddressesContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterContactDeliveryAddressesContactIdIdPatch(ref suppressDefaultLog, apiResponseLocalVar, contactId, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterContactDeliveryAddressesContactIdIdPatch(ref bool suppressDefaultLog, IContactDeliveryAddressesContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorContactDeliveryAddressesContactIdIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactDeliveryAddressesContactIdIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorContactDeliveryAddressesContactIdIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing delivery addresses for a given contact (customer/employee/supplier identifier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) CountryCode will default to \&quot;NO\&quot; if provided as null or empty string.
        /// </summary>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="operation">Json patch document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdIdPatchApiResponse?> ContactDeliveryAddressesContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactDeliveryAddressesContactIdIdPatchAsync(contactId, id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing delivery addresses for a given contact (customer/employee/supplier identifier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) CountryCode will default to \&quot;NO\&quot; if provided as null or empty string.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="id">Id of the contact delivery address</param>
        /// <param name="operation">Json patch document (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdIdPatchApiResponse> ContactDeliveryAddressesContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactDeliveryAddressesContactIdIdPatch(operation);

                FormatContactDeliveryAddressesContactIdIdPatch(ref contactId, ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactDeliveryAddresses/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactDeliveryAddressesContactIdIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactDeliveryAddressesContactIdIdPatchApiResponse>();

                        ContactDeliveryAddressesContactIdIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactDeliveryAddresses/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactDeliveryAddressesContactIdIdPatchDefaultImplementation(apiResponseLocalVar, contactId, id, operation);

                        Events.ExecuteOnContactDeliveryAddressesContactIdIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactDeliveryAddressesContactIdIdPatchDefaultImplementation(e, "/ContactDeliveryAddresses/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id, operation);
                Events.ExecuteOnErrorContactDeliveryAddressesContactIdIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactDeliveryAddressesContactIdIdPatchApiResponse"/>
        /// </summary>
        public partial class ContactDeliveryAddressesContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactDeliveryAddressesContactIdIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactDeliveryAddressesContactIdIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactDeliveryAddressesContactIdIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactDeliveryAddressesContactIdIdPatchApiResponse(ILogger<ContactDeliveryAddressesContactIdIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactDeliveryAddressDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactDeliveryAddressDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactDeliveryAddressDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactDeliveryAddressesContactIdPost(ref long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactDeliveryAddressPostDto"></param>
        /// <returns></returns>
        private void ValidateContactDeliveryAddressesContactIdPost(Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto)
        {
            if (contactDeliveryAddressPostDto.IsSet && contactDeliveryAddressPostDto.Value == null)
                throw new ArgumentNullException(nameof(contactDeliveryAddressPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactDeliveryAddressPostDto"></param>
        private void AfterContactDeliveryAddressesContactIdPostDefaultImplementation(IContactDeliveryAddressesContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto)
        {
            bool suppressDefaultLog = false;
            AfterContactDeliveryAddressesContactIdPost(ref suppressDefaultLog, apiResponseLocalVar, contactId, contactDeliveryAddressPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactDeliveryAddressPostDto"></param>
        partial void AfterContactDeliveryAddressesContactIdPost(ref bool suppressDefaultLog, IContactDeliveryAddressesContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactDeliveryAddressPostDto"></param>
        private void OnErrorContactDeliveryAddressesContactIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactDeliveryAddressesContactIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, contactDeliveryAddressPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactDeliveryAddressPostDto"></param>
        partial void OnErrorContactDeliveryAddressesContactIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto);

        /// <summary>
        /// Creates a delivery address for a given contact (customer/employee/supplier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) CountryCode must be a valid ISO 3166-1 alfa-2 code if provided. If not CountryCode is provided, it will default to \&quot;NO\&quot;.
        /// </summary>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="contactDeliveryAddressPostDto">A contact delivery address post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdPostApiResponse?> ContactDeliveryAddressesContactIdPostOrDefaultAsync(long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactDeliveryAddressesContactIdPostAsync(contactId, contactDeliveryAddressPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates a delivery address for a given contact (customer/employee/supplier). (Auth roles: ContactDeliveryAddress_Full, Customer_Full, Supplier_Full, Employee_Full) CountryCode must be a valid ISO 3166-1 alfa-2 code if provided. If not CountryCode is provided, it will default to \&quot;NO\&quot;.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact</param>
        /// <param name="contactDeliveryAddressPostDto">A contact delivery address post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesContactIdPostApiResponse> ContactDeliveryAddressesContactIdPostAsync(long contactId, Option<ContactDeliveryAddressPostDto> contactDeliveryAddressPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactDeliveryAddressesContactIdPost(contactDeliveryAddressPostDto);

                FormatContactDeliveryAddressesContactIdPost(ref contactId, contactDeliveryAddressPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactDeliveryAddresses/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    if (contactDeliveryAddressPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (contactDeliveryAddressPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactDeliveryAddressPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactDeliveryAddressesContactIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactDeliveryAddressesContactIdPostApiResponse>();

                        ContactDeliveryAddressesContactIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactDeliveryAddresses/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactDeliveryAddressesContactIdPostDefaultImplementation(apiResponseLocalVar, contactId, contactDeliveryAddressPostDto);

                        Events.ExecuteOnContactDeliveryAddressesContactIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactDeliveryAddressesContactIdPostDefaultImplementation(e, "/ContactDeliveryAddresses/{contactId}", uriBuilderLocalVar.Path, contactId, contactDeliveryAddressPostDto);
                Events.ExecuteOnErrorContactDeliveryAddressesContactIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactDeliveryAddressesContactIdPostApiResponse"/>
        /// </summary>
        public partial class ContactDeliveryAddressesContactIdPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactDeliveryAddressesContactIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactDeliveryAddressesContactIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactDeliveryAddressesContactIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactDeliveryAddressesContactIdPostApiResponse(ILogger<ContactDeliveryAddressesContactIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactDeliveryAddressDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactDeliveryAddressDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactDeliveryAddressDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactDeliveryAddressesGet(ref Option<string> contactIds, ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<string> externalCodes, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactIds"></param>
        /// <param name="externalCodes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateContactDeliveryAddressesGet(Option<string> contactIds, Option<string> externalCodes, Option<ResourceParameters> resourceParameter)
        {
            if (contactIds.IsSet && contactIds.Value == null)
                throw new ArgumentNullException(nameof(contactIds));

            if (externalCodes.IsSet && externalCodes.Value == null)
                throw new ArgumentNullException(nameof(externalCodes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void AfterContactDeliveryAddressesGetDefaultImplementation(IContactDeliveryAddressesGetApiResponse apiResponseLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterContactDeliveryAddressesGet(ref suppressDefaultLog, apiResponseLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterContactDeliveryAddressesGet(ref bool suppressDefaultLog, IContactDeliveryAddressesGetApiResponse apiResponseLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorContactDeliveryAddressesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactDeliveryAddressesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorContactDeliveryAddressesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the delivery addresses for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) Gets the delivery addresses for a given contact (customer/employee/supplier identifier).  The common use case of an delivery address is to set it on sales orders for customers.
        /// </summary>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; created timestamp property.                  This filtering will return all addresses with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact delivery address external codes.  Separate by comma to filter on multiple external codes. If filterString is null or whitespace, query is returned as is. Case insensitive, ie. ABC &#x3D;&#x3D; abc. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; last changed timestamp property.                  This filtering will return all contact delivery addresses with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesGetApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesGetApiResponse?> ContactDeliveryAddressesGetOrDefaultAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactDeliveryAddressesGetAsync(contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the delivery addresses for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) Gets the delivery addresses for a given contact (customer/employee/supplier identifier).  The common use case of an delivery address is to set it on sales orders for customers.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; created timestamp property.                  This filtering will return all addresses with a created timestamp greater than the timestamp provided.                  Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact delivery address external codes.  Separate by comma to filter on multiple external codes. If filterString is null or whitespace, query is returned as is. Case insensitive, ie. ABC &#x3D;&#x3D; abc. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact delivery address&#39; last changed timestamp property.                  This filtering will return all contact delivery addresses with a last changed timestamp greater than the timestamp provided.                  Can be used when polling for new and/or changed entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactDeliveryAddressesGetApiResponse"/>&gt;</returns>
        public async Task<IContactDeliveryAddressesGetApiResponse> ContactDeliveryAddressesGetAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactDeliveryAddressesGet(contactIds, externalCodes, resourceParameter);

                FormatContactDeliveryAddressesGet(ref contactIds, ref createdDateTimeOffsetGreaterThan, ref externalCodes, ref lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactDeliveryAddresses";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (contactIds.IsSet)
                        parseQueryStringLocalVar["contactIds"] = ClientUtils.ParameterToString(contactIds.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (externalCodes.IsSet)
                        parseQueryStringLocalVar["externalCodes"] = ClientUtils.ParameterToString(externalCodes.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactDeliveryAddressesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactDeliveryAddressesGetApiResponse>();

                        ContactDeliveryAddressesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactDeliveryAddresses", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactDeliveryAddressesGetDefaultImplementation(apiResponseLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                        Events.ExecuteOnContactDeliveryAddressesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactDeliveryAddressesGetDefaultImplementation(e, "/ContactDeliveryAddresses", uriBuilderLocalVar.Path, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
                Events.ExecuteOnErrorContactDeliveryAddressesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactDeliveryAddressesGetApiResponse"/>
        /// </summary>
        public partial class ContactDeliveryAddressesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactDeliveryAddressesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactDeliveryAddressesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactDeliveryAddressesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactDeliveryAddressesGetApiResponse(ILogger<ContactDeliveryAddressesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ContactDeliveryAddressDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ContactDeliveryAddressDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ContactDeliveryAddressDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactDeliveryAddressById(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterGetContactDeliveryAddressByIdDefaultImplementation(IGetContactDeliveryAddressByIdApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetContactDeliveryAddressById(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterGetContactDeliveryAddressById(ref bool suppressDefaultLog, IGetContactDeliveryAddressByIdApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorGetContactDeliveryAddressByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactDeliveryAddressById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorGetContactDeliveryAddressById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Gets a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) 
        /// </summary>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of a delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactDeliveryAddressByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactDeliveryAddressByIdApiResponse?> GetContactDeliveryAddressByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactDeliveryAddressByIdAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a delivery address by id for a given contact (Auth roles: ContactDeliveryAddress, ContactDeliveryAddress_Full, Customer, Customer_Full, Supplier, Supplier_Full, Employee, Employee_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The id of the contact</param>
        /// <param name="id">The id of a delivery address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactDeliveryAddressByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactDeliveryAddressByIdApiResponse> GetContactDeliveryAddressByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetContactDeliveryAddressById(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactDeliveryAddresses/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactDeliveryAddressByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactDeliveryAddressByIdApiResponse>();

                        GetContactDeliveryAddressByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactDeliveryAddresses/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactDeliveryAddressByIdDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnGetContactDeliveryAddressById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactDeliveryAddressByIdDefaultImplementation(e, "/ContactDeliveryAddresses/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorGetContactDeliveryAddressById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactDeliveryAddressByIdApiResponse"/>
        /// </summary>
        public partial class GetContactDeliveryAddressByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetContactDeliveryAddressByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactDeliveryAddressByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactDeliveryAddressByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactDeliveryAddressByIdApiResponse(ILogger<GetContactDeliveryAddressByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactDeliveryAddressDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactDeliveryAddressDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactDeliveryAddressDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
