// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContactPersonsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContactPersonsApiEvents Events { get; }

        /// <summary>
        /// Deletes a contact person by ID. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of contact (customer or supplier)</param>
        /// <param name="id">Id of contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdDeleteApiResponse"/>&gt;</returns>
        Task<IContactPersonsContactIdIdDeleteApiResponse> ContactPersonsContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a contact person by ID. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">Id of contact (customer or supplier)</param>
        /// <param name="id">Id of contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdDeleteApiResponse"/>?&gt;</returns>
        Task<IContactPersonsContactIdIdDeleteApiResponse?> ContactPersonsContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact the ContactPerson belongs to</param>
        /// <param name="id">Id of the ContactPerson</param>
        /// <param name="operation">JsonPatchDocument (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdPatchApiResponse"/>&gt;</returns>
        Task<IContactPersonsContactIdIdPatchApiResponse> ContactPersonsContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">Id of the contact the ContactPerson belongs to</param>
        /// <param name="id">Id of the ContactPerson</param>
        /// <param name="operation">JsonPatchDocument (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdPatchApiResponse"/>?&gt;</returns>
        Task<IContactPersonsContactIdIdPatchApiResponse?> ContactPersonsContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="contactPersonPostDto">A contact person post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdPostApiResponse"/>&gt;</returns>
        Task<IContactPersonsContactIdPostApiResponse> ContactPersonsContactIdPostAsync(long contactId, Option<ContactPersonPostDto> contactPersonPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="contactPersonPostDto">A contact person post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdPostApiResponse"/>?&gt;</returns>
        Task<IContactPersonsContactIdPostApiResponse?> ContactPersonsContactIdPostOrDefaultAsync(long contactId, Option<ContactPersonPostDto> contactPersonPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the contact persons associated with a given contact. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// Gets the contact persons associated with a given contact (customer/supplier identifier).              Contact persons are not available for employee contacts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact person created timestamp property.              This filtering will return all contact persons with a created timestamp greater than the timestamp provided.              Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact person external codes. SearchString should be separated by comma.              If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact person last changed timestamp property.              This filtering will return all contact persons with a last changed timestamp greater than the timestamp provided.Can be used when polling for new and/or changed entries from Go.              Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsGetApiResponse"/>&gt;</returns>
        Task<IContactPersonsGetApiResponse> ContactPersonsGetAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the contact persons associated with a given contact. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// Gets the contact persons associated with a given contact (customer/supplier identifier).              Contact persons are not available for employee contacts
        /// </remarks>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact person created timestamp property.              This filtering will return all contact persons with a created timestamp greater than the timestamp provided.              Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact person external codes. SearchString should be separated by comma.              If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact person last changed timestamp property.              This filtering will return all contact persons with a last changed timestamp greater than the timestamp provided.Can be used when polling for new and/or changed entries from Go.              Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsGetApiResponse"/>?&gt;</returns>
        Task<IContactPersonsGetApiResponse?> ContactPersonsGetOrDefaultAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact person by id. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="id">Id of the contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonByIdApiResponse"/>&gt;</returns>
        Task<IGetContactPersonByIdApiResponse> GetContactPersonByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a contact person by id. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="id">Id of the contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonByIdApiResponse"/>?&gt;</returns>
        Task<IGetContactPersonByIdApiResponse?> GetContactPersonByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IContactPersonsContactIdIdDeleteApiResponse"/>
    /// </summary>
    public interface IContactPersonsContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactPersonsContactIdIdPatchApiResponse"/>
    /// </summary>
    public interface IContactPersonsContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactPersonDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactPersonsContactIdPostApiResponse"/>
    /// </summary>
    public interface IContactPersonsContactIdPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ContactPersonDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IContactPersonsGetApiResponse"/>
    /// </summary>
    public interface IContactPersonsGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<ContactPersonDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetContactPersonByIdApiResponse"/>
    /// </summary>
    public interface IGetContactPersonByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ContactPersonDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContactPersonsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactPersonsContactIdIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactPersonsContactIdIdDelete;

        internal void ExecuteOnContactPersonsContactIdIdDelete(ContactPersonsApi.ContactPersonsContactIdIdDeleteApiResponse apiResponse)
        {
            OnContactPersonsContactIdIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactPersonsContactIdIdDelete(Exception exception)
        {
            OnErrorContactPersonsContactIdIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactPersonsContactIdIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactPersonsContactIdIdPatch;

        internal void ExecuteOnContactPersonsContactIdIdPatch(ContactPersonsApi.ContactPersonsContactIdIdPatchApiResponse apiResponse)
        {
            OnContactPersonsContactIdIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactPersonsContactIdIdPatch(Exception exception)
        {
            OnErrorContactPersonsContactIdIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactPersonsContactIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactPersonsContactIdPost;

        internal void ExecuteOnContactPersonsContactIdPost(ContactPersonsApi.ContactPersonsContactIdPostApiResponse apiResponse)
        {
            OnContactPersonsContactIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactPersonsContactIdPost(Exception exception)
        {
            OnErrorContactPersonsContactIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnContactPersonsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorContactPersonsGet;

        internal void ExecuteOnContactPersonsGet(ContactPersonsApi.ContactPersonsGetApiResponse apiResponse)
        {
            OnContactPersonsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorContactPersonsGet(Exception exception)
        {
            OnErrorContactPersonsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContactPersonById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContactPersonById;

        internal void ExecuteOnGetContactPersonById(ContactPersonsApi.GetContactPersonByIdApiResponse apiResponse)
        {
            OnGetContactPersonById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContactPersonById(Exception exception)
        {
            OnErrorGetContactPersonById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContactPersonsApi : IContactPersonsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContactPersonsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContactPersonsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPersonsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactPersonsApi(ILogger<ContactPersonsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContactPersonsApiEvents contactPersonsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContactPersonsApi>();
            HttpClient = httpClient;
            Events = contactPersonsApiEvents;
        }

        partial void FormatContactPersonsContactIdIdDelete(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterContactPersonsContactIdIdDeleteDefaultImplementation(IContactPersonsContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterContactPersonsContactIdIdDelete(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterContactPersonsContactIdIdDelete(ref bool suppressDefaultLog, IContactPersonsContactIdIdDeleteApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorContactPersonsContactIdIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactPersonsContactIdIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorContactPersonsContactIdIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Deletes a contact person by ID. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <param name="contactId">Id of contact (customer or supplier)</param>
        /// <param name="id">Id of contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdIdDeleteApiResponse?> ContactPersonsContactIdIdDeleteOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactPersonsContactIdIdDeleteAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a contact person by ID. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of contact (customer or supplier)</param>
        /// <param name="id">Id of contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdIdDeleteApiResponse> ContactPersonsContactIdIdDeleteAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatContactPersonsContactIdIdDelete(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactPersons/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactPersonsContactIdIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactPersonsContactIdIdDeleteApiResponse>();

                        ContactPersonsContactIdIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactPersons/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactPersonsContactIdIdDeleteDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnContactPersonsContactIdIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactPersonsContactIdIdDeleteDefaultImplementation(e, "/ContactPersons/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorContactPersonsContactIdIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactPersonsContactIdIdDeleteApiResponse"/>
        /// </summary>
        public partial class ContactPersonsContactIdIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactPersonsContactIdIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactPersonsContactIdIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactPersonsContactIdIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactPersonsContactIdIdDeleteApiResponse(ILogger<ContactPersonsContactIdIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactPersonsContactIdIdPatch(ref long contactId, ref long id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateContactPersonsContactIdIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterContactPersonsContactIdIdPatchDefaultImplementation(IContactPersonsContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterContactPersonsContactIdIdPatch(ref suppressDefaultLog, apiResponseLocalVar, contactId, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterContactPersonsContactIdIdPatch(ref bool suppressDefaultLog, IContactPersonsContactIdIdPatchApiResponse apiResponseLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorContactPersonsContactIdIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactPersonsContactIdIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorContactPersonsContactIdIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Update a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <param name="contactId">Id of the contact the ContactPerson belongs to</param>
        /// <param name="id">Id of the ContactPerson</param>
        /// <param name="operation">JsonPatchDocument (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdIdPatchApiResponse?> ContactPersonsContactIdIdPatchOrDefaultAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactPersonsContactIdIdPatchAsync(contactId, id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact the ContactPerson belongs to</param>
        /// <param name="id">Id of the ContactPerson</param>
        /// <param name="operation">JsonPatchDocument (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdIdPatchApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdIdPatchApiResponse> ContactPersonsContactIdIdPatchAsync(long contactId, long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactPersonsContactIdIdPatch(operation);

                FormatContactPersonsContactIdIdPatch(ref contactId, ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactPersons/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactPersonsContactIdIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactPersonsContactIdIdPatchApiResponse>();

                        ContactPersonsContactIdIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactPersons/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactPersonsContactIdIdPatchDefaultImplementation(apiResponseLocalVar, contactId, id, operation);

                        Events.ExecuteOnContactPersonsContactIdIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactPersonsContactIdIdPatchDefaultImplementation(e, "/ContactPersons/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id, operation);
                Events.ExecuteOnErrorContactPersonsContactIdIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactPersonsContactIdIdPatchApiResponse"/>
        /// </summary>
        public partial class ContactPersonsContactIdIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactPersonsContactIdIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactPersonsContactIdIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactPersonsContactIdIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactPersonsContactIdIdPatchApiResponse(ILogger<ContactPersonsContactIdIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactPersonDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactPersonDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactPersonDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactPersonsContactIdPost(ref long contactId, Option<ContactPersonPostDto> contactPersonPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactPersonPostDto"></param>
        /// <returns></returns>
        private void ValidateContactPersonsContactIdPost(Option<ContactPersonPostDto> contactPersonPostDto)
        {
            if (contactPersonPostDto.IsSet && contactPersonPostDto.Value == null)
                throw new ArgumentNullException(nameof(contactPersonPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonPostDto"></param>
        private void AfterContactPersonsContactIdPostDefaultImplementation(IContactPersonsContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactPersonPostDto> contactPersonPostDto)
        {
            bool suppressDefaultLog = false;
            AfterContactPersonsContactIdPost(ref suppressDefaultLog, apiResponseLocalVar, contactId, contactPersonPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonPostDto"></param>
        partial void AfterContactPersonsContactIdPost(ref bool suppressDefaultLog, IContactPersonsContactIdPostApiResponse apiResponseLocalVar, long contactId, Option<ContactPersonPostDto> contactPersonPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonPostDto"></param>
        private void OnErrorContactPersonsContactIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactPersonPostDto> contactPersonPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactPersonsContactIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, contactPersonPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="contactPersonPostDto"></param>
        partial void OnErrorContactPersonsContactIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, Option<ContactPersonPostDto> contactPersonPostDto);

        /// <summary>
        /// Create a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="contactPersonPostDto">A contact person post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdPostApiResponse?> ContactPersonsContactIdPostOrDefaultAsync(long contactId, Option<ContactPersonPostDto> contactPersonPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactPersonsContactIdPostAsync(contactId, contactPersonPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a contact person. (Auth roles: ContactPerson_Full, Customer_Full, Supplier_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="contactPersonPostDto">A contact person post dto (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsContactIdPostApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsContactIdPostApiResponse> ContactPersonsContactIdPostAsync(long contactId, Option<ContactPersonPostDto> contactPersonPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactPersonsContactIdPost(contactPersonPostDto);

                FormatContactPersonsContactIdPost(ref contactId, contactPersonPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactPersons/{contactId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));

                    if (contactPersonPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (contactPersonPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(contactPersonPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactPersonsContactIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactPersonsContactIdPostApiResponse>();

                        ContactPersonsContactIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactPersons/{contactId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactPersonsContactIdPostDefaultImplementation(apiResponseLocalVar, contactId, contactPersonPostDto);

                        Events.ExecuteOnContactPersonsContactIdPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactPersonsContactIdPostDefaultImplementation(e, "/ContactPersons/{contactId}", uriBuilderLocalVar.Path, contactId, contactPersonPostDto);
                Events.ExecuteOnErrorContactPersonsContactIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactPersonsContactIdPostApiResponse"/>
        /// </summary>
        public partial class ContactPersonsContactIdPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactPersonsContactIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactPersonsContactIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactPersonsContactIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactPersonsContactIdPostApiResponse(ILogger<ContactPersonsContactIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactPersonDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactPersonDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactPersonDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatContactPersonsGet(ref Option<string> contactIds, ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<string> externalCodes, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="contactIds"></param>
        /// <param name="externalCodes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateContactPersonsGet(Option<string> contactIds, Option<string> externalCodes, Option<ResourceParameters> resourceParameter)
        {
            if (contactIds.IsSet && contactIds.Value == null)
                throw new ArgumentNullException(nameof(contactIds));

            if (externalCodes.IsSet && externalCodes.Value == null)
                throw new ArgumentNullException(nameof(externalCodes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void AfterContactPersonsGetDefaultImplementation(IContactPersonsGetApiResponse apiResponseLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterContactPersonsGet(ref suppressDefaultLog, apiResponseLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterContactPersonsGet(ref bool suppressDefaultLog, IContactPersonsGetApiResponse apiResponseLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorContactPersonsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContactPersonsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactIds"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="externalCodes"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorContactPersonsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> contactIds, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> externalCodes, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the contact persons associated with a given contact. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full) Gets the contact persons associated with a given contact (customer/supplier identifier).              Contact persons are not available for employee contacts
        /// </summary>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact person created timestamp property.              This filtering will return all contact persons with a created timestamp greater than the timestamp provided.              Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact person external codes. SearchString should be separated by comma.              If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact person last changed timestamp property.              This filtering will return all contact persons with a last changed timestamp greater than the timestamp provided.Can be used when polling for new and/or changed entries from Go.              Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsGetApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsGetApiResponse?> ContactPersonsGetOrDefaultAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContactPersonsGetAsync(contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the contact persons associated with a given contact. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full) Gets the contact persons associated with a given contact (customer/supplier identifier).              Contact persons are not available for employee contacts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactIds">Filter by contact IDs. Separate by comma to filter on multiple contact IDs. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter by the contact person created timestamp property.              This filtering will return all contact persons with a created timestamp greater than the timestamp provided.              Can be used when polling for new entries from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="externalCodes">Filter by contact person external codes. SearchString should be separated by comma.              If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter by the contact person last changed timestamp property.              This filtering will return all contact persons with a last changed timestamp greater than the timestamp provided.Can be used when polling for new and/or changed entries from Go.              Timestamp not inclusive. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContactPersonsGetApiResponse"/>&gt;</returns>
        public async Task<IContactPersonsGetApiResponse> ContactPersonsGetAsync(Option<string> contactIds = default, Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> externalCodes = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateContactPersonsGet(contactIds, externalCodes, resourceParameter);

                FormatContactPersonsGet(ref contactIds, ref createdDateTimeOffsetGreaterThan, ref externalCodes, ref lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactPersons";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (contactIds.IsSet)
                        parseQueryStringLocalVar["contactIds"] = ClientUtils.ParameterToString(contactIds.Value);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (externalCodes.IsSet)
                        parseQueryStringLocalVar["externalCodes"] = ClientUtils.ParameterToString(externalCodes.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ContactPersonsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContactPersonsGetApiResponse>();

                        ContactPersonsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactPersons", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterContactPersonsGetDefaultImplementation(apiResponseLocalVar, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);

                        Events.ExecuteOnContactPersonsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContactPersonsGetDefaultImplementation(e, "/ContactPersons", uriBuilderLocalVar.Path, contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
                Events.ExecuteOnErrorContactPersonsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ContactPersonsGetApiResponse"/>
        /// </summary>
        public partial class ContactPersonsGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IContactPersonsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContactPersonsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ContactPersonsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContactPersonsGetApiResponse(ILogger<ContactPersonsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ContactPersonDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ContactPersonDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ContactPersonDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContactPersonById(ref long contactId, ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void AfterGetContactPersonByIdDefaultImplementation(IGetContactPersonByIdApiResponse apiResponseLocalVar, long contactId, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetContactPersonById(ref suppressDefaultLog, apiResponseLocalVar, contactId, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void AfterGetContactPersonById(ref bool suppressDefaultLog, IGetContactPersonByIdApiResponse apiResponseLocalVar, long contactId, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        private void OnErrorGetContactPersonByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContactPersonById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, contactId, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="contactId"></param>
        /// <param name="id"></param>
        partial void OnErrorGetContactPersonById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long contactId, long id);

        /// <summary>
        /// Get a contact person by id. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full) 
        /// </summary>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="id">Id of the contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactPersonByIdApiResponse?> GetContactPersonByIdOrDefaultAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContactPersonByIdAsync(contactId, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a contact person by id. (Auth roles: ContactPerson, ContactPerson_Full, Customer, Customer_Full, Supplier, Supplier_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Id of the contact (Customer or Supplier)</param>
        /// <param name="id">Id of the contact person</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContactPersonByIdApiResponse"/>&gt;</returns>
        public async Task<IGetContactPersonByIdApiResponse> GetContactPersonByIdAsync(long contactId, long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetContactPersonById(ref contactId, ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/ContactPersons/{contactId}/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BcontactId%7D", Uri.EscapeDataString(contactId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContactPersonByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContactPersonByIdApiResponse>();

                        GetContactPersonByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ContactPersons/{contactId}/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContactPersonByIdDefaultImplementation(apiResponseLocalVar, contactId, id);

                        Events.ExecuteOnGetContactPersonById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContactPersonByIdDefaultImplementation(e, "/ContactPersons/{contactId}/{id}", uriBuilderLocalVar.Path, contactId, id);
                Events.ExecuteOnErrorGetContactPersonById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContactPersonByIdApiResponse"/>
        /// </summary>
        public partial class GetContactPersonByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetContactPersonByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContactPersonByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContactPersonByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContactPersonByIdApiResponse(ILogger<GetContactPersonByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ContactPersonDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ContactPersonDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ContactPersonDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
