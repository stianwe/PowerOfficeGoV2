// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IProjectsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ProjectsApiEvents Events { get; }

        /// <summary>
        /// Get an existing project by it&#39;s id. (Auth roles: Project,Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectByIdApiResponse"/>&gt;</returns>
        Task<IGetProjectByIdApiResponse> GetProjectByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an existing project by it&#39;s id. (Auth roles: Project,Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectByIdApiResponse"/>?&gt;</returns>
        Task<IGetProjectByIdApiResponse?> GetProjectByIdOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the projects available on the client. Multiple filtering options. (Auth roles: Project,Project_Full)
        /// </summary>
        /// <remarks>
        /// A project may be a standalone project or a subproject.  Subprojects will have the code notation code of main project.code of subproject.  Example: A project with code 10 have a subproject with code 2 in the user interface.  The code of the subprojcet when retrieved from the API will be 10.2 (and because of this, \&quot;.\&quot; (dot) is reserved and cannot be used in project codes)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter on the created timestamp property. This filtering will return all projects with a created timestamp greater than the timestamp provided. Can be used when polling for new project from Go. Date not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. A project may only be assigned to one customer, and this search-string will return all projects related to the specified customer numbers provided.                  Note that sub-projects will inherit the main projects&#39; customer, unless specified otherwise on the sub-project.                  If inherited, the sub-project customer number will return null, so it is preferable to use the filter includeSubProject in conjunction with this customer number filtering.                  Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter projects on department codes. Separate by comma to filter on multiple codes.                  If blank, all projects with or without department codes are returned (no filter). Note that subprojects will inherit the main project department, unless specified otherwise on the subproject.                  If inherited, the subproject department code will return null, so it is preferable to use the filter includeSubProject in conjunction with this department code filtering (optional)</param>
        /// <param name="excludeArchivedProject">Option to exclude archivedprojects. Default is false, meaning that all projects are returned if not set. (optional)</param>
        /// <param name="includeSubProjects">Include Sub-project(s) for specified projectCodes. If projectCodes is null, all (sub)projects are included (regardless of this variable). If projectCodes is set to subproject(s), this variable have no effect for those projects. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter projects on the last changed timestamp property. This filtering will return all projects with a last changed timestamp greater than the timestamp provided. Date not inclusive. (optional)</param>
        /// <param name="name">Filter by the name of projects. Will return projects that contains the searchstring. (optional)</param>
        /// <param name="projectBillingMethod">Filter by project billing method. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. SearchString should be in the form of \&quot;1, ABC, 10B\&quot; (codes separated by comma). If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="projectManagerEmployeeNos">Filter by project managers via their employee numbers. SearchString should be in the form of \&quot;1-5, 8, 25-\&quot; where values from 1 to 15, 8 and all over 25 (inclusive) will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="status">Filter by project status. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiResponse"/>&gt;</returns>
        Task<IGetProjectsApiResponse> GetProjectsAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> excludeArchivedProject = default, Option<bool> includeSubProjects = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<string> name = default, Option<ProjectBillingMethod> projectBillingMethod = default, Option<string> projectCodes = default, Option<string> projectManagerEmployeeNos = default, Option<ProjectStatusType> status = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the projects available on the client. Multiple filtering options. (Auth roles: Project,Project_Full)
        /// </summary>
        /// <remarks>
        /// A project may be a standalone project or a subproject.  Subprojects will have the code notation code of main project.code of subproject.  Example: A project with code 10 have a subproject with code 2 in the user interface.  The code of the subprojcet when retrieved from the API will be 10.2 (and because of this, \&quot;.\&quot; (dot) is reserved and cannot be used in project codes)
        /// </remarks>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter on the created timestamp property. This filtering will return all projects with a created timestamp greater than the timestamp provided. Can be used when polling for new project from Go. Date not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. A project may only be assigned to one customer, and this search-string will return all projects related to the specified customer numbers provided.                  Note that sub-projects will inherit the main projects&#39; customer, unless specified otherwise on the sub-project.                  If inherited, the sub-project customer number will return null, so it is preferable to use the filter includeSubProject in conjunction with this customer number filtering.                  Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter projects on department codes. Separate by comma to filter on multiple codes.                  If blank, all projects with or without department codes are returned (no filter). Note that subprojects will inherit the main project department, unless specified otherwise on the subproject.                  If inherited, the subproject department code will return null, so it is preferable to use the filter includeSubProject in conjunction with this department code filtering (optional)</param>
        /// <param name="excludeArchivedProject">Option to exclude archivedprojects. Default is false, meaning that all projects are returned if not set. (optional)</param>
        /// <param name="includeSubProjects">Include Sub-project(s) for specified projectCodes. If projectCodes is null, all (sub)projects are included (regardless of this variable). If projectCodes is set to subproject(s), this variable have no effect for those projects. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter projects on the last changed timestamp property. This filtering will return all projects with a last changed timestamp greater than the timestamp provided. Date not inclusive. (optional)</param>
        /// <param name="name">Filter by the name of projects. Will return projects that contains the searchstring. (optional)</param>
        /// <param name="projectBillingMethod">Filter by project billing method. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. SearchString should be in the form of \&quot;1, ABC, 10B\&quot; (codes separated by comma). If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="projectManagerEmployeeNos">Filter by project managers via their employee numbers. SearchString should be in the form of \&quot;1-5, 8, 25-\&quot; where values from 1 to 15, 8 and all over 25 (inclusive) will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="status">Filter by project status. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiResponse"/>?&gt;</returns>
        Task<IGetProjectsApiResponse?> GetProjectsOrDefaultAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> excludeArchivedProject = default, Option<bool> includeSubProjects = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<string> name = default, Option<ProjectBillingMethod> projectBillingMethod = default, Option<string> projectCodes = default, Option<string> projectManagerEmployeeNos = default, Option<ProjectStatusType> status = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a project entity with a given id. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdDeleteApiResponse"/>&gt;</returns>
        Task<IProjectsIdDeleteApiResponse> ProjectsIdDeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a project entity with a given id. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the department to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdDeleteApiResponse"/>?&gt;</returns>
        Task<IProjectsIdDeleteApiResponse?> ProjectsIdDeleteOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make changes to an existing project. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the project</param>
        /// <param name="operation">JSON Patch structure for updating a Project. See ProjectPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdPatchApiResponse"/>&gt;</returns>
        Task<IProjectsIdPatchApiResponse> ProjectsIdPatchAsync(long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make changes to an existing project. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the project</param>
        /// <param name="operation">JSON Patch structure for updating a Project. See ProjectPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdPatchApiResponse"/>?&gt;</returns>
        Task<IProjectsIdPatchApiResponse?> ProjectsIdPatchOrDefaultAsync(long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new project entity on the client. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// Create a new project entity on the client. To create a subproject, the parentProjectCode property must be set ass well and equal to the main project that the subproject will be a part of.  The response from the POST will return the notation code of main project.code of subproject as the code of the created subproject.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsPostApiResponse"/>&gt;</returns>
        Task<IProjectsPostApiResponse> ProjectsPostAsync(Option<ProjectPostDto> projectPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new project entity on the client. (Auth roles: Project_Full)
        /// </summary>
        /// <remarks>
        /// Create a new project entity on the client. To create a subproject, the parentProjectCode property must be set ass well and equal to the main project that the subproject will be a part of.  The response from the POST will return the notation code of main project.code of subproject as the code of the created subproject.
        /// </remarks>
        /// <param name="projectPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsPostApiResponse"/>?&gt;</returns>
        Task<IProjectsPostApiResponse?> ProjectsPostOrDefaultAsync(Option<ProjectPostDto> projectPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetProjectByIdApiResponse"/>
    /// </summary>
    public interface IGetProjectByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.ProjectDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetProjectsApiResponse"/>
    /// </summary>
    public interface IGetProjectsApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<ProjectDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IProjectsIdDeleteApiResponse"/>
    /// </summary>
    public interface IProjectsIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IProjectsIdPatchApiResponse"/>
    /// </summary>
    public interface IProjectsIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IProjectsPostApiResponse"/>
    /// </summary>
    public interface IProjectsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.ProjectDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ProjectsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProjectById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProjectById;

        internal void ExecuteOnGetProjectById(ProjectsApi.GetProjectByIdApiResponse apiResponse)
        {
            OnGetProjectById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProjectById(Exception exception)
        {
            OnErrorGetProjectById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProjects;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProjects;

        internal void ExecuteOnGetProjects(ProjectsApi.GetProjectsApiResponse apiResponse)
        {
            OnGetProjects?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProjects(Exception exception)
        {
            OnErrorGetProjects?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProjectsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProjectsIdDelete;

        internal void ExecuteOnProjectsIdDelete(ProjectsApi.ProjectsIdDeleteApiResponse apiResponse)
        {
            OnProjectsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProjectsIdDelete(Exception exception)
        {
            OnErrorProjectsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProjectsIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProjectsIdPatch;

        internal void ExecuteOnProjectsIdPatch(ProjectsApi.ProjectsIdPatchApiResponse apiResponse)
        {
            OnProjectsIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProjectsIdPatch(Exception exception)
        {
            OnErrorProjectsIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProjectsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProjectsPost;

        internal void ExecuteOnProjectsPost(ProjectsApi.ProjectsPostApiResponse apiResponse)
        {
            OnProjectsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProjectsPost(Exception exception)
        {
            OnErrorProjectsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ProjectsApi : IProjectsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ProjectsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ProjectsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(ILogger<ProjectsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ProjectsApiEvents projectsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ProjectsApi>();
            HttpClient = httpClient;
            Events = projectsApiEvents;
        }

        partial void FormatGetProjectById(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetProjectByIdDefaultImplementation(IGetProjectByIdApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterGetProjectById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetProjectById(ref bool suppressDefaultLog, IGetProjectByIdApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetProjectByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProjectById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetProjectById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Get an existing project by it&#39;s id. (Auth roles: Project,Project_Full) 
        /// </summary>
        /// <param name="id">The id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectByIdApiResponse"/>&gt;</returns>
        public async Task<IGetProjectByIdApiResponse?> GetProjectByIdOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProjectByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an existing project by it&#39;s id. (Auth roles: Project,Project_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the project</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectByIdApiResponse"/>&gt;</returns>
        public async Task<IGetProjectByIdApiResponse> GetProjectByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetProjectById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Projects/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProjectByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProjectByIdApiResponse>();

                        GetProjectByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Projects/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProjectByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetProjectById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProjectByIdDefaultImplementation(e, "/Projects/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetProjectById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProjectByIdApiResponse"/>
        /// </summary>
        public partial class GetProjectByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetProjectByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProjectByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProjectByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProjectByIdApiResponse(ILogger<GetProjectByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProjectDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProjectDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProjectDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProjects(ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<string> customerNos, ref Option<string> departmentCodes, ref Option<bool> excludeArchivedProject, ref Option<bool> includeSubProjects, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, ref Option<string> name, ref Option<ProjectBillingMethod> projectBillingMethod, ref Option<string> projectCodes, ref Option<string> projectManagerEmployeeNos, ref Option<ProjectStatusType> status, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="name"></param>
        /// <param name="projectCodes"></param>
        /// <param name="projectManagerEmployeeNos"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateGetProjects(Option<string> customerNos, Option<string> departmentCodes, Option<string> name, Option<string> projectCodes, Option<string> projectManagerEmployeeNos, Option<ResourceParameters> resourceParameter)
        {
            if (customerNos.IsSet && customerNos.Value == null)
                throw new ArgumentNullException(nameof(customerNos));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (projectManagerEmployeeNos.IsSet && projectManagerEmployeeNos.Value == null)
                throw new ArgumentNullException(nameof(projectManagerEmployeeNos));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="excludeArchivedProject"></param>
        /// <param name="includeSubProjects"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="name"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="projectCodes"></param>
        /// <param name="projectManagerEmployeeNos"></param>
        /// <param name="status"></param>
        /// <param name="resourceParameter"></param>
        private void AfterGetProjectsDefaultImplementation(IGetProjectsApiResponse apiResponseLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> departmentCodes, Option<bool> excludeArchivedProject, Option<bool> includeSubProjects, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<string> name, Option<ProjectBillingMethod> projectBillingMethod, Option<string> projectCodes, Option<string> projectManagerEmployeeNos, Option<ProjectStatusType> status, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterGetProjects(ref suppressDefaultLog, apiResponseLocalVar, createdDateTimeOffsetGreaterThan, customerNos, departmentCodes, excludeArchivedProject, includeSubProjects, lastChangedDateTimeOffsetGreaterThan, name, projectBillingMethod, projectCodes, projectManagerEmployeeNos, status, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="excludeArchivedProject"></param>
        /// <param name="includeSubProjects"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="name"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="projectCodes"></param>
        /// <param name="projectManagerEmployeeNos"></param>
        /// <param name="status"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterGetProjects(ref bool suppressDefaultLog, IGetProjectsApiResponse apiResponseLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> departmentCodes, Option<bool> excludeArchivedProject, Option<bool> includeSubProjects, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<string> name, Option<ProjectBillingMethod> projectBillingMethod, Option<string> projectCodes, Option<string> projectManagerEmployeeNos, Option<ProjectStatusType> status, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="excludeArchivedProject"></param>
        /// <param name="includeSubProjects"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="name"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="projectCodes"></param>
        /// <param name="projectManagerEmployeeNos"></param>
        /// <param name="status"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorGetProjectsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> departmentCodes, Option<bool> excludeArchivedProject, Option<bool> includeSubProjects, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<string> name, Option<ProjectBillingMethod> projectBillingMethod, Option<string> projectCodes, Option<string> projectManagerEmployeeNos, Option<ProjectStatusType> status, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProjects(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createdDateTimeOffsetGreaterThan, customerNos, departmentCodes, excludeArchivedProject, includeSubProjects, lastChangedDateTimeOffsetGreaterThan, name, projectBillingMethod, projectCodes, projectManagerEmployeeNos, status, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="excludeArchivedProject"></param>
        /// <param name="includeSubProjects"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="name"></param>
        /// <param name="projectBillingMethod"></param>
        /// <param name="projectCodes"></param>
        /// <param name="projectManagerEmployeeNos"></param>
        /// <param name="status"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorGetProjects(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> departmentCodes, Option<bool> excludeArchivedProject, Option<bool> includeSubProjects, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<string> name, Option<ProjectBillingMethod> projectBillingMethod, Option<string> projectCodes, Option<string> projectManagerEmployeeNos, Option<ProjectStatusType> status, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the projects available on the client. Multiple filtering options. (Auth roles: Project,Project_Full) A project may be a standalone project or a subproject.  Subprojects will have the code notation code of main project.code of subproject.  Example: A project with code 10 have a subproject with code 2 in the user interface.  The code of the subprojcet when retrieved from the API will be 10.2 (and because of this, \&quot;.\&quot; (dot) is reserved and cannot be used in project codes)
        /// </summary>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter on the created timestamp property. This filtering will return all projects with a created timestamp greater than the timestamp provided. Can be used when polling for new project from Go. Date not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. A project may only be assigned to one customer, and this search-string will return all projects related to the specified customer numbers provided.                  Note that sub-projects will inherit the main projects&#39; customer, unless specified otherwise on the sub-project.                  If inherited, the sub-project customer number will return null, so it is preferable to use the filter includeSubProject in conjunction with this customer number filtering.                  Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter projects on department codes. Separate by comma to filter on multiple codes.                  If blank, all projects with or without department codes are returned (no filter). Note that subprojects will inherit the main project department, unless specified otherwise on the subproject.                  If inherited, the subproject department code will return null, so it is preferable to use the filter includeSubProject in conjunction with this department code filtering (optional)</param>
        /// <param name="excludeArchivedProject">Option to exclude archivedprojects. Default is false, meaning that all projects are returned if not set. (optional)</param>
        /// <param name="includeSubProjects">Include Sub-project(s) for specified projectCodes. If projectCodes is null, all (sub)projects are included (regardless of this variable). If projectCodes is set to subproject(s), this variable have no effect for those projects. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter projects on the last changed timestamp property. This filtering will return all projects with a last changed timestamp greater than the timestamp provided. Date not inclusive. (optional)</param>
        /// <param name="name">Filter by the name of projects. Will return projects that contains the searchstring. (optional)</param>
        /// <param name="projectBillingMethod">Filter by project billing method. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. SearchString should be in the form of \&quot;1, ABC, 10B\&quot; (codes separated by comma). If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="projectManagerEmployeeNos">Filter by project managers via their employee numbers. SearchString should be in the form of \&quot;1-5, 8, 25-\&quot; where values from 1 to 15, 8 and all over 25 (inclusive) will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="status">Filter by project status. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiResponse"/>&gt;</returns>
        public async Task<IGetProjectsApiResponse?> GetProjectsOrDefaultAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> excludeArchivedProject = default, Option<bool> includeSubProjects = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<string> name = default, Option<ProjectBillingMethod> projectBillingMethod = default, Option<string> projectCodes = default, Option<string> projectManagerEmployeeNos = default, Option<ProjectStatusType> status = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProjectsAsync(createdDateTimeOffsetGreaterThan, customerNos, departmentCodes, excludeArchivedProject, includeSubProjects, lastChangedDateTimeOffsetGreaterThan, name, projectBillingMethod, projectCodes, projectManagerEmployeeNos, status, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the projects available on the client. Multiple filtering options. (Auth roles: Project,Project_Full) A project may be a standalone project or a subproject.  Subprojects will have the code notation code of main project.code of subproject.  Example: A project with code 10 have a subproject with code 2 in the user interface.  The code of the subprojcet when retrieved from the API will be 10.2 (and because of this, \&quot;.\&quot; (dot) is reserved and cannot be used in project codes)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter on the created timestamp property. This filtering will return all projects with a created timestamp greater than the timestamp provided. Can be used when polling for new project from Go. Date not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. A project may only be assigned to one customer, and this search-string will return all projects related to the specified customer numbers provided.                  Note that sub-projects will inherit the main projects&#39; customer, unless specified otherwise on the sub-project.                  If inherited, the sub-project customer number will return null, so it is preferable to use the filter includeSubProject in conjunction with this customer number filtering.                  Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="departmentCodes">Filter projects on department codes. Separate by comma to filter on multiple codes.                  If blank, all projects with or without department codes are returned (no filter). Note that subprojects will inherit the main project department, unless specified otherwise on the subproject.                  If inherited, the subproject department code will return null, so it is preferable to use the filter includeSubProject in conjunction with this department code filtering (optional)</param>
        /// <param name="excludeArchivedProject">Option to exclude archivedprojects. Default is false, meaning that all projects are returned if not set. (optional)</param>
        /// <param name="includeSubProjects">Include Sub-project(s) for specified projectCodes. If projectCodes is null, all (sub)projects are included (regardless of this variable). If projectCodes is set to subproject(s), this variable have no effect for those projects. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter projects on the last changed timestamp property. This filtering will return all projects with a last changed timestamp greater than the timestamp provided. Date not inclusive. (optional)</param>
        /// <param name="name">Filter by the name of projects. Will return projects that contains the searchstring. (optional)</param>
        /// <param name="projectBillingMethod">Filter by project billing method. (optional)</param>
        /// <param name="projectCodes">Filter by project codes. SearchString should be in the form of \&quot;1, ABC, 10B\&quot; (codes separated by comma). If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="projectManagerEmployeeNos">Filter by project managers via their employee numbers. SearchString should be in the form of \&quot;1-5, 8, 25-\&quot; where values from 1 to 15, 8 and all over 25 (inclusive) will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="status">Filter by project status. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProjectsApiResponse"/>&gt;</returns>
        public async Task<IGetProjectsApiResponse> GetProjectsAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> departmentCodes = default, Option<bool> excludeArchivedProject = default, Option<bool> includeSubProjects = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<string> name = default, Option<ProjectBillingMethod> projectBillingMethod = default, Option<string> projectCodes = default, Option<string> projectManagerEmployeeNos = default, Option<ProjectStatusType> status = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProjects(customerNos, departmentCodes, name, projectCodes, projectManagerEmployeeNos, resourceParameter);

                FormatGetProjects(ref createdDateTimeOffsetGreaterThan, ref customerNos, ref departmentCodes, ref excludeArchivedProject, ref includeSubProjects, ref lastChangedDateTimeOffsetGreaterThan, ref name, ref projectBillingMethod, ref projectCodes, ref projectManagerEmployeeNos, ref status, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Projects";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (customerNos.IsSet)
                        parseQueryStringLocalVar["customerNos"] = ClientUtils.ParameterToString(customerNos.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (excludeArchivedProject.IsSet)
                        parseQueryStringLocalVar["excludeArchivedProject"] = ClientUtils.ParameterToString(excludeArchivedProject.Value);

                    if (includeSubProjects.IsSet)
                        parseQueryStringLocalVar["includeSubProjects"] = ClientUtils.ParameterToString(includeSubProjects.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (projectBillingMethod.IsSet)
                        parseQueryStringLocalVar["projectBillingMethod"] = ClientUtils.ParameterToString(projectBillingMethod.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (projectManagerEmployeeNos.IsSet)
                        parseQueryStringLocalVar["projectManagerEmployeeNos"] = ClientUtils.ParameterToString(projectManagerEmployeeNos.Value);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProjectsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProjectsApiResponse>();

                        GetProjectsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Projects", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProjectsDefaultImplementation(apiResponseLocalVar, createdDateTimeOffsetGreaterThan, customerNos, departmentCodes, excludeArchivedProject, includeSubProjects, lastChangedDateTimeOffsetGreaterThan, name, projectBillingMethod, projectCodes, projectManagerEmployeeNos, status, resourceParameter);

                        Events.ExecuteOnGetProjects(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProjectsDefaultImplementation(e, "/Projects", uriBuilderLocalVar.Path, createdDateTimeOffsetGreaterThan, customerNos, departmentCodes, excludeArchivedProject, includeSubProjects, lastChangedDateTimeOffsetGreaterThan, name, projectBillingMethod, projectCodes, projectManagerEmployeeNos, status, resourceParameter);
                Events.ExecuteOnErrorGetProjects(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProjectsApiResponse"/>
        /// </summary>
        public partial class GetProjectsApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetProjectsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProjectsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProjectsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProjectsApiResponse(ILogger<GetProjectsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ProjectDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ProjectDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ProjectDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProjectsIdDelete(ref long id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterProjectsIdDeleteDefaultImplementation(IProjectsIdDeleteApiResponse apiResponseLocalVar, long id)
        {
            bool suppressDefaultLog = false;
            AfterProjectsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterProjectsIdDelete(ref bool suppressDefaultLog, IProjectsIdDeleteApiResponse apiResponseLocalVar, long id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorProjectsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProjectsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorProjectsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id);

        /// <summary>
        /// Delete a project entity with a given id. (Auth roles: Project_Full) 
        /// </summary>
        /// <param name="id">The id of the department to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IProjectsIdDeleteApiResponse?> ProjectsIdDeleteOrDefaultAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProjectsIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a project entity with a given id. (Auth roles: Project_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the department to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IProjectsIdDeleteApiResponse> ProjectsIdDeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatProjectsIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Projects/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProjectsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProjectsIdDeleteApiResponse>();

                        ProjectsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Projects/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProjectsIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnProjectsIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProjectsIdDeleteDefaultImplementation(e, "/Projects/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorProjectsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProjectsIdDeleteApiResponse"/>
        /// </summary>
        public partial class ProjectsIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IProjectsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProjectsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProjectsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProjectsIdDeleteApiResponse(ILogger<ProjectsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProjectsIdPatch(ref long id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateProjectsIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterProjectsIdPatchDefaultImplementation(IProjectsIdPatchApiResponse apiResponseLocalVar, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterProjectsIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterProjectsIdPatch(ref bool suppressDefaultLog, IProjectsIdPatchApiResponse apiResponseLocalVar, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorProjectsIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProjectsIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorProjectsIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long id, Option<List<Operation>> operation);

        /// <summary>
        /// Make changes to an existing project. (Auth roles: Project_Full) 
        /// </summary>
        /// <param name="id">The id of the project</param>
        /// <param name="operation">JSON Patch structure for updating a Project. See ProjectPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IProjectsIdPatchApiResponse?> ProjectsIdPatchOrDefaultAsync(long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProjectsIdPatchAsync(id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Make changes to an existing project. (Auth roles: Project_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the project</param>
        /// <param name="operation">JSON Patch structure for updating a Project. See ProjectPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IProjectsIdPatchApiResponse> ProjectsIdPatchAsync(long id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProjectsIdPatch(operation);

                FormatProjectsIdPatch(ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Projects/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProjectsIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProjectsIdPatchApiResponse>();

                        ProjectsIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Projects/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProjectsIdPatchDefaultImplementation(apiResponseLocalVar, id, operation);

                        Events.ExecuteOnProjectsIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProjectsIdPatchDefaultImplementation(e, "/Projects/{id}", uriBuilderLocalVar.Path, id, operation);
                Events.ExecuteOnErrorProjectsIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProjectsIdPatchApiResponse"/>
        /// </summary>
        public partial class ProjectsIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IProjectsIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProjectsIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProjectsIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProjectsIdPatchApiResponse(ILogger<ProjectsIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProjectsPost(Option<ProjectPostDto> projectPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="projectPostDto"></param>
        /// <returns></returns>
        private void ValidateProjectsPost(Option<ProjectPostDto> projectPostDto)
        {
            if (projectPostDto.IsSet && projectPostDto.Value == null)
                throw new ArgumentNullException(nameof(projectPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectPostDto"></param>
        private void AfterProjectsPostDefaultImplementation(IProjectsPostApiResponse apiResponseLocalVar, Option<ProjectPostDto> projectPostDto)
        {
            bool suppressDefaultLog = false;
            AfterProjectsPost(ref suppressDefaultLog, apiResponseLocalVar, projectPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="projectPostDto"></param>
        partial void AfterProjectsPost(ref bool suppressDefaultLog, IProjectsPostApiResponse apiResponseLocalVar, Option<ProjectPostDto> projectPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectPostDto"></param>
        private void OnErrorProjectsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ProjectPostDto> projectPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProjectsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, projectPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="projectPostDto"></param>
        partial void OnErrorProjectsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ProjectPostDto> projectPostDto);

        /// <summary>
        /// Create a new project entity on the client. (Auth roles: Project_Full) Create a new project entity on the client. To create a subproject, the parentProjectCode property must be set ass well and equal to the main project that the subproject will be a part of.  The response from the POST will return the notation code of main project.code of subproject as the code of the created subproject.
        /// </summary>
        /// <param name="projectPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsPostApiResponse"/>&gt;</returns>
        public async Task<IProjectsPostApiResponse?> ProjectsPostOrDefaultAsync(Option<ProjectPostDto> projectPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProjectsPostAsync(projectPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new project entity on the client. (Auth roles: Project_Full) Create a new project entity on the client. To create a subproject, the parentProjectCode property must be set ass well and equal to the main project that the subproject will be a part of.  The response from the POST will return the notation code of main project.code of subproject as the code of the created subproject.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProjectsPostApiResponse"/>&gt;</returns>
        public async Task<IProjectsPostApiResponse> ProjectsPostAsync(Option<ProjectPostDto> projectPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProjectsPost(projectPostDto);

                FormatProjectsPost(projectPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Projects";

                    if (projectPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (projectPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(projectPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProjectsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProjectsPostApiResponse>();

                        ProjectsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Projects", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProjectsPostDefaultImplementation(apiResponseLocalVar, projectPostDto);

                        Events.ExecuteOnProjectsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProjectsPostDefaultImplementation(e, "/Projects", uriBuilderLocalVar.Path, projectPostDto);
                Events.ExecuteOnErrorProjectsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProjectsPostApiResponse"/>
        /// </summary>
        public partial class ProjectsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IProjectsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProjectsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProjectsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProjectsPostApiResponse(ILogger<ProjectsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProjectDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProjectDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProjectDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
