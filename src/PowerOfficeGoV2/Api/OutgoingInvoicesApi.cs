// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOutgoingInvoicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OutgoingInvoicesApiEvents Events { get; }

        /// <summary>
        /// Gets the specific outgoing invoice / credit note by id.  The returned object are a lightweight version of an invoice, not containing any line details. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the outgoing invoice / credit note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOutgoingInvoiceByIdApiResponse"/>&gt;</returns>
        Task<IGetOutgoingInvoiceByIdApiResponse> GetOutgoingInvoiceByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the specific outgoing invoice / credit note by id.  The returned object are a lightweight version of an invoice, not containing any line details. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the outgoing invoice / credit note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOutgoingInvoiceByIdApiResponse"/>?&gt;</returns>
        Task<IGetOutgoingInvoiceByIdApiResponse?> GetOutgoingInvoiceByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the sent outgoing invoices from the client.  The returned objects are a lightweight version of an invoice, not containing any line details.  Multiple filtering options. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in invoices from customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="customMatchingReferences">Filter by custom matching references. Separate by comma [,] to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects invoices with department set in the header of the invoice. The invoice lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceIds">Filter by invoice IDs. Separate by comma [,] to filter on multiple invoice IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="invoiceNos">Filter by invoice numbers. Separate by comma [,] to filter on multiple invoice numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with numbers 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to return only invoices that the (currently) querying integration has created. Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice. (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without project codes are returned. If null or whitespace, all invoices with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="sentDateTimeOffsetGreaterThan">Filter invoices based on the sent timestamp. The Sent timestamp of when the invoice was generated and sent from Go (which might differ from the invoice date). This property is only set on the invoices generated in Go, and blank if invoices was imported (using a file or the api). Using this filter is one option of retrieving new invoices from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with voucher numbers from 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesGetApiResponse"/>&gt;</returns>
        Task<IOutgoingInvoicesGetApiResponse> OutgoingInvoicesGetAsync(Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<DateOnly> fromDate = default, Option<bool> includeSubProject = default, Option<string> invoiceIds = default, Option<string> invoiceNos = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<DateTime> sentDateTimeOffsetGreaterThan = default, Option<DateOnly> toDate = default, Option<string> voucherNos = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the sent outgoing invoices from the client.  The returned objects are a lightweight version of an invoice, not containing any line details.  Multiple filtering options. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in invoices from customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="customMatchingReferences">Filter by custom matching references. Separate by comma [,] to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects invoices with department set in the header of the invoice. The invoice lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceIds">Filter by invoice IDs. Separate by comma [,] to filter on multiple invoice IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="invoiceNos">Filter by invoice numbers. Separate by comma [,] to filter on multiple invoice numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with numbers 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to return only invoices that the (currently) querying integration has created. Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice. (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without project codes are returned. If null or whitespace, all invoices with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="sentDateTimeOffsetGreaterThan">Filter invoices based on the sent timestamp. The Sent timestamp of when the invoice was generated and sent from Go (which might differ from the invoice date). This property is only set on the invoices generated in Go, and blank if invoices was imported (using a file or the api). Using this filter is one option of retrieving new invoices from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with voucher numbers from 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesGetApiResponse"/>?&gt;</returns>
        Task<IOutgoingInvoicesGetApiResponse?> OutgoingInvoicesGetOrDefaultAsync(Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<DateOnly> fromDate = default, Option<bool> includeSubProject = default, Option<string> invoiceIds = default, Option<string> invoiceNos = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<DateTime> sentDateTimeOffsetGreaterThan = default, Option<DateOnly> toDate = default, Option<string> voucherNos = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the lines of the specific outgoing invoice / credit note (specified by id).  The returned objects are the line details.  Note that the line information might not be complete or present if the invoice was imported to Go (ie. not generated and sent from Go). (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesIdLinesGetApiResponse"/>&gt;</returns>
        Task<IOutgoingInvoicesIdLinesGetApiResponse> OutgoingInvoicesIdLinesGetAsync(Guid id, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the lines of the specific outgoing invoice / credit note (specified by id).  The returned objects are the line details.  Note that the line information might not be complete or present if the invoice was imported to Go (ie. not generated and sent from Go). (Auth roles: OutgoingInvoice,OutgoingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesIdLinesGetApiResponse"/>?&gt;</returns>
        Task<IOutgoingInvoicesIdLinesGetApiResponse?> OutgoingInvoicesIdLinesGetOrDefaultAsync(Guid id, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetOutgoingInvoiceByIdApiResponse"/>
    /// </summary>
    public interface IGetOutgoingInvoiceByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.OutgoingInvoiceDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IOutgoingInvoicesGetApiResponse"/>
    /// </summary>
    public interface IOutgoingInvoicesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<OutgoingInvoiceDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IOutgoingInvoicesIdLinesGetApiResponse"/>
    /// </summary>
    public interface IOutgoingInvoicesIdLinesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<OutgoingInvoiceLineDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OutgoingInvoicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOutgoingInvoiceById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOutgoingInvoiceById;

        internal void ExecuteOnGetOutgoingInvoiceById(OutgoingInvoicesApi.GetOutgoingInvoiceByIdApiResponse apiResponse)
        {
            OnGetOutgoingInvoiceById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOutgoingInvoiceById(Exception exception)
        {
            OnErrorGetOutgoingInvoiceById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOutgoingInvoicesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOutgoingInvoicesGet;

        internal void ExecuteOnOutgoingInvoicesGet(OutgoingInvoicesApi.OutgoingInvoicesGetApiResponse apiResponse)
        {
            OnOutgoingInvoicesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOutgoingInvoicesGet(Exception exception)
        {
            OnErrorOutgoingInvoicesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnOutgoingInvoicesIdLinesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorOutgoingInvoicesIdLinesGet;

        internal void ExecuteOnOutgoingInvoicesIdLinesGet(OutgoingInvoicesApi.OutgoingInvoicesIdLinesGetApiResponse apiResponse)
        {
            OnOutgoingInvoicesIdLinesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorOutgoingInvoicesIdLinesGet(Exception exception)
        {
            OnErrorOutgoingInvoicesIdLinesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OutgoingInvoicesApi : IOutgoingInvoicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OutgoingInvoicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OutgoingInvoicesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingInvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OutgoingInvoicesApi(ILogger<OutgoingInvoicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OutgoingInvoicesApiEvents outgoingInvoicesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OutgoingInvoicesApi>();
            HttpClient = httpClient;
            Events = outgoingInvoicesApiEvents;
        }

        partial void FormatGetOutgoingInvoiceById(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetOutgoingInvoiceByIdDefaultImplementation(IGetOutgoingInvoiceByIdApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetOutgoingInvoiceById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetOutgoingInvoiceById(ref bool suppressDefaultLog, IGetOutgoingInvoiceByIdApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetOutgoingInvoiceByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOutgoingInvoiceById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetOutgoingInvoiceById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Gets the specific outgoing invoice / credit note by id.  The returned object are a lightweight version of an invoice, not containing any line details. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <param name="id">The id of the outgoing invoice / credit note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOutgoingInvoiceByIdApiResponse"/>&gt;</returns>
        public async Task<IGetOutgoingInvoiceByIdApiResponse?> GetOutgoingInvoiceByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOutgoingInvoiceByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the specific outgoing invoice / credit note by id.  The returned object are a lightweight version of an invoice, not containing any line details. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the outgoing invoice / credit note.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOutgoingInvoiceByIdApiResponse"/>&gt;</returns>
        public async Task<IGetOutgoingInvoiceByIdApiResponse> GetOutgoingInvoiceByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOutgoingInvoiceById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OutgoingInvoices/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOutgoingInvoiceByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOutgoingInvoiceByIdApiResponse>();

                        GetOutgoingInvoiceByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OutgoingInvoices/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOutgoingInvoiceByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetOutgoingInvoiceById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOutgoingInvoiceByIdDefaultImplementation(e, "/OutgoingInvoices/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetOutgoingInvoiceById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOutgoingInvoiceByIdApiResponse"/>
        /// </summary>
        public partial class GetOutgoingInvoiceByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetOutgoingInvoiceByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOutgoingInvoiceByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOutgoingInvoiceByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOutgoingInvoiceByIdApiResponse(ILogger<GetOutgoingInvoiceByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.OutgoingInvoiceDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.OutgoingInvoiceDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.OutgoingInvoiceDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOutgoingInvoicesGet(ref Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, ref Option<string> customerNos, ref Option<string> customMatchingReferences, ref Option<string> departmentCodes, ref Option<DateOnly> fromDate, ref Option<bool> includeSubProject, ref Option<string> invoiceIds, ref Option<string> invoiceNos, ref Option<bool> onlyCreatedByCurrentIntegration, ref Option<bool> onlyUnpaidInvoices, ref Option<string> projectCodes, ref Option<DateTime> sentDateTimeOffsetGreaterThan, ref Option<DateOnly> toDate, ref Option<string> voucherNos, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="customerNos"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="invoiceIds"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="projectCodes"></param>
        /// <param name="voucherNos"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateOutgoingInvoicesGet(Option<string> customerNos, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<string> invoiceIds, Option<string> invoiceNos, Option<string> projectCodes, Option<string> voucherNos, Option<ResourceParameters> resourceParameter)
        {
            if (customerNos.IsSet && customerNos.Value == null)
                throw new ArgumentNullException(nameof(customerNos));

            if (customMatchingReferences.IsSet && customMatchingReferences.Value == null)
                throw new ArgumentNullException(nameof(customMatchingReferences));

            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (invoiceIds.IsSet && invoiceIds.Value == null)
                throw new ArgumentNullException(nameof(invoiceIds));

            if (invoiceNos.IsSet && invoiceNos.Value == null)
                throw new ArgumentNullException(nameof(invoiceNos));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (voucherNos.IsSet && voucherNos.Value == null)
                throw new ArgumentNullException(nameof(voucherNos));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="fromDate"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceIds"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="sentDateTimeOffsetGreaterThan"></param>
        /// <param name="toDate"></param>
        /// <param name="voucherNos"></param>
        /// <param name="resourceParameter"></param>
        private void AfterOutgoingInvoicesGetDefaultImplementation(IOutgoingInvoicesGetApiResponse apiResponseLocalVar, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<DateOnly> fromDate, Option<bool> includeSubProject, Option<string> invoiceIds, Option<string> invoiceNos, Option<bool> onlyCreatedByCurrentIntegration, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<DateTime> sentDateTimeOffsetGreaterThan, Option<DateOnly> toDate, Option<string> voucherNos, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterOutgoingInvoicesGet(ref suppressDefaultLog, apiResponseLocalVar, balanceLastChangedDateTimeOffsetGreaterThan, customerNos, customMatchingReferences, departmentCodes, fromDate, includeSubProject, invoiceIds, invoiceNos, onlyCreatedByCurrentIntegration, onlyUnpaidInvoices, projectCodes, sentDateTimeOffsetGreaterThan, toDate, voucherNos, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="fromDate"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceIds"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="sentDateTimeOffsetGreaterThan"></param>
        /// <param name="toDate"></param>
        /// <param name="voucherNos"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterOutgoingInvoicesGet(ref bool suppressDefaultLog, IOutgoingInvoicesGetApiResponse apiResponseLocalVar, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<DateOnly> fromDate, Option<bool> includeSubProject, Option<string> invoiceIds, Option<string> invoiceNos, Option<bool> onlyCreatedByCurrentIntegration, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<DateTime> sentDateTimeOffsetGreaterThan, Option<DateOnly> toDate, Option<string> voucherNos, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="fromDate"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceIds"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="sentDateTimeOffsetGreaterThan"></param>
        /// <param name="toDate"></param>
        /// <param name="voucherNos"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorOutgoingInvoicesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<DateOnly> fromDate, Option<bool> includeSubProject, Option<string> invoiceIds, Option<string> invoiceNos, Option<bool> onlyCreatedByCurrentIntegration, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<DateTime> sentDateTimeOffsetGreaterThan, Option<DateOnly> toDate, Option<string> voucherNos, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOutgoingInvoicesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, balanceLastChangedDateTimeOffsetGreaterThan, customerNos, customMatchingReferences, departmentCodes, fromDate, includeSubProject, invoiceIds, invoiceNos, onlyCreatedByCurrentIntegration, onlyUnpaidInvoices, projectCodes, sentDateTimeOffsetGreaterThan, toDate, voucherNos, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="customerNos"></param>
        /// <param name="customMatchingReferences"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="fromDate"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="invoiceIds"></param>
        /// <param name="invoiceNos"></param>
        /// <param name="onlyCreatedByCurrentIntegration"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="sentDateTimeOffsetGreaterThan"></param>
        /// <param name="toDate"></param>
        /// <param name="voucherNos"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorOutgoingInvoicesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> customerNos, Option<string> customMatchingReferences, Option<string> departmentCodes, Option<DateOnly> fromDate, Option<bool> includeSubProject, Option<string> invoiceIds, Option<string> invoiceNos, Option<bool> onlyCreatedByCurrentIntegration, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<DateTime> sentDateTimeOffsetGreaterThan, Option<DateOnly> toDate, Option<string> voucherNos, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the sent outgoing invoices from the client.  The returned objects are a lightweight version of an invoice, not containing any line details.  Multiple filtering options. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in invoices from customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="customMatchingReferences">Filter by custom matching references. Separate by comma [,] to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects invoices with department set in the header of the invoice. The invoice lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceIds">Filter by invoice IDs. Separate by comma [,] to filter on multiple invoice IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="invoiceNos">Filter by invoice numbers. Separate by comma [,] to filter on multiple invoice numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with numbers 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to return only invoices that the (currently) querying integration has created. Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice. (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without project codes are returned. If null or whitespace, all invoices with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="sentDateTimeOffsetGreaterThan">Filter invoices based on the sent timestamp. The Sent timestamp of when the invoice was generated and sent from Go (which might differ from the invoice date). This property is only set on the invoices generated in Go, and blank if invoices was imported (using a file or the api). Using this filter is one option of retrieving new invoices from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with voucher numbers from 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesGetApiResponse"/>&gt;</returns>
        public async Task<IOutgoingInvoicesGetApiResponse?> OutgoingInvoicesGetOrDefaultAsync(Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<DateOnly> fromDate = default, Option<bool> includeSubProject = default, Option<string> invoiceIds = default, Option<string> invoiceNos = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<DateTime> sentDateTimeOffsetGreaterThan = default, Option<DateOnly> toDate = default, Option<string> voucherNos = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OutgoingInvoicesGetAsync(balanceLastChangedDateTimeOffsetGreaterThan, customerNos, customMatchingReferences, departmentCodes, fromDate, includeSubProject, invoiceIds, invoiceNos, onlyCreatedByCurrentIntegration, onlyUnpaidInvoices, projectCodes, sentDateTimeOffsetGreaterThan, toDate, voucherNos, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the sent outgoing invoices from the client.  The returned objects are a lightweight version of an invoice, not containing any line details.  Multiple filtering options. (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="customerNos">Filter by customer numbers. Separate by comma [,] to filter on multiple customer numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;10000-11000, 12000, 13000-\&quot; will result in invoices from customers with numbers from and including 10000 to 11000, 12000, 13000 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="customMatchingReferences">Filter by custom matching references. Separate by comma [,] to filter on multiple custom matching references. (optional)</param>
        /// <param name="departmentCodes">Filter by department codes. Note that this selects invoices with department set in the header of the invoice. The invoice lines might specify other departments or no department. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without department codes are returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="includeSubProject">Include sub-project(s) for the currently filtered project(s). If projectCodes is null or whitespace, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="invoiceIds">Filter by invoice IDs. Separate by comma [,] to filter on multiple invoice IDs. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="invoiceNos">Filter by invoice numbers. Separate by comma [,] to filter on multiple invoice numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with numbers 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="onlyCreatedByCurrentIntegration">Filter on invoices that the current integration has created. Can be used to return only invoices that the (currently) querying integration has created. Note that invoices are considered created by an integration only if they are posted with the OutgoingInvoiceVoucher endpoint, or if the invoice was sent using the SalesOrders endpoint. If a sales order draft was posted/sent by a user in the GUI, it will be the user that posted/sent it that created the outgoing invoice. (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). (optional)</param>
        /// <param name="projectCodes">Filter by project codes. Separate by comma [,] to filter on multiple codes. If -1, then all invoices without project codes are returned. If null or whitespace, all invoices with or without project codes are returned (filter is not used). (optional)</param>
        /// <param name="sentDateTimeOffsetGreaterThan">Filter invoices based on the sent timestamp. The Sent timestamp of when the invoice was generated and sent from Go (which might differ from the invoice date). This property is only set on the invoices generated in Go, and blank if invoices was imported (using a file or the api). Using this filter is one option of retrieving new invoices from Go. Timestamp not inclusive. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="voucherNos">Filter by voucher numbers. Separate by comma [,] to filter on multiple voucher numbers. A range of numbers can be specified using dash/hyphen [-]. For example \&quot;1-5, 7, 9-\&quot; will result in invoices with voucher numbers from 1 to 5, 7, 9 and all above will be returned. If null or whitespace, the filter is not used. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesGetApiResponse"/>&gt;</returns>
        public async Task<IOutgoingInvoicesGetApiResponse> OutgoingInvoicesGetAsync(Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> customerNos = default, Option<string> customMatchingReferences = default, Option<string> departmentCodes = default, Option<DateOnly> fromDate = default, Option<bool> includeSubProject = default, Option<string> invoiceIds = default, Option<string> invoiceNos = default, Option<bool> onlyCreatedByCurrentIntegration = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<DateTime> sentDateTimeOffsetGreaterThan = default, Option<DateOnly> toDate = default, Option<string> voucherNos = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOutgoingInvoicesGet(customerNos, customMatchingReferences, departmentCodes, invoiceIds, invoiceNos, projectCodes, voucherNos, resourceParameter);

                FormatOutgoingInvoicesGet(ref balanceLastChangedDateTimeOffsetGreaterThan, ref customerNos, ref customMatchingReferences, ref departmentCodes, ref fromDate, ref includeSubProject, ref invoiceIds, ref invoiceNos, ref onlyCreatedByCurrentIntegration, ref onlyUnpaidInvoices, ref projectCodes, ref sentDateTimeOffsetGreaterThan, ref toDate, ref voucherNos, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OutgoingInvoices";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (balanceLastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["balanceLastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(balanceLastChangedDateTimeOffsetGreaterThan.Value);

                    if (customerNos.IsSet)
                        parseQueryStringLocalVar["customerNos"] = ClientUtils.ParameterToString(customerNos.Value);

                    if (customMatchingReferences.IsSet)
                        parseQueryStringLocalVar["customMatchingReferences"] = ClientUtils.ParameterToString(customMatchingReferences.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (fromDate.IsSet)
                        parseQueryStringLocalVar["fromDate"] = ClientUtils.ParameterToString(fromDate.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (invoiceIds.IsSet)
                        parseQueryStringLocalVar["invoiceIds"] = ClientUtils.ParameterToString(invoiceIds.Value);

                    if (invoiceNos.IsSet)
                        parseQueryStringLocalVar["invoiceNos"] = ClientUtils.ParameterToString(invoiceNos.Value);

                    if (onlyCreatedByCurrentIntegration.IsSet)
                        parseQueryStringLocalVar["onlyCreatedByCurrentIntegration"] = ClientUtils.ParameterToString(onlyCreatedByCurrentIntegration.Value);

                    if (onlyUnpaidInvoices.IsSet)
                        parseQueryStringLocalVar["onlyUnpaidInvoices"] = ClientUtils.ParameterToString(onlyUnpaidInvoices.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (sentDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["sentDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(sentDateTimeOffsetGreaterThan.Value);

                    if (toDate.IsSet)
                        parseQueryStringLocalVar["toDate"] = ClientUtils.ParameterToString(toDate.Value);

                    if (voucherNos.IsSet)
                        parseQueryStringLocalVar["voucherNos"] = ClientUtils.ParameterToString(voucherNos.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<OutgoingInvoicesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OutgoingInvoicesGetApiResponse>();

                        OutgoingInvoicesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OutgoingInvoices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOutgoingInvoicesGetDefaultImplementation(apiResponseLocalVar, balanceLastChangedDateTimeOffsetGreaterThan, customerNos, customMatchingReferences, departmentCodes, fromDate, includeSubProject, invoiceIds, invoiceNos, onlyCreatedByCurrentIntegration, onlyUnpaidInvoices, projectCodes, sentDateTimeOffsetGreaterThan, toDate, voucherNos, resourceParameter);

                        Events.ExecuteOnOutgoingInvoicesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOutgoingInvoicesGetDefaultImplementation(e, "/OutgoingInvoices", uriBuilderLocalVar.Path, balanceLastChangedDateTimeOffsetGreaterThan, customerNos, customMatchingReferences, departmentCodes, fromDate, includeSubProject, invoiceIds, invoiceNos, onlyCreatedByCurrentIntegration, onlyUnpaidInvoices, projectCodes, sentDateTimeOffsetGreaterThan, toDate, voucherNos, resourceParameter);
                Events.ExecuteOnErrorOutgoingInvoicesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OutgoingInvoicesGetApiResponse"/>
        /// </summary>
        public partial class OutgoingInvoicesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IOutgoingInvoicesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OutgoingInvoicesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OutgoingInvoicesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OutgoingInvoicesGetApiResponse(ILogger<OutgoingInvoicesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<OutgoingInvoiceDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<OutgoingInvoiceDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<OutgoingInvoiceDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatOutgoingInvoicesIdLinesGet(ref Guid id, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateOutgoingInvoicesIdLinesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="resourceParameter"></param>
        private void AfterOutgoingInvoicesIdLinesGetDefaultImplementation(IOutgoingInvoicesIdLinesGetApiResponse apiResponseLocalVar, Guid id, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterOutgoingInvoicesIdLinesGet(ref suppressDefaultLog, apiResponseLocalVar, id, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterOutgoingInvoicesIdLinesGet(ref bool suppressDefaultLog, IOutgoingInvoicesIdLinesGetApiResponse apiResponseLocalVar, Guid id, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorOutgoingInvoicesIdLinesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOutgoingInvoicesIdLinesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorOutgoingInvoicesIdLinesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the lines of the specific outgoing invoice / credit note (specified by id).  The returned objects are the line details.  Note that the line information might not be complete or present if the invoice was imported to Go (ie. not generated and sent from Go). (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesIdLinesGetApiResponse"/>&gt;</returns>
        public async Task<IOutgoingInvoicesIdLinesGetApiResponse?> OutgoingInvoicesIdLinesGetOrDefaultAsync(Guid id, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OutgoingInvoicesIdLinesGetAsync(id, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the lines of the specific outgoing invoice / credit note (specified by id).  The returned objects are the line details.  Note that the line information might not be complete or present if the invoice was imported to Go (ie. not generated and sent from Go). (Auth roles: OutgoingInvoice,OutgoingInvoice_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOutgoingInvoicesIdLinesGetApiResponse"/>&gt;</returns>
        public async Task<IOutgoingInvoicesIdLinesGetApiResponse> OutgoingInvoicesIdLinesGetAsync(Guid id, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateOutgoingInvoicesIdLinesGet(resourceParameter);

                FormatOutgoingInvoicesIdLinesGet(ref id, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/OutgoingInvoices/{id}/Lines";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<OutgoingInvoicesIdLinesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OutgoingInvoicesIdLinesGetApiResponse>();

                        OutgoingInvoicesIdLinesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/OutgoingInvoices/{id}/Lines", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterOutgoingInvoicesIdLinesGetDefaultImplementation(apiResponseLocalVar, id, resourceParameter);

                        Events.ExecuteOnOutgoingInvoicesIdLinesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOutgoingInvoicesIdLinesGetDefaultImplementation(e, "/OutgoingInvoices/{id}/Lines", uriBuilderLocalVar.Path, id, resourceParameter);
                Events.ExecuteOnErrorOutgoingInvoicesIdLinesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="OutgoingInvoicesIdLinesGetApiResponse"/>
        /// </summary>
        public partial class OutgoingInvoicesIdLinesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IOutgoingInvoicesIdLinesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OutgoingInvoicesIdLinesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="OutgoingInvoicesIdLinesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OutgoingInvoicesIdLinesGetApiResponse(ILogger<OutgoingInvoicesIdLinesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<OutgoingInvoiceLineDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<OutgoingInvoiceLineDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<OutgoingInvoiceLineDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
