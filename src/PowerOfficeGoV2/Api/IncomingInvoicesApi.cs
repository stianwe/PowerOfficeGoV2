// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIncomingInvoicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IncomingInvoicesApiEvents Events { get; }

        /// <summary>
        /// Gets the posted incoming invoices from the client. The returned objects are a lightweight version of a supplier invoice (or credit note), not containing the cost transaction lines. Use the endpoint AccountTransactions if all voucher lines are needed. Multiple filtering options. (Auth roles: IncomingInvoice,IncomingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter invoices on department codes. Note that this selects invoices with department set in the header of the invoice. The invoice costlines might specify other departments or no department. Separate by comma to filter on multiple codes. If blank, all invoices with or without department codes are returned (no filter). If -1, then all invoices without department codes are included. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). No filter set will provide all invoices regardless of balance state, depending on other filters set. (optional)</param>
        /// <param name="projectCodes">Filter invoices on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where invoices from suppliers with numbers from (and including) 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherNos">Filter on invoices voucher number. SearchString should be in the form of \&quot;1-15, 42, 690-\&quot; where voucher numbers from (and including) 1 to 15, 42 and 690 to infinity are selected. All vouchers in Go are posted in the same ascending voucher number series. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher type. Defaults to incoming invoice and incoming credit note if no parameter is supplied. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIncomingInvoiceListItemApiResponse"/>&gt;</returns>
        Task<IGetIncomingInvoiceListItemApiResponse> GetIncomingInvoiceListItemAsync(Option<DateOnly> fromDate = default, Option<DateOnly> toDate = default, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<string> supplierNos = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the posted incoming invoices from the client. The returned objects are a lightweight version of a supplier invoice (or credit note), not containing the cost transaction lines. Use the endpoint AccountTransactions if all voucher lines are needed. Multiple filtering options. (Auth roles: IncomingInvoice,IncomingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter invoices on department codes. Note that this selects invoices with department set in the header of the invoice. The invoice costlines might specify other departments or no department. Separate by comma to filter on multiple codes. If blank, all invoices with or without department codes are returned (no filter). If -1, then all invoices without department codes are included. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). No filter set will provide all invoices regardless of balance state, depending on other filters set. (optional)</param>
        /// <param name="projectCodes">Filter invoices on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where invoices from suppliers with numbers from (and including) 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherNos">Filter on invoices voucher number. SearchString should be in the form of \&quot;1-15, 42, 690-\&quot; where voucher numbers from (and including) 1 to 15, 42 and 690 to infinity are selected. All vouchers in Go are posted in the same ascending voucher number series. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher type. Defaults to incoming invoice and incoming credit note if no parameter is supplied. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIncomingInvoiceListItemApiResponse"/>?&gt;</returns>
        Task<IGetIncomingInvoiceListItemApiResponse?> GetIncomingInvoiceListItemOrDefaultAsync(Option<DateOnly> fromDate = default, Option<DateOnly> toDate = default, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<string> supplierNos = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an IncomingInvoiceListItem by Id (Auth roles: IncomingInvoice,IncomingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the IncomingInvoiceListItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIncomingInvoicesIdGetApiResponse"/>&gt;</returns>
        Task<IIncomingInvoicesIdGetApiResponse> IncomingInvoicesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an IncomingInvoiceListItem by Id (Auth roles: IncomingInvoice,IncomingInvoice_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">Id of the IncomingInvoiceListItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIncomingInvoicesIdGetApiResponse"/>?&gt;</returns>
        Task<IIncomingInvoicesIdGetApiResponse?> IncomingInvoicesIdGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetIncomingInvoiceListItemApiResponse"/>
    /// </summary>
    public interface IGetIncomingInvoiceListItemApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<IncomingInvoiceListItemDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IIncomingInvoicesIdGetApiResponse"/>
    /// </summary>
    public interface IIncomingInvoicesIdGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.IncomingInvoiceListItemDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IncomingInvoicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetIncomingInvoiceListItem;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetIncomingInvoiceListItem;

        internal void ExecuteOnGetIncomingInvoiceListItem(IncomingInvoicesApi.GetIncomingInvoiceListItemApiResponse apiResponse)
        {
            OnGetIncomingInvoiceListItem?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIncomingInvoiceListItem(Exception exception)
        {
            OnErrorGetIncomingInvoiceListItem?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnIncomingInvoicesIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorIncomingInvoicesIdGet;

        internal void ExecuteOnIncomingInvoicesIdGet(IncomingInvoicesApi.IncomingInvoicesIdGetApiResponse apiResponse)
        {
            OnIncomingInvoicesIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorIncomingInvoicesIdGet(Exception exception)
        {
            OnErrorIncomingInvoicesIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IncomingInvoicesApi : IIncomingInvoicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IncomingInvoicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IncomingInvoicesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingInvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncomingInvoicesApi(ILogger<IncomingInvoicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IncomingInvoicesApiEvents incomingInvoicesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IncomingInvoicesApi>();
            HttpClient = httpClient;
            Events = incomingInvoicesApiEvents;
        }

        partial void FormatGetIncomingInvoiceListItem(ref Option<DateOnly> fromDate, ref Option<DateOnly> toDate, ref Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, ref Option<string> departmentCodes, ref Option<bool> includeSubProject, ref Option<bool> onlyUnpaidInvoices, ref Option<string> projectCodes, ref Option<string> supplierNos, ref Option<string> voucherNos, ref Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="departmentCodes"></param>
        /// <param name="projectCodes"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateGetIncomingInvoiceListItem(Option<string> departmentCodes, Option<string> projectCodes, Option<string> supplierNos, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            if (departmentCodes.IsSet && departmentCodes.Value == null)
                throw new ArgumentNullException(nameof(departmentCodes));

            if (projectCodes.IsSet && projectCodes.Value == null)
                throw new ArgumentNullException(nameof(projectCodes));

            if (supplierNos.IsSet && supplierNos.Value == null)
                throw new ArgumentNullException(nameof(supplierNos));

            if (voucherNos.IsSet && voucherNos.Value == null)
                throw new ArgumentNullException(nameof(voucherNos));

            if (voucherTypes.IsSet && voucherTypes.Value == null)
                throw new ArgumentNullException(nameof(voucherTypes));

            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void AfterGetIncomingInvoiceListItemDefaultImplementation(IGetIncomingInvoiceListItemApiResponse apiResponseLocalVar, Option<DateOnly> fromDate, Option<DateOnly> toDate, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<string> supplierNos, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterGetIncomingInvoiceListItem(ref suppressDefaultLog, apiResponseLocalVar, fromDate, toDate, balanceLastChangedDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, onlyUnpaidInvoices, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterGetIncomingInvoiceListItem(ref bool suppressDefaultLog, IGetIncomingInvoiceListItemApiResponse apiResponseLocalVar, Option<DateOnly> fromDate, Option<DateOnly> toDate, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<string> supplierNos, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorGetIncomingInvoiceListItemDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateOnly> fromDate, Option<DateOnly> toDate, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<string> supplierNos, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIncomingInvoiceListItem(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fromDate, toDate, balanceLastChangedDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, onlyUnpaidInvoices, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="departmentCodes"></param>
        /// <param name="includeSubProject"></param>
        /// <param name="onlyUnpaidInvoices"></param>
        /// <param name="projectCodes"></param>
        /// <param name="supplierNos"></param>
        /// <param name="voucherNos"></param>
        /// <param name="voucherTypes"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorGetIncomingInvoiceListItem(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateOnly> fromDate, Option<DateOnly> toDate, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan, Option<string> departmentCodes, Option<bool> includeSubProject, Option<bool> onlyUnpaidInvoices, Option<string> projectCodes, Option<string> supplierNos, Option<string> voucherNos, Option<string> voucherTypes, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Gets the posted incoming invoices from the client. The returned objects are a lightweight version of a supplier invoice (or credit note), not containing the cost transaction lines. Use the endpoint AccountTransactions if all voucher lines are needed. Multiple filtering options. (Auth roles: IncomingInvoice,IncomingInvoice_Full) 
        /// </summary>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter invoices on department codes. Note that this selects invoices with department set in the header of the invoice. The invoice costlines might specify other departments or no department. Separate by comma to filter on multiple codes. If blank, all invoices with or without department codes are returned (no filter). If -1, then all invoices without department codes are included. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). No filter set will provide all invoices regardless of balance state, depending on other filters set. (optional)</param>
        /// <param name="projectCodes">Filter invoices on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where invoices from suppliers with numbers from (and including) 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherNos">Filter on invoices voucher number. SearchString should be in the form of \&quot;1-15, 42, 690-\&quot; where voucher numbers from (and including) 1 to 15, 42 and 690 to infinity are selected. All vouchers in Go are posted in the same ascending voucher number series. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher type. Defaults to incoming invoice and incoming credit note if no parameter is supplied. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIncomingInvoiceListItemApiResponse"/>&gt;</returns>
        public async Task<IGetIncomingInvoiceListItemApiResponse?> GetIncomingInvoiceListItemOrDefaultAsync(Option<DateOnly> fromDate = default, Option<DateOnly> toDate = default, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<string> supplierNos = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIncomingInvoiceListItemAsync(fromDate, toDate, balanceLastChangedDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, onlyUnpaidInvoices, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets the posted incoming invoices from the client. The returned objects are a lightweight version of a supplier invoice (or credit note), not containing the cost transaction lines. Use the endpoint AccountTransactions if all voucher lines are needed. Multiple filtering options. (Auth roles: IncomingInvoice,IncomingInvoice_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fromDate">From date, inclusive. Get all invoices with an voucher (invoice) date from this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="toDate">To date, inclusive. Get all invoices with an voucher (invoice) date up to this date (inclusive). Note that (date time) offsets (if provided) is not taken into account, only date is used. (optional)</param>
        /// <param name="balanceLastChangedDateTimeOffsetGreaterThan">Filter invoices with last changed timestamp in balance (remaining amount to be paid) greater than the provided timestamp. Can be used as a lightweight version of retrieving payment states of invoices. Timestamp not inclusive. (optional)</param>
        /// <param name="departmentCodes">Filter invoices on department codes. Note that this selects invoices with department set in the header of the invoice. The invoice costlines might specify other departments or no department. Separate by comma to filter on multiple codes. If blank, all invoices with or without department codes are returned (no filter). If -1, then all invoices without department codes are included. (optional)</param>
        /// <param name="includeSubProject">Include Sub-project(s) for specified project. If projectCodes is null, all (sub)projects are included (regardless of this variable). (optional)</param>
        /// <param name="onlyUnpaidInvoices">Filter on invoices that are unpaid (ie balance !&#x3D; 0). No filter set will provide all invoices regardless of balance state, depending on other filters set. (optional)</param>
        /// <param name="projectCodes">Filter invoices on project codes. Separate by comma to filter on multiple codes. If blank, all transactions with or without projects codes are returned (no filter). (optional)</param>
        /// <param name="supplierNos">Filter by supplier numbers. SearchString should be in the form of \&quot;20000-25999, 22500, 23000-\&quot; where invoices from suppliers with numbers from (and including) 20000 to 25999, 22500 and all over 23000 will be selected. If filterString is null or whitespace, query is returned as is. (optional)</param>
        /// <param name="voucherNos">Filter on invoices voucher number. SearchString should be in the form of \&quot;1-15, 42, 690-\&quot; where voucher numbers from (and including) 1 to 15, 42 and 690 to infinity are selected. All vouchers in Go are posted in the same ascending voucher number series. (optional)</param>
        /// <param name="voucherTypes">Filter by voucher type. Defaults to incoming invoice and incoming credit note if no parameter is supplied. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIncomingInvoiceListItemApiResponse"/>&gt;</returns>
        public async Task<IGetIncomingInvoiceListItemApiResponse> GetIncomingInvoiceListItemAsync(Option<DateOnly> fromDate = default, Option<DateOnly> toDate = default, Option<DateTime> balanceLastChangedDateTimeOffsetGreaterThan = default, Option<string> departmentCodes = default, Option<bool> includeSubProject = default, Option<bool> onlyUnpaidInvoices = default, Option<string> projectCodes = default, Option<string> supplierNos = default, Option<string> voucherNos = default, Option<string> voucherTypes = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIncomingInvoiceListItem(departmentCodes, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter);

                FormatGetIncomingInvoiceListItem(ref fromDate, ref toDate, ref balanceLastChangedDateTimeOffsetGreaterThan, ref departmentCodes, ref includeSubProject, ref onlyUnpaidInvoices, ref projectCodes, ref supplierNos, ref voucherNos, ref voucherTypes, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/IncomingInvoices";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (fromDate.IsSet)
                        parseQueryStringLocalVar["fromDate"] = ClientUtils.ParameterToString(fromDate.Value);

                    if (toDate.IsSet)
                        parseQueryStringLocalVar["toDate"] = ClientUtils.ParameterToString(toDate.Value);

                    if (balanceLastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["balanceLastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(balanceLastChangedDateTimeOffsetGreaterThan.Value);

                    if (departmentCodes.IsSet)
                        parseQueryStringLocalVar["departmentCodes"] = ClientUtils.ParameterToString(departmentCodes.Value);

                    if (includeSubProject.IsSet)
                        parseQueryStringLocalVar["includeSubProject"] = ClientUtils.ParameterToString(includeSubProject.Value);

                    if (onlyUnpaidInvoices.IsSet)
                        parseQueryStringLocalVar["onlyUnpaidInvoices"] = ClientUtils.ParameterToString(onlyUnpaidInvoices.Value);

                    if (projectCodes.IsSet)
                        parseQueryStringLocalVar["projectCodes"] = ClientUtils.ParameterToString(projectCodes.Value);

                    if (supplierNos.IsSet)
                        parseQueryStringLocalVar["supplierNos"] = ClientUtils.ParameterToString(supplierNos.Value);

                    if (voucherNos.IsSet)
                        parseQueryStringLocalVar["voucherNos"] = ClientUtils.ParameterToString(voucherNos.Value);

                    if (voucherTypes.IsSet)
                        parseQueryStringLocalVar["voucherTypes"] = ClientUtils.ParameterToString(voucherTypes.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetIncomingInvoiceListItemApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIncomingInvoiceListItemApiResponse>();

                        GetIncomingInvoiceListItemApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/IncomingInvoices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetIncomingInvoiceListItemDefaultImplementation(apiResponseLocalVar, fromDate, toDate, balanceLastChangedDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, onlyUnpaidInvoices, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter);

                        Events.ExecuteOnGetIncomingInvoiceListItem(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIncomingInvoiceListItemDefaultImplementation(e, "/IncomingInvoices", uriBuilderLocalVar.Path, fromDate, toDate, balanceLastChangedDateTimeOffsetGreaterThan, departmentCodes, includeSubProject, onlyUnpaidInvoices, projectCodes, supplierNos, voucherNos, voucherTypes, resourceParameter);
                Events.ExecuteOnErrorGetIncomingInvoiceListItem(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIncomingInvoiceListItemApiResponse"/>
        /// </summary>
        public partial class GetIncomingInvoiceListItemApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetIncomingInvoiceListItemApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIncomingInvoiceListItemApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIncomingInvoiceListItemApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIncomingInvoiceListItemApiResponse(ILogger<GetIncomingInvoiceListItemApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<IncomingInvoiceListItemDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<IncomingInvoiceListItemDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<IncomingInvoiceListItemDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatIncomingInvoicesIdGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterIncomingInvoicesIdGetDefaultImplementation(IIncomingInvoicesIdGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterIncomingInvoicesIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterIncomingInvoicesIdGet(ref bool suppressDefaultLog, IIncomingInvoicesIdGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorIncomingInvoicesIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorIncomingInvoicesIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorIncomingInvoicesIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get an IncomingInvoiceListItem by Id (Auth roles: IncomingInvoice,IncomingInvoice_Full) 
        /// </summary>
        /// <param name="id">Id of the IncomingInvoiceListItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIncomingInvoicesIdGetApiResponse"/>&gt;</returns>
        public async Task<IIncomingInvoicesIdGetApiResponse?> IncomingInvoicesIdGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await IncomingInvoicesIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an IncomingInvoiceListItem by Id (Auth roles: IncomingInvoice,IncomingInvoice_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the IncomingInvoiceListItem</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IIncomingInvoicesIdGetApiResponse"/>&gt;</returns>
        public async Task<IIncomingInvoicesIdGetApiResponse> IncomingInvoicesIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatIncomingInvoicesIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/IncomingInvoices/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<IncomingInvoicesIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<IncomingInvoicesIdGetApiResponse>();

                        IncomingInvoicesIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/IncomingInvoices/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterIncomingInvoicesIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnIncomingInvoicesIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorIncomingInvoicesIdGetDefaultImplementation(e, "/IncomingInvoices/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorIncomingInvoicesIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="IncomingInvoicesIdGetApiResponse"/>
        /// </summary>
        public partial class IncomingInvoicesIdGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IIncomingInvoicesIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<IncomingInvoicesIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="IncomingInvoicesIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public IncomingInvoicesIdGetApiResponse(ILogger<IncomingInvoicesIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.IncomingInvoiceListItemDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.IncomingInvoiceListItemDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.IncomingInvoiceListItemDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
