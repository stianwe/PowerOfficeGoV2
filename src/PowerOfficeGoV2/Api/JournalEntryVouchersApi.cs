// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IJournalEntryVouchersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        JournalEntryVouchersApiEvents Events { get; }

        /// <summary>
        /// List the journal entry vouchers on the client, returning lightweight journal entry voucher objects and their type. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// To get the details, get the voucher by its identifier using the endpoint relevant for the voucher type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter vouchers with created timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter vouchers with last changed timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="inApprovalWorkflow">Filter by the approval state. (optional)</param>
        /// <param name="isPosted">Filter by the posted state. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersGetApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersGetApiResponse> JournalEntryVouchersGetAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> inApprovalWorkflow = default, Option<bool> isPosted = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List the journal entry vouchers on the client, returning lightweight journal entry voucher objects and their type. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// To get the details, get the voucher by its identifier using the endpoint relevant for the voucher type.
        /// </remarks>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter vouchers with created timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter vouchers with last changed timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="inApprovalWorkflow">Filter by the approval state. (optional)</param>
        /// <param name="isPosted">Filter by the posted state. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersGetApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersGetApiResponse?> JournalEntryVouchersGetOrDefaultAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> inApprovalWorkflow = default, Option<bool> isPosted = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a voucher, the accompanying lines and pages. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Delete operations can only be done if the voucher is unposted and not in an approval workflow state.              The integration only has access to vouchers that it has created or is the current approver of.              This endpoint is common for all voucher services, and used regardless of voucher type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdDeleteApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdDeleteApiResponse> JournalEntryVouchersIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a voucher, the accompanying lines and pages. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Delete operations can only be done if the voucher is unposted and not in an approval workflow state.              The integration only has access to vouchers that it has created or is the current approver of.              This endpoint is common for all voucher services, and used regardless of voucher type.
        /// </remarks>
        /// <param name="id">The identifier of a journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdDeleteApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdDeleteApiResponse?> JournalEntryVouchersIdDeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the EHF-file from a voucher draft, if the voucher draft was created by EHF (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdEhfGetApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdEhfGetApiResponse> JournalEntryVouchersIdEhfGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the EHF-file from a voucher draft, if the voucher draft was created by EHF (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdEhfGetApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdEhfGetApiResponse?> JournalEntryVouchersIdEhfGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit a voucher for approval. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Attempt to submit the journal entry voucher with the given id for approval.              Will only work if the client is configured with standard approver or the supplier of a supplier voucher is set with an approver.              If the voucher pass the validation rules in Go, it will be added in the approval workflow set in Go.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the vouhcer</param>
        /// <param name="submitForApprovalPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersIdSubmitForApprovalPostApiResponse> JournalEntryVouchersIdSubmitForApprovalPostAsync(Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit a voucher for approval. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Attempt to submit the journal entry voucher with the given id for approval.              Will only work if the client is configured with standard approver or the supplier of a supplier voucher is set with an approver.              If the voucher pass the validation rules in Go, it will be added in the approval workflow set in Go.
        /// </remarks>
        /// <param name="id">Identifier of the vouhcer</param>
        /// <param name="submitForApprovalPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersIdSubmitForApprovalPostApiResponse?> JournalEntryVouchersIdSubmitForApprovalPostOrDefaultAsync(Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersGetApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<JournalEntryVoucherListItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdDeleteApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdEhfGetApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdEhfGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersIdSubmitForApprovalPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.VoucherApprovalStatusResponseDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class JournalEntryVouchersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersGet;

        internal void ExecuteOnJournalEntryVouchersGet(JournalEntryVouchersApi.JournalEntryVouchersGetApiResponse apiResponse)
        {
            OnJournalEntryVouchersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersGet(Exception exception)
        {
            OnErrorJournalEntryVouchersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdDelete;

        internal void ExecuteOnJournalEntryVouchersIdDelete(JournalEntryVouchersApi.JournalEntryVouchersIdDeleteApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdDelete(Exception exception)
        {
            OnErrorJournalEntryVouchersIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdEhfGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdEhfGet;

        internal void ExecuteOnJournalEntryVouchersIdEhfGet(JournalEntryVouchersApi.JournalEntryVouchersIdEhfGetApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdEhfGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdEhfGet(Exception exception)
        {
            OnErrorJournalEntryVouchersIdEhfGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersIdSubmitForApprovalPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersIdSubmitForApprovalPost;

        internal void ExecuteOnJournalEntryVouchersIdSubmitForApprovalPost(JournalEntryVouchersApi.JournalEntryVouchersIdSubmitForApprovalPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersIdSubmitForApprovalPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersIdSubmitForApprovalPost(Exception exception)
        {
            OnErrorJournalEntryVouchersIdSubmitForApprovalPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class JournalEntryVouchersApi : IJournalEntryVouchersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<JournalEntryVouchersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public JournalEntryVouchersApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="JournalEntryVouchersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JournalEntryVouchersApi(ILogger<JournalEntryVouchersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, JournalEntryVouchersApiEvents journalEntryVouchersApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<JournalEntryVouchersApi>();
            HttpClient = httpClient;
            Events = journalEntryVouchersApiEvents;
        }

        partial void FormatJournalEntryVouchersGet(ref Option<DateTime> createdDateTimeOffsetGreaterThan, ref Option<DateTime> lastChangedDateTimeOffsetGreaterThan, ref Option<bool> inApprovalWorkflow, ref Option<bool> isPosted, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="inApprovalWorkflow"></param>
        /// <param name="isPosted"></param>
        /// <param name="resourceParameter"></param>
        private void AfterJournalEntryVouchersGetDefaultImplementation(IJournalEntryVouchersGetApiResponse apiResponseLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> inApprovalWorkflow, Option<bool> isPosted, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersGet(ref suppressDefaultLog, apiResponseLocalVar, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, inApprovalWorkflow, isPosted, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="inApprovalWorkflow"></param>
        /// <param name="isPosted"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterJournalEntryVouchersGet(ref bool suppressDefaultLog, IJournalEntryVouchersGetApiResponse apiResponseLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> inApprovalWorkflow, Option<bool> isPosted, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="inApprovalWorkflow"></param>
        /// <param name="isPosted"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorJournalEntryVouchersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> inApprovalWorkflow, Option<bool> isPosted, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, inApprovalWorkflow, isPosted, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createdDateTimeOffsetGreaterThan"></param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan"></param>
        /// <param name="inApprovalWorkflow"></param>
        /// <param name="isPosted"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorJournalEntryVouchersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<DateTime> createdDateTimeOffsetGreaterThan, Option<DateTime> lastChangedDateTimeOffsetGreaterThan, Option<bool> inApprovalWorkflow, Option<bool> isPosted, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// List the journal entry vouchers on the client, returning lightweight journal entry voucher objects and their type. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) To get the details, get the voucher by its identifier using the endpoint relevant for the voucher type.
        /// </summary>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter vouchers with created timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter vouchers with last changed timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="inApprovalWorkflow">Filter by the approval state. (optional)</param>
        /// <param name="isPosted">Filter by the posted state. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersGetApiResponse?> JournalEntryVouchersGetOrDefaultAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> inApprovalWorkflow = default, Option<bool> isPosted = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersGetAsync(createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, inApprovalWorkflow, isPosted, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List the journal entry vouchers on the client, returning lightweight journal entry voucher objects and their type. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) To get the details, get the voucher by its identifier using the endpoint relevant for the voucher type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDateTimeOffsetGreaterThan">Filter vouchers with created timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="lastChangedDateTimeOffsetGreaterThan">Filter vouchers with last changed timestamp greater than the provided timestamp. Timestamp not inclusive. (optional)</param>
        /// <param name="inApprovalWorkflow">Filter by the approval state. (optional)</param>
        /// <param name="isPosted">Filter by the posted state. (optional)</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersGetApiResponse> JournalEntryVouchersGetAsync(Option<DateTime> createdDateTimeOffsetGreaterThan = default, Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default, Option<bool> inApprovalWorkflow = default, Option<bool> isPosted = default, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersGet(resourceParameter);

                FormatJournalEntryVouchersGet(ref createdDateTimeOffsetGreaterThan, ref lastChangedDateTimeOffsetGreaterThan, ref inApprovalWorkflow, ref isPosted, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (createdDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["createdDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(createdDateTimeOffsetGreaterThan.Value);

                    if (lastChangedDateTimeOffsetGreaterThan.IsSet)
                        parseQueryStringLocalVar["lastChangedDateTimeOffsetGreaterThan"] = ClientUtils.ParameterToString(lastChangedDateTimeOffsetGreaterThan.Value);

                    if (inApprovalWorkflow.IsSet)
                        parseQueryStringLocalVar["inApprovalWorkflow"] = ClientUtils.ParameterToString(inApprovalWorkflow.Value);

                    if (isPosted.IsSet)
                        parseQueryStringLocalVar["isPosted"] = ClientUtils.ParameterToString(isPosted.Value);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersGetApiResponse>();

                        JournalEntryVouchersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersGetDefaultImplementation(apiResponseLocalVar, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, inApprovalWorkflow, isPosted, resourceParameter);

                        Events.ExecuteOnJournalEntryVouchersGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersGetDefaultImplementation(e, "/JournalEntryVouchers", uriBuilderLocalVar.Path, createdDateTimeOffsetGreaterThan, lastChangedDateTimeOffsetGreaterThan, inApprovalWorkflow, isPosted, resourceParameter);
                Events.ExecuteOnErrorJournalEntryVouchersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersGetApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersGetApiResponse(ILogger<JournalEntryVouchersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<JournalEntryVoucherListItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<JournalEntryVoucherListItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<JournalEntryVoucherListItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersIdDelete(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterJournalEntryVouchersIdDeleteDefaultImplementation(IJournalEntryVouchersIdDeleteApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterJournalEntryVouchersIdDelete(ref bool suppressDefaultLog, IJournalEntryVouchersIdDeleteApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorJournalEntryVouchersIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorJournalEntryVouchersIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Delete a voucher, the accompanying lines and pages. (Auth roles: JournalEntryVoucher_Full) Delete operations can only be done if the voucher is unposted and not in an approval workflow state.              The integration only has access to vouchers that it has created or is the current approver of.              This endpoint is common for all voucher services, and used regardless of voucher type.
        /// </summary>
        /// <param name="id">The identifier of a journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdDeleteApiResponse?> JournalEntryVouchersIdDeleteOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a voucher, the accompanying lines and pages. (Auth roles: JournalEntryVoucher_Full) Delete operations can only be done if the voucher is unposted and not in an approval workflow state.              The integration only has access to vouchers that it has created or is the current approver of.              This endpoint is common for all voucher services, and used regardless of voucher type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a journal entry voucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdDeleteApiResponse> JournalEntryVouchersIdDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdDeleteApiResponse>();

                        JournalEntryVouchersIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnJournalEntryVouchersIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdDeleteDefaultImplementation(e, "/JournalEntryVouchers/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorJournalEntryVouchersIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdDeleteApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdDeleteApiResponse(ILogger<JournalEntryVouchersIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersIdEhfGet(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterJournalEntryVouchersIdEhfGetDefaultImplementation(IJournalEntryVouchersIdEhfGetApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdEhfGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterJournalEntryVouchersIdEhfGet(ref bool suppressDefaultLog, IJournalEntryVouchersIdEhfGetApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorJournalEntryVouchersIdEhfGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdEhfGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorJournalEntryVouchersIdEhfGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Retrieve the EHF-file from a voucher draft, if the voucher draft was created by EHF (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdEhfGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdEhfGetApiResponse?> JournalEntryVouchersIdEhfGetOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdEhfGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve the EHF-file from a voucher draft, if the voucher draft was created by EHF (Auth roles: JournalEntryVoucher, JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdEhfGetApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdEhfGetApiResponse> JournalEntryVouchersIdEhfGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersIdEhfGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}/ehf";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdEhfGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdEhfGetApiResponse>();

                        JournalEntryVouchersIdEhfGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}/ehf", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdEhfGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnJournalEntryVouchersIdEhfGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdEhfGetDefaultImplementation(e, "/JournalEntryVouchers/{id}/ehf", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorJournalEntryVouchersIdEhfGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdEhfGetApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdEhfGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdEhfGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdEhfGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdEhfGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdEhfGetApiResponse(ILogger<JournalEntryVouchersIdEhfGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersIdSubmitForApprovalPost(ref Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="submitForApprovalPostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersIdSubmitForApprovalPost(Option<SubmitForApprovalPostDto> submitForApprovalPostDto)
        {
            if (submitForApprovalPostDto.IsSet && submitForApprovalPostDto.Value == null)
                throw new ArgumentNullException(nameof(submitForApprovalPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="submitForApprovalPostDto"></param>
        private void AfterJournalEntryVouchersIdSubmitForApprovalPostDefaultImplementation(IJournalEntryVouchersIdSubmitForApprovalPostApiResponse apiResponseLocalVar, Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersIdSubmitForApprovalPost(ref suppressDefaultLog, apiResponseLocalVar, id, submitForApprovalPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="submitForApprovalPostDto"></param>
        partial void AfterJournalEntryVouchersIdSubmitForApprovalPost(ref bool suppressDefaultLog, IJournalEntryVouchersIdSubmitForApprovalPostApiResponse apiResponseLocalVar, Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="submitForApprovalPostDto"></param>
        private void OnErrorJournalEntryVouchersIdSubmitForApprovalPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersIdSubmitForApprovalPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, submitForApprovalPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="submitForApprovalPostDto"></param>
        partial void OnErrorJournalEntryVouchersIdSubmitForApprovalPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto);

        /// <summary>
        /// Submit a voucher for approval. (Auth roles: JournalEntryVoucher_Full) Attempt to submit the journal entry voucher with the given id for approval.              Will only work if the client is configured with standard approver or the supplier of a supplier voucher is set with an approver.              If the voucher pass the validation rules in Go, it will be added in the approval workflow set in Go.
        /// </summary>
        /// <param name="id">Identifier of the vouhcer</param>
        /// <param name="submitForApprovalPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdSubmitForApprovalPostApiResponse?> JournalEntryVouchersIdSubmitForApprovalPostOrDefaultAsync(Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersIdSubmitForApprovalPostAsync(id, submitForApprovalPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Submit a voucher for approval. (Auth roles: JournalEntryVoucher_Full) Attempt to submit the journal entry voucher with the given id for approval.              Will only work if the client is configured with standard approver or the supplier of a supplier voucher is set with an approver.              If the voucher pass the validation rules in Go, it will be added in the approval workflow set in Go.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the vouhcer</param>
        /// <param name="submitForApprovalPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersIdSubmitForApprovalPostApiResponse> JournalEntryVouchersIdSubmitForApprovalPostAsync(Guid id, Option<SubmitForApprovalPostDto> submitForApprovalPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersIdSubmitForApprovalPost(submitForApprovalPostDto);

                FormatJournalEntryVouchersIdSubmitForApprovalPost(ref id, submitForApprovalPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/{id}/submitForApproval";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (submitForApprovalPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (submitForApprovalPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(submitForApprovalPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersIdSubmitForApprovalPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersIdSubmitForApprovalPostApiResponse>();

                        JournalEntryVouchersIdSubmitForApprovalPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/{id}/submitForApproval", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersIdSubmitForApprovalPostDefaultImplementation(apiResponseLocalVar, id, submitForApprovalPostDto);

                        Events.ExecuteOnJournalEntryVouchersIdSubmitForApprovalPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersIdSubmitForApprovalPostDefaultImplementation(e, "/JournalEntryVouchers/{id}/submitForApproval", uriBuilderLocalVar.Path, id, submitForApprovalPostDto);
                Events.ExecuteOnErrorJournalEntryVouchersIdSubmitForApprovalPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersIdSubmitForApprovalPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersIdSubmitForApprovalPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersIdSubmitForApprovalPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersIdSubmitForApprovalPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersIdSubmitForApprovalPostApiResponse(ILogger<JournalEntryVouchersIdSubmitForApprovalPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.VoucherApprovalStatusResponseDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.VoucherApprovalStatusResponseDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.VoucherApprovalStatusResponseDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsConflict && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
