// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEmploymentFixedSalariesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EmploymentFixedSalariesApiEvents Events { get; }

        /// <summary>
        /// Delete a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteOrDefaultAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a fixed salary (line). See EmploymentFixedSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchAsync(long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Change an existing fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a fixed salary (line). See EmploymentFixedSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchOrDefaultAsync(long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get fixed salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get fixed salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFixedSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesPostAsync(long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFixedSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>?&gt;</returns>
        Task<IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesPostOrDefaultAsync(long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFixedSalaryByIdApiResponse"/>&gt;</returns>
        Task<IGetFixedSalaryByIdApiResponse> GetFixedSalaryByIdAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFixedSalaryByIdApiResponse"/>?&gt;</returns>
        Task<IGetFixedSalaryByIdApiResponse?> GetFixedSalaryByIdOrDefaultAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<List<EmploymentFixedSalaryDto>?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>
    /// </summary>
    public interface IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFixedSalaryByIdApiResponse"/>
    /// </summary>
    public interface IGetFixedSalaryByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EmploymentFixedSalariesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(EmploymentFixedSalariesApi.EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(EmploymentFixedSalariesApi.EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFixedSalariesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesGet(EmploymentFixedSalariesApi.EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFixedSalariesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmployeesEmploymentsEmploymentIdFixedSalariesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost;

        internal void ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesPost(EmploymentFixedSalariesApi.EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse apiResponse)
        {
            OnEmployeesEmploymentsEmploymentIdFixedSalariesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost(Exception exception)
        {
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFixedSalaryById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFixedSalaryById;

        internal void ExecuteOnGetFixedSalaryById(EmploymentFixedSalariesApi.GetFixedSalaryByIdApiResponse apiResponse)
        {
            OnGetFixedSalaryById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFixedSalaryById(Exception exception)
        {
            OnErrorGetFixedSalaryById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EmploymentFixedSalariesApi : IEmploymentFixedSalariesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EmploymentFixedSalariesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EmploymentFixedSalariesApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentFixedSalariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmploymentFixedSalariesApi(ILogger<EmploymentFixedSalariesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EmploymentFixedSalariesApiEvents employmentFixedSalariesApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EmploymentFixedSalariesApi>();
            HttpClient = httpClient;
            Events = employmentFixedSalariesApiEvents;
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref long employmentId, ref Guid fixedSalaryId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteDefaultImplementation(IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref suppressDefaultLog, apiResponseLocalVar, employmentId, fixedSalaryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, fixedSalaryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId);

        /// <summary>
        /// Delete a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteOrDefaultAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteAsync(employmentId, fixedSalaryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(ref employmentId, ref fixedSalaryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfixedSalaryId%7D", Uri.EscapeDataString(fixedSalaryId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse>();

                        EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteDefaultImplementation(apiResponseLocalVar, employmentId, fixedSalaryId);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteDefaultImplementation(e, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", uriBuilderLocalVar.Path, employmentId, fixedSalaryId);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref long employmentId, ref Guid fixedSalaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        /// <param name="operation"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchDefaultImplementation(IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref suppressDefaultLog, apiResponseLocalVar, employmentId, fixedSalaryId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        /// <param name="operation"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        /// <param name="operation"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, fixedSalaryId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        /// <param name="operation"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation);

        /// <summary>
        /// Change an existing fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a fixed salary (line). See EmploymentFixedSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchOrDefaultAsync(long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchAsync(employmentId, fixedSalaryId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Change an existing fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="operation">JSON Patch structure for updating a fixed salary (line). See EmploymentFixedSalaryPatchDto schema for all available properties. For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchAsync(long employmentId, Guid fixedSalaryId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(operation);

                FormatEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(ref employmentId, ref fixedSalaryId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfixedSalaryId%7D", Uri.EscapeDataString(fixedSalaryId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse>();

                        EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchDefaultImplementation(apiResponseLocalVar, employmentId, fixedSalaryId, operation);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchDefaultImplementation(e, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", uriBuilderLocalVar.Path, employmentId, fixedSalaryId, operation);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesFixedSalaryIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="resourceParameter"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFixedSalariesGet(Option<ResourceParameters> resourceParameter)
        {
            if (resourceParameter.IsSet && resourceParameter.Value == null)
                throw new ArgumentNullException(nameof(resourceParameter));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFixedSalariesGetDefaultImplementation(IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref suppressDefaultLog, apiResponseLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse apiResponseLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, resourceParameter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="resourceParameter"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<ResourceParameters> resourceParameter);

        /// <summary>
        /// Get fixed salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesGetOrDefaultAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFixedSalariesGetAsync(employmentId, resourceParameter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get fixed salary lines for the given employment (employment relationships) on an employee. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="resourceParameter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesGetAsync(long employmentId, Option<ResourceParameters> resourceParameter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFixedSalariesGet(resourceParameter);

                FormatEmployeesEmploymentsEmploymentIdFixedSalariesGet(ref employmentId, resourceParameter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FixedSalaries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (resourceParameter.IsSet)
                        parseQueryStringLocalVar["resourceParameter"] = ClientUtils.ParameterToString(resourceParameter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse>();

                        EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FixedSalaries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFixedSalariesGetDefaultImplementation(apiResponseLocalVar, employmentId, resourceParameter);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGetDefaultImplementation(e, "/Employees/Employments/{employmentId}/FixedSalaries", uriBuilderLocalVar.Path, employmentId, resourceParameter);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<EmploymentFixedSalaryDto>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<EmploymentFixedSalaryDto>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<EmploymentFixedSalaryDto>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNoContent && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="employmentFixedSalaryPostDto"></param>
        /// <returns></returns>
        private void ValidateEmployeesEmploymentsEmploymentIdFixedSalariesPost(Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto)
        {
            if (employmentFixedSalaryPostDto.IsSet && employmentFixedSalaryPostDto.Value == null)
                throw new ArgumentNullException(nameof(employmentFixedSalaryPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFixedSalaryPostDto"></param>
        private void AfterEmployeesEmploymentsEmploymentIdFixedSalariesPostDefaultImplementation(IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto)
        {
            bool suppressDefaultLog = false;
            AfterEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref suppressDefaultLog, apiResponseLocalVar, employmentId, employmentFixedSalaryPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFixedSalaryPostDto"></param>
        partial void AfterEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref bool suppressDefaultLog, IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse apiResponseLocalVar, long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFixedSalaryPostDto"></param>
        private void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, employmentFixedSalaryPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="employmentFixedSalaryPostDto"></param>
        partial void OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto);

        /// <summary>
        /// Create a new fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFixedSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse?> EmployeesEmploymentsEmploymentIdFixedSalariesPostOrDefaultAsync(long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmployeesEmploymentsEmploymentIdFixedSalariesPostAsync(employmentId, employmentFixedSalaryPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary_Full) If successful, the new entity will be returned with an id which is unique and can be used to reference the created object in relevant requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="employmentFixedSalaryPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>&gt;</returns>
        public async Task<IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse> EmployeesEmploymentsEmploymentIdFixedSalariesPostAsync(long employmentId, Option<EmploymentFixedSalaryPostDto> employmentFixedSalaryPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmployeesEmploymentsEmploymentIdFixedSalariesPost(employmentFixedSalaryPostDto);

                FormatEmployeesEmploymentsEmploymentIdFixedSalariesPost(ref employmentId, employmentFixedSalaryPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FixedSalaries";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));

                    if (employmentFixedSalaryPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (employmentFixedSalaryPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(employmentFixedSalaryPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse>();

                        EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FixedSalaries", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmployeesEmploymentsEmploymentIdFixedSalariesPostDefaultImplementation(apiResponseLocalVar, employmentId, employmentFixedSalaryPostDto);

                        Events.ExecuteOnEmployeesEmploymentsEmploymentIdFixedSalariesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPostDefaultImplementation(e, "/Employees/Employments/{employmentId}/FixedSalaries", uriBuilderLocalVar.Path, employmentId, employmentFixedSalaryPostDto);
                Events.ExecuteOnErrorEmployeesEmploymentsEmploymentIdFixedSalariesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>
        /// </summary>
        public partial class EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IEmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse(ILogger<EmployeesEmploymentsEmploymentIdFixedSalariesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFixedSalaryById(ref long employmentId, ref Guid fixedSalaryId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        private void AfterGetFixedSalaryByIdDefaultImplementation(IGetFixedSalaryByIdApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId)
        {
            bool suppressDefaultLog = false;
            AfterGetFixedSalaryById(ref suppressDefaultLog, apiResponseLocalVar, employmentId, fixedSalaryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        partial void AfterGetFixedSalaryById(ref bool suppressDefaultLog, IGetFixedSalaryByIdApiResponse apiResponseLocalVar, long employmentId, Guid fixedSalaryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        private void OnErrorGetFixedSalaryByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFixedSalaryById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, employmentId, fixedSalaryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="employmentId"></param>
        /// <param name="fixedSalaryId"></param>
        partial void OnErrorGetFixedSalaryById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long employmentId, Guid fixedSalaryId);

        /// <summary>
        /// Gets a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full) 
        /// </summary>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFixedSalaryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFixedSalaryByIdApiResponse?> GetFixedSalaryByIdOrDefaultAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFixedSalaryByIdAsync(employmentId, fixedSalaryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets a specific fixed salary (line) on a given employment. (Auth roles: EmploymentFixedSalary,EmploymentFixedSalary_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="employmentId">The id of the employment.</param>
        /// <param name="fixedSalaryId">The id of the fixed salary (line).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFixedSalaryByIdApiResponse"/>&gt;</returns>
        public async Task<IGetFixedSalaryByIdApiResponse> GetFixedSalaryByIdAsync(long employmentId, Guid fixedSalaryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFixedSalaryById(ref employmentId, ref fixedSalaryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BemploymentId%7D", Uri.EscapeDataString(employmentId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfixedSalaryId%7D", Uri.EscapeDataString(fixedSalaryId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFixedSalaryByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFixedSalaryByIdApiResponse>();

                        GetFixedSalaryByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFixedSalaryByIdDefaultImplementation(apiResponseLocalVar, employmentId, fixedSalaryId);

                        Events.ExecuteOnGetFixedSalaryById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFixedSalaryByIdDefaultImplementation(e, "/Employees/Employments/{employmentId}/FixedSalaries/{fixedSalaryId}", uriBuilderLocalVar.Path, employmentId, fixedSalaryId);
                Events.ExecuteOnErrorGetFixedSalaryById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFixedSalaryByIdApiResponse"/>
        /// </summary>
        public partial class GetFixedSalaryByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetFixedSalaryByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFixedSalaryByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFixedSalaryByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFixedSalaryByIdApiResponse(ILogger<GetFixedSalaryByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.EmploymentFixedSalaryDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.EmploymentFixedSalaryDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
