// <auto-generated>
/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Model;
using System.Diagnostics.CodeAnalysis;

namespace PowerOfficeGoV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBankJournalsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BankJournalsApiEvents Events { get; }

        /// <summary>
        /// Get a BankJournalEntryVoucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to journals and vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a BankJournalEntryVoucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBankJournalByIdApiResponse"/>&gt;</returns>
        Task<IGetBankJournalByIdApiResponse> GetBankJournalByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a BankJournalEntryVoucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to journals and vouchers that it has created or is the current approver of.
        /// </remarks>
        /// <param name="id">The identifier of a BankJournalEntryVoucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBankJournalByIdApiResponse"/>?&gt;</returns>
        Task<IGetBankJournalByIdApiResponse?> GetBankJournalByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update BankJournalEntryVoucher header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to journals and vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              BankJournalEntryVoucherLines must be updated using a separate endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a bank journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucher. See BankJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdPatchApiResponse> JournalEntryVouchersBankJournalsIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update BankJournalEntryVoucher header. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// The integration only has access to journals and vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              BankJournalEntryVoucherLines must be updated using a separate endpoint.
        /// </remarks>
        /// <param name="id">The identifier of a bank journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucher. See BankJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdPatchApiResponse?> JournalEntryVouchersBankJournalsIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a BankJournalEntryVoucherLine from a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a BankJournalEntryVoucherLine from a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a BankJournalEntryVoucherLine. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucherLine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a BankJournalEntryVoucherLine. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucherLine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a line to a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Returns the entire BankJournalEntryVoucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesPostAsync(Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a line to a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Returns the entire BankJournalEntryVoucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesPostOrDefaultAsync(Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the BankJournalEntryVoucher.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsPostApiResponse"/>&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsPostApiResponse> JournalEntryVouchersBankJournalsPostAsync(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full)
        /// </summary>
        /// <remarks>
        /// Use the voucher page endpoint to add a page to the BankJournalEntryVoucher.
        /// </remarks>
        /// <param name="bankJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsPostApiResponse"/>?&gt;</returns>
        Task<IJournalEntryVouchersBankJournalsPostApiResponse?> JournalEntryVouchersBankJournalsPostOrDefaultAsync(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetBankJournalByIdApiResponse"/>
    /// </summary>
    public interface IGetBankJournalByIdApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersBankJournalsIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersBankJournalsIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.IApiResponse, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.IApiResponse, IOk<PowerOfficeGoV2.Model.BankJournalEntryVoucherLineDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>, IConflict<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IJournalEntryVouchersBankJournalsPostApiResponse"/>
    /// </summary>
    public interface IJournalEntryVouchersBankJournalsPostApiResponse : PowerOfficeGoV2.Client.IApiResponse, ICreated<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto?>, IBadRequest<PowerOfficeGoV2.Model.ProblemDetails?>, INotFound<PowerOfficeGoV2.Model.ProblemDetails?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BankJournalsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBankJournalById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBankJournalById;

        internal void ExecuteOnGetBankJournalById(BankJournalsApi.GetBankJournalByIdApiResponse apiResponse)
        {
            OnGetBankJournalById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBankJournalById(Exception exception)
        {
            OnErrorGetBankJournalById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersBankJournalsIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersBankJournalsIdPatch;

        internal void ExecuteOnJournalEntryVouchersBankJournalsIdPatch(BankJournalsApi.JournalEntryVouchersBankJournalsIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersBankJournalsIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersBankJournalsIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersBankJournalsIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete;

        internal void ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(BankJournalsApi.JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponse)
        {
            OnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(Exception exception)
        {
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch;

        internal void ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(BankJournalsApi.JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse apiResponse)
        {
            OnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(Exception exception)
        {
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersBankJournalsIdVoucherLinesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost;

        internal void ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesPost(BankJournalsApi.JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersBankJournalsIdVoucherLinesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost(Exception exception)
        {
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnJournalEntryVouchersBankJournalsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorJournalEntryVouchersBankJournalsPost;

        internal void ExecuteOnJournalEntryVouchersBankJournalsPost(BankJournalsApi.JournalEntryVouchersBankJournalsPostApiResponse apiResponse)
        {
            OnJournalEntryVouchersBankJournalsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorJournalEntryVouchersBankJournalsPost(Exception exception)
        {
            OnErrorJournalEntryVouchersBankJournalsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BankJournalsApi : IBankJournalsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BankJournalsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BankJournalsApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankJournalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankJournalsApi(ILogger<BankJournalsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BankJournalsApiEvents bankJournalsApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BankJournalsApi>();
            HttpClient = httpClient;
            Events = bankJournalsApiEvents;
        }

        partial void FormatGetBankJournalById(ref Guid id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetBankJournalByIdDefaultImplementation(IGetBankJournalByIdApiResponse apiResponseLocalVar, Guid id)
        {
            bool suppressDefaultLog = false;
            AfterGetBankJournalById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetBankJournalById(ref bool suppressDefaultLog, IGetBankJournalByIdApiResponse apiResponseLocalVar, Guid id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetBankJournalByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBankJournalById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetBankJournalById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id);

        /// <summary>
        /// Get a BankJournalEntryVoucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to journals and vouchers that it has created or is the current approver of.
        /// </summary>
        /// <param name="id">The identifier of a BankJournalEntryVoucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBankJournalByIdApiResponse"/>&gt;</returns>
        public async Task<IGetBankJournalByIdApiResponse?> GetBankJournalByIdOrDefaultAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBankJournalByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a BankJournalEntryVoucher by id. (Auth roles: JournalEntryVoucher,JournalEntryVoucher_Full) The integration only has access to journals and vouchers that it has created or is the current approver of.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a BankJournalEntryVoucher.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBankJournalByIdApiResponse"/>&gt;</returns>
        public async Task<IGetBankJournalByIdApiResponse> GetBankJournalByIdAsync(Guid id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBankJournalById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBankJournalByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBankJournalByIdApiResponse>();

                        GetBankJournalByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBankJournalByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetBankJournalById(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBankJournalByIdDefaultImplementation(e, "/JournalEntryVouchers/BankJournals/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetBankJournalById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBankJournalByIdApiResponse"/>
        /// </summary>
        public partial class GetBankJournalByIdApiResponse : PowerOfficeGoV2.Client.ApiResponse, IGetBankJournalByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBankJournalByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBankJournalByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBankJournalByIdApiResponse(ILogger<GetBankJournalByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersBankJournalsIdPatch(ref Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersBankJournalsIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersBankJournalsIdPatchDefaultImplementation(IJournalEntryVouchersBankJournalsIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersBankJournalsIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersBankJournalsIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersBankJournalsIdPatchApiResponse apiResponseLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersBankJournalsIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersBankJournalsIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersBankJournalsIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<List<Operation>> operation);

        /// <summary>
        /// Update BankJournalEntryVoucher header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to journals and vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              BankJournalEntryVoucherLines must be updated using a separate endpoint.
        /// </summary>
        /// <param name="id">The identifier of a bank journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucher. See BankJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdPatchApiResponse?> JournalEntryVouchersBankJournalsIdPatchOrDefaultAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersBankJournalsIdPatchAsync(id, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update BankJournalEntryVoucher header. (Auth roles: JournalEntryVoucher_Full) The integration only has access to journals and vouchers that it has created or is the current approver of.              If the voucher is currently under approval by a different approver, the integration will not be able to update the voucher.              BankJournalEntryVoucherLines must be updated using a separate endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of a bank journal entry.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucher. See BankJournalEntryVoucherPatchDto schema for all available properties.              For more information on JSON patch and the various operations allowed, check out: https://datatracker.ietf.org/doc/html/rfc6902 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdPatchApiResponse> JournalEntryVouchersBankJournalsIdPatchAsync(Guid id, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersBankJournalsIdPatch(operation);

                FormatJournalEntryVouchersBankJournalsIdPatch(ref id, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersBankJournalsIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersBankJournalsIdPatchApiResponse>();

                        JournalEntryVouchersBankJournalsIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersBankJournalsIdPatchDefaultImplementation(apiResponseLocalVar, id, operation);

                        Events.ExecuteOnJournalEntryVouchersBankJournalsIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersBankJournalsIdPatchDefaultImplementation(e, "/JournalEntryVouchers/BankJournals/{id}", uriBuilderLocalVar.Path, id, operation);
                Events.ExecuteOnErrorJournalEntryVouchersBankJournalsIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersBankJournalsIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersBankJournalsIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersBankJournalsIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersBankJournalsIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersBankJournalsIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersBankJournalsIdPatchApiResponse(ILogger<JournalEntryVouchersBankJournalsIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref Guid id, ref long lineId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id, lineId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref bool suppressDefaultLog, IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar, Guid id, long lineId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        private void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        partial void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId);

        /// <summary>
        /// Delete a BankJournalEntryVoucherLine from a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteOrDefaultAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteAsync(id, lineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete a BankJournalEntryVoucherLine from a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteAsync(Guid id, long lineId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(ref id, ref lineId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse>();

                        JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(apiResponseLocalVar, id, lineId);

                        Events.ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteDefaultImplementation(e, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId);
                Events.ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse(ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref Guid id, ref long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="operation"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(Option<List<Operation>> operation)
        {
            if (operation.IsSet && operation.Value == null)
                throw new ArgumentNullException(nameof(operation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchDefaultImplementation(IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, lineId, operation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref bool suppressDefaultLog, IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        private void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, lineId, operation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="lineId"></param>
        /// <param name="operation"></param>
        partial void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, long lineId, Option<List<Operation>> operation);

        /// <summary>
        /// Update a BankJournalEntryVoucherLine. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucherLine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchOrDefaultAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchAsync(id, lineId, operation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a BankJournalEntryVoucherLine. (Auth roles: JournalEntryVoucher_Full) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identifier of the BankJournalEntryVoucher.</param>
        /// <param name="lineId">The identifier of the BankJournalEntryVoucherLine.</param>
        /// <param name="operation">JSON Patch structure for updating a BankJournalEntryVoucherLine. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchAsync(Guid id, long lineId, Option<List<Operation>> operation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(operation);

                FormatJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(ref id, ref lineId, operation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BlineId%7D", Uri.EscapeDataString(lineId.ToString()));

                    if (operation.IsSet)
                        httpRequestMessageLocalVar.Content = (operation.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(operation.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse>();

                        JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchDefaultImplementation(apiResponseLocalVar, id, lineId, operation);

                        Events.ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchDefaultImplementation(e, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines/{lineId}", uriBuilderLocalVar.Path, id, lineId, operation);
                Events.ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse(ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesLineIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.BankJournalEntryVoucherLineDto? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.BankJournalEntryVoucherLineDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out PowerOfficeGoV2.Model.BankJournalEntryVoucherLineDto? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? Conflict()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsConflict
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 409 Conflict and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryConflict([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = Conflict();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)409);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsNotFound && !IsConflict && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="bankJournalEntryVoucherLinePostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersBankJournalsIdVoucherLinesPost(Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto)
        {
            if (bankJournalEntryVoucherLinePostDto.IsSet && bankJournalEntryVoucherLinePostDto.Value == null)
                throw new ArgumentNullException(nameof(bankJournalEntryVoucherLinePostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"></param>
        private void AfterJournalEntryVouchersBankJournalsIdVoucherLinesPostDefaultImplementation(IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref suppressDefaultLog, apiResponseLocalVar, id, bankJournalEntryVoucherLinePostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"></param>
        partial void AfterJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref bool suppressDefaultLog, IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar, Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"></param>
        private void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, bankJournalEntryVoucherLinePostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"></param>
        partial void OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto);

        /// <summary>
        /// Add a line to a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) Returns the entire BankJournalEntryVoucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse?> JournalEntryVouchersBankJournalsIdVoucherLinesPostOrDefaultAsync(Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersBankJournalsIdVoucherLinesPostAsync(id, bankJournalEntryVoucherLinePostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a line to a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) Returns the entire BankJournalEntryVoucher with all lines, including the new one. The newest line can be identified by its created date.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="bankJournalEntryVoucherLinePostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse> JournalEntryVouchersBankJournalsIdVoucherLinesPostAsync(Guid id, Option<BankJournalEntryVoucherLinePostDto> bankJournalEntryVoucherLinePostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersBankJournalsIdVoucherLinesPost(bankJournalEntryVoucherLinePostDto);

                FormatJournalEntryVouchersBankJournalsIdVoucherLinesPost(ref id, bankJournalEntryVoucherLinePostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals/{id}/VoucherLines";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (bankJournalEntryVoucherLinePostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (bankJournalEntryVoucherLinePostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(bankJournalEntryVoucherLinePostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse>();

                        JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersBankJournalsIdVoucherLinesPostDefaultImplementation(apiResponseLocalVar, id, bankJournalEntryVoucherLinePostDto);

                        Events.ExecuteOnJournalEntryVouchersBankJournalsIdVoucherLinesPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPostDefaultImplementation(e, "/JournalEntryVouchers/BankJournals/{id}/VoucherLines", uriBuilderLocalVar.Path, id, bankJournalEntryVoucherLinePostDto);
                Events.ExecuteOnErrorJournalEntryVouchersBankJournalsIdVoucherLinesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse(ILogger<JournalEntryVouchersBankJournalsIdVoucherLinesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatJournalEntryVouchersBankJournalsPost(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="bankJournalEntryVoucherPostDto"></param>
        /// <returns></returns>
        private void ValidateJournalEntryVouchersBankJournalsPost(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto)
        {
            if (bankJournalEntryVoucherPostDto.IsSet && bankJournalEntryVoucherPostDto.Value == null)
                throw new ArgumentNullException(nameof(bankJournalEntryVoucherPostDto));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bankJournalEntryVoucherPostDto"></param>
        private void AfterJournalEntryVouchersBankJournalsPostDefaultImplementation(IJournalEntryVouchersBankJournalsPostApiResponse apiResponseLocalVar, Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLog = false;
            AfterJournalEntryVouchersBankJournalsPost(ref suppressDefaultLog, apiResponseLocalVar, bankJournalEntryVoucherPostDto);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="bankJournalEntryVoucherPostDto"></param>
        partial void AfterJournalEntryVouchersBankJournalsPost(ref bool suppressDefaultLog, IJournalEntryVouchersBankJournalsPostApiResponse apiResponseLocalVar, Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bankJournalEntryVoucherPostDto"></param>
        private void OnErrorJournalEntryVouchersBankJournalsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorJournalEntryVouchersBankJournalsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, bankJournalEntryVoucherPostDto);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="bankJournalEntryVoucherPostDto"></param>
        partial void OnErrorJournalEntryVouchersBankJournalsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto);

        /// <summary>
        /// Create a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the BankJournalEntryVoucher.
        /// </summary>
        /// <param name="bankJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsPostApiResponse?> JournalEntryVouchersBankJournalsPostOrDefaultAsync(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await JournalEntryVouchersBankJournalsPostAsync(bankJournalEntryVoucherPostDto, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a BankJournalEntryVoucher. (Auth roles: JournalEntryVoucher_Full) Use the voucher page endpoint to add a page to the BankJournalEntryVoucher.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankJournalEntryVoucherPostDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IJournalEntryVouchersBankJournalsPostApiResponse"/>&gt;</returns>
        public async Task<IJournalEntryVouchersBankJournalsPostApiResponse> JournalEntryVouchersBankJournalsPostAsync(Option<BankJournalEntryVoucherPostDto> bankJournalEntryVoucherPostDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateJournalEntryVouchersBankJournalsPost(bankJournalEntryVoucherPostDto);

                FormatJournalEntryVouchersBankJournalsPost(bankJournalEntryVoucherPostDto);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/JournalEntryVouchers/BankJournals";

                    if (bankJournalEntryVoucherPostDto.IsSet)
                        httpRequestMessageLocalVar.Content = (bankJournalEntryVoucherPostDto.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(bankJournalEntryVoucherPostDto.Value, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json-patch+json",
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<JournalEntryVouchersBankJournalsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<JournalEntryVouchersBankJournalsPostApiResponse>();

                        JournalEntryVouchersBankJournalsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/JournalEntryVouchers/BankJournals", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterJournalEntryVouchersBankJournalsPostDefaultImplementation(apiResponseLocalVar, bankJournalEntryVoucherPostDto);

                        Events.ExecuteOnJournalEntryVouchersBankJournalsPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorJournalEntryVouchersBankJournalsPostDefaultImplementation(e, "/JournalEntryVouchers/BankJournals", uriBuilderLocalVar.Path, bankJournalEntryVoucherPostDto);
                Events.ExecuteOnErrorJournalEntryVouchersBankJournalsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="JournalEntryVouchersBankJournalsPostApiResponse"/>
        /// </summary>
        public partial class JournalEntryVouchersBankJournalsPostApiResponse : PowerOfficeGoV2.Client.ApiResponse, IJournalEntryVouchersBankJournalsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<JournalEntryVouchersBankJournalsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="JournalEntryVouchersBankJournalsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public JournalEntryVouchersBankJournalsPostApiResponse(ILogger<JournalEntryVouchersBankJournalsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.BankJournalEntryVoucherDto>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out PowerOfficeGoV2.Model.BankJournalEntryVoucherDto? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public PowerOfficeGoV2.Model.ProblemDetails? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<PowerOfficeGoV2.Model.ProblemDetails>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out PowerOfficeGoV2.Model.ProblemDetails? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated && !IsBadRequest && !IsNotFound && !IsUnauthorized && !IsForbidden && !IsTooManyRequests;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
