/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using PowerOfficeGoV2.Client;
using PowerOfficeGoV2.Api;
using PowerOfficeGoV2.Extensions;
using Xunit;

namespace PowerOfficeGoV2.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddPowerOfficeGoApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddPowerOfficeGoApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var accessRolesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAccessRolesApi>();
            Assert.True(accessRolesApi.HttpClient.BaseAddress != null);

            var accountTransactionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAccountTransactionsApi>();
            Assert.True(accountTransactionsApi.HttpClient.BaseAddress != null);

            var assignmentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAssignmentsApi>();
            Assert.True(assignmentsApi.HttpClient.BaseAddress != null);

            var bankJournalsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBankJournalsApi>();
            Assert.True(bankJournalsApi.HttpClient.BaseAddress != null);

            var bankVoucherPostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBankVoucherPostingApi>();
            Assert.True(bankVoucherPostingApi.HttpClient.BaseAddress != null);

            var brandingThemesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IBrandingThemesApi>();
            Assert.True(brandingThemesApi.HttpClient.BaseAddress != null);

            var cashVoucherPostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICashVoucherPostingApi>();
            Assert.True(cashVoucherPostingApi.HttpClient.BaseAddress != null);

            var clientBankAccountApproversApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientBankAccountApproversApi>();
            Assert.True(clientBankAccountApproversApi.HttpClient.BaseAddress != null);

            var clientBankAccountsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientBankAccountsApi>();
            Assert.True(clientBankAccountsApi.HttpClient.BaseAddress != null);

            var clientContactsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientContactsApi>();
            Assert.True(clientContactsApi.HttpClient.BaseAddress != null);

            var clientIntegrationInformationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientIntegrationInformationApi>();
            Assert.True(clientIntegrationInformationApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var contactBankAccountsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactBankAccountsApi>();
            Assert.True(contactBankAccountsApi.HttpClient.BaseAddress != null);

            var contactDeliveryAddressesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactDeliveryAddressesApi>();
            Assert.True(contactDeliveryAddressesApi.HttpClient.BaseAddress != null);

            var contactGroupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactGroupsApi>();
            Assert.True(contactGroupsApi.HttpClient.BaseAddress != null);

            var contactPersonsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IContactPersonsApi>();
            Assert.True(contactPersonsApi.HttpClient.BaseAddress != null);

            var createAndSendInvoiceApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICreateAndSendInvoiceApi>();
            Assert.True(createAndSendInvoiceApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyRatesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICurrencyRatesApi>();
            Assert.True(currencyRatesApi.HttpClient.BaseAddress != null);

            var customDimensionSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICustomDimensionSettingsApi>();
            Assert.True(customDimensionSettingsApi.HttpClient.BaseAddress != null);

            var customDimensionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICustomDimensionsApi>();
            Assert.True(customDimensionsApi.HttpClient.BaseAddress != null);

            var customerSubLedgerEntriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICustomerSubLedgerEntriesApi>();
            Assert.True(customerSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var customersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICustomersApi>();
            Assert.True(customersApi.HttpClient.BaseAddress != null);

            var deliveryTermsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDeliveryTermsApi>();
            Assert.True(deliveryTermsApi.HttpClient.BaseAddress != null);

            var departmentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDepartmentsApi>();
            Assert.True(departmentsApi.HttpClient.BaseAddress != null);

            var employeeHourlyRatesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmployeeHourlyRatesApi>();
            Assert.True(employeeHourlyRatesApi.HttpClient.BaseAddress != null);

            var employeeSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmployeeSettingsApi>();
            Assert.True(employeeSettingsApi.HttpClient.BaseAddress != null);

            var employeesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmployeesApi>();
            Assert.True(employeesApi.HttpClient.BaseAddress != null);

            var employmentFixedSalariesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentFixedSalariesApi>();
            Assert.True(employmentFixedSalariesApi.HttpClient.BaseAddress != null);

            var employmentFtePercentagesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentFtePercentagesApi>();
            Assert.True(employmentFtePercentagesApi.HttpClient.BaseAddress != null);

            var employmentLayoffsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentLayoffsApi>();
            Assert.True(employmentLayoffsApi.HttpClient.BaseAddress != null);

            var employmentLeavesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentLeavesApi>();
            Assert.True(employmentLeavesApi.HttpClient.BaseAddress != null);

            var employmentSalariesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentSalariesApi>();
            Assert.True(employmentSalariesApi.HttpClient.BaseAddress != null);

            var employmentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmploymentsApi>();
            Assert.True(employmentsApi.HttpClient.BaseAddress != null);

            var enterprisesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEnterprisesApi>();
            Assert.True(enterprisesApi.HttpClient.BaseAddress != null);

            var financialSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFinancialSettingsApi>();
            Assert.True(financialSettingsApi.HttpClient.BaseAddress != null);

            var generalLedgerAccountsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGeneralLedgerAccountsApi>();
            Assert.True(generalLedgerAccountsApi.HttpClient.BaseAddress != null);

            var incomingInvoicesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIncomingInvoicesApi>();
            Assert.True(incomingInvoicesApi.HttpClient.BaseAddress != null);

            var journalEntryVouchersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IJournalEntryVouchersApi>();
            Assert.True(journalEntryVouchersApi.HttpClient.BaseAddress != null);

            var locationsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILocationsApi>();
            Assert.True(locationsApi.HttpClient.BaseAddress != null);

            var lockDateSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ILockDateSettingsApi>();
            Assert.True(lockDateSettingsApi.HttpClient.BaseAddress != null);

            var manualJournalsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IManualJournalsApi>();
            Assert.True(manualJournalsApi.HttpClient.BaseAddress != null);

            var manualVoucherPostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IManualVoucherPostingApi>();
            Assert.True(manualVoucherPostingApi.HttpClient.BaseAddress != null);

            var onboardingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOnboardingApi>();
            Assert.True(onboardingApi.HttpClient.BaseAddress != null);

            var organizationSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOrganizationSettingsApi>();
            Assert.True(organizationSettingsApi.HttpClient.BaseAddress != null);

            var outgoingInvoicePostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOutgoingInvoicePostingApi>();
            Assert.True(outgoingInvoicePostingApi.HttpClient.BaseAddress != null);

            var outgoingInvoicesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOutgoingInvoicesApi>();
            Assert.True(outgoingInvoicesApi.HttpClient.BaseAddress != null);

            var payItemsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPayItemsApi>();
            Assert.True(payItemsApi.HttpClient.BaseAddress != null);

            var paymentTermsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPaymentTermsApi>();
            Assert.True(paymentTermsApi.HttpClient.BaseAddress != null);

            var payrollSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPayrollSettingsApi>();
            Assert.True(payrollSettingsApi.HttpClient.BaseAddress != null);

            var productGroupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProductGroupsApi>();
            Assert.True(productGroupsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var reverseVoucherPostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReverseVoucherPostingApi>();
            Assert.True(reverseVoucherPostingApi.HttpClient.BaseAddress != null);

            var salaryLinesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISalaryLinesApi>();
            Assert.True(salaryLinesApi.HttpClient.BaseAddress != null);

            var salesOrderAttachmentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISalesOrderAttachmentsApi>();
            Assert.True(salesOrderAttachmentsApi.HttpClient.BaseAddress != null);

            var salesOrderCompleteApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISalesOrderCompleteApi>();
            Assert.True(salesOrderCompleteApi.HttpClient.BaseAddress != null);

            var salesOrderLinesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISalesOrderLinesApi>();
            Assert.True(salesOrderLinesApi.HttpClient.BaseAddress != null);

            var salesOrdersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISalesOrdersApi>();
            Assert.True(salesOrdersApi.HttpClient.BaseAddress != null);

            var subLedgerNumberSeriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISubLedgerNumberSeriesApi>();
            Assert.True(subLedgerNumberSeriesApi.HttpClient.BaseAddress != null);

            var supplierCreditNotesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISupplierCreditNotesApi>();
            Assert.True(supplierCreditNotesApi.HttpClient.BaseAddress != null);

            var supplierInvoicesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISupplierInvoicesApi>();
            Assert.True(supplierInvoicesApi.HttpClient.BaseAddress != null);

            var supplierSubLedgerEntriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISupplierSubLedgerEntriesApi>();
            Assert.True(supplierSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var trialBalanceApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITrialBalanceApi>();
            Assert.True(trialBalanceApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var vatCodesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVatCodesApi>();
            Assert.True(vatCodesApi.HttpClient.BaseAddress != null);

            var vatSettingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVatSettingsApi>();
            Assert.True(vatSettingsApi.HttpClient.BaseAddress != null);

            var voucherApprovalApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVoucherApprovalApi>();
            Assert.True(voucherApprovalApi.HttpClient.BaseAddress != null);

            var voucherDocumentationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVoucherDocumentationApi>();
            Assert.True(voucherDocumentationApi.HttpClient.BaseAddress != null);

            var voucherPagesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVoucherPagesApi>();
            Assert.True(voucherPagesApi.HttpClient.BaseAddress != null);

            var yearEndVoucherPostingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IYearEndVoucherPostingApi>();
            Assert.True(yearEndVoucherPostingApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var accessRolesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAccessRolesApi>();
            Assert.True(accessRolesApi.HttpClient.BaseAddress != null);

            var accountTransactionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAccountTransactionsApi>();
            Assert.True(accountTransactionsApi.HttpClient.BaseAddress != null);

            var assignmentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAssignmentsApi>();
            Assert.True(assignmentsApi.HttpClient.BaseAddress != null);

            var bankJournalsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBankJournalsApi>();
            Assert.True(bankJournalsApi.HttpClient.BaseAddress != null);

            var bankVoucherPostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBankVoucherPostingApi>();
            Assert.True(bankVoucherPostingApi.HttpClient.BaseAddress != null);

            var brandingThemesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IBrandingThemesApi>();
            Assert.True(brandingThemesApi.HttpClient.BaseAddress != null);

            var cashVoucherPostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICashVoucherPostingApi>();
            Assert.True(cashVoucherPostingApi.HttpClient.BaseAddress != null);

            var clientBankAccountApproversApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientBankAccountApproversApi>();
            Assert.True(clientBankAccountApproversApi.HttpClient.BaseAddress != null);

            var clientBankAccountsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientBankAccountsApi>();
            Assert.True(clientBankAccountsApi.HttpClient.BaseAddress != null);

            var clientContactsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientContactsApi>();
            Assert.True(clientContactsApi.HttpClient.BaseAddress != null);

            var clientIntegrationInformationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientIntegrationInformationApi>();
            Assert.True(clientIntegrationInformationApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var contactBankAccountsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactBankAccountsApi>();
            Assert.True(contactBankAccountsApi.HttpClient.BaseAddress != null);

            var contactDeliveryAddressesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactDeliveryAddressesApi>();
            Assert.True(contactDeliveryAddressesApi.HttpClient.BaseAddress != null);

            var contactGroupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactGroupsApi>();
            Assert.True(contactGroupsApi.HttpClient.BaseAddress != null);

            var contactPersonsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IContactPersonsApi>();
            Assert.True(contactPersonsApi.HttpClient.BaseAddress != null);

            var createAndSendInvoiceApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICreateAndSendInvoiceApi>();
            Assert.True(createAndSendInvoiceApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyRatesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICurrencyRatesApi>();
            Assert.True(currencyRatesApi.HttpClient.BaseAddress != null);

            var customDimensionSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICustomDimensionSettingsApi>();
            Assert.True(customDimensionSettingsApi.HttpClient.BaseAddress != null);

            var customDimensionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICustomDimensionsApi>();
            Assert.True(customDimensionsApi.HttpClient.BaseAddress != null);

            var customerSubLedgerEntriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICustomerSubLedgerEntriesApi>();
            Assert.True(customerSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var customersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICustomersApi>();
            Assert.True(customersApi.HttpClient.BaseAddress != null);

            var deliveryTermsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDeliveryTermsApi>();
            Assert.True(deliveryTermsApi.HttpClient.BaseAddress != null);

            var departmentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDepartmentsApi>();
            Assert.True(departmentsApi.HttpClient.BaseAddress != null);

            var employeeHourlyRatesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmployeeHourlyRatesApi>();
            Assert.True(employeeHourlyRatesApi.HttpClient.BaseAddress != null);

            var employeeSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmployeeSettingsApi>();
            Assert.True(employeeSettingsApi.HttpClient.BaseAddress != null);

            var employeesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmployeesApi>();
            Assert.True(employeesApi.HttpClient.BaseAddress != null);

            var employmentFixedSalariesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentFixedSalariesApi>();
            Assert.True(employmentFixedSalariesApi.HttpClient.BaseAddress != null);

            var employmentFtePercentagesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentFtePercentagesApi>();
            Assert.True(employmentFtePercentagesApi.HttpClient.BaseAddress != null);

            var employmentLayoffsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentLayoffsApi>();
            Assert.True(employmentLayoffsApi.HttpClient.BaseAddress != null);

            var employmentLeavesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentLeavesApi>();
            Assert.True(employmentLeavesApi.HttpClient.BaseAddress != null);

            var employmentSalariesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentSalariesApi>();
            Assert.True(employmentSalariesApi.HttpClient.BaseAddress != null);

            var employmentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmploymentsApi>();
            Assert.True(employmentsApi.HttpClient.BaseAddress != null);

            var enterprisesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEnterprisesApi>();
            Assert.True(enterprisesApi.HttpClient.BaseAddress != null);

            var financialSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFinancialSettingsApi>();
            Assert.True(financialSettingsApi.HttpClient.BaseAddress != null);

            var generalLedgerAccountsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGeneralLedgerAccountsApi>();
            Assert.True(generalLedgerAccountsApi.HttpClient.BaseAddress != null);

            var incomingInvoicesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIncomingInvoicesApi>();
            Assert.True(incomingInvoicesApi.HttpClient.BaseAddress != null);

            var journalEntryVouchersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IJournalEntryVouchersApi>();
            Assert.True(journalEntryVouchersApi.HttpClient.BaseAddress != null);

            var locationsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILocationsApi>();
            Assert.True(locationsApi.HttpClient.BaseAddress != null);

            var lockDateSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ILockDateSettingsApi>();
            Assert.True(lockDateSettingsApi.HttpClient.BaseAddress != null);

            var manualJournalsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IManualJournalsApi>();
            Assert.True(manualJournalsApi.HttpClient.BaseAddress != null);

            var manualVoucherPostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IManualVoucherPostingApi>();
            Assert.True(manualVoucherPostingApi.HttpClient.BaseAddress != null);

            var onboardingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOnboardingApi>();
            Assert.True(onboardingApi.HttpClient.BaseAddress != null);

            var organizationSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOrganizationSettingsApi>();
            Assert.True(organizationSettingsApi.HttpClient.BaseAddress != null);

            var outgoingInvoicePostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOutgoingInvoicePostingApi>();
            Assert.True(outgoingInvoicePostingApi.HttpClient.BaseAddress != null);

            var outgoingInvoicesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOutgoingInvoicesApi>();
            Assert.True(outgoingInvoicesApi.HttpClient.BaseAddress != null);

            var payItemsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPayItemsApi>();
            Assert.True(payItemsApi.HttpClient.BaseAddress != null);

            var paymentTermsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPaymentTermsApi>();
            Assert.True(paymentTermsApi.HttpClient.BaseAddress != null);

            var payrollSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPayrollSettingsApi>();
            Assert.True(payrollSettingsApi.HttpClient.BaseAddress != null);

            var productGroupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProductGroupsApi>();
            Assert.True(productGroupsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var reverseVoucherPostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReverseVoucherPostingApi>();
            Assert.True(reverseVoucherPostingApi.HttpClient.BaseAddress != null);

            var salaryLinesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISalaryLinesApi>();
            Assert.True(salaryLinesApi.HttpClient.BaseAddress != null);

            var salesOrderAttachmentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISalesOrderAttachmentsApi>();
            Assert.True(salesOrderAttachmentsApi.HttpClient.BaseAddress != null);

            var salesOrderCompleteApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISalesOrderCompleteApi>();
            Assert.True(salesOrderCompleteApi.HttpClient.BaseAddress != null);

            var salesOrderLinesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISalesOrderLinesApi>();
            Assert.True(salesOrderLinesApi.HttpClient.BaseAddress != null);

            var salesOrdersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISalesOrdersApi>();
            Assert.True(salesOrdersApi.HttpClient.BaseAddress != null);

            var subLedgerNumberSeriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISubLedgerNumberSeriesApi>();
            Assert.True(subLedgerNumberSeriesApi.HttpClient.BaseAddress != null);

            var supplierCreditNotesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISupplierCreditNotesApi>();
            Assert.True(supplierCreditNotesApi.HttpClient.BaseAddress != null);

            var supplierInvoicesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISupplierInvoicesApi>();
            Assert.True(supplierInvoicesApi.HttpClient.BaseAddress != null);

            var supplierSubLedgerEntriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISupplierSubLedgerEntriesApi>();
            Assert.True(supplierSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var trialBalanceApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITrialBalanceApi>();
            Assert.True(trialBalanceApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var vatCodesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVatCodesApi>();
            Assert.True(vatCodesApi.HttpClient.BaseAddress != null);

            var vatSettingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVatSettingsApi>();
            Assert.True(vatSettingsApi.HttpClient.BaseAddress != null);

            var voucherApprovalApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVoucherApprovalApi>();
            Assert.True(voucherApprovalApi.HttpClient.BaseAddress != null);

            var voucherDocumentationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVoucherDocumentationApi>();
            Assert.True(voucherDocumentationApi.HttpClient.BaseAddress != null);

            var voucherPagesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVoucherPagesApi>();
            Assert.True(voucherPagesApi.HttpClient.BaseAddress != null);

            var yearEndVoucherPostingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IYearEndVoucherPostingApi>();
            Assert.True(yearEndVoucherPostingApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var accessRolesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAccessRolesApi>();
            Assert.True(accessRolesApi.HttpClient.BaseAddress != null);
            
            var accountTransactionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAccountTransactionsApi>();
            Assert.True(accountTransactionsApi.HttpClient.BaseAddress != null);
            
            var assignmentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAssignmentsApi>();
            Assert.True(assignmentsApi.HttpClient.BaseAddress != null);
            
            var bankJournalsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBankJournalsApi>();
            Assert.True(bankJournalsApi.HttpClient.BaseAddress != null);
            
            var bankVoucherPostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBankVoucherPostingApi>();
            Assert.True(bankVoucherPostingApi.HttpClient.BaseAddress != null);
            
            var brandingThemesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IBrandingThemesApi>();
            Assert.True(brandingThemesApi.HttpClient.BaseAddress != null);
            
            var cashVoucherPostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICashVoucherPostingApi>();
            Assert.True(cashVoucherPostingApi.HttpClient.BaseAddress != null);
            
            var clientBankAccountApproversApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientBankAccountApproversApi>();
            Assert.True(clientBankAccountApproversApi.HttpClient.BaseAddress != null);
            
            var clientBankAccountsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientBankAccountsApi>();
            Assert.True(clientBankAccountsApi.HttpClient.BaseAddress != null);
            
            var clientContactsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientContactsApi>();
            Assert.True(clientContactsApi.HttpClient.BaseAddress != null);
            
            var clientIntegrationInformationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientIntegrationInformationApi>();
            Assert.True(clientIntegrationInformationApi.HttpClient.BaseAddress != null);
            
            var clientsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);
            
            var contactBankAccountsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactBankAccountsApi>();
            Assert.True(contactBankAccountsApi.HttpClient.BaseAddress != null);
            
            var contactDeliveryAddressesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactDeliveryAddressesApi>();
            Assert.True(contactDeliveryAddressesApi.HttpClient.BaseAddress != null);
            
            var contactGroupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactGroupsApi>();
            Assert.True(contactGroupsApi.HttpClient.BaseAddress != null);
            
            var contactPersonsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IContactPersonsApi>();
            Assert.True(contactPersonsApi.HttpClient.BaseAddress != null);
            
            var createAndSendInvoiceApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICreateAndSendInvoiceApi>();
            Assert.True(createAndSendInvoiceApi.HttpClient.BaseAddress != null);
            
            var currenciesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);
            
            var currencyRatesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICurrencyRatesApi>();
            Assert.True(currencyRatesApi.HttpClient.BaseAddress != null);
            
            var customDimensionSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICustomDimensionSettingsApi>();
            Assert.True(customDimensionSettingsApi.HttpClient.BaseAddress != null);
            
            var customDimensionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICustomDimensionsApi>();
            Assert.True(customDimensionsApi.HttpClient.BaseAddress != null);
            
            var customerSubLedgerEntriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICustomerSubLedgerEntriesApi>();
            Assert.True(customerSubLedgerEntriesApi.HttpClient.BaseAddress != null);
            
            var customersApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICustomersApi>();
            Assert.True(customersApi.HttpClient.BaseAddress != null);
            
            var deliveryTermsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDeliveryTermsApi>();
            Assert.True(deliveryTermsApi.HttpClient.BaseAddress != null);
            
            var departmentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDepartmentsApi>();
            Assert.True(departmentsApi.HttpClient.BaseAddress != null);
            
            var employeeHourlyRatesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmployeeHourlyRatesApi>();
            Assert.True(employeeHourlyRatesApi.HttpClient.BaseAddress != null);
            
            var employeeSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmployeeSettingsApi>();
            Assert.True(employeeSettingsApi.HttpClient.BaseAddress != null);
            
            var employeesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmployeesApi>();
            Assert.True(employeesApi.HttpClient.BaseAddress != null);
            
            var employmentFixedSalariesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentFixedSalariesApi>();
            Assert.True(employmentFixedSalariesApi.HttpClient.BaseAddress != null);
            
            var employmentFtePercentagesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentFtePercentagesApi>();
            Assert.True(employmentFtePercentagesApi.HttpClient.BaseAddress != null);
            
            var employmentLayoffsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentLayoffsApi>();
            Assert.True(employmentLayoffsApi.HttpClient.BaseAddress != null);
            
            var employmentLeavesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentLeavesApi>();
            Assert.True(employmentLeavesApi.HttpClient.BaseAddress != null);
            
            var employmentSalariesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentSalariesApi>();
            Assert.True(employmentSalariesApi.HttpClient.BaseAddress != null);
            
            var employmentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmploymentsApi>();
            Assert.True(employmentsApi.HttpClient.BaseAddress != null);
            
            var enterprisesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEnterprisesApi>();
            Assert.True(enterprisesApi.HttpClient.BaseAddress != null);
            
            var financialSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFinancialSettingsApi>();
            Assert.True(financialSettingsApi.HttpClient.BaseAddress != null);
            
            var generalLedgerAccountsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGeneralLedgerAccountsApi>();
            Assert.True(generalLedgerAccountsApi.HttpClient.BaseAddress != null);
            
            var incomingInvoicesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIncomingInvoicesApi>();
            Assert.True(incomingInvoicesApi.HttpClient.BaseAddress != null);
            
            var journalEntryVouchersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IJournalEntryVouchersApi>();
            Assert.True(journalEntryVouchersApi.HttpClient.BaseAddress != null);
            
            var locationsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILocationsApi>();
            Assert.True(locationsApi.HttpClient.BaseAddress != null);
            
            var lockDateSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ILockDateSettingsApi>();
            Assert.True(lockDateSettingsApi.HttpClient.BaseAddress != null);
            
            var manualJournalsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IManualJournalsApi>();
            Assert.True(manualJournalsApi.HttpClient.BaseAddress != null);
            
            var manualVoucherPostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IManualVoucherPostingApi>();
            Assert.True(manualVoucherPostingApi.HttpClient.BaseAddress != null);
            
            var onboardingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOnboardingApi>();
            Assert.True(onboardingApi.HttpClient.BaseAddress != null);
            
            var organizationSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOrganizationSettingsApi>();
            Assert.True(organizationSettingsApi.HttpClient.BaseAddress != null);
            
            var outgoingInvoicePostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOutgoingInvoicePostingApi>();
            Assert.True(outgoingInvoicePostingApi.HttpClient.BaseAddress != null);
            
            var outgoingInvoicesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOutgoingInvoicesApi>();
            Assert.True(outgoingInvoicesApi.HttpClient.BaseAddress != null);
            
            var payItemsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPayItemsApi>();
            Assert.True(payItemsApi.HttpClient.BaseAddress != null);
            
            var paymentTermsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPaymentTermsApi>();
            Assert.True(paymentTermsApi.HttpClient.BaseAddress != null);
            
            var payrollSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPayrollSettingsApi>();
            Assert.True(payrollSettingsApi.HttpClient.BaseAddress != null);
            
            var productGroupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProductGroupsApi>();
            Assert.True(productGroupsApi.HttpClient.BaseAddress != null);
            
            var productsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);
            
            var projectsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);
            
            var reverseVoucherPostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReverseVoucherPostingApi>();
            Assert.True(reverseVoucherPostingApi.HttpClient.BaseAddress != null);
            
            var salaryLinesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISalaryLinesApi>();
            Assert.True(salaryLinesApi.HttpClient.BaseAddress != null);
            
            var salesOrderAttachmentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISalesOrderAttachmentsApi>();
            Assert.True(salesOrderAttachmentsApi.HttpClient.BaseAddress != null);
            
            var salesOrderCompleteApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISalesOrderCompleteApi>();
            Assert.True(salesOrderCompleteApi.HttpClient.BaseAddress != null);
            
            var salesOrderLinesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISalesOrderLinesApi>();
            Assert.True(salesOrderLinesApi.HttpClient.BaseAddress != null);
            
            var salesOrdersApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISalesOrdersApi>();
            Assert.True(salesOrdersApi.HttpClient.BaseAddress != null);
            
            var subLedgerNumberSeriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISubLedgerNumberSeriesApi>();
            Assert.True(subLedgerNumberSeriesApi.HttpClient.BaseAddress != null);
            
            var supplierCreditNotesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISupplierCreditNotesApi>();
            Assert.True(supplierCreditNotesApi.HttpClient.BaseAddress != null);
            
            var supplierInvoicesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISupplierInvoicesApi>();
            Assert.True(supplierInvoicesApi.HttpClient.BaseAddress != null);
            
            var supplierSubLedgerEntriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISupplierSubLedgerEntriesApi>();
            Assert.True(supplierSubLedgerEntriesApi.HttpClient.BaseAddress != null);
            
            var suppliersApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);
            
            var trialBalanceApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITrialBalanceApi>();
            Assert.True(trialBalanceApi.HttpClient.BaseAddress != null);
            
            var usersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);
            
            var vatCodesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVatCodesApi>();
            Assert.True(vatCodesApi.HttpClient.BaseAddress != null);
            
            var vatSettingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVatSettingsApi>();
            Assert.True(vatSettingsApi.HttpClient.BaseAddress != null);
            
            var voucherApprovalApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVoucherApprovalApi>();
            Assert.True(voucherApprovalApi.HttpClient.BaseAddress != null);
            
            var voucherDocumentationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVoucherDocumentationApi>();
            Assert.True(voucherDocumentationApi.HttpClient.BaseAddress != null);
            
            var voucherPagesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVoucherPagesApi>();
            Assert.True(voucherPagesApi.HttpClient.BaseAddress != null);
            
            var yearEndVoucherPostingApi = _hostUsingAddWithAClient.Services.GetRequiredService<IYearEndVoucherPostingApi>();
            Assert.True(yearEndVoucherPostingApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var accessRolesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAccessRolesApi>();
            Assert.True(accessRolesApi.HttpClient.BaseAddress != null);

            var accountTransactionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAccountTransactionsApi>();
            Assert.True(accountTransactionsApi.HttpClient.BaseAddress != null);

            var assignmentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAssignmentsApi>();
            Assert.True(assignmentsApi.HttpClient.BaseAddress != null);

            var bankJournalsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBankJournalsApi>();
            Assert.True(bankJournalsApi.HttpClient.BaseAddress != null);

            var bankVoucherPostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBankVoucherPostingApi>();
            Assert.True(bankVoucherPostingApi.HttpClient.BaseAddress != null);

            var brandingThemesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IBrandingThemesApi>();
            Assert.True(brandingThemesApi.HttpClient.BaseAddress != null);

            var cashVoucherPostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICashVoucherPostingApi>();
            Assert.True(cashVoucherPostingApi.HttpClient.BaseAddress != null);

            var clientBankAccountApproversApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientBankAccountApproversApi>();
            Assert.True(clientBankAccountApproversApi.HttpClient.BaseAddress != null);

            var clientBankAccountsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientBankAccountsApi>();
            Assert.True(clientBankAccountsApi.HttpClient.BaseAddress != null);

            var clientContactsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientContactsApi>();
            Assert.True(clientContactsApi.HttpClient.BaseAddress != null);

            var clientIntegrationInformationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientIntegrationInformationApi>();
            Assert.True(clientIntegrationInformationApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var contactBankAccountsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactBankAccountsApi>();
            Assert.True(contactBankAccountsApi.HttpClient.BaseAddress != null);

            var contactDeliveryAddressesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactDeliveryAddressesApi>();
            Assert.True(contactDeliveryAddressesApi.HttpClient.BaseAddress != null);

            var contactGroupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactGroupsApi>();
            Assert.True(contactGroupsApi.HttpClient.BaseAddress != null);

            var contactPersonsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IContactPersonsApi>();
            Assert.True(contactPersonsApi.HttpClient.BaseAddress != null);

            var createAndSendInvoiceApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICreateAndSendInvoiceApi>();
            Assert.True(createAndSendInvoiceApi.HttpClient.BaseAddress != null);

            var currenciesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrenciesApi>();
            Assert.True(currenciesApi.HttpClient.BaseAddress != null);

            var currencyRatesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICurrencyRatesApi>();
            Assert.True(currencyRatesApi.HttpClient.BaseAddress != null);

            var customDimensionSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICustomDimensionSettingsApi>();
            Assert.True(customDimensionSettingsApi.HttpClient.BaseAddress != null);

            var customDimensionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICustomDimensionsApi>();
            Assert.True(customDimensionsApi.HttpClient.BaseAddress != null);

            var customerSubLedgerEntriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICustomerSubLedgerEntriesApi>();
            Assert.True(customerSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var customersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICustomersApi>();
            Assert.True(customersApi.HttpClient.BaseAddress != null);

            var deliveryTermsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDeliveryTermsApi>();
            Assert.True(deliveryTermsApi.HttpClient.BaseAddress != null);

            var departmentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDepartmentsApi>();
            Assert.True(departmentsApi.HttpClient.BaseAddress != null);

            var employeeHourlyRatesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmployeeHourlyRatesApi>();
            Assert.True(employeeHourlyRatesApi.HttpClient.BaseAddress != null);

            var employeeSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmployeeSettingsApi>();
            Assert.True(employeeSettingsApi.HttpClient.BaseAddress != null);

            var employeesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmployeesApi>();
            Assert.True(employeesApi.HttpClient.BaseAddress != null);

            var employmentFixedSalariesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentFixedSalariesApi>();
            Assert.True(employmentFixedSalariesApi.HttpClient.BaseAddress != null);

            var employmentFtePercentagesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentFtePercentagesApi>();
            Assert.True(employmentFtePercentagesApi.HttpClient.BaseAddress != null);

            var employmentLayoffsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentLayoffsApi>();
            Assert.True(employmentLayoffsApi.HttpClient.BaseAddress != null);

            var employmentLeavesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentLeavesApi>();
            Assert.True(employmentLeavesApi.HttpClient.BaseAddress != null);

            var employmentSalariesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentSalariesApi>();
            Assert.True(employmentSalariesApi.HttpClient.BaseAddress != null);

            var employmentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmploymentsApi>();
            Assert.True(employmentsApi.HttpClient.BaseAddress != null);

            var enterprisesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEnterprisesApi>();
            Assert.True(enterprisesApi.HttpClient.BaseAddress != null);

            var financialSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFinancialSettingsApi>();
            Assert.True(financialSettingsApi.HttpClient.BaseAddress != null);

            var generalLedgerAccountsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGeneralLedgerAccountsApi>();
            Assert.True(generalLedgerAccountsApi.HttpClient.BaseAddress != null);

            var incomingInvoicesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIncomingInvoicesApi>();
            Assert.True(incomingInvoicesApi.HttpClient.BaseAddress != null);

            var journalEntryVouchersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IJournalEntryVouchersApi>();
            Assert.True(journalEntryVouchersApi.HttpClient.BaseAddress != null);

            var locationsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILocationsApi>();
            Assert.True(locationsApi.HttpClient.BaseAddress != null);

            var lockDateSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ILockDateSettingsApi>();
            Assert.True(lockDateSettingsApi.HttpClient.BaseAddress != null);

            var manualJournalsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IManualJournalsApi>();
            Assert.True(manualJournalsApi.HttpClient.BaseAddress != null);

            var manualVoucherPostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IManualVoucherPostingApi>();
            Assert.True(manualVoucherPostingApi.HttpClient.BaseAddress != null);

            var onboardingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOnboardingApi>();
            Assert.True(onboardingApi.HttpClient.BaseAddress != null);

            var organizationSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOrganizationSettingsApi>();
            Assert.True(organizationSettingsApi.HttpClient.BaseAddress != null);

            var outgoingInvoicePostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOutgoingInvoicePostingApi>();
            Assert.True(outgoingInvoicePostingApi.HttpClient.BaseAddress != null);

            var outgoingInvoicesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOutgoingInvoicesApi>();
            Assert.True(outgoingInvoicesApi.HttpClient.BaseAddress != null);

            var payItemsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPayItemsApi>();
            Assert.True(payItemsApi.HttpClient.BaseAddress != null);

            var paymentTermsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPaymentTermsApi>();
            Assert.True(paymentTermsApi.HttpClient.BaseAddress != null);

            var payrollSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPayrollSettingsApi>();
            Assert.True(payrollSettingsApi.HttpClient.BaseAddress != null);

            var productGroupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProductGroupsApi>();
            Assert.True(productGroupsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var projectsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProjectsApi>();
            Assert.True(projectsApi.HttpClient.BaseAddress != null);

            var reverseVoucherPostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReverseVoucherPostingApi>();
            Assert.True(reverseVoucherPostingApi.HttpClient.BaseAddress != null);

            var salaryLinesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISalaryLinesApi>();
            Assert.True(salaryLinesApi.HttpClient.BaseAddress != null);

            var salesOrderAttachmentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISalesOrderAttachmentsApi>();
            Assert.True(salesOrderAttachmentsApi.HttpClient.BaseAddress != null);

            var salesOrderCompleteApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISalesOrderCompleteApi>();
            Assert.True(salesOrderCompleteApi.HttpClient.BaseAddress != null);

            var salesOrderLinesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISalesOrderLinesApi>();
            Assert.True(salesOrderLinesApi.HttpClient.BaseAddress != null);

            var salesOrdersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISalesOrdersApi>();
            Assert.True(salesOrdersApi.HttpClient.BaseAddress != null);

            var subLedgerNumberSeriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISubLedgerNumberSeriesApi>();
            Assert.True(subLedgerNumberSeriesApi.HttpClient.BaseAddress != null);

            var supplierCreditNotesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISupplierCreditNotesApi>();
            Assert.True(supplierCreditNotesApi.HttpClient.BaseAddress != null);

            var supplierInvoicesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISupplierInvoicesApi>();
            Assert.True(supplierInvoicesApi.HttpClient.BaseAddress != null);

            var supplierSubLedgerEntriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISupplierSubLedgerEntriesApi>();
            Assert.True(supplierSubLedgerEntriesApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var trialBalanceApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITrialBalanceApi>();
            Assert.True(trialBalanceApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var vatCodesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVatCodesApi>();
            Assert.True(vatCodesApi.HttpClient.BaseAddress != null);

            var vatSettingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVatSettingsApi>();
            Assert.True(vatSettingsApi.HttpClient.BaseAddress != null);

            var voucherApprovalApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVoucherApprovalApi>();
            Assert.True(voucherApprovalApi.HttpClient.BaseAddress != null);

            var voucherDocumentationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVoucherDocumentationApi>();
            Assert.True(voucherDocumentationApi.HttpClient.BaseAddress != null);

            var voucherPagesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVoucherPagesApi>();
            Assert.True(voucherPagesApi.HttpClient.BaseAddress != null);

            var yearEndVoucherPostingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IYearEndVoucherPostingApi>();
            Assert.True(yearEndVoucherPostingApi.HttpClient.BaseAddress != null);
        }
    }
}
