/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using PowerOfficeGoV2.Api;
using PowerOfficeGoV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace PowerOfficeGoV2.Test.Api
{
    /// <summary>
    ///  Class for testing EmployeesApi
    /// </summary>
    public sealed class EmployeesApiTests : ApiTestsBase
    {
        private readonly IEmployeesApi _instance;

        public EmployeesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IEmployeesApi>();
        }

        /// <summary>
        /// Test EmployeesEmployeeIdBankAccountsPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmployeeIdBankAccountsPatchAsyncTest()
        {
            long employeeId = default!;
            Client.Option<List<Operation>> operation = default!;
            var response = await _instance.EmployeesEmployeeIdBankAccountsPatchAsync(employeeId, operation);
            var model = response.Ok();
            Assert.IsType<EmployeeDto>(model);
        }

        /// <summary>
        /// Test EmployeesEmployeeIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmployeeIdDeleteAsyncTest()
        {
            long employeeId = default!;
            await _instance.EmployeesEmployeeIdDeleteAsync(employeeId);
        }

        /// <summary>
        /// Test EmployeesEmployeeIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmployeeIdPatchAsyncTest()
        {
            long employeeId = default!;
            Client.Option<List<Operation>> operation = default!;
            var response = await _instance.EmployeesEmployeeIdPatchAsync(employeeId, operation);
            var model = response.Ok();
            Assert.IsType<EmployeeDto>(model);
        }

        /// <summary>
        /// Test EmployeesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesGetAsyncTest()
        {
            Client.Option<string> contactGroupIds = default!;
            Client.Option<DateTimeOffset> employeeCreatedDateTimeOffsetGreaterThan = default!;
            Client.Option<string> employeeNos = default!;
            Client.Option<string> externalImportReference = default!;
            Client.Option<string> externalNos = default!;
            Client.Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.EmployeesGetAsync(contactGroupIds, employeeCreatedDateTimeOffsetGreaterThan, employeeNos, externalImportReference, externalNos, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<EmployeeDto>>(model);
        }

        /// <summary>
        /// Test EmployeesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesPostAsyncTest()
        {
            Client.Option<EmployeePostDto> employeePostDto = default!;
            var response = await _instance.EmployeesPostAsync(employeePostDto);
            var model = response.Created();
            Assert.IsType<EmployeeDto>(model);
        }

        /// <summary>
        /// Test GetEmployeeById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmployeeByIdAsyncTest()
        {
            long employeeId = default!;
            var response = await _instance.GetEmployeeByIdAsync(employeeId);
            var model = response.Ok();
            Assert.IsType<EmployeeDto>(model);
        }
    }
}
