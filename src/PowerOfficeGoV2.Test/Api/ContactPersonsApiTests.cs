/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using PowerOfficeGoV2.Api;
using PowerOfficeGoV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace PowerOfficeGoV2.Test.Api
{
    /// <summary>
    ///  Class for testing ContactPersonsApi
    /// </summary>
    public sealed class ContactPersonsApiTests : ApiTestsBase
    {
        private readonly IContactPersonsApi _instance;

        public ContactPersonsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IContactPersonsApi>();
        }

        /// <summary>
        /// Test ContactPersonsContactIdIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContactPersonsContactIdIdDeleteAsyncTest()
        {
            long contactId = default!;
            long id = default!;
            await _instance.ContactPersonsContactIdIdDeleteAsync(contactId, id);
        }

        /// <summary>
        /// Test ContactPersonsContactIdIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContactPersonsContactIdIdPatchAsyncTest()
        {
            long contactId = default!;
            long id = default!;
            Client.Option<List<Operation>> operation = default!;
            var response = await _instance.ContactPersonsContactIdIdPatchAsync(contactId, id, operation);
            var model = response.Ok();
            Assert.IsType<ContactPersonDto>(model);
        }

        /// <summary>
        /// Test ContactPersonsContactIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContactPersonsContactIdPostAsyncTest()
        {
            long contactId = default!;
            Client.Option<ContactPersonPostDto> contactPersonPostDto = default!;
            var response = await _instance.ContactPersonsContactIdPostAsync(contactId, contactPersonPostDto);
            var model = response.Created();
            Assert.IsType<ContactPersonDto>(model);
        }

        /// <summary>
        /// Test ContactPersonsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContactPersonsGetAsyncTest()
        {
            Client.Option<string> contactIds = default!;
            Client.Option<DateTimeOffset> createdDateTimeOffsetGreaterThan = default!;
            Client.Option<string> externalCodes = default!;
            Client.Option<DateTimeOffset> lastChangedDateTimeOffsetGreaterThan = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.ContactPersonsGetAsync(contactIds, createdDateTimeOffsetGreaterThan, externalCodes, lastChangedDateTimeOffsetGreaterThan, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<ContactPersonDto>>(model);
        }

        /// <summary>
        /// Test GetContactPersonById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetContactPersonByIdAsyncTest()
        {
            long contactId = default!;
            long id = default!;
            var response = await _instance.GetContactPersonByIdAsync(contactId, id);
            var model = response.Ok();
            Assert.IsType<ContactPersonDto>(model);
        }
    }
}
