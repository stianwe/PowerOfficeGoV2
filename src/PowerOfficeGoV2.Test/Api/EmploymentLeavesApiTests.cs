/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using PowerOfficeGoV2.Api;
using PowerOfficeGoV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace PowerOfficeGoV2.Test.Api
{
    /// <summary>
    ///  Class for testing EmploymentLeavesApi
    /// </summary>
    public sealed class EmploymentLeavesApiTests : ApiTestsBase
    {
        private readonly IEmploymentLeavesApi _instance;

        public EmploymentLeavesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IEmploymentLeavesApi>();
        }

        /// <summary>
        /// Test EmployeesEmploymentsEmploymentIdLeavesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmploymentsEmploymentIdLeavesGetAsyncTest()
        {
            long employmentId = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.EmployeesEmploymentsEmploymentIdLeavesGetAsync(employmentId, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<EmploymentLeaveDto>>(model);
        }

        /// <summary>
        /// Test EmployeesEmploymentsEmploymentIdLeavesLeaveIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteAsyncTest()
        {
            long employmentId = default!;
            Guid leaveId = default!;
            await _instance.EmployeesEmploymentsEmploymentIdLeavesLeaveIdDeleteAsync(employmentId, leaveId);
        }

        /// <summary>
        /// Test EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchAsyncTest()
        {
            long employmentId = default!;
            Guid leaveId = default!;
            Client.Option<List<Operation>> operation = default!;
            var response = await _instance.EmployeesEmploymentsEmploymentIdLeavesLeaveIdPatchAsync(employmentId, leaveId, operation);
            var model = response.Ok();
            Assert.IsType<EmploymentLeaveDto>(model);
        }

        /// <summary>
        /// Test EmployeesEmploymentsEmploymentIdLeavesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task EmployeesEmploymentsEmploymentIdLeavesPostAsyncTest()
        {
            long employmentId = default!;
            Client.Option<EmploymentLeavePostDto> employmentLeavePostDto = default!;
            var response = await _instance.EmployeesEmploymentsEmploymentIdLeavesPostAsync(employmentId, employmentLeavePostDto);
            var model = response.Created();
            Assert.IsType<EmploymentLeaveDto>(model);
        }

        /// <summary>
        /// Test GetLeaveById
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLeaveByIdAsyncTest()
        {
            long employmentId = default!;
            Guid leaveId = default!;
            var response = await _instance.GetLeaveByIdAsync(employmentId, leaveId);
            var model = response.Ok();
            Assert.IsType<EmploymentLeaveDto>(model);
        }
    }
}
