/*
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using PowerOfficeGoV2.Api;
using PowerOfficeGoV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace PowerOfficeGoV2.Test.Api
{
    /// <summary>
    ///  Class for testing SupplierSubLedgerEntriesApi
    /// </summary>
    public sealed class SupplierSubLedgerEntriesApiTests : ApiTestsBase
    {
        private readonly ISupplierSubLedgerEntriesApi _instance;

        public SupplierSubLedgerEntriesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISupplierSubLedgerEntriesApi>();
        }

        /// <summary>
        /// Test SupplierledgerEntriesByMatchIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SupplierledgerEntriesByMatchIdGetAsyncTest()
        {
            long matchId = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.SupplierledgerEntriesByMatchIdGetAsync(matchId, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<SupplierLedgerEntryDto>>(model);
        }

        /// <summary>
        /// Test SupplierledgerOpenItemsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SupplierledgerOpenItemsGetAsyncTest()
        {
            DateOnly date = default!;
            Client.Option<string> contactGroupIds = default!;
            Client.Option<DateTime> createdDateTimeOffsetGreaterThan = default!;
            Client.Option<string> customMatchingReferences = default!;
            Client.Option<string> departmentCodes = default!;
            Client.Option<string> externalNos = default!;
            Client.Option<bool> includeSubProject = default!;
            Client.Option<string> invoiceNos = default!;
            Client.Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default!;
            Client.Option<bool> onlyBalancesGreaterThanAmount = default!;
            Client.Option<bool> onlyCreatedByCurrentIntegration = default!;
            Client.Option<string> projectCodes = default!;
            Client.Option<string> subLedgerNumberSeriesIds = default!;
            Client.Option<string> supplierNos = default!;
            Client.Option<string> voucherTypes = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.SupplierledgerOpenItemsGetAsync(date, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<SupplierLedgerEntryDto>>(model);
        }

        /// <summary>
        /// Test SupplierledgerStatementGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SupplierledgerStatementGetAsyncTest()
        {
            DateOnly fromDate = default!;
            DateOnly toDate = default!;
            Client.Option<string> contactGroupIds = default!;
            Client.Option<DateTime> createdDateTimeOffsetGreaterThan = default!;
            Client.Option<string> customMatchingReferences = default!;
            Client.Option<string> departmentCodes = default!;
            Client.Option<string> externalNos = default!;
            Client.Option<bool> includeSubProject = default!;
            Client.Option<string> invoiceNos = default!;
            Client.Option<DateTime> lastChangedDateTimeOffsetGreaterThan = default!;
            Client.Option<bool> onlyBalancesGreaterThanAmount = default!;
            Client.Option<bool> onlyCreatedByCurrentIntegration = default!;
            Client.Option<string> projectCodes = default!;
            Client.Option<string> subLedgerNumberSeriesIds = default!;
            Client.Option<string> supplierNos = default!;
            Client.Option<string> voucherTypes = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.SupplierledgerStatementGetAsync(fromDate, toDate, contactGroupIds, createdDateTimeOffsetGreaterThan, customMatchingReferences, departmentCodes, externalNos, includeSubProject, invoiceNos, lastChangedDateTimeOffsetGreaterThan, onlyBalancesGreaterThanAmount, onlyCreatedByCurrentIntegration, projectCodes, subLedgerNumberSeriesIds, supplierNos, voucherTypes, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<SupplierLedgerEntryDto>>(model);
        }

        /// <summary>
        /// Test SupplierledgerSupplierBalancesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SupplierledgerSupplierBalancesGetAsyncTest()
        {
            DateOnly date = default!;
            Client.Option<string> contactGroupIds = default!;
            Client.Option<bool> includeOnlyOpenItems = default!;
            Client.Option<string> subLedgerNumberSeriesIds = default!;
            Client.Option<ResourceParameters> resourceParameter = default!;
            var response = await _instance.SupplierledgerSupplierBalancesGetAsync(date, contactGroupIds, includeOnlyOpenItems, subLedgerNumberSeriesIds, resourceParameter);
            var model = response.Ok();
            Assert.IsType<List<SupplierBalanceDto>>(model);
        }
    }
}
